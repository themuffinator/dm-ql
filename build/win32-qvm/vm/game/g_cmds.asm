export DeathmatchScoreboardMessage
code
proc DeathmatchScoreboardMessage 1344 64
file "..\..\..\..\code\game\g_cmds.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:#include "g_local.h"
;4:
;5:/*
;6:==================
;7:DeathmatchScoreboardMessage
;8:
;9:==================
;10:*/
;11:void DeathmatchScoreboardMessage(gentity_t *ent) {
line 20
;12:	char		entry[256]; // enough to hold 14 integers
;13:	char		string[MAX_STRING_CHARS - 1];
;14:	int			stringlength;
;15:	int			i, j, ping, prefix;
;16:	gclient_t *cl;
;17:	int			numSorted, scoreFlags, accuracy, perfect;
;18:
;19:	// send the latest information on all clients
;20:	string[0] = '\0';
ADDRLP4 16
CNSTI1 0
ASGNI1
line 21
;21:	stringlength = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 22
;22:	scoreFlags = 0;
ADDRLP4 1316
CNSTI4 0
ASGNI4
line 24
;23:
;24:	numSorted = level.numConnectedClients;
ADDRLP4 1308
ADDRGP4 level+76
INDIRI4
ASGNI4
line 27
;25:
;26:	// estimate prefix length to avoid oversize of final string
;27:	prefix = BG_sprintf(entry, "scores %i %i %i", level.teamScores[TEAM_RED], level.teamScores[TEAM_BLUE], numSorted);
ADDRLP4 1039
ARGP4
ADDRGP4 $57
ARGP4
ADDRGP4 level+48+4
INDIRI4
ARGI4
ADDRGP4 level+48+8
INDIRI4
ARGI4
ADDRLP4 1308
INDIRI4
ARGI4
ADDRLP4 1320
ADDRGP4 BG_sprintf
CALLI4
ASGNI4
ADDRLP4 1312
ADDRLP4 1320
INDIRI4
ASGNI4
line 29
;28:
;29:	for (i = 0; i < numSorted; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $65
JUMPV
LABELV $62
line 31
;30:
;31:		cl = &level.clients[level.sortedClients[i]];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+88
ADDP4
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 33
;32:
;33:		if (cl->pers.connected == CON_CONNECTING) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 1
NEI4 $67
line 34
;34:			ping = -1;
ADDRLP4 1296
CNSTI4 -1
ASGNI4
line 35
;35:		} else {
ADDRGP4 $68
JUMPV
LABELV $67
line 36
;36:			ping = cl->ps.ping < 999 ? cl->ps.ping : 999;
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
INDIRI4
CNSTI4 999
GEI4 $70
ADDRLP4 1324
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $71
JUMPV
LABELV $70
ADDRLP4 1324
CNSTI4 999
ASGNI4
LABELV $71
ADDRLP4 1296
ADDRLP4 1324
INDIRI4
ASGNI4
line 37
;37:		}
LABELV $68
line 39
;38:
;39:		if (cl->accuracy_shots) {
ADDRLP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRI4
CNSTI4 0
EQI4 $72
line 40
;40:			accuracy = cl->accuracy_hits * 100 / cl->accuracy_shots;
ADDRLP4 1300
ADDRLP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
CNSTI4 100
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRI4
DIVI4
ASGNI4
line 41
;41:		} else {
ADDRGP4 $73
JUMPV
LABELV $72
line 42
;42:			accuracy = 0;
ADDRLP4 1300
CNSTI4 0
ASGNI4
line 43
;43:		}
LABELV $73
line 45
;44:
;45:		perfect = (cl->ps.persistant[PERS_RANK] == 0 && cl->ps.persistant[PERS_KILLED] == 0) ? 1 : 0;
ADDRLP4 0
INDIRP4
CNSTI4 256
ADDP4
INDIRI4
CNSTI4 0
NEI4 $75
ADDRLP4 0
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
CNSTI4 0
NEI4 $75
ADDRLP4 1324
CNSTI4 1
ASGNI4
ADDRGP4 $76
JUMPV
LABELV $75
ADDRLP4 1324
CNSTI4 0
ASGNI4
LABELV $76
ADDRLP4 1304
ADDRLP4 1324
INDIRI4
ASGNI4
line 47
;46:
;47:		j = BG_sprintf(entry, " %i %i %i %i %i %i %i %i %i %i %i %i %i %i",
ADDRLP4 1039
ARGP4
ADDRGP4 $77
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+88
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ARGI4
ADDRLP4 1296
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRI4
SUBI4
CNSTI4 60000
DIVI4
ARGI4
ADDRLP4 1316
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+88
ADDP4
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities+188
ADDP4
INDIRI4
ARGI4
ADDRLP4 1300
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 296
ADDP4
INDIRI4
ARGI4
ADDRLP4 1304
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ARGI4
ADDRLP4 1340
ADDRGP4 BG_sprintf
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 1340
INDIRI4
ASGNI4
line 63
;48:			level.sortedClients[i],
;49:			cl->ps.persistant[PERS_SCORE],
;50:			ping,
;51:			(level.time - cl->pers.enterTime) / 60000,
;52:			scoreFlags,
;53:			g_entities[level.sortedClients[i]].s.powerups,
;54:			accuracy,
;55:			cl->ps.persistant[PERS_IMPRESSIVE_COUNT],
;56:			cl->ps.persistant[PERS_EXCELLENT_COUNT],
;57:			cl->ps.persistant[PERS_GAUNTLET_FRAG_COUNT],
;58:			cl->ps.persistant[PERS_DEFEND_COUNT],
;59:			cl->ps.persistant[PERS_ASSIST_COUNT],
;60:			perfect,
;61:			cl->ps.persistant[PERS_CAPTURES]);
;62:
;63:		if (stringlength + j + prefix >= sizeof(string))
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
ADDI4
ADDRLP4 1312
INDIRI4
ADDI4
CVIU4 4
CNSTU4 1023
LTU4 $82
line 64
;64:			break;
ADDRGP4 $64
JUMPV
LABELV $82
line 66
;65:
;66:		strcpy(string + stringlength, entry);
ADDRLP4 8
INDIRI4
ADDRLP4 16
ADDP4
ARGP4
ADDRLP4 1039
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 67
;67:		stringlength += j;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
ADDI4
ASGNI4
line 68
;68:	}
LABELV $63
line 29
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $65
ADDRLP4 4
INDIRI4
ADDRLP4 1308
INDIRI4
LTI4 $62
LABELV $64
line 70
;69:
;70:	trap_SendServerCommand(ent - g_entities, va("scores %i %i %i%s", i,
ADDRGP4 $84
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 level+48+4
INDIRI4
ARGI4
ADDRGP4 level+48+8
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 1324
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 1324
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 73
;71:		level.teamScores[TEAM_RED], level.teamScores[TEAM_BLUE],
;72:		string));
;73:}
LABELV $55
endproc DeathmatchScoreboardMessage 1344 64
export Cmd_Score_f
proc Cmd_Score_f 0 4
line 83
;74:
;75:
;76:/*
;77:==================
;78:Cmd_Score_f
;79:
;80:Request current scoreboard information
;81:==================
;82:*/
;83:void Cmd_Score_f(gentity_t *ent) {
line 84
;84:	DeathmatchScoreboardMessage(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 DeathmatchScoreboardMessage
CALLV
pop
line 85
;85:}
LABELV $89
endproc Cmd_Score_f 0 4
export CheatsOk
proc CheatsOk 0 8
line 93
;86:
;87:
;88:/*
;89:==================
;90:CheatsOk
;91:==================
;92:*/
;93:qboolean	CheatsOk(gentity_t *ent) {
line 94
;94:	if (!g_cheats.integer) {
ADDRGP4 g_cheats+12
INDIRI4
CNSTI4 0
NEI4 $91
line 95
;95:		trap_SendServerCommand(ent - g_entities, "print \"Cheats are not enabled on this server.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $94
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 96
;96:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $90
JUMPV
LABELV $91
line 98
;97:	}
;98:	if (ent->health <= 0) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 0
GTI4 $95
line 99
;99:		trap_SendServerCommand(ent - g_entities, "print \"You must be alive to use this command.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $97
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 100
;100:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $90
JUMPV
LABELV $95
line 102
;101:	}
;102:	return qtrue;
CNSTI4 1
RETI4
LABELV $90
endproc CheatsOk 0 8
bss
align 1
LABELV $99
skip 1024
export ConcatArgs
code
proc ConcatArgs 1048 12
line 111
;103:}
;104:
;105:
;106:/*
;107:==================
;108:ConcatArgs
;109:==================
;110:*/
;111:char *ConcatArgs(int start) {
line 117
;112:	static char line[MAX_STRING_CHARS];
;113:	char	arg[MAX_STRING_CHARS];
;114:	int		i, c, tlen;
;115:	int		len;
;116:
;117:	len = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 118
;118:	c = trap_Argc();
ADDRLP4 1040
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 1036
ADDRLP4 1040
INDIRI4
ASGNI4
line 119
;119:	for (i = start; i < c; i++) {
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
ADDRGP4 $103
JUMPV
LABELV $100
line 120
;120:		trap_Argv(i, arg, sizeof(arg));
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 121
;121:		tlen = (int)strlen(arg);
ADDRLP4 8
ARGP4
ADDRLP4 1044
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 1032
ADDRLP4 1044
INDIRI4
ASGNI4
line 122
;122:		if (len + tlen >= sizeof(line) - 1) {
ADDRLP4 0
INDIRI4
ADDRLP4 1032
INDIRI4
ADDI4
CVIU4 4
CNSTU4 1023
LTU4 $104
line 123
;123:			break;
ADDRGP4 $102
JUMPV
LABELV $104
line 125
;124:		}
;125:		memcpy(line + len, arg, tlen);
ADDRLP4 0
INDIRI4
ADDRGP4 $99
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 1032
INDIRI4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 126
;126:		len += tlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 1032
INDIRI4
ADDI4
ASGNI4
line 127
;127:		if (i != c - 1) {
ADDRLP4 4
INDIRI4
ADDRLP4 1036
INDIRI4
CNSTI4 1
SUBI4
EQI4 $106
line 128
;128:			line[len] = ' ';
ADDRLP4 0
INDIRI4
ADDRGP4 $99
ADDP4
CNSTI1 32
ASGNI1
line 129
;129:			len++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 130
;130:		}
LABELV $106
line 131
;131:	}
LABELV $101
line 119
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $103
ADDRLP4 4
INDIRI4
ADDRLP4 1036
INDIRI4
LTI4 $100
LABELV $102
line 133
;132:
;133:	line[len] = '\0';
ADDRLP4 0
INDIRI4
ADDRGP4 $99
ADDP4
CNSTI1 0
ASGNI1
line 135
;134:
;135:	return line;
ADDRGP4 $99
RETP4
LABELV $98
endproc ConcatArgs 1048 12
export SanitizeString
proc SanitizeString 4 4
line 146
;136:}
;137:
;138:
;139:/*
;140:==================
;141:SanitizeString
;142:
;143:Remove case and control characters
;144:==================
;145:*/
;146:void SanitizeString(const char *in, char *out) {
ADDRGP4 $110
JUMPV
LABELV $109
line 147
;147:	while (*in) {
line 148
;148:		if (*in == 27) {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 27
NEI4 $112
line 149
;149:			in += 2;		// skip color code
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 150
;150:			continue;
ADDRGP4 $110
JUMPV
LABELV $112
line 152
;151:		}
;152:		if (*in < ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
GEI4 $114
line 153
;153:			in++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 154
;154:			continue;
ADDRGP4 $110
JUMPV
LABELV $114
line 156
;155:		}
;156:		*out = tolower(*in);
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 0
ADDRGP4 tolower
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRI4
CVII1 4
ASGNI1
line 157
;157:		out++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 158
;158:		in++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 159
;159:	}
LABELV $110
line 147
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $109
line 161
;160:
;161:	*out = '\0';
ADDRFP4 4
INDIRP4
CNSTI1 0
ASGNI1
line 162
;162:}
LABELV $108
endproc SanitizeString 4 4
export ClientNumberFromString
proc ClientNumberFromString 2068 8
line 173
;163:
;164:
;165:/*
;166:==================
;167:ClientNumberFromString
;168:
;169:Returns a player number for either a number or name string
;170:Returns -1 if invalid
;171:==================
;172:*/
;173:int ClientNumberFromString(gentity_t *to, char *s) {
line 180
;174:	gclient_t *cl;
;175:	int			idnum;
;176:	char		s2[MAX_STRING_CHARS];
;177:	char		n2[MAX_STRING_CHARS];
;178:
;179:	// numeric values are just slot numbers
;180:	if (s[0] >= '0' && s[0] <= '9') {
ADDRLP4 2056
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 2056
INDIRI4
CNSTI4 48
LTI4 $117
ADDRLP4 2056
INDIRI4
CNSTI4 57
GTI4 $117
line 181
;181:		idnum = atoi(s);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 2060
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 2060
INDIRI4
ASGNI4
line 182
;182:		if ((unsigned)idnum >= (unsigned)level.maxclients) {
ADDRLP4 4
INDIRI4
CVIU4 4
ADDRGP4 level+24
INDIRI4
CVIU4 4
LTU4 $119
line 183
;183:			trap_SendServerCommand(to - g_entities, va("print \"Bad client slot: %i\n\"", idnum));
ADDRGP4 $122
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 2064
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 2064
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 184
;184:			return -1;
CNSTI4 -1
RETI4
ADDRGP4 $116
JUMPV
LABELV $119
line 187
;185:		}
;186:
;187:		cl = &level.clients[idnum];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 188
;188:		if (cl->pers.connected != CON_CONNECTED) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $123
line 189
;189:			trap_SendServerCommand(to - g_entities, va("print \"Client %i is not active\n\"", idnum));
ADDRGP4 $125
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 2064
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 2064
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 190
;190:			return -1;
CNSTI4 -1
RETI4
ADDRGP4 $116
JUMPV
LABELV $123
line 192
;191:		}
;192:		return idnum;
ADDRLP4 4
INDIRI4
RETI4
ADDRGP4 $116
JUMPV
LABELV $117
line 196
;193:	}
;194:
;195:	// check for a name match
;196:	SanitizeString(s, s2);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 1032
ARGP4
ADDRGP4 SanitizeString
CALLV
pop
line 197
;197:	for (idnum = 0, cl = level.clients; idnum < level.maxclients; idnum++, cl++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
ADDRGP4 level
INDIRP4
ASGNP4
ADDRGP4 $129
JUMPV
LABELV $126
line 198
;198:		if (cl->pers.connected != CON_CONNECTED) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $131
line 199
;199:			continue;
ADDRGP4 $127
JUMPV
LABELV $131
line 201
;200:		}
;201:		SanitizeString(cl->pers.netname, n2);
ADDRLP4 0
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 SanitizeString
CALLV
pop
line 202
;202:		if (!strcmp(n2, s2)) {
ADDRLP4 8
ARGP4
ADDRLP4 1032
ARGP4
ADDRLP4 2060
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 2060
INDIRI4
CNSTI4 0
NEI4 $133
line 203
;203:			return idnum;
ADDRLP4 4
INDIRI4
RETI4
ADDRGP4 $116
JUMPV
LABELV $133
line 205
;204:		}
;205:	}
LABELV $127
line 197
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1636
ADDP4
ASGNP4
LABELV $129
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $126
line 207
;206:
;207:	trap_SendServerCommand(to - g_entities, va("print \"User %s is not on the server\n\"", s));
ADDRGP4 $135
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 2060
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 2060
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 208
;208:	return -1;
CNSTI4 -1
RETI4
LABELV $116
endproc ClientNumberFromString 2068 8
export Cmd_Give_f
proc Cmd_Give_f 132 12
line 219
;209:}
;210:
;211:
;212:/*
;213:==================
;214:Cmd_Give_f
;215:
;216:Give items to a client
;217:==================
;218:*/
;219:void Cmd_Give_f(gentity_t *ent) {
line 227
;220:	char *name;
;221:	gitem_t *it;
;222:	int			i;
;223:	qboolean	give_all;
;224:	gentity_t *it_ent;
;225:	trace_t		trace;
;226:
;227:	if (!CheatsOk(ent)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 CheatsOk
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $137
line 228
;228:		return;
ADDRGP4 $136
JUMPV
LABELV $137
line 231
;229:	}
;230:
;231:	name = ConcatArgs(1);
CNSTI4 1
ARGI4
ADDRLP4 80
ADDRGP4 ConcatArgs
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 80
INDIRP4
ASGNP4
line 233
;232:
;233:	if (Q_stricmp(name, "all") == 0)
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $141
ARGP4
ADDRLP4 84
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $139
line 234
;234:		give_all = qtrue;
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $140
JUMPV
LABELV $139
line 236
;235:	else
;236:		give_all = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $140
line 238
;237:
;238:	if (give_all || Q_stricmp(name, "health") == 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $145
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $144
ARGP4
ADDRLP4 88
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $142
LABELV $145
line 239
;239:		ent->health = ent->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 240
;240:		if (!give_all)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $146
line 241
;241:			return;
ADDRGP4 $136
JUMPV
LABELV $146
line 242
;242:	}
LABELV $142
line 244
;243:
;244:	if (give_all || Q_stricmp(name, "weapons") == 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $151
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $150
ARGP4
ADDRLP4 92
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $148
LABELV $151
line 245
;245:		ent->client->ps.stats[STAT_WEAPONS] = (1 << WP_NUM_WEAPONS) - 1 -
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 31742
ASGNI4
line 247
;246:			(1 << WP_GRAPPLING_HOOK) - (1 << WP_NONE);
;247:		if (!give_all)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $152
line 248
;248:			return;
ADDRGP4 $136
JUMPV
LABELV $152
line 249
;249:	}
LABELV $148
line 251
;250:
;251:	if (give_all || Q_stricmp(name, "ammo") == 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $157
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $156
ARGP4
ADDRLP4 96
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $154
LABELV $157
line 252
;252:		for (i = 0; i < MAX_WEAPONS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $158
line 253
;253:			ent->client->ps.ammo[i] = 999;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
CNSTI4 999
ASGNI4
line 254
;254:		}
LABELV $159
line 252
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $158
line 255
;255:		if (!give_all)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $162
line 256
;256:			return;
ADDRGP4 $136
JUMPV
LABELV $162
line 257
;257:	}
LABELV $154
line 259
;258:
;259:	if (give_all || Q_stricmp(name, "armor") == 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $167
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $166
ARGP4
ADDRLP4 100
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 0
NEI4 $164
LABELV $167
line 260
;260:		ent->client->ps.stats[STAT_ARMOR] = 200;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
CNSTI4 200
ASGNI4
line 262
;261:
;262:		if (!give_all)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $168
line 263
;263:			return;
ADDRGP4 $136
JUMPV
LABELV $168
line 264
;264:	}
LABELV $164
line 266
;265:
;266:	if (Q_stricmp(name, "excellent") == 0) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $172
ARGP4
ADDRLP4 104
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
NEI4 $170
line 267
;267:		ent->client->ps.persistant[PERS_EXCELLENT_COUNT]++;
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 288
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 268
;268:		return;
ADDRGP4 $136
JUMPV
LABELV $170
line 270
;269:	}
;270:	if (Q_stricmp(name, "impressive") == 0) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $175
ARGP4
ADDRLP4 108
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $173
line 271
;271:		ent->client->ps.persistant[PERS_IMPRESSIVE_COUNT]++;
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 284
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 272
;272:		return;
ADDRGP4 $136
JUMPV
LABELV $173
line 274
;273:	}
;274:	if (Q_stricmp(name, "gauntletaward") == 0) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $178
ARGP4
ADDRLP4 112
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $176
line 275
;275:		ent->client->ps.persistant[PERS_GAUNTLET_FRAG_COUNT]++;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 300
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 276
;276:		return;
ADDRGP4 $136
JUMPV
LABELV $176
line 278
;277:	}
;278:	if (Q_stricmp(name, "defend") == 0) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $181
ARGP4
ADDRLP4 116
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
NEI4 $179
line 279
;279:		ent->client->ps.persistant[PERS_DEFEND_COUNT]++;
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 280
;280:		return;
ADDRGP4 $136
JUMPV
LABELV $179
line 282
;281:	}
;282:	if (Q_stricmp(name, "assist") == 0) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $184
ARGP4
ADDRLP4 120
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
NEI4 $182
line 283
;283:		ent->client->ps.persistant[PERS_ASSIST_COUNT]++;
ADDRLP4 124
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 296
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 284
;284:		return;
ADDRGP4 $136
JUMPV
LABELV $182
line 288
;285:	}
;286:
;287:	// spawn a specific item right on the player
;288:	if (!give_all) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $185
line 289
;289:		it = BG_FindItem(name);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 124
INDIRP4
ASGNP4
line 290
;290:		if (!it) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $187
line 291
;291:			return;
ADDRGP4 $136
JUMPV
LABELV $187
line 294
;292:		}
;293:
;294:		it_ent = G_Spawn();
ADDRLP4 128
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 128
INDIRP4
ASGNP4
line 295
;295:		VectorCopy(ent->r.currentOrigin, it_ent->s.origin);
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 296
;296:		it_ent->classname = it->classname;
ADDRLP4 12
INDIRP4
CNSTI4 524
ADDP4
ADDRLP4 16
INDIRP4
INDIRP4
ASGNP4
line 297
;297:		G_SpawnItem(it_ent, it);
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 G_SpawnItem
CALLV
pop
line 298
;298:		FinishSpawningItem(it_ent);
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 FinishSpawningItem
CALLV
pop
line 299
;299:		memset(&trace, 0, sizeof(trace));
ADDRLP4 20
ARGP4
CNSTI4 0
ARGI4
CNSTI4 56
ARGI4
ADDRGP4 memset
CALLP4
pop
line 300
;300:		Touch_Item(it_ent, ent, &trace);
ADDRLP4 12
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 Touch_Item
CALLV
pop
line 301
;301:		if (it_ent->inuse) {
ADDRLP4 12
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $189
line 302
;302:			G_FreeEntity(it_ent);
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 303
;303:		}
LABELV $189
line 304
;304:	}
LABELV $185
line 305
;305:}
LABELV $136
endproc Cmd_Give_f 132 12
export Cmd_God_f
proc Cmd_God_f 16 8
line 317
;306:
;307:
;308:/*
;309:==================
;310:Cmd_God_f
;311:
;312:Sets client to godmode
;313:
;314:argv(0) god
;315:==================
;316:*/
;317:void Cmd_God_f(gentity_t *ent) {
line 320
;318:	const char *msg;
;319:
;320:	if (!CheatsOk(ent)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 CheatsOk
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $192
line 321
;321:		return;
ADDRGP4 $191
JUMPV
LABELV $192
line 324
;322:	}
;323:
;324:	ent->flags ^= FL_GODMODE;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 16
BXORI4
ASGNI4
line 325
;325:	if (!(ent->flags & FL_GODMODE))
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $194
line 326
;326:		msg = "godmode OFF\n";
ADDRLP4 0
ADDRGP4 $196
ASGNP4
ADDRGP4 $195
JUMPV
LABELV $194
line 328
;327:	else
;328:		msg = "godmode ON\n";
ADDRLP4 0
ADDRGP4 $197
ASGNP4
LABELV $195
line 330
;329:
;330:	trap_SendServerCommand(ent - g_entities, va("print \"%s\"", msg));
ADDRGP4 $198
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 331
;331:}
LABELV $191
endproc Cmd_God_f 16 8
export Cmd_Notarget_f
proc Cmd_Notarget_f 16 8
line 343
;332:
;333:
;334:/*
;335:==================
;336:Cmd_Notarget_f
;337:
;338:Sets client to notarget
;339:
;340:argv(0) notarget
;341:==================
;342:*/
;343:void Cmd_Notarget_f(gentity_t *ent) {
line 346
;344:	const char *msg;
;345:
;346:	if (!CheatsOk(ent)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 CheatsOk
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $200
line 347
;347:		return;
ADDRGP4 $199
JUMPV
LABELV $200
line 350
;348:	}
;349:
;350:	ent->flags ^= FL_NOTARGET;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32
BXORI4
ASGNI4
line 351
;351:	if (!(ent->flags & FL_NOTARGET))
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $202
line 352
;352:		msg = "notarget OFF\n";
ADDRLP4 0
ADDRGP4 $204
ASGNP4
ADDRGP4 $203
JUMPV
LABELV $202
line 354
;353:	else
;354:		msg = "notarget ON\n";
ADDRLP4 0
ADDRGP4 $205
ASGNP4
LABELV $203
line 356
;355:
;356:	trap_SendServerCommand(ent - g_entities, va("print \"%s\"", msg));
ADDRGP4 $198
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 357
;357:}
LABELV $199
endproc Cmd_Notarget_f 16 8
export Cmd_Noclip_f
proc Cmd_Noclip_f 20 8
line 367
;358:
;359:
;360:/*
;361:==================
;362:Cmd_Noclip_f
;363:
;364:argv(0) noclip
;365:==================
;366:*/
;367:void Cmd_Noclip_f(gentity_t *ent) {
line 370
;368:	const char *msg;
;369:
;370:	if (!CheatsOk(ent)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 CheatsOk
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $207
line 371
;371:		return;
ADDRGP4 $206
JUMPV
LABELV $207
line 374
;372:	}
;373:
;374:	if (ent->client->noclip) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
CNSTI4 0
EQI4 $209
line 375
;375:		msg = "noclip OFF\n";
ADDRLP4 0
ADDRGP4 $211
ASGNP4
line 376
;376:	} else {
ADDRGP4 $210
JUMPV
LABELV $209
line 377
;377:		msg = "noclip ON\n";
ADDRLP4 0
ADDRGP4 $212
ASGNP4
line 378
;378:	}
LABELV $210
line 379
;379:	ent->client->noclip = !ent->client->noclip;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
CNSTI4 0
NEI4 $214
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $215
JUMPV
LABELV $214
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $215
ADDRLP4 12
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 648
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 381
;380:
;381:	trap_SendServerCommand(ent - g_entities, va("print \"%s\"", msg));
ADDRGP4 $198
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 382
;382:}
LABELV $206
endproc Cmd_Noclip_f 20 8
export Cmd_LevelShot_f
proc Cmd_LevelShot_f 4 8
line 395
;383:
;384:
;385:/*
;386:==================
;387:Cmd_LevelShot_f
;388:
;389:This is just to help generate the level pictures
;390:for the menus.  It goes to the intermission immediately
;391:and sends over a command to the client to resize the view,
;392:hide the scoreboard, and take a special screenshot
;393:==================
;394:*/
;395:void Cmd_LevelShot_f(gentity_t *ent) {
line 396
;396:	if (!CheatsOk(ent)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 CheatsOk
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $217
line 397
;397:		return;
ADDRGP4 $216
JUMPV
LABELV $217
line 400
;398:	}
;399:
;400:	if (!ent->client->pers.localClient) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
CNSTI4 0
NEI4 $219
line 401
;401:		trap_SendServerCommand(ent - g_entities,
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $221
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 403
;402:			"print \"The levelshot command must be executed by a local client\n\"");
;403:		return;
ADDRGP4 $216
JUMPV
LABELV $219
line 406
;404:	}
;405:
;406:	BeginIntermission();
ADDRGP4 BeginIntermission
CALLV
pop
line 407
;407:	trap_SendServerCommand(ent - g_entities, "clientLevelShot");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $222
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 408
;408:}
LABELV $216
endproc Cmd_LevelShot_f 4 8
export Cmd_TeamTask_f
proc Cmd_TeamTask_f 2068 12
line 416
;409:
;410:
;411:/*
;412:==================
;413:Cmd_TeamTask_f
;414:==================
;415:*/
;416:void Cmd_TeamTask_f(gentity_t *ent) {
line 420
;417:	char userinfo[MAX_INFO_STRING];
;418:	char arg[MAX_TOKEN_CHARS];
;419:	int task;
;420:	int client = ent->client - level.clients;
ADDRLP4 1024
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 level
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1636
DIVI4
ASGNI4
line 422
;421:
;422:	if (trap_Argc() != 2) {
ADDRLP4 2056
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 2056
INDIRI4
CNSTI4 2
EQI4 $224
line 423
;423:		return;
ADDRGP4 $223
JUMPV
LABELV $224
line 425
;424:	}
;425:	trap_Argv(1, arg, sizeof(arg));
CNSTI4 1
ARGI4
ADDRLP4 1028
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 426
;426:	task = atoi(arg);
ADDRLP4 1028
ARGP4
ADDRLP4 2060
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 2052
ADDRLP4 2060
INDIRI4
ASGNI4
line 428
;427:
;428:	trap_GetUserinfo(client, userinfo, sizeof(userinfo));
ADDRLP4 1024
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 429
;429:	Info_SetValueForKey(userinfo, "teamtask", va("%d", task));
ADDRGP4 $227
ARGP4
ADDRLP4 2052
INDIRI4
ARGI4
ADDRLP4 2064
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ARGP4
ADDRGP4 $226
ARGP4
ADDRLP4 2064
INDIRP4
ARGP4
ADDRGP4 Info_SetValueForKey
CALLI4
pop
line 430
;430:	trap_SetUserinfo(client, userinfo);
ADDRLP4 1024
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_SetUserinfo
CALLV
pop
line 431
;431:	ClientUserinfoChanged(client);
ADDRLP4 1024
INDIRI4
ARGI4
ADDRGP4 ClientUserinfoChanged
CALLI4
pop
line 432
;432:}
LABELV $223
endproc Cmd_TeamTask_f 2068 12
export Cmd_Kill_f
proc Cmd_Kill_f 16 20
line 440
;433:
;434:
;435:/*
;436:=================
;437:Cmd_Kill_f
;438:=================
;439:*/
;440:void Cmd_Kill_f(gentity_t *ent) {
line 441
;441:	if (ent->client->sess.sessionTeam == TEAM_SPECTATOR) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $229
line 442
;442:		return;
ADDRGP4 $228
JUMPV
LABELV $229
line 444
;443:	}
;444:	if (ent->health <= 0) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 0
GTI4 $231
line 445
;445:		return;
ADDRGP4 $228
JUMPV
LABELV $231
line 447
;446:	}
;447:	if (g_allowKill.integer <= 0) {
ADDRGP4 g_allowKill+12
INDIRI4
CNSTI4 0
GTI4 $233
line 448
;448:		trap_SendServerCommand(ent - g_entities,
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $236
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 450
;449:			"print \"Kill is not enabled on this server.\n\"");
;450:		return;
ADDRGP4 $228
JUMPV
LABELV $233
line 452
;451:	}
;452:	if (ent->client->killCmdTime + g_allowKill.integer > level.time) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
ADDRGP4 g_allowKill+12
INDIRI4
ADDI4
ADDRGP4 level+32
INDIRI4
LEI4 $237
line 453
;453:		return;
ADDRGP4 $228
JUMPV
LABELV $237
line 456
;454:	}
;455:
;456:	ent->client->killCmdTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 736
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 457
;457:	ent->flags &= ~FL_GODMODE;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 458
;458:	ent->client->ps.stats[STAT_HEALTH] = ent->health = -999;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 -999
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 459
;459:	player_die(ent, ent, ent, 100000, MOD_SUICIDE);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 100000
ARGI4
CNSTI4 20
ARGI4
ADDRGP4 player_die
CALLV
pop
line 460
;460:}
LABELV $228
endproc Cmd_Kill_f 16 20
export BroadcastTeamChange
proc BroadcastTeamChange 8 8
line 470
;461:
;462:
;463:/*
;464:=================
;465:BroadcastTeamChange
;466:
;467:Let everyone know about a team change
;468:=================
;469:*/
;470:void BroadcastTeamChange(gclient_t *client, team_t oldTeam) {
line 471
;471:	int clientNum = client - level.clients;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 level
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1636
DIVI4
ASGNI4
line 473
;472:
;473:	if (client->sess.sessionTeam == TEAM_RED) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 1
NEI4 $243
line 474
;474:		G_BroadcastServerCommand(clientNum, va("cp \"%s" S_COLOR_WHITE " joined the " S_COLOR_RED "red" S_COLOR_WHITE " team.\n\"",
ADDRGP4 $245
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_BroadcastServerCommand
CALLV
pop
line 476
;475:			client->pers.netname));
;476:	} else if (client->sess.sessionTeam == TEAM_BLUE) {
ADDRGP4 $244
JUMPV
LABELV $243
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 2
NEI4 $246
line 477
;477:		G_BroadcastServerCommand(clientNum, va("cp \"%s" S_COLOR_WHITE " joined the " S_COLOR_BLUE "blue" S_COLOR_WHITE " team.\n\"",
ADDRGP4 $248
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_BroadcastServerCommand
CALLV
pop
line 479
;478:			client->pers.netname));
;479:	} else if (client->sess.sessionTeam == TEAM_SPECTATOR && oldTeam != TEAM_SPECTATOR) {
ADDRGP4 $247
JUMPV
LABELV $246
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $249
ADDRFP4 4
INDIRI4
CNSTI4 3
EQI4 $249
line 480
;480:		G_BroadcastServerCommand(clientNum, va("cp \"%s" S_COLOR_WHITE " joined the spectators.\n\"",
ADDRGP4 $251
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_BroadcastServerCommand
CALLV
pop
line 482
;481:			client->pers.netname));
;482:	} else if (client->sess.sessionTeam == TEAM_FREE) {
ADDRGP4 $250
JUMPV
LABELV $249
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $252
line 483
;483:		G_BroadcastServerCommand(clientNum, va("cp \"%s" S_COLOR_WHITE " joined the battle.\n\"",
ADDRGP4 $254
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_BroadcastServerCommand
CALLV
pop
line 485
;484:			client->pers.netname));
;485:	}
LABELV $252
LABELV $250
LABELV $247
LABELV $244
line 486
;486:}
LABELV $242
endproc BroadcastTeamChange 8 8
proc AllowTeamSwitch 24 8
line 489
;487:
;488:
;489:static qboolean AllowTeamSwitch(int clientNum, team_t newTeam) {
line 491
;490:
;491:	if (g_teamForceBalance.integer) {
ADDRGP4 g_teamForceBalance+12
INDIRI4
CNSTI4 0
EQI4 $256
line 494
;492:		int		counts[TEAM_NUM_TEAMS];
;493:
;494:		counts[TEAM_BLUE] = TeamCount(clientNum, TEAM_BLUE);
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 TeamCount
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 16
INDIRI4
ASGNI4
line 495
;495:		counts[TEAM_RED] = TeamCount(clientNum, TEAM_RED);
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 20
ADDRGP4 TeamCount
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 20
INDIRI4
ASGNI4
line 498
;496:
;497:		// We allow a spread of two
;498:		if (newTeam == TEAM_RED && counts[TEAM_RED] - counts[TEAM_BLUE] > 1) {
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $261
ADDRLP4 0+4
INDIRI4
ADDRLP4 0+8
INDIRI4
SUBI4
CNSTI4 1
LEI4 $261
line 499
;499:			trap_SendServerCommand(clientNum, "cp \"Red team has too many players.\n\"");
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 $265
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 500
;500:			return qfalse; // ignore the request
CNSTI4 0
RETI4
ADDRGP4 $255
JUMPV
LABELV $261
line 503
;501:		}
;502:
;503:		if (newTeam == TEAM_BLUE && counts[TEAM_BLUE] - counts[TEAM_RED] > 1) {
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $266
ADDRLP4 0+8
INDIRI4
ADDRLP4 0+4
INDIRI4
SUBI4
CNSTI4 1
LEI4 $266
line 504
;504:			trap_SendServerCommand(clientNum, "cp \"Blue team has too many players.\n\"");
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 $270
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 505
;505:			return qfalse; // ignore the request
CNSTI4 0
RETI4
ADDRGP4 $255
JUMPV
LABELV $266
line 509
;506:		}
;507:
;508:		// It's ok, the team we are switching to has less or same number of players
;509:	}
LABELV $256
line 511
;510:
;511:	return qtrue;
CNSTI4 1
RETI4
LABELV $255
endproc AllowTeamSwitch 24 8
export SetTeam
proc SetTeam 76 20
line 520
;512:}
;513:
;514:
;515:/*
;516:=================
;517:SetTeam
;518:=================
;519:*/
;520:qboolean SetTeam(gentity_t *ent, const char *s) {
line 533
;521:	team_t				team, oldTeam;
;522:	gclient_t *client;
;523:	int					clientNum;
;524:	spectatorState_t	specState;
;525:	int					specClient;
;526:	int					teamLeader;
;527:	qboolean			checkTeamLeader;
;528:
;529:	//
;530:	// see what change is requested
;531:	//
;532:
;533:	clientNum = ent - g_entities;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ASGNI4
line 534
;534:	client = level.clients + clientNum;
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 537
;535:
;536:	// early team override
;537:	if (client->pers.connected == CON_CONNECTING && g_gametype.integer >= GT_TEAM) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 1
NEI4 $272
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
LTI4 $272
line 538
;538:		if (!Q_stricmp(s, "red") || !Q_stricmp(s, "r")) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $277
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $279
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $278
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $275
LABELV $279
line 539
;539:			team = TEAM_RED;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 540
;540:		} else if (!Q_stricmp(s, "blue") || !Q_stricmp(s, "b")) {
ADDRGP4 $276
JUMPV
LABELV $275
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $282
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $284
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $283
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $280
LABELV $284
line 541
;541:			team = TEAM_BLUE;
ADDRLP4 4
CNSTI4 2
ASGNI4
line 542
;542:		} else {
ADDRGP4 $281
JUMPV
LABELV $280
line 543
;543:			team = -1;
ADDRLP4 4
CNSTI4 -1
ASGNI4
line 544
;544:		}
LABELV $281
LABELV $276
line 545
;545:		if (team != -1 && AllowTeamSwitch(clientNum, team)) {
ADDRLP4 4
INDIRI4
CNSTI4 -1
EQI4 $285
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 AllowTeamSwitch
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $285
line 546
;546:			client->sess.sessionTeam = team;
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 547
;547:			client->pers.teamState.state = TEAM_BEGIN;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
CNSTI4 0
ASGNI4
line 548
;548:			G_WriteClientSessionData(client);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_WriteClientSessionData
CALLV
pop
line 550
;549:			// count current clients and rank for scoreboard
;550:			CalculateRanks();
ADDRGP4 CalculateRanks
CALLV
pop
line 551
;551:		}
LABELV $285
line 552
;552:		return qfalse; // bypass flood protection
CNSTI4 0
RETI4
ADDRGP4 $271
JUMPV
LABELV $272
line 555
;553:	}
;554:
;555:	specClient = clientNum;
ADDRLP4 20
ADDRLP4 12
INDIRI4
ASGNI4
line 556
;556:	specState = SPECTATOR_NOT;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 557
;557:	if (!Q_stricmp(s, "scoreboard") || !Q_stricmp(s, "score")) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $289
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $291
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $290
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $287
LABELV $291
line 558
;558:		team = TEAM_SPECTATOR;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 559
;559:		specState = SPECTATOR_SCOREBOARD;
ADDRLP4 16
CNSTI4 3
ASGNI4
line 560
;560:	} else if (!Q_stricmp(s, "follow1")) {
ADDRGP4 $288
JUMPV
LABELV $287
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $294
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $292
line 561
;561:		team = TEAM_SPECTATOR;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 562
;562:		specState = SPECTATOR_FOLLOW;
ADDRLP4 16
CNSTI4 2
ASGNI4
line 563
;563:		specClient = -1;
ADDRLP4 20
CNSTI4 -1
ASGNI4
line 564
;564:	} else if (!Q_stricmp(s, "follow2")) {
ADDRGP4 $293
JUMPV
LABELV $292
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $297
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $295
line 565
;565:		team = TEAM_SPECTATOR;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 566
;566:		specState = SPECTATOR_FOLLOW;
ADDRLP4 16
CNSTI4 2
ASGNI4
line 567
;567:		specClient = -2;
ADDRLP4 20
CNSTI4 -2
ASGNI4
line 568
;568:	} else if (!Q_stricmp(s, "spectator") || !Q_stricmp(s, "s")) {
ADDRGP4 $296
JUMPV
LABELV $295
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $300
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $302
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $301
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $298
LABELV $302
line 569
;569:		team = TEAM_SPECTATOR;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 570
;570:		specState = SPECTATOR_FREE;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 571
;571:	} else if (g_gametype.integer >= GT_TEAM) {
ADDRGP4 $299
JUMPV
LABELV $298
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
LTI4 $303
line 573
;572:		// if running a team game, assign player to one of the teams
;573:		specState = SPECTATOR_NOT;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 574
;574:		if (!Q_stricmp(s, "red") || !Q_stricmp(s, "r")) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $277
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $308
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $278
ARGP4
ADDRLP4 60
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $306
LABELV $308
line 575
;575:			team = TEAM_RED;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 576
;576:		} else if (!Q_stricmp(s, "blue") || !Q_stricmp(s, "b")) {
ADDRGP4 $307
JUMPV
LABELV $306
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $282
ARGP4
ADDRLP4 64
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $311
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $283
ARGP4
ADDRLP4 68
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $309
LABELV $311
line 577
;577:			team = TEAM_BLUE;
ADDRLP4 4
CNSTI4 2
ASGNI4
line 578
;578:		} else {
ADDRGP4 $310
JUMPV
LABELV $309
line 580
;579:			// pick the team with the least number of players
;580:			team = PickTeam(clientNum);
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 PickTeam
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 72
INDIRI4
ASGNI4
line 581
;581:		}
LABELV $310
LABELV $307
line 583
;582:
;583:		if (!AllowTeamSwitch(clientNum, team)) {
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 AllowTeamSwitch
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $304
line 584
;584:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $271
JUMPV
line 587
;585:		}
;586:
;587:	} else {
LABELV $303
line 589
;588:		// force them to spectators if there aren't any spots free
;589:		team = TEAM_FREE;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 590
;590:	}
LABELV $304
LABELV $299
LABELV $296
LABELV $293
LABELV $288
line 593
;591:
;592:	// override decision if limiting the players
;593:	if ((g_gametype.integer == GT_DUEL)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $314
ADDRGP4 level+80
INDIRI4
CNSTI4 2
LTI4 $314
line 594
;594:		&& level.numNonSpectatorClients >= 2) {
line 595
;595:		team = TEAM_SPECTATOR;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 596
;596:	} else if (g_maxGameClients.integer > 0 &&
ADDRGP4 $315
JUMPV
LABELV $314
ADDRGP4 g_maxGameClients+12
INDIRI4
CNSTI4 0
LEI4 $318
ADDRGP4 level+80
INDIRI4
ADDRGP4 g_maxGameClients+12
INDIRI4
LTI4 $318
line 597
;597:		level.numNonSpectatorClients >= g_maxGameClients.integer) {
line 598
;598:		team = TEAM_SPECTATOR;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 599
;599:	}
LABELV $318
LABELV $315
line 604
;600:
;601:	//
;602:	// decide if we will allow the change
;603:	//
;604:	oldTeam = client->sess.sessionTeam;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ASGNI4
line 605
;605:	if (team == oldTeam) {
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $323
line 606
;606:		if (team != TEAM_SPECTATOR)
ADDRLP4 4
INDIRI4
CNSTI4 3
EQI4 $325
line 607
;607:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $271
JUMPV
LABELV $325
line 610
;608:
;609:		// do soft release if possible
;610:		if ((client->ps.pm_flags & PMF_FOLLOW) && client->sess.spectatorState == SPECTATOR_FOLLOW) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $327
ADDRLP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 2
NEI4 $327
line 611
;611:			StopFollowing(ent, qtrue);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 StopFollowing
CALLV
pop
line 612
;612:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $271
JUMPV
LABELV $327
line 616
;613:		}
;614:
;615:		// second spectator team request will move player to intermission point
;616:		if (client->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR && !(client->ps.pm_flags & PMF_FOLLOW)
ADDRLP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $329
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $329
ADDRLP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 1
NEI4 $329
line 617
;617:			&& client->sess.spectatorState == SPECTATOR_FREE) {
line 618
;618:			VectorCopy(level.intermission_origin, ent->s.origin);
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRGP4 level+5528
INDIRB
ASGNB 12
line 619
;619:			VectorCopy(level.intermission_origin, client->ps.origin);
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 level+5528
INDIRB
ASGNB 12
line 620
;620:			SetClientViewAngle(ent, level.intermission_angle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 level+5540
ARGP4
ADDRGP4 SetClientViewAngle
CALLV
pop
line 621
;621:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $271
JUMPV
LABELV $329
line 623
;622:		}
;623:	}
LABELV $323
line 630
;624:
;625:	//
;626:	// execute the team change
;627:	//
;628:
;629:	// if the player was dead leave the body
;630:	if (ent->health <= 0) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 0
GTI4 $334
line 631
;631:		CopyToBodyQue(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CopyToBodyQue
CALLV
pop
line 632
;632:	}
LABELV $334
line 635
;633:
;634:	// he starts at 'base'
;635:	client->pers.teamState.state = TEAM_BEGIN;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
CNSTI4 0
ASGNI4
line 637
;636:
;637:	if (oldTeam != TEAM_SPECTATOR) {
ADDRLP4 8
INDIRI4
CNSTI4 3
EQI4 $336
line 640
;638:
;639:		// revert any casted votes
;640:		if (oldTeam != team)
ADDRLP4 8
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $338
line 641
;641:			G_RevertVote(ent->client);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_RevertVote
CALLV
pop
LABELV $338
line 644
;642:
;643:		// Kill him (makes sure he loses flags, etc)
;644:		ent->flags &= ~FL_GODMODE;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 645
;645:		ent->client->ps.stats[STAT_HEALTH] = ent->health = 0;
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 646
;646:		player_die(ent, ent, ent, 100000, MOD_SUICIDE);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
CNSTI4 100000
ARGI4
CNSTI4 20
ARGI4
ADDRGP4 player_die
CALLV
pop
line 647
;647:	}
LABELV $336
line 650
;648:
;649:	// they go to the end of the line for tournements
;650:	if (team == TEAM_SPECTATOR) {
ADDRLP4 4
INDIRI4
CNSTI4 3
NEI4 $340
line 651
;651:		client->sess.spectatorTime = 0;
ADDRLP4 0
INDIRP4
CNSTI4 620
ADDP4
CNSTI4 0
ASGNI4
line 652
;652:	}
LABELV $340
line 654
;653:
;654:	client->sess.sessionTeam = team;
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 655
;655:	client->sess.spectatorState = specState;
ADDRLP4 0
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 656
;656:	client->sess.spectatorClient = specClient;
ADDRLP4 0
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 658
;657:
;658:	checkTeamLeader = client->sess.teamLeader;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
ASGNI4
line 659
;659:	client->sess.teamLeader = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
CNSTI4 0
ASGNI4
line 661
;660:
;661:	if (team == TEAM_RED || team == TEAM_BLUE) {
ADDRLP4 4
INDIRI4
CNSTI4 1
EQI4 $344
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $342
LABELV $344
line 662
;662:		teamLeader = TeamLeader(team);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 60
ADDRGP4 TeamLeader
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 60
INDIRI4
ASGNI4
line 664
;663:		// if there is no team leader or the team leader is a bot and this client is not a bot
;664:		if (teamLeader == -1 || (!(g_entities[clientNum].r.svFlags & SVF_BOT) && (g_entities[teamLeader].r.svFlags & SVF_BOT))) {
ADDRLP4 64
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 -1
EQI4 $351
ADDRLP4 12
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities+208+216
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $345
ADDRLP4 64
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities+208+216
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $345
LABELV $351
line 665
;665:			SetLeader(team, clientNum);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 SetLeader
CALLV
pop
line 666
;666:		}
LABELV $345
line 667
;667:	}
LABELV $342
line 670
;668:
;669:	// make sure there is a team leader on the team the player came from
;670:	if (oldTeam == TEAM_RED || oldTeam == TEAM_BLUE) {
ADDRLP4 8
INDIRI4
CNSTI4 1
EQI4 $354
ADDRLP4 8
INDIRI4
CNSTI4 2
NEI4 $352
LABELV $354
line 671
;671:		if (checkTeamLeader) {
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $355
line 672
;672:			CheckTeamLeader(oldTeam);
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CheckTeamLeader
CALLV
pop
line 673
;673:		}
LABELV $355
line 674
;674:	}
LABELV $352
line 676
;675:
;676:	G_WriteClientSessionData(client);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_WriteClientSessionData
CALLV
pop
line 678
;677:
;678:	BroadcastTeamChange(client, oldTeam);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 BroadcastTeamChange
CALLV
pop
line 681
;679:
;680:	// get and distribute relevent paramters
;681:	ClientUserinfoChanged(clientNum);
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 ClientUserinfoChanged
CALLI4
pop
line 683
;682:
;683:	ClientBegin(clientNum);
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 ClientBegin
CALLV
pop
line 685
;684:
;685:	return qtrue;
CNSTI4 1
RETI4
LABELV $271
endproc SetTeam 76 20
export StopFollowing
proc StopFollowing 12 12
line 697
;686:}
;687:
;688:
;689:/*
;690:=================
;691:StopFollowing
;692:
;693:If the client being followed leaves the game, or you just want to drop
;694:to free floating spectator mode
;695:=================
;696:*/
;697:void StopFollowing(gentity_t *ent, qboolean release) {
line 700
;698:	gclient_t *client;
;699:
;700:	if (ent->r.svFlags & SVF_BOT || !ent->inuse)
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $360
ADDRLP4 4
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $358
LABELV $360
line 701
;701:		return;
ADDRGP4 $357
JUMPV
LABELV $358
line 703
;702:
;703:	client = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 705
;704:
;705:	client->ps.persistant[PERS_TEAM] = TEAM_SPECTATOR;
ADDRLP4 0
INDIRP4
CNSTI4 260
ADDP4
CNSTI4 3
ASGNI4
line 706
;706:	client->sess.sessionTeam = TEAM_SPECTATOR;
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 3
ASGNI4
line 707
;707:	if (release) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $361
line 708
;708:		client->ps.stats[STAT_HEALTH] = ent->health = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 709
;709:		memset(client->ps.powerups, 0, sizeof(client->ps.powerups));
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 710
;710:	}
LABELV $361
line 711
;711:	SetClientViewAngle(ent, client->ps.viewangles);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 SetClientViewAngle
CALLV
pop
line 713
;712:
;713:	client->sess.spectatorState = SPECTATOR_FREE;
ADDRLP4 0
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 1
ASGNI4
line 714
;714:	client->ps.pm_flags &= ~PMF_FOLLOW;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -4097
BANDI4
ASGNI4
line 717
;715:	//ent->r.svFlags &= ~SVF_BOT;
;716:
;717:	client->ps.clientNum = ent - g_entities;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ASGNI4
line 718
;718:}
LABELV $357
endproc StopFollowing 12 12
proc Cmd_Team_f 1036 12
line 726
;719:
;720:
;721:/*
;722:=================
;723:Cmd_Team_f
;724:=================
;725:*/
;726:static void Cmd_Team_f(gentity_t *ent) {
line 729
;727:	char		s[MAX_TOKEN_CHARS];
;728:
;729:	if (trap_Argc() != 2) {
ADDRLP4 1024
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 1024
INDIRI4
CNSTI4 2
EQI4 $364
line 730
;730:		switch (ent->client->sess.sessionTeam) {
ADDRLP4 1028
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1028
INDIRI4
CNSTI4 0
LTI4 $363
ADDRLP4 1028
INDIRI4
CNSTI4 3
GTI4 $363
ADDRLP4 1028
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $377
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $377
address $373
address $371
address $369
address $375
code
LABELV $369
line 732
;731:		case TEAM_BLUE:
;732:			trap_SendServerCommand(ent - g_entities, "print \"Blue team\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $370
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 733
;733:			break;
ADDRGP4 $363
JUMPV
LABELV $371
line 735
;734:		case TEAM_RED:
;735:			trap_SendServerCommand(ent - g_entities, "print \"Red team\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $372
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 736
;736:			break;
ADDRGP4 $363
JUMPV
LABELV $373
line 738
;737:		case TEAM_FREE:
;738:			trap_SendServerCommand(ent - g_entities, "print \"Free team\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $374
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 739
;739:			break;
ADDRGP4 $363
JUMPV
LABELV $375
line 741
;740:		case TEAM_SPECTATOR:
;741:			trap_SendServerCommand(ent - g_entities, "print \"Spectator team\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $376
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 742
;742:			break;
line 744
;743:		default:
;744:			break;
line 746
;745:		}
;746:		return;
ADDRGP4 $363
JUMPV
LABELV $364
line 749
;747:	}
;748:
;749:	if (ent->client->switchTeamTime > level.time) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 768
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $378
line 750
;750:		trap_SendServerCommand(ent - g_entities, "print \"May not switch teams more than once per 5 seconds.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $381
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 751
;751:		return;
ADDRGP4 $363
JUMPV
LABELV $378
line 755
;752:	}
;753:
;754:	// if they are playing a tournement game, count as a loss
;755:	if ((g_gametype.integer == GT_DUEL)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $382
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $382
line 756
;756:		&& ent->client->sess.sessionTeam == TEAM_FREE) {
line 757
;757:		ent->client->sess.losses++;
ADDRLP4 1028
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 636
ADDP4
ASGNP4
ADDRLP4 1028
INDIRP4
ADDRLP4 1028
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 758
;758:	}
LABELV $382
line 760
;759:
;760:	trap_Argv(1, s, sizeof(s));
CNSTI4 1
ARGI4
ADDRLP4 0
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 762
;761:
;762:	if (SetTeam(ent, s)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 1028
ADDRGP4 SetTeam
CALLI4
ASGNI4
ADDRLP4 1028
INDIRI4
CNSTI4 0
EQI4 $385
line 763
;763:		ent->client->switchTeamTime = level.time + 5000;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 764
;764:	}
LABELV $385
line 765
;765:}
LABELV $363
endproc Cmd_Team_f 1036 12
proc Cmd_Follow_f 1040 12
line 773
;766:
;767:
;768:/*
;769:=================
;770:Cmd_Follow_f
;771:=================
;772:*/
;773:static void Cmd_Follow_f(gentity_t *ent) {
line 777
;774:	int		i;
;775:	char	arg[MAX_TOKEN_CHARS];
;776:
;777:	if (trap_Argc() != 2) {
ADDRLP4 1028
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 1028
INDIRI4
CNSTI4 2
EQI4 $389
line 778
;778:		if (ent->client->sess.spectatorState == SPECTATOR_FOLLOW) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 2
NEI4 $388
line 779
;779:			StopFollowing(ent, qtrue);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 StopFollowing
CALLV
pop
line 780
;780:		}
line 781
;781:		return;
ADDRGP4 $388
JUMPV
LABELV $389
line 784
;782:	}
;783:
;784:	trap_Argv(1, arg, sizeof(arg));
CNSTI4 1
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 785
;785:	i = ClientNumberFromString(ent, arg);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 1032
ADDRGP4 ClientNumberFromString
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 1032
INDIRI4
ASGNI4
line 786
;786:	if (i == -1) {
ADDRLP4 0
INDIRI4
CNSTI4 -1
NEI4 $393
line 787
;787:		return;
ADDRGP4 $388
JUMPV
LABELV $393
line 791
;788:	}
;789:
;790:	// can't follow self
;791:	if (&level.clients[i] == ent->client) {
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CVPU4 4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
NEU4 $395
line 792
;792:		return;
ADDRGP4 $388
JUMPV
LABELV $395
line 796
;793:	}
;794:
;795:	// can't follow another spectator
;796:	if (level.clients[i].sess.sessionTeam == TEAM_SPECTATOR) {
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $397
line 797
;797:		return;
ADDRGP4 $388
JUMPV
LABELV $397
line 801
;798:	}
;799:
;800:	// if they are playing a tournement game, count as a loss
;801:	if ((g_gametype.integer == GT_DUEL)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $399
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $399
line 802
;802:		&& ent->client->sess.sessionTeam == TEAM_FREE) {
line 803
;803:		ent->client->sess.losses++;
ADDRLP4 1036
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 636
ADDP4
ASGNP4
ADDRLP4 1036
INDIRP4
ADDRLP4 1036
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 804
;804:	}
LABELV $399
line 807
;805:
;806:	// first set them to spectator
;807:	if (ent->client->sess.sessionTeam != TEAM_SPECTATOR) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
EQI4 $402
line 808
;808:		SetTeam(ent, "spectator");
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $300
ARGP4
ADDRGP4 SetTeam
CALLI4
pop
line 809
;809:	}
LABELV $402
line 811
;810:
;811:	ent->client->sess.spectatorState = SPECTATOR_FOLLOW;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 2
ASGNI4
line 812
;812:	ent->client->sess.spectatorClient = i;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 813
;813:}
LABELV $388
endproc Cmd_Follow_f 1040 12
export Cmd_FollowCycle_f
proc Cmd_FollowCycle_f 16 8
line 821
;814:
;815:
;816:/*
;817:=================
;818:Cmd_FollowCycle_f
;819:=================
;820:*/
;821:void Cmd_FollowCycle_f(gentity_t *ent, int dir) {
line 827
;822:	int		clientnum;
;823:	int		original;
;824:	gclient_t *client;
;825:
;826:	// if they are playing a tournement game, count as a loss
;827:	if ((g_gametype.integer == GT_DUEL)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $405
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $405
line 828
;828:		&& ent->client->sess.sessionTeam == TEAM_FREE) {
line 829
;829:		ent->client->sess.losses++;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 636
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 830
;830:	}
LABELV $405
line 832
;831:
;832:	client = ent->client;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 835
;833:
;834:	// first set them to spectator
;835:	if (client->sess.spectatorState == SPECTATOR_NOT) {
ADDRLP4 8
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 0
NEI4 $408
line 836
;836:		SetTeam(ent, "spectator");
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $300
ARGP4
ADDRGP4 SetTeam
CALLI4
pop
line 837
;837:	}
LABELV $408
line 839
;838:
;839:	if (dir != 1 && dir != -1) {
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 1
EQI4 $410
ADDRLP4 12
INDIRI4
CNSTI4 -1
EQI4 $410
line 840
;840:		G_Error("Cmd_FollowCycle_f: bad dir %i", dir);
ADDRGP4 $412
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 G_Error
CALLV
pop
line 841
;841:	}
LABELV $410
line 843
;842:
;843:	clientnum = client->sess.spectatorClient;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
ASGNI4
line 844
;844:	original = clientnum;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
LABELV $413
line 845
;845:	do {
line 846
;846:		clientnum += dir;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 847
;847:		if (clientnum >= level.maxclients) {
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $416
line 848
;848:			clientnum = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 849
;849:		}
LABELV $416
line 850
;850:		if (clientnum < 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $419
line 851
;851:			clientnum = level.maxclients - 1;
ADDRLP4 0
ADDRGP4 level+24
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 852
;852:		}
LABELV $419
line 855
;853:
;854:		// can only follow connected clients
;855:		if (level.clients[clientnum].pers.connected != CON_CONNECTED) {
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $422
line 856
;856:			continue;
ADDRGP4 $414
JUMPV
LABELV $422
line 860
;857:		}
;858:
;859:		// can't follow another spectator
;860:		if (level.clients[clientnum].sess.sessionTeam == TEAM_SPECTATOR) {
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $424
line 861
;861:			continue;
ADDRGP4 $414
JUMPV
LABELV $424
line 865
;862:		}
;863:
;864:		// this is good, we can use it
;865:		ent->client->sess.spectatorClient = clientnum;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 866
;866:		ent->client->sess.spectatorState = SPECTATOR_FOLLOW;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 2
ASGNI4
line 867
;867:		return;
ADDRGP4 $404
JUMPV
LABELV $414
line 868
;868:	} while (clientnum != original);
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $413
line 871
;869:
;870:	// leave it where it was
;871:}
LABELV $404
endproc Cmd_FollowCycle_f 16 8
proc G_SayTo 12 28
line 879
;872:
;873:
;874:/*
;875:==================
;876:G_Say
;877:==================
;878:*/
;879:static void G_SayTo(gentity_t *ent, gentity_t *other, int mode, int color, const char *name, const char *message) {
line 880
;880:	if (!other) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $427
line 881
;881:		return;
ADDRGP4 $426
JUMPV
LABELV $427
line 883
;882:	}
;883:	if (!other->inuse) {
ADDRFP4 4
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $429
line 884
;884:		return;
ADDRGP4 $426
JUMPV
LABELV $429
line 886
;885:	}
;886:	if (!other->client) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $431
line 887
;887:		return;
ADDRGP4 $426
JUMPV
LABELV $431
line 889
;888:	}
;889:	if (other->client->pers.connected != CON_CONNECTED) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $433
line 890
;890:		return;
ADDRGP4 $426
JUMPV
LABELV $433
line 892
;891:	}
;892:	if (mode == SAY_TEAM && !OnSameTeam(ent, other)) {
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $435
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $435
line 893
;893:		return;
ADDRGP4 $426
JUMPV
LABELV $435
line 896
;894:	}
;895:	// no chatting to players in tournements
;896:	if ((g_gametype.integer == GT_DUEL)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $437
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $437
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
EQI4 $437
line 898
;897:		&& other->client->sess.sessionTeam == TEAM_FREE
;898:		&& ent->client->sess.sessionTeam != TEAM_FREE) {
line 899
;899:		return;
ADDRGP4 $426
JUMPV
LABELV $437
line 902
;900:	}
;901:
;902:	trap_SendServerCommand(other - g_entities, va("%s \"%s%c%c%s\" %i", mode == SAY_TEAM ? "tchat" : "chat",
ADDRGP4 $440
ARGP4
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $444
ADDRLP4 4
ADDRGP4 $441
ASGNP4
ADDRGP4 $445
JUMPV
LABELV $444
ADDRLP4 4
ADDRGP4 $442
ASGNP4
LABELV $445
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 4
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 904
;903:		name, Q_COLOR_ESCAPE, color, message, ent - g_entities));
;904:}
LABELV $426
endproc G_SayTo 12 28
proc G_Say 388 28
line 908
;905:
;906:#define EC		"\x19"
;907:
;908:static void G_Say(gentity_t *ent, gentity_t *target, int mode, const char *chatText) {
line 917
;909:	int			j;
;910:	gentity_t *other;
;911:	int			color;
;912:	char		name[64 + 64 + 12]; // name + location + formatting
;913:	// don't let text be too long for malicious reasons
;914:	char		text[MAX_SAY_TEXT];
;915:	char		location[64];
;916:
;917:	if (g_gametype.integer < GT_TEAM && mode == SAY_TEAM) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
GEI4 $447
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $447
line 918
;918:		mode = SAY_ALL;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 919
;919:	}
LABELV $447
line 921
;920:
;921:	switch (mode) {
ADDRLP4 368
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 368
INDIRI4
CNSTI4 0
EQI4 $452
ADDRLP4 368
INDIRI4
CNSTI4 1
EQI4 $455
ADDRLP4 368
INDIRI4
CNSTI4 2
EQI4 $461
ADDRGP4 $450
JUMPV
LABELV $450
LABELV $452
line 924
;922:	default:
;923:	case SAY_ALL:
;924:		G_LogPrintf("say: %s: %s\n", ent->client->pers.netname, chatText);
ADDRGP4 $453
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 925
;925:		Com_sprintf(name, sizeof(name), "%s%c%c"EC": ", ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE);
ADDRLP4 158
ARGP4
CNSTI4 140
ARGI4
ADDRGP4 $454
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
CNSTI4 94
ARGI4
CNSTI4 55
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 926
;926:		color = COLOR_GREEN;
ADDRLP4 300
CNSTI4 50
ASGNI4
line 927
;927:		break;
ADDRGP4 $451
JUMPV
LABELV $455
line 929
;928:	case SAY_TEAM:
;929:		G_LogPrintf("sayteam: %s: %s\n", ent->client->pers.netname, chatText);
ADDRGP4 $456
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 930
;930:		if (Team_GetLocationMsg(ent, location, sizeof(location)))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 304
ARGP4
CNSTI4 64
ARGI4
ADDRLP4 372
ADDRGP4 Team_GetLocationMsg
CALLI4
ASGNI4
ADDRLP4 372
INDIRI4
CNSTI4 0
EQI4 $457
line 931
;931:			Com_sprintf(name, sizeof(name), EC"(%s%c%c"EC") (%s)"EC": ",
ADDRLP4 158
ARGP4
CNSTI4 140
ARGI4
ADDRGP4 $459
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
CNSTI4 94
ARGI4
CNSTI4 55
ARGI4
ADDRLP4 304
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
ADDRGP4 $458
JUMPV
LABELV $457
line 934
;932:				ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE, location);
;933:		else
;934:			Com_sprintf(name, sizeof(name), EC"(%s%c%c"EC")"EC": ",
ADDRLP4 158
ARGP4
CNSTI4 140
ARGI4
ADDRGP4 $460
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
CNSTI4 94
ARGI4
CNSTI4 55
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
LABELV $458
line 936
;935:				ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE);
;936:		color = COLOR_CYAN;
ADDRLP4 300
CNSTI4 53
ASGNI4
line 937
;937:		break;
ADDRGP4 $451
JUMPV
LABELV $461
line 939
;938:	case SAY_TELL:
;939:		if (target && target->inuse && target->client && g_gametype.integer >= GT_TEAM &&
ADDRLP4 376
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 376
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $462
ADDRLP4 376
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $462
ADDRLP4 376
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $462
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
LTI4 $462
ADDRLP4 380
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 376
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ADDRLP4 380
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
NEI4 $462
ADDRLP4 380
INDIRP4
ARGP4
ADDRLP4 304
ARGP4
CNSTI4 64
ARGI4
ADDRLP4 384
ADDRGP4 Team_GetLocationMsg
CALLI4
ASGNI4
ADDRLP4 384
INDIRI4
CNSTI4 0
EQI4 $462
line 942
;940:			target->client->sess.sessionTeam == ent->client->sess.sessionTeam &&
;941:			Team_GetLocationMsg(ent, location, sizeof(location)))
;942:			Com_sprintf(name, sizeof(name), EC"[%s%c%c"EC"] (%s)"EC": ", ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE, location);
ADDRLP4 158
ARGP4
CNSTI4 140
ARGI4
ADDRGP4 $465
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
CNSTI4 94
ARGI4
CNSTI4 55
ARGI4
ADDRLP4 304
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
ADDRGP4 $463
JUMPV
LABELV $462
line 944
;943:		else
;944:			Com_sprintf(name, sizeof(name), EC"[%s%c%c"EC"]"EC": ", ent->client->pers.netname, Q_COLOR_ESCAPE, COLOR_WHITE);
ADDRLP4 158
ARGP4
CNSTI4 140
ARGI4
ADDRGP4 $466
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
CNSTI4 94
ARGI4
CNSTI4 55
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
LABELV $463
line 945
;945:		color = COLOR_MAGENTA;
ADDRLP4 300
CNSTI4 54
ASGNI4
line 946
;946:		break;
LABELV $451
line 949
;947:	}
;948:
;949:	Q_strncpyz(text, chatText, sizeof(text));
ADDRLP4 8
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 951
;950:
;951:	if (target) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $467
line 952
;952:		G_SayTo(ent, target, mode, color, name, text);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 300
INDIRI4
ARGI4
ADDRLP4 158
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SayTo
CALLV
pop
line 953
;953:		return;
ADDRGP4 $446
JUMPV
LABELV $467
line 957
;954:	}
;955:
;956:	// echo the text to the console
;957:	if (g_dedicated.integer) {
ADDRGP4 g_dedicated+12
INDIRI4
CNSTI4 0
EQI4 $469
line 958
;958:		G_Printf("%s%s\n", name, text);
ADDRGP4 $472
ARGP4
ADDRLP4 158
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 959
;959:	}
LABELV $469
line 962
;960:
;961:	// send it to all the apropriate clients
;962:	for (j = 0; j < level.maxclients; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $476
JUMPV
LABELV $473
line 963
;963:		other = &g_entities[j];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 964
;964:		G_SayTo(ent, other, mode, color, name, text);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 300
INDIRI4
ARGI4
ADDRLP4 158
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SayTo
CALLV
pop
line 965
;965:	}
LABELV $474
line 962
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $476
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $473
line 966
;966:}
LABELV $446
endproc G_Say 388 28
proc Cmd_Say_f 12 16
line 974
;967:
;968:
;969:/*
;970:==================
;971:Cmd_Say_f
;972:==================
;973:*/
;974:static void Cmd_Say_f(gentity_t *ent, int mode, qboolean arg0) {
line 977
;975:	char *p;
;976:
;977:	if (trap_Argc() < 2 && !arg0) {
ADDRLP4 4
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
GEI4 $479
ADDRFP4 8
INDIRI4
CNSTI4 0
NEI4 $479
line 978
;978:		return;
ADDRGP4 $478
JUMPV
LABELV $479
line 981
;979:	}
;980:
;981:	if (arg0) {
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $481
line 982
;982:		p = ConcatArgs(0);
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 ConcatArgs
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 983
;983:	} else {
ADDRGP4 $482
JUMPV
LABELV $481
line 984
;984:		p = ConcatArgs(1);
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 ConcatArgs
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 985
;985:	}
LABELV $482
line 987
;986:
;987:	G_Say(ent, NULL, mode, p);
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_Say
CALLV
pop
line 988
;988:}
LABELV $478
endproc Cmd_Say_f 12 16
proc Cmd_Tell_f 1060 16
line 996
;989:
;990:
;991:/*
;992:==================
;993:Cmd_Tell_f
;994:==================
;995:*/
;996:static void Cmd_Tell_f(gentity_t *ent) {
line 1002
;997:	int			targetNum;
;998:	gentity_t *target;
;999:	char *p;
;1000:	char		arg[MAX_TOKEN_CHARS];
;1001:
;1002:	if (trap_Argc() < 2) {
ADDRLP4 1036
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 1036
INDIRI4
CNSTI4 2
GEI4 $484
line 1003
;1003:		return;
ADDRGP4 $483
JUMPV
LABELV $484
line 1006
;1004:	}
;1005:
;1006:	trap_Argv(1, arg, sizeof(arg));
CNSTI4 1
ARGI4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1007
;1007:	targetNum = atoi(arg);
ADDRLP4 12
ARGP4
ADDRLP4 1040
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1040
INDIRI4
ASGNI4
line 1008
;1008:	if ((unsigned)targetNum >= (unsigned)level.maxclients) {
ADDRLP4 8
INDIRI4
CVIU4 4
ADDRGP4 level+24
INDIRI4
CVIU4 4
LTU4 $486
line 1009
;1009:		return;
ADDRGP4 $483
JUMPV
LABELV $486
line 1012
;1010:	}
;1011:
;1012:	target = &g_entities[targetNum];
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1013
;1013:	if (!target->inuse || !target->client) {
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $491
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $489
LABELV $491
line 1014
;1014:		return;
ADDRGP4 $483
JUMPV
LABELV $489
line 1017
;1015:	}
;1016:
;1017:	p = ConcatArgs(2);
CNSTI4 2
ARGI4
ADDRLP4 1048
ADDRGP4 ConcatArgs
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 1048
INDIRP4
ASGNP4
line 1019
;1018:
;1019:	G_LogPrintf("tell: %s to %s: %s\n", ent->client->pers.netname, target->client->pers.netname, p);
ADDRGP4 $492
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 1020
;1020:	G_Say(ent, target, SAY_TELL, p);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_Say
CALLV
pop
line 1023
;1021:	// don't tell to the player self if it was already directed to this player
;1022:	// also don't send the chat back to a bot
;1023:	if (ent != target && !(ent->r.svFlags & SVF_BOT)) {
ADDRLP4 1052
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1052
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
EQU4 $493
ADDRLP4 1052
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $493
line 1024
;1024:		G_Say(ent, ent, SAY_TELL, p);
ADDRLP4 1056
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1056
INDIRP4
ARGP4
ADDRLP4 1056
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_Say
CALLV
pop
line 1025
;1025:	}
LABELV $493
line 1026
;1026:}
LABELV $483
endproc Cmd_Tell_f 1060 16
data
align 4
LABELV gc_orders
address $495
address $496
address $497
address $498
address $499
address $500
address $501
export Cmd_GameCommand_f
code
proc Cmd_GameCommand_f 1044 16
line 1038
;1027:
;1028:static char *gc_orders[] = {
;1029:	"hold your position",
;1030:	"hold this position",
;1031:	"come here",
;1032:	"cover me",
;1033:	"guard location",
;1034:	"search and destroy",
;1035:	"report"
;1036:};
;1037:
;1038:void Cmd_GameCommand_f(gentity_t *ent) {
line 1043
;1039:	int		player;
;1040:	int		order;
;1041:	char	str[MAX_TOKEN_CHARS];
;1042:
;1043:	trap_Argv(1, str, sizeof(str));
CNSTI4 1
ARGI4
ADDRLP4 0
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1044
;1044:	player = atoi(str);
ADDRLP4 0
ARGP4
ADDRLP4 1032
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 1028
ADDRLP4 1032
INDIRI4
ASGNI4
line 1045
;1045:	trap_Argv(2, str, sizeof(str));
CNSTI4 2
ARGI4
ADDRLP4 0
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1046
;1046:	order = atoi(str);
ADDRLP4 0
ARGP4
ADDRLP4 1036
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 1024
ADDRLP4 1036
INDIRI4
ASGNI4
line 1048
;1047:
;1048:	if ((unsigned)player >= MAX_CLIENTS) {
ADDRLP4 1028
INDIRI4
CVIU4 4
CNSTU4 64
LTU4 $503
line 1049
;1049:		return;
ADDRGP4 $502
JUMPV
LABELV $503
line 1051
;1050:	}
;1051:	if ((unsigned)order > ARRAY_LEN(gc_orders)) {
ADDRLP4 1024
INDIRI4
CVIU4 4
CNSTU4 7
LEU4 $505
line 1052
;1052:		return;
ADDRGP4 $502
JUMPV
LABELV $505
line 1054
;1053:	}
;1054:	G_Say(ent, &g_entities[player], SAY_TELL, gc_orders[order]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 1028
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 1024
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 gc_orders
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_Say
CALLV
pop
line 1055
;1055:	G_Say(ent, ent, SAY_TELL, gc_orders[order]);
ADDRLP4 1040
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1040
INDIRP4
ARGP4
ADDRLP4 1040
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 1024
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 gc_orders
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_Say
CALLV
pop
line 1056
;1056:}
LABELV $502
endproc Cmd_GameCommand_f 1044 16
export Cmd_Where_f
proc Cmd_Where_f 8 8
line 1064
;1057:
;1058:
;1059:/*
;1060:==================
;1061:Cmd_Where_f
;1062:==================
;1063:*/
;1064:void Cmd_Where_f(gentity_t *ent) {
line 1065
;1065:	trap_SendServerCommand(ent - g_entities, va("print \"%s\n\"", vtos(ent->s.origin)));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $508
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1066
;1066:}
LABELV $507
endproc Cmd_Where_f 8 8
data
align 4
LABELV voteCommands
address $509
address $510
address $511
address $512
address $513
address $514
address $515
address $516
address $517
address $518
address $519
address $520
code
proc ValidVoteCommand 320 12
line 1091
;1067:
;1068:static const char *voteCommands[] = {
;1069:	"map_restart",
;1070:	"map",
;1071:	"rotate",
;1072:	"nextmap",
;1073:	"kick",
;1074:	"clientkick",
;1075:	"g_gametype",
;1076:	"g_unlagged",
;1077:	"g_warmup",
;1078:	"timelimit",
;1079:	"fraglimit",
;1080:	"capturelimit"
;1081:};
;1082:
;1083:
;1084:/*
;1085:==================
;1086:ValidVoteCommand
;1087:
;1088:Input string can be modified by overwriting gametype number instead of text value, for example
;1089:==================
;1090:*/
;1091:static qboolean ValidVoteCommand(int clientNum, char *command) {
line 1097
;1092:	char buf[MAX_CVAR_VALUE_STRING];
;1093:	char *base;
;1094:	char *s;
;1095:	int	i;
;1096:
;1097:	if (strchr(command, ';') || strchr(command, '\n') || strchr(command, '\r')) {
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 59
ARGI4
ADDRLP4 268
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 268
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $525
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRLP4 272
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 272
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $525
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 13
ARGI4
ADDRLP4 276
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 276
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $522
LABELV $525
line 1098
;1098:		trap_SendServerCommand(clientNum, "print \"Invalid vote command.\n\"");
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 $526
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1099
;1099:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $521
JUMPV
LABELV $522
line 1102
;1100:	}
;1101:
;1102:	base = command;
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
line 1104
;1103:
;1104:	s = buf; // extract command name
ADDRLP4 4
ADDRLP4 8
ASGNP4
ADDRGP4 $528
JUMPV
LABELV $527
line 1105
;1105:	while (*command != '\0' && *command != ' ') {
line 1106
;1106:		*s = *command; s++; command++;
ADDRLP4 4
INDIRP4
ADDRFP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1107
;1107:	}
LABELV $528
line 1105
ADDRLP4 280
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
EQI4 $530
ADDRLP4 280
INDIRI4
CNSTI4 32
NEI4 $527
LABELV $530
line 1108
;1108:	*s = '\0';
ADDRLP4 4
INDIRP4
CNSTI1 0
ASGNI1
ADDRGP4 $532
JUMPV
LABELV $531
line 1111
;1109:	// point cmd on first argument
;1110:	while (*command == ' ' || *command == '\t')
;1111:		command++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $532
line 1110
ADDRLP4 284
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 32
EQI4 $531
ADDRLP4 284
INDIRI4
CNSTI4 9
EQI4 $531
line 1113
;1112:
;1113:	for (i = 0; i < ARRAY_LEN(voteCommands); i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $537
JUMPV
LABELV $534
line 1114
;1114:		if (!Q_stricmp(buf, voteCommands[i])) {
ADDRLP4 8
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 voteCommands
ADDP4
INDIRP4
ARGP4
ADDRLP4 288
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 288
INDIRI4
CNSTI4 0
NEI4 $538
line 1115
;1115:			break;
ADDRGP4 $536
JUMPV
LABELV $538
line 1117
;1116:		}
;1117:	}
LABELV $535
line 1113
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $537
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 12
LTU4 $534
LABELV $536
line 1119
;1118:
;1119:	if (i == ARRAY_LEN(voteCommands)) {
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 12
NEU4 $540
line 1120
;1120:		trap_SendServerCommand(clientNum, "print \"Invalid vote command.\nVote commands are: \n"
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 $542
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1126
;1121:			" g_gametype <n|ffa|duel|tdm|ctf>\n"
;1122:			" map_restart, map <mapname>, rotate [round], nextmap\n"
;1123:			" kick <player>, clientkick <clientnum>\n"
;1124:			" g_unlagged <0|1>, g_warmup <-1|0|seconds>\n"
;1125:			" timelimit <time>, fraglimit <frags>, capturelimit <captures>.\n\"");
;1126:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $521
JUMPV
LABELV $540
line 1129
;1127:	}
;1128:
;1129:	if (Q_stricmp(buf, "g_gametype") == 0) {
ADDRLP4 8
ARGP4
ADDRGP4 $515
ARGP4
ADDRLP4 288
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 288
INDIRI4
CNSTI4 0
NEI4 $543
line 1130
;1130:		if (!Q_stricmp(command, "ffa")) i = GT_FFA;
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $547
ARGP4
ADDRLP4 292
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 292
INDIRI4
CNSTI4 0
NEI4 $545
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $546
JUMPV
LABELV $545
line 1131
;1131:		else if (!Q_stricmp(command, "duel")) i = GT_DUEL;
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $550
ARGP4
ADDRLP4 296
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
NEI4 $548
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $549
JUMPV
LABELV $548
line 1132
;1132:		else if (!Q_stricmp(command, "tdm")) i = GT_TEAM;
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $553
ARGP4
ADDRLP4 300
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 300
INDIRI4
CNSTI4 0
NEI4 $551
ADDRLP4 0
CNSTI4 3
ASGNI4
ADDRGP4 $552
JUMPV
LABELV $551
line 1133
;1133:		else if (!Q_stricmp(command, "ctf")) i = GT_CTF;
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $556
ARGP4
ADDRLP4 304
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 304
INDIRI4
CNSTI4 0
NEI4 $554
ADDRLP4 0
CNSTI4 5
ASGNI4
ADDRGP4 $555
JUMPV
LABELV $554
line 1134
;1134:		else {
line 1135
;1135:			i = atoi(command);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 308
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 308
INDIRI4
ASGNI4
line 1136
;1136:			if (i < 0 || i >= GT_MAX_GAME_TYPE) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $559
ADDRLP4 0
INDIRI4
CNSTI4 13
LTI4 $557
LABELV $559
line 1137
;1137:				trap_SendServerCommand(clientNum, va("print \"Invalid gametype %i.\n\"", i));
ADDRGP4 $560
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 316
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1138
;1138:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $521
JUMPV
LABELV $557
line 1140
;1139:			}
;1140:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $521
JUMPV
LABELV $555
LABELV $552
LABELV $549
LABELV $546
line 1144
;1141:		}
;1142:
;1143:		// handle string values
;1144:		BG_sprintf(base, "g_gametype %i", i);
ADDRLP4 264
INDIRP4
ARGP4
ADDRGP4 $561
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 1146
;1145:
;1146:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $521
JUMPV
LABELV $543
line 1149
;1147:	}
;1148:
;1149:	if (Q_stricmp(buf, "map") == 0) {
ADDRLP4 8
ARGP4
ADDRGP4 $510
ARGP4
ADDRLP4 292
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 292
INDIRI4
CNSTI4 0
NEI4 $562
line 1150
;1150:		if (!G_MapExist(command)) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 296
ADDRGP4 G_MapExist
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
NEI4 $564
line 1151
;1151:			trap_SendServerCommand(clientNum, va("print \"No such map on server: %s.\n\"", command));
ADDRGP4 $566
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 300
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 300
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1152
;1152:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $521
JUMPV
LABELV $564
line 1154
;1153:		}
;1154:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $521
JUMPV
LABELV $562
line 1157
;1155:	}
;1156:
;1157:	if (Q_stricmp(buf, "nextmap") == 0) {
ADDRLP4 8
ARGP4
ADDRGP4 $512
ARGP4
ADDRLP4 296
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
NEI4 $567
line 1158
;1158:		strcpy(base, "rotate");
ADDRLP4 264
INDIRP4
ARGP4
ADDRGP4 $511
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1159
;1159:	}
LABELV $567
line 1161
;1160:
;1161:	return qtrue;
CNSTI4 1
RETI4
LABELV $521
endproc ValidVoteCommand 320 12
export Cmd_CallVote_f
proc Cmd_CallVote_f 2108 16
line 1170
;1162:}
;1163:
;1164:
;1165:/*
;1166:==================
;1167:Cmd_CallVote_f
;1168:==================
;1169:*/
;1170:void Cmd_CallVote_f(gentity_t *ent) {
line 1175
;1171:	int		i, n;
;1172:	char	arg[MAX_STRING_TOKENS], *argn[4];
;1173:	char	cmd[MAX_STRING_TOKENS], *s;
;1174:
;1175:	if (!g_allowVote.integer) {
ADDRGP4 g_allowVote+12
INDIRI4
CNSTI4 0
NEI4 $570
line 1176
;1176:		trap_SendServerCommand(ent - g_entities, "print \"Voting not allowed here.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $573
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1177
;1177:		return;
ADDRGP4 $569
JUMPV
LABELV $570
line 1180
;1178:	}
;1179:
;1180:	if (level.voteTime) {
ADDRGP4 level+872
INDIRI4
CNSTI4 0
EQI4 $574
line 1181
;1181:		trap_SendServerCommand(ent - g_entities, "print \"A vote is already in progress.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $577
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1182
;1182:		return;
ADDRGP4 $569
JUMPV
LABELV $574
line 1186
;1183:	}
;1184:
;1185:	// if there is still a vote to be executed
;1186:	if (level.voteExecuteTime || level.restarted) {
ADDRGP4 level+876
INDIRI4
CNSTI4 0
NEI4 $582
ADDRGP4 level+72
INDIRI4
CNSTI4 0
EQI4 $578
LABELV $582
line 1187
;1187:		trap_SendServerCommand(ent - g_entities, "print \"Previous vote command is waiting execution^1.^7\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $583
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1188
;1188:		return;
ADDRGP4 $569
JUMPV
LABELV $578
line 1191
;1189:	}
;1190:
;1191:	if (ent->client->pers.voteCount >= MAX_VOTE_COUNT) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
CNSTI4 3
LTI4 $584
line 1192
;1192:		trap_SendServerCommand(ent - g_entities, "print \"You have called the maximum number of votes.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $586
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1193
;1193:		return;
ADDRGP4 $569
JUMPV
LABELV $584
line 1195
;1194:	}
;1195:	if (ent->client->sess.sessionTeam == TEAM_SPECTATOR) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $587
line 1196
;1196:		trap_SendServerCommand(ent - g_entities, "print \"Not allowed to call a vote as spectator.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $589
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1197
;1197:		return;
ADDRGP4 $569
JUMPV
LABELV $587
line 1201
;1198:	}
;1199:
;1200:	// build command buffer
;1201:	arg[0] = '\0'; s = arg;
ADDRLP4 1052
CNSTI1 0
ASGNI1
ADDRLP4 4
ADDRLP4 1052
ASGNP4
line 1202
;1202:	for (i = 1; i < trap_Argc(); i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $593
JUMPV
LABELV $590
line 1203
;1203:		if (arg[0])
ADDRLP4 1052
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $594
line 1204
;1204:			s = Q_stradd(s, " ");
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $596
ARGP4
ADDRLP4 2076
ADDRGP4 Q_stradd
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 2076
INDIRP4
ASGNP4
LABELV $594
line 1205
;1205:		trap_Argv(i, cmd, sizeof(cmd));
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1206
;1206:		s = Q_stradd(s, cmd);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 2080
ADDRGP4 Q_stradd
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 2080
INDIRP4
ASGNP4
line 1207
;1207:	}
LABELV $591
line 1202
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $593
ADDRLP4 2076
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 2076
INDIRI4
LTI4 $590
line 1210
;1208:
;1209:	// split by ';' seperators
;1210:	n = Com_Split(arg, argn, ARRAY_LEN(argn), ';');
ADDRLP4 1052
ARGP4
ADDRLP4 1032
ARGP4
CNSTI4 4
ARGI4
CNSTI4 59
ARGI4
ADDRLP4 2080
ADDRGP4 Com_Split
CALLI4
ASGNI4
ADDRLP4 1048
ADDRLP4 2080
INDIRI4
ASGNI4
line 1211
;1211:	if (n == 0 || *argn[0] == '\0')
ADDRLP4 1048
INDIRI4
CNSTI4 0
EQI4 $599
ADDRLP4 1032
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $597
LABELV $599
line 1212
;1212:		return; // empty callvote command?
ADDRGP4 $569
JUMPV
LABELV $597
line 1215
;1213:
;1214:	// validate all split commands
;1215:	for (i = 0; i < n; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $603
JUMPV
LABELV $600
line 1217
;1216:		// make sure it is a valid command to vote on
;1217:		if (!ValidVoteCommand(ent - g_entities, argn[i]))
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1032
ADDP4
INDIRP4
ARGP4
ADDRLP4 2084
ADDRGP4 ValidVoteCommand
CALLI4
ASGNI4
ADDRLP4 2084
INDIRI4
CNSTI4 0
NEI4 $604
line 1218
;1218:			return;
ADDRGP4 $569
JUMPV
LABELV $604
line 1219
;1219:	}
LABELV $601
line 1215
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $603
ADDRLP4 0
INDIRI4
ADDRLP4 1048
INDIRI4
LTI4 $600
line 1222
;1220:
;1221:	// rebuild command buffer
;1222:	cmd[0] = '\0';
ADDRLP4 8
CNSTI1 0
ASGNI1
line 1223
;1223:	for (s = cmd, i = 0; i < n; i++) {
ADDRLP4 4
ADDRLP4 8
ASGNP4
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $609
JUMPV
LABELV $606
line 1224
;1224:		if (cmd[0])
ADDRLP4 8
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $610
line 1225
;1225:			s = Q_stradd(s, ";");
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $612
ARGP4
ADDRLP4 2084
ADDRGP4 Q_stradd
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 2084
INDIRP4
ASGNP4
LABELV $610
line 1226
;1226:		s = Q_stradd(s, argn[i]);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1032
ADDP4
INDIRP4
ARGP4
ADDRLP4 2088
ADDRGP4 Q_stradd
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 2088
INDIRP4
ASGNP4
line 1227
;1227:	}
LABELV $607
line 1223
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $609
ADDRLP4 0
INDIRI4
ADDRLP4 1048
INDIRI4
LTI4 $606
line 1229
;1228:
;1229:	Com_sprintf(level.voteString, sizeof(level.voteString), cmd);
ADDRGP4 level+360
ARGP4
CNSTI4 256
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1230
;1230:	Com_sprintf(level.voteDisplayString, sizeof(level.voteDisplayString), "%s", level.voteString);
ADDRGP4 level+616
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 $617
ARGP4
ADDRGP4 level+360
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1232
;1231:
;1232:	trap_SendServerCommand(-1, va("print \"%s called a vote(%s).\n\"", ent->client->pers.netname, cmd));
ADDRGP4 $619
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 2084
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 2084
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1235
;1233:
;1234:	// start the voting, the caller automatically votes yes
;1235:	level.voteTime = level.time;
ADDRGP4 level+872
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1236
;1236:	level.voteYes = 1;
ADDRGP4 level+880
CNSTI4 1
ASGNI4
line 1237
;1237:	level.voteNo = 0;
ADDRGP4 level+884
CNSTI4 0
ASGNI4
line 1239
;1238:
;1239:	for (i = 0; i < level.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $627
JUMPV
LABELV $624
line 1240
;1240:		level.clients[i].ps.eFlags &= ~EF_VOTED;
ADDRLP4 2088
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 2088
INDIRP4
ADDRLP4 2088
INDIRP4
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 1241
;1241:		level.clients[i].pers.voted = 0;
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 608
ADDP4
CNSTI4 0
ASGNI4
line 1242
;1242:	}
LABELV $625
line 1239
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $627
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $624
line 1244
;1243:
;1244:	ent->client->ps.eFlags |= EF_VOTED;
ADDRLP4 2088
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 2088
INDIRP4
ADDRLP4 2088
INDIRP4
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 1245
;1245:	ent->client->pers.voted = 1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 608
ADDP4
CNSTI4 1
ASGNI4
line 1247
;1246:
;1247:	ent->client->pers.voteCount++;
ADDRLP4 2092
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 600
ADDP4
ASGNP4
ADDRLP4 2092
INDIRP4
ADDRLP4 2092
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1249
;1248:
;1249:	trap_SetConfigstring(CS_VOTE_TIME, va("%i", level.voteTime));
ADDRGP4 $629
ARGP4
ADDRGP4 level+872
INDIRI4
ARGI4
ADDRLP4 2096
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 8
ARGI4
ADDRLP4 2096
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1250
;1250:	trap_SetConfigstring(CS_VOTE_STRING, level.voteDisplayString);
CNSTI4 9
ARGI4
ADDRGP4 level+616
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1251
;1251:	trap_SetConfigstring(CS_VOTE_YES, va("%i", level.voteYes));
ADDRGP4 $629
ARGP4
ADDRGP4 level+880
INDIRI4
ARGI4
ADDRLP4 2100
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 10
ARGI4
ADDRLP4 2100
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1252
;1252:	trap_SetConfigstring(CS_VOTE_NO, va("%i", level.voteNo));
ADDRGP4 $629
ARGP4
ADDRGP4 level+884
INDIRI4
ARGI4
ADDRLP4 2104
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 11
ARGI4
ADDRLP4 2104
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1253
;1253:}
LABELV $569
endproc Cmd_CallVote_f 2108 16
proc Cmd_Vote_f 80 12
line 1261
;1254:
;1255:
;1256:/*
;1257:==================
;1258:Cmd_Vote_f
;1259:==================
;1260:*/
;1261:static void Cmd_Vote_f(gentity_t *ent) {
line 1264
;1262:	char		msg[64];
;1263:
;1264:	if (!level.voteTime) {
ADDRGP4 level+872
INDIRI4
CNSTI4 0
NEI4 $635
line 1265
;1265:		trap_SendServerCommand(ent - g_entities, "print \"No vote in progress.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $638
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1266
;1266:		return;
ADDRGP4 $634
JUMPV
LABELV $635
line 1269
;1267:	}
;1268:
;1269:	if (ent->client->pers.voted != 0) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 608
ADDP4
INDIRI4
CNSTI4 0
EQI4 $639
line 1270
;1270:		trap_SendServerCommand(ent - g_entities, "print \"Vote already cast.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $641
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1271
;1271:		return;
ADDRGP4 $634
JUMPV
LABELV $639
line 1274
;1272:	}
;1273:
;1274:	if (ent->client->sess.sessionTeam == TEAM_SPECTATOR) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $642
line 1275
;1275:		trap_SendServerCommand(ent - g_entities, "print \"Not allowed to vote as spectator.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $644
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1276
;1276:		return;
ADDRGP4 $634
JUMPV
LABELV $642
line 1279
;1277:	}
;1278:
;1279:	trap_SendServerCommand(ent - g_entities, "print \"Vote cast.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $645
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1281
;1280:
;1281:	ent->client->ps.eFlags |= EF_VOTED;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 1283
;1282:
;1283:	trap_Argv(1, msg, sizeof(msg));
CNSTI4 1
ARGI4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1285
;1284:
;1285:	if (msg[0] == 'y' || msg[0] == 'Y' || msg[0] == '1') {
ADDRLP4 68
ADDRLP4 0
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 121
EQI4 $649
ADDRLP4 68
INDIRI4
CNSTI4 89
EQI4 $649
ADDRLP4 68
INDIRI4
CNSTI4 49
NEI4 $646
LABELV $649
line 1286
;1286:		level.voteYes++;
ADDRLP4 72
ADDRGP4 level+880
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1287
;1287:		ent->client->pers.voted = 1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 608
ADDP4
CNSTI4 1
ASGNI4
line 1288
;1288:		trap_SetConfigstring(CS_VOTE_YES, va("%i", level.voteYes));
ADDRGP4 $629
ARGP4
ADDRGP4 level+880
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 10
ARGI4
ADDRLP4 76
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1289
;1289:	} else {
ADDRGP4 $647
JUMPV
LABELV $646
line 1290
;1290:		level.voteNo++;
ADDRLP4 72
ADDRGP4 level+884
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1291
;1291:		ent->client->pers.voted = -1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 608
ADDP4
CNSTI4 -1
ASGNI4
line 1292
;1292:		trap_SetConfigstring(CS_VOTE_NO, va("%i", level.voteNo));
ADDRGP4 $629
ARGP4
ADDRGP4 level+884
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 11
ARGI4
ADDRLP4 76
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1293
;1293:	}
LABELV $647
line 1297
;1294:
;1295:	// a majority will be determined in CheckVote, which will also account
;1296:	// for players entering or leaving
;1297:}
LABELV $634
endproc Cmd_Vote_f 80 12
export G_RevertVote
proc G_RevertVote 12 8
line 1300
;1298:
;1299:
;1300:void G_RevertVote(gclient_t *client) {
line 1301
;1301:	if (level.voteTime) {
ADDRGP4 level+872
INDIRI4
CNSTI4 0
EQI4 $655
line 1302
;1302:		if (client->pers.voted == 1) {
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRI4
CNSTI4 1
NEI4 $658
line 1303
;1303:			level.voteYes--;
ADDRLP4 0
ADDRGP4 level+880
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1304
;1304:			client->pers.voted = 0;
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
CNSTI4 0
ASGNI4
line 1305
;1305:			client->ps.eFlags &= ~EF_VOTED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 1306
;1306:			trap_SetConfigstring(CS_VOTE_YES, va("%i", level.voteYes));
ADDRGP4 $629
ARGP4
ADDRGP4 level+880
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 10
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1307
;1307:		} else if (client->pers.voted == -1) {
ADDRGP4 $659
JUMPV
LABELV $658
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRI4
CNSTI4 -1
NEI4 $662
line 1308
;1308:			level.voteNo--;
ADDRLP4 0
ADDRGP4 level+884
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1309
;1309:			client->pers.voted = 0;
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
CNSTI4 0
ASGNI4
line 1310
;1310:			client->ps.eFlags &= ~EF_VOTED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 1311
;1311:			trap_SetConfigstring(CS_VOTE_NO, va("%i", level.voteNo));
ADDRGP4 $629
ARGP4
ADDRGP4 level+884
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 11
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1312
;1312:		}
LABELV $662
LABELV $659
line 1313
;1313:	}
LABELV $655
line 1314
;1314:}
LABELV $654
endproc G_RevertVote 12 8
proc Cmd_SetViewpos_f 1060 12
line 1322
;1315:
;1316:
;1317:/*
;1318:=================
;1319:Cmd_SetViewpos_f
;1320:=================
;1321:*/
;1322:static void Cmd_SetViewpos_f(gentity_t *ent) {
line 1327
;1323:	vec3_t		origin, angles;
;1324:	char		buffer[MAX_TOKEN_CHARS];
;1325:	int			i;
;1326:
;1327:	if (!g_cheats.integer) {
ADDRGP4 g_cheats+12
INDIRI4
CNSTI4 0
NEI4 $667
line 1328
;1328:		trap_SendServerCommand(ent - g_entities, "print \"Cheats are not enabled on this server.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $94
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1329
;1329:		return;
ADDRGP4 $666
JUMPV
LABELV $667
line 1331
;1330:	}
;1331:	if (trap_Argc() != 5) {
ADDRLP4 1052
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 1052
INDIRI4
CNSTI4 5
EQI4 $670
line 1332
;1332:		trap_SendServerCommand(ent - g_entities, "print \"usage: setviewpos x y z yaw\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ARGI4
ADDRGP4 $672
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1333
;1333:		return;
ADDRGP4 $666
JUMPV
LABELV $670
line 1336
;1334:	}
;1335:
;1336:	VectorClear(angles);
ADDRLP4 1040
CNSTF4 0
ASGNF4
ADDRLP4 1040+4
CNSTF4 0
ASGNF4
ADDRLP4 1040+8
CNSTF4 0
ASGNF4
line 1337
;1337:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $675
line 1338
;1338:		trap_Argv(i + 1, buffer, sizeof(buffer));
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1339
;1339:		origin[i] = atof(buffer);
ADDRLP4 4
ARGP4
ADDRLP4 1056
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1028
ADDP4
ADDRLP4 1056
INDIRF4
ASGNF4
line 1340
;1340:	}
LABELV $676
line 1337
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $675
line 1342
;1341:
;1342:	trap_Argv(4, buffer, sizeof(buffer));
CNSTI4 4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1343
;1343:	angles[YAW] = atof(buffer);
ADDRLP4 4
ARGP4
ADDRLP4 1056
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 1040+4
ADDRLP4 1056
INDIRF4
ASGNF4
line 1345
;1344:
;1345:	TeleportPlayer(ent, origin, angles);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 1028
ARGP4
ADDRLP4 1040
ARGP4
ADDRGP4 TeleportPlayer
CALLV
pop
line 1346
;1346:}
LABELV $666
endproc Cmd_SetViewpos_f 1060 12
proc Cmd_Stats_f 0 0
line 1355
;1347:
;1348:
;1349:
;1350:/*
;1351:=================
;1352:Cmd_Stats_f
;1353:=================
;1354:*/
;1355:static void Cmd_Stats_f(gentity_t *ent) {
line 1370
;1356:	/*
;1357:		int max, n, i;
;1358:
;1359:		max = trap_AAS_PointReachabilityAreaIndex( NULL );
;1360:
;1361:		n = 0;
;1362:		for ( i = 0; i < max; i++ ) {
;1363:			if ( ent->client->areabits[i >> 3] & (1 << (i & 7)) )
;1364:				n++;
;1365:		}
;1366:
;1367:		//trap_SendServerCommand( ent-g_entities, va("print \"visited %d of %d areas\n\"", n, max));
;1368:		trap_SendServerCommand( ent-g_entities, va("print \"%d%% level coverage\n\"", n * 100 / max));
;1369:	*/
;1370:}
LABELV $680
endproc Cmd_Stats_f 0 0
export ClientCommand
proc ClientCommand 1116 12
line 1378
;1371:
;1372:
;1373:/*
;1374:=================
;1375:ClientCommand
;1376:=================
;1377:*/
;1378:void ClientCommand(int clientNum) {
line 1382
;1379:	gentity_t *ent;
;1380:	char	cmd[MAX_TOKEN_CHARS];
;1381:
;1382:	ent = g_entities + clientNum;
ADDRLP4 1024
ADDRFP4 0
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1383
;1383:	if (!ent->client)
ADDRLP4 1024
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $682
line 1384
;1384:		return;
ADDRGP4 $681
JUMPV
LABELV $682
line 1386
;1385:
;1386:	trap_Argv(0, cmd, sizeof(cmd));
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 1388
;1387:
;1388:	if (ent->client->pers.connected != CON_CONNECTED) {
ADDRLP4 1024
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $684
line 1389
;1389:		if (ent->client->pers.connected == CON_CONNECTING && g_gametype.integer >= GT_TEAM) {
ADDRLP4 1024
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 1
NEI4 $681
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
LTI4 $681
line 1390
;1390:			if (Q_stricmp(cmd, "team") == 0 && !level.restarted) {
ADDRLP4 0
ARGP4
ADDRGP4 $691
ARGP4
ADDRLP4 1028
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1028
INDIRI4
CNSTI4 0
NEI4 $681
ADDRGP4 level+72
INDIRI4
CNSTI4 0
NEI4 $681
line 1391
;1391:				Cmd_Team_f(ent); // early team override
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Team_f
CALLV
pop
line 1392
;1392:			}
line 1393
;1393:		}
line 1394
;1394:		return;	// not fully in game yet
ADDRGP4 $681
JUMPV
LABELV $684
line 1397
;1395:	}
;1396:
;1397:	if (Q_stricmp(cmd, "say") == 0) {
ADDRLP4 0
ARGP4
ADDRGP4 $695
ARGP4
ADDRLP4 1028
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1028
INDIRI4
CNSTI4 0
NEI4 $693
line 1398
;1398:		Cmd_Say_f(ent, SAY_ALL, qfalse);
ADDRLP4 1024
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 Cmd_Say_f
CALLV
pop
line 1399
;1399:		return;
ADDRGP4 $681
JUMPV
LABELV $693
line 1401
;1400:	}
;1401:	if (Q_stricmp(cmd, "say_team") == 0) {
ADDRLP4 0
ARGP4
ADDRGP4 $698
ARGP4
ADDRLP4 1032
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1032
INDIRI4
CNSTI4 0
NEI4 $696
line 1402
;1402:		Cmd_Say_f(ent, SAY_TEAM, qfalse);
ADDRLP4 1024
INDIRP4
ARGP4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 Cmd_Say_f
CALLV
pop
line 1403
;1403:		return;
ADDRGP4 $681
JUMPV
LABELV $696
line 1405
;1404:	}
;1405:	if (Q_stricmp(cmd, "tell") == 0) {
ADDRLP4 0
ARGP4
ADDRGP4 $701
ARGP4
ADDRLP4 1036
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1036
INDIRI4
CNSTI4 0
NEI4 $699
line 1406
;1406:		Cmd_Tell_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Tell_f
CALLV
pop
line 1407
;1407:		return;
ADDRGP4 $681
JUMPV
LABELV $699
line 1409
;1408:	}
;1409:	if (Q_stricmp(cmd, "score") == 0) {
ADDRLP4 0
ARGP4
ADDRGP4 $290
ARGP4
ADDRLP4 1040
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1040
INDIRI4
CNSTI4 0
NEI4 $702
line 1410
;1410:		Cmd_Score_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Score_f
CALLV
pop
line 1411
;1411:		return;
ADDRGP4 $681
JUMPV
LABELV $702
line 1415
;1412:	}
;1413:
;1414:	// ignore all other commands when at intermission
;1415:	if (level.intermissiontime) {
ADDRGP4 level+5516
INDIRI4
CNSTI4 0
EQI4 $704
line 1416
;1416:		Cmd_Say_f(ent, qfalse, qtrue);
ADDRLP4 1024
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 Cmd_Say_f
CALLV
pop
line 1417
;1417:		return;
ADDRGP4 $681
JUMPV
LABELV $704
line 1420
;1418:	}
;1419:
;1420:	if (Q_stricmp(cmd, "give") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $709
ARGP4
ADDRLP4 1044
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1044
INDIRI4
CNSTI4 0
NEI4 $707
line 1421
;1421:		Cmd_Give_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Give_f
CALLV
pop
ADDRGP4 $708
JUMPV
LABELV $707
line 1422
;1422:	else if (Q_stricmp(cmd, "god") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $712
ARGP4
ADDRLP4 1048
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1048
INDIRI4
CNSTI4 0
NEI4 $710
line 1423
;1423:		Cmd_God_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_God_f
CALLV
pop
ADDRGP4 $711
JUMPV
LABELV $710
line 1424
;1424:	else if (Q_stricmp(cmd, "notarget") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $715
ARGP4
ADDRLP4 1052
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1052
INDIRI4
CNSTI4 0
NEI4 $713
line 1425
;1425:		Cmd_Notarget_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Notarget_f
CALLV
pop
ADDRGP4 $714
JUMPV
LABELV $713
line 1426
;1426:	else if (Q_stricmp(cmd, "noclip") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $718
ARGP4
ADDRLP4 1056
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1056
INDIRI4
CNSTI4 0
NEI4 $716
line 1427
;1427:		Cmd_Noclip_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Noclip_f
CALLV
pop
ADDRGP4 $717
JUMPV
LABELV $716
line 1428
;1428:	else if (Q_stricmp(cmd, "kill") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $721
ARGP4
ADDRLP4 1060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1060
INDIRI4
CNSTI4 0
NEI4 $719
line 1429
;1429:		Cmd_Kill_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Kill_f
CALLV
pop
ADDRGP4 $720
JUMPV
LABELV $719
line 1430
;1430:	else if (Q_stricmp(cmd, "teamtask") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $226
ARGP4
ADDRLP4 1064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1064
INDIRI4
CNSTI4 0
NEI4 $722
line 1431
;1431:		Cmd_TeamTask_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_TeamTask_f
CALLV
pop
ADDRGP4 $723
JUMPV
LABELV $722
line 1432
;1432:	else if (Q_stricmp(cmd, "levelshot") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $726
ARGP4
ADDRLP4 1068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1068
INDIRI4
CNSTI4 0
NEI4 $724
line 1433
;1433:		Cmd_LevelShot_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_LevelShot_f
CALLV
pop
ADDRGP4 $725
JUMPV
LABELV $724
line 1434
;1434:	else if (Q_stricmp(cmd, "follow") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $729
ARGP4
ADDRLP4 1072
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1072
INDIRI4
CNSTI4 0
NEI4 $727
line 1435
;1435:		Cmd_Follow_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Follow_f
CALLV
pop
ADDRGP4 $728
JUMPV
LABELV $727
line 1436
;1436:	else if (Q_stricmp(cmd, "follownext") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $732
ARGP4
ADDRLP4 1076
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1076
INDIRI4
CNSTI4 0
NEI4 $730
line 1437
;1437:		Cmd_FollowCycle_f(ent, 1);
ADDRLP4 1024
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 Cmd_FollowCycle_f
CALLV
pop
ADDRGP4 $731
JUMPV
LABELV $730
line 1438
;1438:	else if (Q_stricmp(cmd, "followprev") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $735
ARGP4
ADDRLP4 1080
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1080
INDIRI4
CNSTI4 0
NEI4 $733
line 1439
;1439:		Cmd_FollowCycle_f(ent, -1);
ADDRLP4 1024
INDIRP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 Cmd_FollowCycle_f
CALLV
pop
ADDRGP4 $734
JUMPV
LABELV $733
line 1440
;1440:	else if (Q_stricmp(cmd, "team") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $691
ARGP4
ADDRLP4 1084
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1084
INDIRI4
CNSTI4 0
NEI4 $736
line 1441
;1441:		Cmd_Team_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Team_f
CALLV
pop
ADDRGP4 $737
JUMPV
LABELV $736
line 1442
;1442:	else if (Q_stricmp(cmd, "where") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $740
ARGP4
ADDRLP4 1088
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1088
INDIRI4
CNSTI4 0
NEI4 $738
line 1443
;1443:		Cmd_Where_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Where_f
CALLV
pop
ADDRGP4 $739
JUMPV
LABELV $738
line 1444
;1444:	else if (Q_stricmp(cmd, "callvote") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $743
ARGP4
ADDRLP4 1092
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1092
INDIRI4
CNSTI4 0
NEI4 $741
line 1445
;1445:		Cmd_CallVote_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_CallVote_f
CALLV
pop
ADDRGP4 $742
JUMPV
LABELV $741
line 1446
;1446:	else if (Q_stricmp(cmd, "vote") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $746
ARGP4
ADDRLP4 1096
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1096
INDIRI4
CNSTI4 0
NEI4 $744
line 1447
;1447:		Cmd_Vote_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Vote_f
CALLV
pop
ADDRGP4 $745
JUMPV
LABELV $744
line 1448
;1448:	else if (Q_stricmp(cmd, "gc") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $749
ARGP4
ADDRLP4 1100
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1100
INDIRI4
CNSTI4 0
NEI4 $747
line 1449
;1449:		Cmd_GameCommand_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_GameCommand_f
CALLV
pop
ADDRGP4 $748
JUMPV
LABELV $747
line 1450
;1450:	else if (Q_stricmp(cmd, "setviewpos") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $752
ARGP4
ADDRLP4 1104
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1104
INDIRI4
CNSTI4 0
NEI4 $750
line 1451
;1451:		Cmd_SetViewpos_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_SetViewpos_f
CALLV
pop
ADDRGP4 $751
JUMPV
LABELV $750
line 1452
;1452:	else if (Q_stricmp(cmd, "stats") == 0)
ADDRLP4 0
ARGP4
ADDRGP4 $755
ARGP4
ADDRLP4 1108
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 1108
INDIRI4
CNSTI4 0
NEI4 $753
line 1453
;1453:		Cmd_Stats_f(ent);
ADDRLP4 1024
INDIRP4
ARGP4
ADDRGP4 Cmd_Stats_f
CALLV
pop
ADDRGP4 $754
JUMPV
LABELV $753
line 1455
;1454:	else
;1455:		trap_SendServerCommand(clientNum, va("print \"unknown cmd %s\n\"", cmd));
ADDRGP4 $756
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 1112
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 1112
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
LABELV $754
LABELV $751
LABELV $748
LABELV $745
LABELV $742
LABELV $739
LABELV $737
LABELV $734
LABELV $731
LABELV $728
LABELV $725
LABELV $723
LABELV $720
LABELV $717
LABELV $714
LABELV $711
LABELV $708
line 1456
;1456:}
LABELV $681
endproc ClientCommand 1116 12
import svf_self_portal2
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_TraceCapsule
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Print
import g_startingAmmo_hmg
import g_startingAmmo_cg
import g_startingAmmo_pl
import g_startingAmmo_ng
import g_startingAmmo_gh
import g_startingAmmo_bfg
import g_startingAmmo_pg
import g_startingAmmo_rg
import g_startingAmmo_lg
import g_startingAmmo_rl
import g_startingAmmo_gl
import g_startingAmmo_sg
import g_startingAmmo_mg
import g_startingAmmo_g
import g_startingWeapons
import armor_tiered
import g_rotation
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_predictPVS
import g_unlagged
import g_listEntity
import g_allowVote
import g_allowKill
import g_blood
import g_motd
import g_debugAlloc
import g_debugDamage
import g_debugMove
import g_inactivity
import g_respawn_delay_max
import g_respawn_delay_min
import g_weaponTeamRespawn
import g_weaponRespawn
import g_quadDamageFactor
import g_knockback
import g_gravity
import g_speed
import g_dedicated
import g_needpass
import g_filterBan
import g_banIPs
import g_password
import g_logSync
import g_log
import g_warmup
import g_teamForceBalance
import g_autoJoin
import g_friendlyFire
import g_synchronousClients
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_maxGameClients
import g_maxclients
import g_gametype
import sv_fps
import g_mapname
import g_cheats
import g_entities
import level
import AddTeamScore
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import G_MapExist
import G_LoadMap
import ParseMapRotation
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import UpdateTournamentInfo
import G_ClearClientSessionData
import G_WriteClientSessionData
import G_ReadClientSessionData
import G_InitSessionData
import G_WriteSessionData
import G_InitWorldSession
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_ResetFlags
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_BroadcastServerCommand
import G_Error
import G_Printf
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import MoveClientToIntermission
import G_StartKamikaze
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamConnectedCount
import TeamCount
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_prox
import fire_nail
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import TossClientSkulls
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import FinishSpawningItem
import G_SpawnItem
import LaunchItem
import Drop_Item
import SpawnTime
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $756
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 109
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $755
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $752
byte 1 115
byte 1 101
byte 1 116
byte 1 118
byte 1 105
byte 1 101
byte 1 119
byte 1 112
byte 1 111
byte 1 115
byte 1 0
align 1
LABELV $749
byte 1 103
byte 1 99
byte 1 0
align 1
LABELV $746
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $743
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $740
byte 1 119
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $735
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 112
byte 1 114
byte 1 101
byte 1 118
byte 1 0
align 1
LABELV $732
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 110
byte 1 101
byte 1 120
byte 1 116
byte 1 0
align 1
LABELV $729
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $726
byte 1 108
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $721
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $718
byte 1 110
byte 1 111
byte 1 99
byte 1 108
byte 1 105
byte 1 112
byte 1 0
align 1
LABELV $715
byte 1 110
byte 1 111
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $712
byte 1 103
byte 1 111
byte 1 100
byte 1 0
align 1
LABELV $709
byte 1 103
byte 1 105
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $701
byte 1 116
byte 1 101
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $698
byte 1 115
byte 1 97
byte 1 121
byte 1 95
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $695
byte 1 115
byte 1 97
byte 1 121
byte 1 0
align 1
LABELV $691
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $672
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 117
byte 1 115
byte 1 97
byte 1 103
byte 1 101
byte 1 58
byte 1 32
byte 1 115
byte 1 101
byte 1 116
byte 1 118
byte 1 105
byte 1 101
byte 1 119
byte 1 112
byte 1 111
byte 1 115
byte 1 32
byte 1 120
byte 1 32
byte 1 121
byte 1 32
byte 1 122
byte 1 32
byte 1 121
byte 1 97
byte 1 119
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $645
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 86
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 99
byte 1 97
byte 1 115
byte 1 116
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $644
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 78
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 97
byte 1 115
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 97
byte 1 116
byte 1 111
byte 1 114
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $641
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 86
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 97
byte 1 108
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 99
byte 1 97
byte 1 115
byte 1 116
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $638
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 78
byte 1 111
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 112
byte 1 114
byte 1 111
byte 1 103
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $629
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $619
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $617
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $612
byte 1 59
byte 1 0
align 1
LABELV $596
byte 1 32
byte 1 0
align 1
LABELV $589
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 78
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 32
byte 1 97
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 97
byte 1 115
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 97
byte 1 116
byte 1 111
byte 1 114
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $586
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 104
byte 1 97
byte 1 118
byte 1 101
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 105
byte 1 109
byte 1 117
byte 1 109
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $583
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 80
byte 1 114
byte 1 101
byte 1 118
byte 1 105
byte 1 111
byte 1 117
byte 1 115
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 101
byte 1 120
byte 1 101
byte 1 99
byte 1 117
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 94
byte 1 49
byte 1 46
byte 1 94
byte 1 55
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $577
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 65
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 112
byte 1 114
byte 1 111
byte 1 103
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $573
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 86
byte 1 111
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 100
byte 1 32
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $566
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 78
byte 1 111
byte 1 32
byte 1 115
byte 1 117
byte 1 99
byte 1 104
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 101
byte 1 114
byte 1 118
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $561
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $560
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 73
byte 1 110
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 37
byte 1 105
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $556
byte 1 99
byte 1 116
byte 1 102
byte 1 0
align 1
LABELV $553
byte 1 116
byte 1 100
byte 1 109
byte 1 0
align 1
LABELV $550
byte 1 100
byte 1 117
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $547
byte 1 102
byte 1 102
byte 1 97
byte 1 0
align 1
LABELV $542
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 73
byte 1 110
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 10
byte 1 86
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 10
byte 1 32
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 60
byte 1 110
byte 1 124
byte 1 102
byte 1 102
byte 1 97
byte 1 124
byte 1 100
byte 1 117
byte 1 101
byte 1 108
byte 1 124
byte 1 116
byte 1 100
byte 1 109
byte 1 124
byte 1 99
byte 1 116
byte 1 102
byte 1 62
byte 1 10
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 44
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 32
byte 1 60
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 62
byte 1 44
byte 1 32
byte 1 114
byte 1 111
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 32
byte 1 91
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 93
byte 1 44
byte 1 32
byte 1 110
byte 1 101
byte 1 120
byte 1 116
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 32
byte 1 107
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 60
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 62
byte 1 44
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 107
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 60
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 110
byte 1 117
byte 1 109
byte 1 62
byte 1 10
byte 1 32
byte 1 103
byte 1 95
byte 1 117
byte 1 110
byte 1 108
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 60
byte 1 48
byte 1 124
byte 1 49
byte 1 62
byte 1 44
byte 1 32
byte 1 103
byte 1 95
byte 1 119
byte 1 97
byte 1 114
byte 1 109
byte 1 117
byte 1 112
byte 1 32
byte 1 60
byte 1 45
byte 1 49
byte 1 124
byte 1 48
byte 1 124
byte 1 115
byte 1 101
byte 1 99
byte 1 111
byte 1 110
byte 1 100
byte 1 115
byte 1 62
byte 1 10
byte 1 32
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 32
byte 1 60
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 62
byte 1 44
byte 1 32
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 32
byte 1 60
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 115
byte 1 62
byte 1 44
byte 1 32
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 32
byte 1 60
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 115
byte 1 62
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $526
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 73
byte 1 110
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $520
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $519
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $518
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $517
byte 1 103
byte 1 95
byte 1 119
byte 1 97
byte 1 114
byte 1 109
byte 1 117
byte 1 112
byte 1 0
align 1
LABELV $516
byte 1 103
byte 1 95
byte 1 117
byte 1 110
byte 1 108
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $515
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $514
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 107
byte 1 105
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $513
byte 1 107
byte 1 105
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $512
byte 1 110
byte 1 101
byte 1 120
byte 1 116
byte 1 109
byte 1 97
byte 1 112
byte 1 0
align 1
LABELV $511
byte 1 114
byte 1 111
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $510
byte 1 109
byte 1 97
byte 1 112
byte 1 0
align 1
LABELV $509
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $508
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $501
byte 1 114
byte 1 101
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $500
byte 1 115
byte 1 101
byte 1 97
byte 1 114
byte 1 99
byte 1 104
byte 1 32
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 100
byte 1 101
byte 1 115
byte 1 116
byte 1 114
byte 1 111
byte 1 121
byte 1 0
align 1
LABELV $499
byte 1 103
byte 1 117
byte 1 97
byte 1 114
byte 1 100
byte 1 32
byte 1 108
byte 1 111
byte 1 99
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $498
byte 1 99
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 32
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $497
byte 1 99
byte 1 111
byte 1 109
byte 1 101
byte 1 32
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $496
byte 1 104
byte 1 111
byte 1 108
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $495
byte 1 104
byte 1 111
byte 1 108
byte 1 100
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $492
byte 1 116
byte 1 101
byte 1 108
byte 1 108
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $472
byte 1 37
byte 1 115
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $466
byte 1 25
byte 1 91
byte 1 37
byte 1 115
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 25
byte 1 93
byte 1 25
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $465
byte 1 25
byte 1 91
byte 1 37
byte 1 115
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 25
byte 1 93
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 25
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $460
byte 1 25
byte 1 40
byte 1 37
byte 1 115
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 25
byte 1 41
byte 1 25
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $459
byte 1 25
byte 1 40
byte 1 37
byte 1 115
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 25
byte 1 41
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 25
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $456
byte 1 115
byte 1 97
byte 1 121
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $454
byte 1 37
byte 1 115
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 25
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $453
byte 1 115
byte 1 97
byte 1 121
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $442
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $441
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $440
byte 1 37
byte 1 115
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 37
byte 1 115
byte 1 34
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $412
byte 1 67
byte 1 109
byte 1 100
byte 1 95
byte 1 70
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 102
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 100
byte 1 105
byte 1 114
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $381
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 77
byte 1 97
byte 1 121
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 109
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 110
byte 1 32
byte 1 111
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 112
byte 1 101
byte 1 114
byte 1 32
byte 1 53
byte 1 32
byte 1 115
byte 1 101
byte 1 99
byte 1 111
byte 1 110
byte 1 100
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $376
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 83
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 97
byte 1 116
byte 1 111
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $374
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $372
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $370
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $301
byte 1 115
byte 1 0
align 1
LABELV $300
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 97
byte 1 116
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $297
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 50
byte 1 0
align 1
LABELV $294
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 49
byte 1 0
align 1
LABELV $290
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $289
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 98
byte 1 111
byte 1 97
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $283
byte 1 98
byte 1 0
align 1
LABELV $282
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 0
align 1
LABELV $278
byte 1 114
byte 1 0
align 1
LABELV $277
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $270
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 109
byte 1 97
byte 1 110
byte 1 121
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $265
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 109
byte 1 97
byte 1 110
byte 1 121
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $254
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 106
byte 1 111
byte 1 105
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 98
byte 1 97
byte 1 116
byte 1 116
byte 1 108
byte 1 101
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $251
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 106
byte 1 111
byte 1 105
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 97
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $248
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 106
byte 1 111
byte 1 105
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 94
byte 1 52
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 94
byte 1 55
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $245
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 106
byte 1 111
byte 1 105
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 94
byte 1 49
byte 1 114
byte 1 101
byte 1 100
byte 1 94
byte 1 55
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $236
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 75
byte 1 105
byte 1 108
byte 1 108
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 101
byte 1 110
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 115
byte 1 101
byte 1 114
byte 1 118
byte 1 101
byte 1 114
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $227
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $226
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 116
byte 1 97
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $222
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $221
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 84
byte 1 104
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 109
byte 1 117
byte 1 115
byte 1 116
byte 1 32
byte 1 98
byte 1 101
byte 1 32
byte 1 101
byte 1 120
byte 1 101
byte 1 99
byte 1 117
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 97
byte 1 32
byte 1 108
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $212
byte 1 110
byte 1 111
byte 1 99
byte 1 108
byte 1 105
byte 1 112
byte 1 32
byte 1 79
byte 1 78
byte 1 10
byte 1 0
align 1
LABELV $211
byte 1 110
byte 1 111
byte 1 99
byte 1 108
byte 1 105
byte 1 112
byte 1 32
byte 1 79
byte 1 70
byte 1 70
byte 1 10
byte 1 0
align 1
LABELV $205
byte 1 110
byte 1 111
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 79
byte 1 78
byte 1 10
byte 1 0
align 1
LABELV $204
byte 1 110
byte 1 111
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 79
byte 1 70
byte 1 70
byte 1 10
byte 1 0
align 1
LABELV $198
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 34
byte 1 0
align 1
LABELV $197
byte 1 103
byte 1 111
byte 1 100
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 32
byte 1 79
byte 1 78
byte 1 10
byte 1 0
align 1
LABELV $196
byte 1 103
byte 1 111
byte 1 100
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 32
byte 1 79
byte 1 70
byte 1 70
byte 1 10
byte 1 0
align 1
LABELV $184
byte 1 97
byte 1 115
byte 1 115
byte 1 105
byte 1 115
byte 1 116
byte 1 0
align 1
LABELV $181
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $178
byte 1 103
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 108
byte 1 101
byte 1 116
byte 1 97
byte 1 119
byte 1 97
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $175
byte 1 105
byte 1 109
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 105
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $172
byte 1 101
byte 1 120
byte 1 99
byte 1 101
byte 1 108
byte 1 108
byte 1 101
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $166
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $156
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 0
align 1
LABELV $150
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 0
align 1
LABELV $144
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $141
byte 1 97
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $135
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 85
byte 1 115
byte 1 101
byte 1 114
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 115
byte 1 101
byte 1 114
byte 1 118
byte 1 101
byte 1 114
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $125
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $122
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 115
byte 1 108
byte 1 111
byte 1 116
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $97
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 109
byte 1 117
byte 1 115
byte 1 116
byte 1 32
byte 1 98
byte 1 101
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 117
byte 1 115
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $94
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 67
byte 1 104
byte 1 101
byte 1 97
byte 1 116
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 101
byte 1 110
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 115
byte 1 101
byte 1 114
byte 1 118
byte 1 101
byte 1 114
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $84
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $77
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $57
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 0
