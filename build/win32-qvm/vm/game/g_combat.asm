export ScorePlum
code
proc ScorePlum 12 8
file "..\..\..\..\code\game\g_combat.c"
line 13
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// g_combat.c
;4:
;5:#include "g_local.h"
;6:
;7:
;8:/*
;9:============
;10:ScorePlum
;11:============
;12:*/
;13:void ScorePlum( gentity_t *ent, vec3_t origin, int score ) {
line 16
;14:	gentity_t *plum;
;15:
;16:	plum = G_TempEntity( origin, EV_SCOREPLUM );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 65
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 18
;17:	// only send this temp entity to a single client
;18:	plum->r.svFlags |= SVF_SINGLECLIENT;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 19
;19:	plum->r.singleClient = ent->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 428
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 21
;20:	//
;21:	plum->s.otherEntityNum = ent->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 22
;22:	plum->s.time = score;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 23
;23:}
LABELV $55
endproc ScorePlum 12 8
export AddScore
proc AddScore 4 12
line 32
;24:
;25:/*
;26:============
;27:AddScore
;28:
;29:Adds score to both the client and his team
;30:============
;31:*/
;32:void AddScore( gentity_t *ent, vec3_t origin, int score ) {
line 33
;33:	if ( !ent->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $57
line 34
;34:		return;
ADDRGP4 $56
JUMPV
LABELV $57
line 37
;35:	}
;36:	// no scoring during pre-match warmup
;37:	if ( level.warmupTime ) {
ADDRGP4 level+16
INDIRI4
CNSTI4 0
EQI4 $59
line 38
;38:		return;
ADDRGP4 $56
JUMPV
LABELV $59
line 41
;39:	}
;40:	// show score plum
;41:	ScorePlum(ent, origin, score);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 ScorePlum
CALLV
pop
line 43
;42:	//
;43:	ent->client->ps.persistant[PERS_SCORE] += score;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 248
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 44
;44:	if ( g_gametype.integer == GT_TEAM ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $62
line 45
;45:		AddTeamScore( origin, ent->client->ps.persistant[PERS_TEAM], score );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 AddTeamScore
CALLV
pop
line 46
;46:	}
LABELV $62
line 47
;47:	CalculateRanks();
ADDRGP4 CalculateRanks
CALLV
pop
line 48
;48:}
LABELV $56
endproc AddScore 4 12
export TossClientItems
proc TossClientItems 40 12
line 57
;49:
;50:/*
;51:=================
;52:TossClientItems
;53:
;54:Toss the weapon and powerups for the killed player
;55:=================
;56:*/
;57:void TossClientItems( gentity_t *self ) {
line 65
;58:	gitem_t		*item;
;59:	int			weapon;
;60:	float		angle;
;61:	int			i;
;62:	gentity_t	*drop;
;63:
;64:	// drop the weapon if not a gauntlet or machinegun
;65:	weapon = self->s.weapon;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 71
;66:
;67:	// make a special check to see if they are changing to a new
;68:	// weapon that isn't the mg or gauntlet.  Without this, a client
;69:	// can pick up a weapon, be killed, and not drop the weapon because
;70:	// their weapon change hasn't completed yet and they are still holding the MG.
;71:	if ( weapon == WP_MACHINEGUN || weapon == WP_GRAPPLING_HOOK ) {
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $68
ADDRLP4 12
INDIRI4
CNSTI4 10
NEI4 $66
LABELV $68
line 72
;72:		if ( self->client->ps.weaponstate == WEAPON_DROPPING ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $69
line 73
;73:			weapon = self->client->pers.cmd.weapon;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 492
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 74
;74:		}
LABELV $69
line 75
;75:		if ( !( self->client->ps.stats[STAT_WEAPONS] & ( 1 << weapon ) ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 12
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $71
line 76
;76:			weapon = WP_NONE;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 77
;77:		}
LABELV $71
line 78
;78:	}
LABELV $66
line 80
;79:
;80:	if ( weapon > WP_MACHINEGUN && weapon != WP_GRAPPLING_HOOK && 
ADDRLP4 12
INDIRI4
CNSTI4 2
LEI4 $73
ADDRLP4 12
INDIRI4
CNSTI4 10
EQI4 $73
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $73
line 81
;81:		self->client->ps.ammo[ weapon ] ) {
line 83
;82:		// find the item type for this weapon
;83:		item = BG_FindItemForWeapon( weapon );
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 28
INDIRP4
ASGNP4
line 86
;84:
;85:		// spawn the item
;86:		drop = Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 32
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
ASGNP4
line 89
;87:
;88:		// for pickup prediction
;89:		drop->s.time2 = item->quantity;
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 90
;90:	}
LABELV $73
line 93
;91:
;92:	// drop all the powerups if not in teamplay
;93:	if ( g_gametype.integer != GT_TEAM ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
EQI4 $75
line 94
;94:		angle = 45;
ADDRLP4 16
CNSTF4 1110704128
ASGNF4
line 95
;95:		for ( i = 1 ; i < PW_NUM_POWERUPS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $78
line 96
;96:			if ( self->client->ps.powerups[ i ] > level.time ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $82
line 97
;97:				item = BG_FindItemForPowerup( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 28
INDIRP4
ASGNP4
line 98
;98:				if ( !item ) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $85
line 99
;99:					continue;
ADDRGP4 $79
JUMPV
LABELV $85
line 101
;100:				}
;101:				drop = Drop_Item( self, item, angle );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
ASGNP4
line 103
;102:				// decide how many seconds it has left
;103:				drop->count = ( self->client->ps.powerups[ i ] - level.time ) / 1000;
ADDRLP4 4
INDIRP4
CNSTI4 760
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 104
;104:				if ( drop->count < 1 ) {
ADDRLP4 4
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 1
GEI4 $88
line 105
;105:					drop->count = 1;
ADDRLP4 4
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 1
ASGNI4
line 106
;106:				}
LABELV $88
line 108
;107:				// for pickup prediction
;108:				drop->s.time2 = drop->count;
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 109
;109:				angle += 45;
ADDRLP4 16
ADDRLP4 16
INDIRF4
CNSTF4 1110704128
ADDF4
ASGNF4
line 110
;110:			}
LABELV $82
line 111
;111:		}
LABELV $79
line 95
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 15
LTI4 $78
line 112
;112:	}
LABELV $75
line 113
;113:}
LABELV $65
endproc TossClientItems 40 12
export TossClientSkulls
proc TossClientSkulls 56 16
line 123
;114:
;115:
;116:/*
;117:=================
;118:TossClientSkulls
;119:=================
;120:*/
;121:extern gentity_t	*neutralObelisk;
;122:
;123:void TossClientSkulls( gentity_t *self ) {
line 130
;124:	gitem_t		*item;
;125:	gentity_t	*drop;
;126:	vec3_t		velocity;
;127:	vec3_t		angles;
;128:	vec3_t		origin;
;129:
;130:	self->client->ps.generic1 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 440
ADDP4
CNSTI4 0
ASGNI4
line 134
;131:
;132:	// this should never happen but we should never
;133:	// get the server to crash due to skull being spawned in
;134:	if (!G_EntitiesFree()) {
ADDRLP4 44
ADDRGP4 G_EntitiesFree
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $91
line 135
;135:		return;
ADDRGP4 $90
JUMPV
LABELV $91
line 138
;136:	}
;137:
;138:	if( self->client->sess.sessionTeam == TEAM_RED ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 1
NEI4 $93
line 139
;139:		item = BG_FindItem( "Red Skull" );
ADDRGP4 $95
ARGP4
ADDRLP4 48
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
ASGNP4
line 140
;140:	}
ADDRGP4 $94
JUMPV
LABELV $93
line 141
;141:	else {
line 142
;142:		item = BG_FindItem( "Blue Skull" );
ADDRGP4 $96
ARGP4
ADDRLP4 48
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
ASGNP4
line 143
;143:	}
LABELV $94
line 145
;144:
;145:	angles[YAW] = (float)(level.time % 360);
ADDRLP4 16+4
ADDRGP4 level+32
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 146
;146:	angles[PITCH] = 0;	// always forward
ADDRLP4 16
CNSTF4 0
ASGNF4
line 147
;147:	angles[ROLL] = 0;
ADDRLP4 16+8
CNSTF4 0
ASGNF4
line 149
;148:
;149:	AngleVectors( angles, velocity, NULL, NULL );
ADDRLP4 16
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 150
;150:	VectorScale( velocity, 150, velocity );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
line 151
;151:	velocity[2] += 200 + crandom() * 50;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1120403456
MULF4
CNSTF4 1128792064
ADDF4
ADDF4
ASGNF4
line 153
;152:
;153:	if( neutralObelisk ) {
ADDRGP4 neutralObelisk
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $105
line 154
;154:		VectorCopy( neutralObelisk->s.pos.trBase, origin );
ADDRLP4 28
ADDRGP4 neutralObelisk
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 155
;155:		origin[2] += 44;
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1110441984
ADDF4
ASGNF4
line 156
;156:	} else {
ADDRGP4 $106
JUMPV
LABELV $105
line 157
;157:		VectorClear( origin ) ;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 28+4
CNSTF4 0
ASGNF4
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 158
;158:	}
LABELV $106
line 160
;159:
;160:	drop = LaunchItem( item, origin, velocity );
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 52
ADDRGP4 LaunchItem
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 162
;161:
;162:	drop->nextthink = level.time + g_cubeTimeout.integer * 1000;
ADDRLP4 12
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_cubeTimeout+12
INDIRI4
CNSTI4 1000
MULI4
ADDI4
ASGNI4
line 163
;163:	drop->think = G_FreeEntity;
ADDRLP4 12
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 164
;164:	drop->spawnflags = self->client->sess.sessionTeam;
ADDRLP4 12
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ASGNI4
line 165
;165:}
LABELV $90
endproc TossClientSkulls 56 16
export TossClientPersistantPowerups
proc TossClientPersistantPowerups 12 4
line 173
;166:
;167:
;168:/*
;169:=================
;170:TossClientPersistantPowerups
;171:=================
;172:*/
;173:void TossClientPersistantPowerups( gentity_t *ent ) {
line 176
;174:	gentity_t	*powerup;
;175:
;176:	if( !ent->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $113
line 177
;177:		return;
ADDRGP4 $112
JUMPV
LABELV $113
line 180
;178:	}
;179:
;180:	if( !ent->client->persistantPowerup ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $115
line 181
;181:		return;
ADDRGP4 $112
JUMPV
LABELV $115
line 184
;182:	}
;183:
;184:	powerup = ent->client->persistantPowerup;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
line 186
;185:
;186:	powerup->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 187
;187:	powerup->s.eFlags &= ~EF_NODRAW;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 188
;188:	powerup->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 189
;189:	trap_LinkEntity( powerup );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 191
;190:
;191:	ent->client->ps.stats[STAT_PERSISTANT_POWERUP] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 0
ASGNI4
line 192
;192:	ent->client->persistantPowerup = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 776
ADDP4
CNSTP4 0
ASGNP4
line 193
;193:}
LABELV $112
endproc TossClientPersistantPowerups 12 4
export LookAtKiller
proc LookAtKiller 28 4
line 201
;194:
;195:
;196:/*
;197:==================
;198:LookAtKiller
;199:==================
;200:*/
;201:void LookAtKiller( gentity_t *self, gentity_t *inflictor, gentity_t *attacker ) {
line 204
;202:	vec3_t		dir;
;203:
;204:	if ( attacker && attacker != self ) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 12
INDIRU4
CNSTU4 0
EQU4 $118
ADDRLP4 12
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $118
line 205
;205:		VectorSubtract (attacker->s.pos.trBase, self->s.pos.trBase, dir);
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 206
;206:	} else if ( inflictor && inflictor != self ) {
ADDRGP4 $119
JUMPV
LABELV $118
ADDRLP4 16
ADDRFP4 4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $122
ADDRLP4 16
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $122
line 207
;207:		VectorSubtract (inflictor->s.pos.trBase, self->s.pos.trBase, dir);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 208
;208:	} else {
ADDRGP4 $123
JUMPV
LABELV $122
line 209
;209:		self->client->ps.stats[STAT_DEAD_YAW] = self->s.angles[YAW];
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 210
;210:		return;
ADDRGP4 $117
JUMPV
LABELV $123
LABELV $119
line 213
;211:	}
;212:
;213:	self->client->ps.stats[STAT_DEAD_YAW] = vectoyaw ( dir );
ADDRLP4 0
ARGP4
ADDRLP4 20
ADDRGP4 vectoyaw
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 20
INDIRF4
CVFI4 4
ASGNI4
line 214
;214:}
LABELV $117
endproc LookAtKiller 28 4
export GibEntity
proc GibEntity 12 12
line 221
;215:
;216:/*
;217:==================
;218:GibEntity
;219:==================
;220:*/
;221:void GibEntity( gentity_t *self, int killer ) {
line 226
;222:	gentity_t *ent;
;223:	int i;
;224:
;225:	//if this entity still has kamikaze
;226:	if (self->s.eFlags & EF_KAMIKAZE) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $127
line 228
;227:		// check if there is a kamikaze timer around for this owner
;228:		for (i = 0; i < level.num_entities; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $132
JUMPV
LABELV $129
line 229
;229:			ent = &g_entities[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 230
;230:			if (!ent->inuse)
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 0
NEI4 $134
line 231
;231:				continue;
ADDRGP4 $130
JUMPV
LABELV $134
line 232
;232:			if (ent->activator != self)
ADDRLP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $136
line 233
;233:				continue;
ADDRGP4 $130
JUMPV
LABELV $136
line 234
;234:			if (strcmp(ent->classname, "kamikaze timer"))
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $140
ARGP4
ADDRLP4 8
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $138
line 235
;235:				continue;
ADDRGP4 $130
JUMPV
LABELV $138
line 236
;236:			G_FreeEntity(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 237
;237:			break;
ADDRGP4 $131
JUMPV
LABELV $130
line 228
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $132
ADDRLP4 4
INDIRI4
ADDRGP4 level+12
INDIRI4
LTI4 $129
LABELV $131
line 239
;238:		}
;239:	}
LABELV $127
line 241
;240:
;241:	G_AddEvent( self, EV_GIB_PLAYER, killer );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 242
;242:	self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 243
;243:	self->s.eType = ET_INVISIBLE;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 244
;244:	self->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 245
;245:}
LABELV $126
endproc GibEntity 12 12
export body_die
proc body_die 0 8
line 252
;246:
;247:/*
;248:==================
;249:body_die
;250:==================
;251:*/
;252:void body_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath ) {
line 253
;253:	if ( self->health > GIB_HEALTH ) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 -40
LEI4 $142
line 254
;254:		return;
ADDRGP4 $141
JUMPV
LABELV $142
line 256
;255:	}
;256:	if ( !g_blood.integer ) {
ADDRGP4 g_blood+12
INDIRI4
CNSTI4 0
NEI4 $144
line 257
;257:		self->health = GIB_HEALTH+1;
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 -39
ASGNI4
line 258
;258:		return;
ADDRGP4 $141
JUMPV
LABELV $144
line 261
;259:	}
;260:
;261:	GibEntity( self, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 GibEntity
CALLV
pop
line 262
;262:}
LABELV $141
endproc body_die 0 8
data
export modNames
align 4
LABELV modNames
address $147
address $148
address $149
address $150
address $151
address $152
address $153
address $154
address $155
address $156
address $157
address $158
address $159
address $160
address $161
address $162
address $163
address $164
address $165
address $166
address $167
address $168
address $169
address $170
address $171
address $172
address $173
address $174
address $175
address $176
address $177
address $178
address $179
address $180
export Kamikaze_DeathActivate
code
proc Kamikaze_DeathActivate 0 4
line 310
;263:
;264:
;265:// these are just for logging, the client prints its own messages
;266:char	*modNames[] = {
;267:	"MOD_UNKNOWN",
;268:	"MOD_SHOTGUN",
;269:	"MOD_GAUNTLET",
;270:	"MOD_MACHINEGUN",
;271:	"MOD_GRENADE",
;272:	"MOD_GRENADE_SPLASH",
;273:	"MOD_ROCKET",
;274:	"MOD_ROCKET_SPLASH",
;275:	"MOD_PLASMA",
;276:	"MOD_PLASMA_SPLASH",
;277:	"MOD_RAILGUN",
;278:	"MOD_LIGHTNING",
;279:	"MOD_BFG",
;280:	"MOD_BFG_SPLASH",
;281:	"MOD_WATER",
;282:	"MOD_SLIME",
;283:	"MOD_LAVA",
;284:	"MOD_CRUSH",
;285:	"MOD_TELEFRAG",
;286:	"MOD_FALLING",
;287:	"MOD_SUICIDE",
;288:	"MOD_TARGET_LASER",
;289:	"MOD_TRIGGER_HURT",
;290:	"MOD_NAIL",
;291:	"MOD_CHAINGUN",
;292:	"MOD_PROXIMITY_MINE",
;293:	"MOD_KAMIKAZE",
;294:	"MOD_JUICED",
;295:	"MOD_GRAPPLE",
;296:
;297:	"MOD_SWITCHTEAM",
;298:	"MOD_THAW",
;299:	"MOD_LIGHTNING_DISCHARGE",
;300:	"MOD_HMG",
;301:	"MOD_RAILGUN_HEADSHOT"
;302:};
;303:
;304:
;305:/*
;306:==================
;307:Kamikaze_DeathActivate
;308:==================
;309:*/
;310:void Kamikaze_DeathActivate( gentity_t *ent ) {
line 311
;311:	G_StartKamikaze(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_StartKamikaze
CALLV
pop
line 312
;312:	G_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 313
;313:}
LABELV $181
endproc Kamikaze_DeathActivate 0 4
export Kamikaze_DeathTimer
proc Kamikaze_DeathTimer 12 0
line 320
;314:
;315:/*
;316:==================
;317:Kamikaze_DeathTimer
;318:==================
;319:*/
;320:void Kamikaze_DeathTimer( gentity_t *self ) {
line 323
;321:	gentity_t *ent;
;322:
;323:	ent = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 324
;324:	ent->classname = "kamikaze timer";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $140
ASGNP4
line 325
;325:	VectorCopy(self->s.pos.trBase, ent->s.pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 326
;326:	ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 327
;327:	ent->think = Kamikaze_DeathActivate;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Kamikaze_DeathActivate
ASGNP4
line 328
;328:	ent->nextthink = level.time + 5 * 1000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 330
;329:
;330:	ent->activator = self;
ADDRLP4 0
INDIRP4
CNSTI4 772
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 331
;331:}
LABELV $182
endproc Kamikaze_DeathTimer 12 0
export CheckAlmostCapture
proc CheckAlmostCapture 52 12
line 339
;332:
;333:
;334:/*
;335:==================
;336:CheckAlmostCapture
;337:==================
;338:*/
;339:void CheckAlmostCapture( gentity_t *self, gentity_t *attacker ) {
line 345
;340:	gentity_t	*ent;
;341:	vec3_t		dir;
;342:	char		*classname;
;343:
;344:	// if this player was carrying a flag
;345:	if ( self->client->ps.powerups[PW_REDFLAG] ||
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 0
NEI4 $188
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 344
ADDP4
INDIRI4
CNSTI4 0
NEI4 $188
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 348
ADDP4
INDIRI4
CNSTI4 0
EQI4 $185
LABELV $188
line 347
;346:		self->client->ps.powerups[PW_BLUEFLAG] ||
;347:		self->client->ps.powerups[PW_NEUTRALFLAG] ) {
line 349
;348:		// get the goal flag this player should have been going for
;349:		if ( g_gametype.integer == GT_CTF ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
NEI4 $189
line 350
;350:			if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 2
NEI4 $192
line 351
;351:				classname = "team_CTF_blueflag";
ADDRLP4 4
ADDRGP4 $194
ASGNP4
line 352
;352:			}
ADDRGP4 $190
JUMPV
LABELV $192
line 353
;353:			else {
line 354
;354:				classname = "team_CTF_redflag";
ADDRLP4 4
ADDRGP4 $195
ASGNP4
line 355
;355:			}
line 356
;356:		}
ADDRGP4 $190
JUMPV
LABELV $189
line 357
;357:		else {
line 358
;358:			if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 2
NEI4 $196
line 359
;359:				classname = "team_CTF_redflag";
ADDRLP4 4
ADDRGP4 $195
ASGNP4
line 360
;360:			}
ADDRGP4 $197
JUMPV
LABELV $196
line 361
;361:			else {
line 362
;362:				classname = "team_CTF_blueflag";
ADDRLP4 4
ADDRGP4 $194
ASGNP4
line 363
;363:			}
LABELV $197
line 364
;364:		}
LABELV $190
line 365
;365:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
LABELV $198
line 367
;366:		do
;367:		{
line 368
;368:			ent = G_Find(ent, FOFS(classname), classname);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
ASGNP4
line 369
;369:		} while (ent && (ent->flags & FL_DROPPED_ITEM));
LABELV $199
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $201
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $198
LABELV $201
line 371
;370:		// if we found the destination flag and it's not picked up
;371:		if (ent && !(ent->r.svFlags & SVF_NOCLIENT) ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $202
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $202
line 373
;372:			// if the player was *very* close
;373:			VectorSubtract( self->client->ps.origin, ent->s.origin, dir );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 32
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 32
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ASGNF4
line 374
;374:			if ( VectorLength(dir) < 200 ) {
ADDRLP4 8
ARGP4
ADDRLP4 40
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 40
INDIRF4
CNSTF4 1128792064
GEF4 $206
line 375
;375:				self->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 376
;376:				if ( attacker->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $208
line 377
;377:					attacker->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 48
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 378
;378:				}
LABELV $208
line 379
;379:			}
LABELV $206
line 380
;380:		}
LABELV $202
line 381
;381:	}
LABELV $185
line 382
;382:}
LABELV $184
endproc CheckAlmostCapture 52 12
export CheckAlmostScored
proc CheckAlmostScored 44 12
line 389
;383:
;384:/*
;385:==================
;386:CheckAlmostScored
;387:==================
;388:*/
;389:void CheckAlmostScored( gentity_t *self, gentity_t *attacker ) {
line 395
;390:	gentity_t	*ent;
;391:	vec3_t		dir;
;392:	char		*classname;
;393:
;394:	// if the player was carrying cubes
;395:	if ( self->client->ps.generic1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
CNSTI4 0
EQI4 $211
line 396
;396:		if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 2
NEI4 $213
line 397
;397:			classname = "team_redobelisk";
ADDRLP4 16
ADDRGP4 $215
ASGNP4
line 398
;398:		} else {
ADDRGP4 $214
JUMPV
LABELV $213
line 399
;399:			classname = "team_blueobelisk";
ADDRLP4 16
ADDRGP4 $216
ASGNP4
line 400
;400:		}
LABELV $214
line 401
;401:		ent = G_Find(NULL, FOFS(classname), classname);
CNSTP4 0
ARGP4
CNSTI4 524
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 403
;402:		// if we found the destination obelisk
;403:		if ( ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $217
line 405
;404:			// if the player was *very* close
;405:			VectorSubtract( self->client->ps.origin, ent->s.origin, dir );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 24
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ASGNF4
line 406
;406:			if ( VectorLength(dir) < 200 ) {
ADDRLP4 4
ARGP4
ADDRLP4 32
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 32
INDIRF4
CNSTF4 1128792064
GEF4 $221
line 407
;407:				self->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 408
;408:				if ( attacker->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $223
line 409
;409:					attacker->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 410
;410:				}
LABELV $223
line 411
;411:			}
LABELV $221
line 412
;412:		}
LABELV $217
line 413
;413:	}
LABELV $211
line 414
;414:}
LABELV $210
endproc CheckAlmostScored 44 12
bss
align 4
LABELV $299
skip 4
export player_die
code
proc player_die 84 28
line 421
;415:
;416:/*
;417:==================
;418:player_die
;419:==================
;420:*/
;421:void player_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath ) {
line 429
;422:	gentity_t	*ent;
;423:	int			anim;
;424:	int			contents;
;425:	int			killer;
;426:	int			i;
;427:	char		*killerName, *obit;
;428:
;429:	if ( self->client->ps.pm_type == PM_DEAD ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $226
line 430
;430:		return;
ADDRGP4 $225
JUMPV
LABELV $226
line 433
;431:	}
;432:
;433:	if ( level.intermissiontime ) {
ADDRGP4 level+5520
INDIRI4
CNSTI4 0
EQI4 $228
line 434
;434:		return;
ADDRGP4 $225
JUMPV
LABELV $228
line 438
;435:	}
;436:
;437:	//unlag the client
;438:	G_UnTimeShiftClient( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_UnTimeShiftClient
CALLV
pop
line 441
;439:
;440:	// check for an almost capture
;441:	CheckAlmostCapture( self, attacker );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CheckAlmostCapture
CALLV
pop
line 443
;442:	// check for a player that almost brought in cubes
;443:	CheckAlmostScored( self, attacker );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CheckAlmostScored
CALLV
pop
line 445
;444:
;445:	if (self->client && self->client->hook) {
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $231
ADDRLP4 28
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 764
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $231
line 446
;446:		Weapon_HookFree(self->client->hook);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 764
ADDP4
INDIRP4
ARGP4
ADDRGP4 Weapon_HookFree
CALLV
pop
line 447
;447:	}
LABELV $231
line 448
;448:	if ((self->client->ps.eFlags & EF_TICKING) && self->activator) {
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $233
ADDRLP4 32
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $233
line 449
;449:		self->client->ps.eFlags &= ~EF_TICKING;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 450
;450:		self->activator->think = G_FreeEntity;
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 451
;451:		self->activator->nextthink = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 452
;452:	}
LABELV $233
line 453
;453:	self->client->ps.pm_type = PM_DEAD;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 455
;454:
;455:	if ( attacker ) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $236
line 456
;456:		killer = attacker->s.number;
ADDRLP4 4
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 457
;457:		if ( attacker->client ) {
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $238
line 458
;458:			killerName = attacker->client->pers.netname;
ADDRLP4 16
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ASGNP4
line 459
;459:		} else {
ADDRGP4 $237
JUMPV
LABELV $238
line 460
;460:			killerName = "<non-client>";
ADDRLP4 16
ADDRGP4 $240
ASGNP4
line 461
;461:		}
line 462
;462:	} else {
ADDRGP4 $237
JUMPV
LABELV $236
line 463
;463:		killer = ENTITYNUM_WORLD;
ADDRLP4 4
CNSTI4 1022
ASGNI4
line 464
;464:		killerName = "<world>";
ADDRLP4 16
ADDRGP4 $241
ASGNP4
line 465
;465:	}
LABELV $237
line 467
;466:
;467:	if ( killer < 0 || killer >= MAX_CLIENTS ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $244
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $242
LABELV $244
line 468
;468:		killer = ENTITYNUM_WORLD;
ADDRLP4 4
CNSTI4 1022
ASGNI4
line 469
;469:		killerName = "<world>";
ADDRLP4 16
ADDRGP4 $241
ASGNP4
line 470
;470:	}
LABELV $242
line 472
;471:
;472:	if ( (unsigned)meansOfDeath >= ARRAY_LEN( modNames ) ) {
ADDRFP4 16
INDIRI4
CVIU4 4
CNSTU4 34
LTU4 $245
line 473
;473:		obit = "<bad obituary>";
ADDRLP4 20
ADDRGP4 $247
ASGNP4
line 474
;474:	} else {
ADDRGP4 $246
JUMPV
LABELV $245
line 475
;475:		obit = modNames[ meansOfDeath ];
ADDRLP4 20
ADDRFP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 modNames
ADDP4
INDIRP4
ASGNP4
line 476
;476:	}
LABELV $246
line 478
;477:
;478:	G_LogPrintf("Kill: %i %i %i: %s killed %s by %s\n", 
ADDRGP4 $248
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRI4
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 483
;479:		killer, self->s.number, meansOfDeath, killerName, 
;480:		self->client->pers.netname, obit );
;481:
;482:	// broadcast the death event to everyone
;483:	ent = G_TempEntity( self->r.currentOrigin, EV_OBITUARY );
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 60
ARGI4
ADDRLP4 44
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 44
INDIRP4
ASGNP4
line 484
;484:	ent->s.eventParm = meansOfDeath;
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 16
INDIRI4
ASGNI4
line 485
;485:	ent->s.otherEntityNum = self - g_entities;
ADDRLP4 8
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 832
DIVI4
ASGNI4
line 486
;486:	ent->s.otherEntityNum2 = killer;
ADDRLP4 8
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 487
;487:	ent->r.svFlags = SVF_BROADCAST;	// send to everyone
ADDRLP4 8
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 32
ASGNI4
line 489
;488:
;489:	self->enemy = attacker;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 491
;490:
;491:	self->client->ps.persistant[PERS_KILLED]++;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 280
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 493
;492:
;493:	if (attacker && attacker->client) {
ADDRLP4 52
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $249
ADDRLP4 52
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $249
line 494
;494:		attacker->client->lastkilled_client = self->s.number;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 720
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 496
;495:
;496:		if ( attacker == self || OnSameTeam (self, attacker ) ) {
ADDRLP4 56
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CVPU4 4
ADDRLP4 60
INDIRP4
CVPU4 4
EQU4 $253
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $251
LABELV $253
line 497
;497:			AddScore( attacker, self->r.currentOrigin, -1 );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 498
;498:		} else {
ADDRGP4 $250
JUMPV
LABELV $251
line 499
;499:			AddScore( attacker, self->r.currentOrigin, 1 );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 501
;500:
;501:			if( meansOfDeath == MOD_GAUNTLET ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $254
line 504
;502:				
;503:				// play humiliation on player
;504:				attacker->client->ps.persistant[PERS_GAUNTLET_FRAG_COUNT]++;
ADDRLP4 68
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 300
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 507
;505:
;506:				// add the sprite over the player's head
;507:				attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 72
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 508
;508:				attacker->client->ps.eFlags |= EF_AWARD_GAUNTLET;
ADDRLP4 76
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 509
;509:				attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 748
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 512
;510:
;511:				// also play humiliation on target
;512:				self->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_GAUNTLETREWARD;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 2
BXORI4
ASGNI4
line 513
;513:			}
LABELV $254
line 517
;514:
;515:			// check for two kills in a short amount of time
;516:			// if this is close enough to the last kill, give a reward sound
;517:			if ( level.time - attacker->client->lastKillTime < CARNAGE_REWARD_TIME ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
SUBI4
CNSTI4 3000
GEI4 $257
line 519
;518:				// play excellent on player
;519:				attacker->client->ps.persistant[PERS_EXCELLENT_COUNT]++;
ADDRLP4 68
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 288
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 522
;520:
;521:				// add the sprite over the player's head
;522:				attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 72
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 523
;523:				attacker->client->ps.eFlags |= EF_AWARD_EXCELLENT;
ADDRLP4 76
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 524
;524:				attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 748
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 525
;525:			}
LABELV $257
line 526
;526:			attacker->client->lastKillTime = level.time;
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 756
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 528
;527:
;528:		}
line 529
;529:	} else {
ADDRGP4 $250
JUMPV
LABELV $249
line 530
;530:		AddScore( self, self->r.currentOrigin, -1 );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 531
;531:	}
LABELV $250
line 534
;532:
;533:	// Add team bonuses
;534:	Team_FragBonuses(self, inflictor, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Team_FragBonuses
CALLV
pop
line 537
;535:
;536:	// if I committed suicide, the flag does not fall, it returns.
;537:	if (meansOfDeath == MOD_SUICIDE) {
ADDRFP4 16
INDIRI4
CNSTI4 20
NEI4 $262
line 538
;538:		if ( self->client->ps.powerups[PW_NEUTRALFLAG] ) {		// only happens in One Flag
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 348
ADDP4
INDIRI4
CNSTI4 0
EQI4 $264
line 539
;539:			Team_ReturnFlag( TEAM_FREE );
CNSTI4 0
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 540
;540:			self->client->ps.powerups[PW_NEUTRALFLAG] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 348
ADDP4
CNSTI4 0
ASGNI4
line 541
;541:		} else if ( self->client->ps.powerups[PW_REDFLAG] ) {		// only happens in standard CTF
ADDRGP4 $265
JUMPV
LABELV $264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 0
EQI4 $266
line 542
;542:			Team_ReturnFlag( TEAM_RED );
CNSTI4 1
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 543
;543:			self->client->ps.powerups[PW_REDFLAG] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 340
ADDP4
CNSTI4 0
ASGNI4
line 544
;544:		} else if ( self->client->ps.powerups[PW_BLUEFLAG] ) {	// only happens in standard CTF
ADDRGP4 $267
JUMPV
LABELV $266
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 344
ADDP4
INDIRI4
CNSTI4 0
EQI4 $268
line 545
;545:			Team_ReturnFlag( TEAM_BLUE );
CNSTI4 2
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 546
;546:			self->client->ps.powerups[PW_BLUEFLAG] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 344
ADDP4
CNSTI4 0
ASGNI4
line 547
;547:		}
LABELV $268
LABELV $267
LABELV $265
line 548
;548:	}
LABELV $262
line 551
;549:
;550:	// if client is in a nodrop area, don't drop anything (but return CTF flags!)
;551:	contents = trap_PointContents( self->r.currentOrigin, -1 );
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 56
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 56
INDIRI4
ASGNI4
line 552
;552:	if ( !( contents & CONTENTS_NODROP )) {
ADDRLP4 12
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
NEU4 $270
line 553
;553:		TossClientItems( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossClientItems
CALLV
pop
line 554
;554:	}
ADDRGP4 $271
JUMPV
LABELV $270
line 555
;555:	else {
line 556
;556:		if ( self->client->ps.powerups[PW_NEUTRALFLAG] ) {		// only happens in One Flag
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 348
ADDP4
INDIRI4
CNSTI4 0
EQI4 $272
line 557
;557:			Team_ReturnFlag( TEAM_FREE );
CNSTI4 0
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 558
;558:		}
ADDRGP4 $273
JUMPV
LABELV $272
line 559
;559:		else if ( self->client->ps.powerups[PW_REDFLAG] ) {		// only happens in standard CTF
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 0
EQI4 $274
line 560
;560:			Team_ReturnFlag( TEAM_RED );
CNSTI4 1
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 561
;561:		}
ADDRGP4 $275
JUMPV
LABELV $274
line 562
;562:		else if ( self->client->ps.powerups[PW_BLUEFLAG] ) {	// only happens in standard CTF
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 344
ADDP4
INDIRI4
CNSTI4 0
EQI4 $276
line 563
;563:			Team_ReturnFlag( TEAM_BLUE );
CNSTI4 2
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 564
;564:		}
LABELV $276
LABELV $275
LABELV $273
line 565
;565:	}
LABELV $271
line 567
;566:
;567:	TossClientPersistantPowerups( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossClientPersistantPowerups
CALLV
pop
line 568
;568:	if( g_gametype.integer == GT_HARVESTER ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $278
line 569
;569:		TossClientSkulls( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossClientSkulls
CALLV
pop
line 570
;570:	}
LABELV $278
line 572
;571:
;572:	Cmd_Score_f( self );		// show scores
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Cmd_Score_f
CALLV
pop
line 575
;573:	// send updated scores to any clients that are following this one,
;574:	// or they would get stale scoreboards
;575:	for ( i = 0 ; i < level.maxclients ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $284
JUMPV
LABELV $281
line 578
;576:		gclient_t	*client;
;577:
;578:		client = &level.clients[i];
ADDRLP4 60
ADDRLP4 0
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 579
;579:		if ( client->pers.connected != CON_CONNECTED ) {
ADDRLP4 60
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $286
line 580
;580:			continue;
ADDRGP4 $282
JUMPV
LABELV $286
line 582
;581:		}
;582:		if ( client->sess.sessionTeam != TEAM_SPECTATOR ) {
ADDRLP4 60
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
EQI4 $288
line 583
;583:			continue;
ADDRGP4 $282
JUMPV
LABELV $288
line 585
;584:		}
;585:		if ( client->sess.spectatorClient == self->s.number ) {
ADDRLP4 60
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $290
line 586
;586:			Cmd_Score_f( g_entities + i );
ADDRLP4 0
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRGP4 Cmd_Score_f
CALLV
pop
line 587
;587:		}
LABELV $290
line 588
;588:	}
LABELV $282
line 575
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $284
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $281
line 590
;589:
;590:	self->takedamage = qtrue;	// can still be gibbed
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 592
;591:
;592:	self->s.weapon = WP_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 0
ASGNI4
line 593
;593:	self->s.powerups = 0;
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 0
ASGNI4
line 594
;594:	self->r.contents = CONTENTS_CORPSE;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 67108864
ASGNI4
line 596
;595:
;596:	self->s.angles[0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 0
ASGNF4
line 597
;597:	self->s.angles[2] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 0
ASGNF4
line 598
;598:	LookAtKiller (self, inflictor, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 LookAtKiller
CALLV
pop
line 600
;599:
;600:	VectorCopy( self->s.angles, self->client->ps.viewangles );
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 116
ADDP4
INDIRB
ASGNB 12
line 602
;601:
;602:	self->s.loopSound = 0;
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
CNSTI4 0
ASGNI4
line 604
;603:
;604:	self->r.maxs[2] = -8;
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 3238002688
ASGNF4
line 606
;605:
;606:	self->client->deathTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 732
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 609
;607:
;608:	// remove powerups
;609:	memset( self->client->ps.powerups, 0, sizeof(self->client->ps.powerups) );
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 612
;610:
;611:	// never gib in a nodrop
;612:	if ( (self->health <= GIB_HEALTH && !(contents & CONTENTS_NODROP) && g_blood.integer) || meansOfDeath == MOD_SUICIDE) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 -40
GTI4 $298
ADDRLP4 12
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
NEU4 $298
ADDRGP4 g_blood+12
INDIRI4
CNSTI4 0
NEI4 $296
LABELV $298
ADDRFP4 16
INDIRI4
CNSTI4 20
NEI4 $293
LABELV $296
line 614
;613:		// gib death
;614:		GibEntity( self, killer );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 GibEntity
CALLV
pop
line 615
;615:	} else {
ADDRGP4 $294
JUMPV
LABELV $293
line 619
;616:		// normal death
;617:		static int i;
;618:
;619:		switch ( i ) {
ADDRLP4 64
ADDRGP4 $299
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $302
ADDRLP4 64
INDIRI4
CNSTI4 1
EQI4 $303
ADDRLP4 64
INDIRI4
CNSTI4 2
EQI4 $304
ADDRGP4 $300
JUMPV
LABELV $302
line 621
;620:		case 0:
;621:			anim = BOTH_DEATH1;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 622
;622:			break;
ADDRGP4 $301
JUMPV
LABELV $303
line 624
;623:		case 1:
;624:			anim = BOTH_DEATH2;
ADDRLP4 24
CNSTI4 2
ASGNI4
line 625
;625:			break;
ADDRGP4 $301
JUMPV
LABELV $304
LABELV $300
line 628
;626:		case 2:
;627:		default:
;628:			anim = BOTH_DEATH3;
ADDRLP4 24
CNSTI4 4
ASGNI4
line 629
;629:			break;
LABELV $301
line 634
;630:		}
;631:
;632:		// for the no-blood option, we need to prevent the health
;633:		// from going to gib level
;634:		if ( self->health <= GIB_HEALTH ) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 -40
GTI4 $305
line 635
;635:			self->health = GIB_HEALTH+1;
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 -39
ASGNI4
line 636
;636:		}
LABELV $305
line 638
;637:
;638:		self->client->ps.legsAnim = 
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 128
BXORI4
ADDRLP4 24
INDIRI4
BORI4
ASGNI4
line 640
;639:			( ( self->client->ps.legsAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT ) | anim;
;640:		self->client->ps.torsoAnim = 
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 128
BXORI4
ADDRLP4 24
INDIRI4
BORI4
ASGNI4
line 643
;641:			( ( self->client->ps.torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT ) | anim;
;642:
;643:		G_AddEvent( self, EV_DEATH1 + i, killer );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $299
INDIRI4
CNSTI4 57
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 646
;644:
;645:		// the body can still be gibbed
;646:		self->die = body_die;
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ADDRGP4 body_die
ASGNP4
line 649
;647:
;648:		// globally cycle through the different death animations
;649:		i = ( i + 1 ) % 3;
ADDRLP4 76
ADDRGP4 $299
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 3
MODI4
ASGNI4
line 651
;650:
;651:		if (self->s.eFlags & EF_KAMIKAZE) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $307
line 652
;652:			Kamikaze_DeathTimer( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Kamikaze_DeathTimer
CALLV
pop
line 653
;653:		}
LABELV $307
line 654
;654:	}
LABELV $294
line 656
;655:
;656:	trap_LinkEntity (self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 658
;657:
;658:}
LABELV $225
endproc player_die 84 28
export CheckArmor
proc CheckArmor 32 4
line 667
;659:
;660:
;661:/*
;662:================
;663:CheckArmor
;664:================
;665:*/
;666:int CheckArmor (gentity_t *ent, int damage, int dflags)
;667:{
line 673
;668:	gclient_t	*client;
;669:	int			save;
;670:	int			count;
;671:	float		protection;
;672:
;673:	if (!damage)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $310
line 674
;674:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $309
JUMPV
LABELV $310
line 676
;675:
;676:	client = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 678
;677:
;678:	if (!client)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $312
line 679
;679:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $309
JUMPV
LABELV $312
line 681
;680:
;681:	if (dflags & DAMAGE_NO_ARMOR)
ADDRFP4 8
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $314
line 682
;682:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $309
JUMPV
LABELV $314
line 685
;683:
;684:	// armor
;685:	count = client->ps.stats[STAT_ARMOR];
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 686
;686:	protection = armor_tiered.integer ? bgArmor[client->ps.stats[STAT_ARMOR_TIER]].protection : ARMOR_PROTECTION;
ADDRGP4 armor_tiered+12
INDIRI4
CNSTI4 0
EQI4 $319
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 bgArmor+12
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $320
JUMPV
LABELV $319
ADDRLP4 16
CNSTF4 1059648963
ASGNF4
LABELV $320
ADDRLP4 12
ADDRLP4 16
INDIRF4
ASGNF4
line 688
;687:
;688:	save = ceil(damage * protection);
ADDRFP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ARGF4
ADDRLP4 20
ADDRGP4 ceil
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 20
INDIRF4
CVFI4 4
ASGNI4
line 689
;689:	if (save >= count)
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $321
line 690
;690:		save = count;
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
LABELV $321
line 692
;691:
;692:	if (!save)
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $323
line 693
;693:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $309
JUMPV
LABELV $323
line 695
;694:
;695:	client->ps.stats[STAT_ARMOR] -= save;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 697
;696:
;697:	if (client->ps.stats[STAT_ARMOR_TIER] && client->ps.stats[STAT_ARMOR] <= 0)
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 0
EQI4 $325
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
CNSTI4 0
GTI4 $325
line 698
;698:		client->ps.stats[STAT_ARMOR_TIER] = ARMOR_SHARD;
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 0
ASGNI4
LABELV $325
line 700
;699:
;700:	return save;
ADDRLP4 4
INDIRI4
RETI4
LABELV $309
endproc CheckArmor 32 4
export RaySphereIntersections
proc RaySphereIntersections 56 4
line 708
;701:}
;702:
;703:/*
;704:================
;705:RaySphereIntersections
;706:================
;707:*/
;708:int RaySphereIntersections( vec3_t origin, float radius, vec3_t point, vec3_t dir, vec3_t intersections[2] ) {
line 717
;709:	float b, c, d, t;
;710:
;711:	//	| origin - (point + t * dir) | = radius
;712:	//	a = dir[0]^2 + dir[1]^2 + dir[2]^2;
;713:	//	b = 2 * (dir[0] * (point[0] - origin[0]) + dir[1] * (point[1] - origin[1]) + dir[2] * (point[2] - origin[2]));
;714:	//	c = (point[0] - origin[0])^2 + (point[1] - origin[1])^2 + (point[2] - origin[2])^2 - radius^2;
;715:
;716:	// normalize dir so a = 1
;717:	VectorNormalize(dir);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 718
;718:	b = 2 * (dir[0] * (point[0] - origin[0]) + dir[1] * (point[1] - origin[1]) + dir[2] * (point[2] - origin[2]));
ADDRLP4 16
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
INDIRF4
SUBF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
CNSTF4 1073741824
MULF4
ASGNF4
line 719
;719:	c = (point[0] - origin[0]) * (point[0] - origin[0]) +
ADDRLP4 28
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 36
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ADDRLP4 40
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
SUBF4
ASGNF4
line 724
;720:		(point[1] - origin[1]) * (point[1] - origin[1]) +
;721:		(point[2] - origin[2]) * (point[2] - origin[2]) -
;722:		radius * radius;
;723:
;724:	d = b * b - 4 * c;
ADDRLP4 8
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 12
INDIRF4
CNSTF4 1082130432
MULF4
SUBF4
ASGNF4
line 725
;725:	if (d > 0) {
ADDRLP4 8
INDIRF4
CNSTF4 0
LEF4 $328
line 726
;726:		t = (- b + sqrt(d)) / 2;
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 48
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
NEGF4
ADDRLP4 48
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 727
;727:		VectorMA(point, t, dir, intersections[0]);
ADDRFP4 16
INDIRP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 728
;728:		t = (- b - sqrt(d)) / 2;
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 52
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
NEGF4
ADDRLP4 52
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ASGNF4
line 729
;729:		VectorMA(point, t, dir, intersections[1]);
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 16
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 16
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 730
;730:		return 2;
CNSTI4 2
RETI4
ADDRGP4 $327
JUMPV
LABELV $328
line 732
;731:	}
;732:	else if (d == 0) {
ADDRLP4 8
INDIRF4
CNSTF4 0
NEF4 $330
line 733
;733:		t = (- b ) / 2;
ADDRLP4 0
ADDRLP4 4
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
line 734
;734:		VectorMA(point, t, dir, intersections[0]);
ADDRFP4 16
INDIRP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 735
;735:		return 1;
CNSTI4 1
RETI4
ADDRGP4 $327
JUMPV
LABELV $330
line 737
;736:	}
;737:	return 0;
CNSTI4 0
RETI4
LABELV $327
endproc RaySphereIntersections 56 4
export G_InvulnerabilityEffect
proc G_InvulnerabilityEffect 64 20
line 746
;738:}
;739:
;740:
;741:/*
;742:================
;743:G_InvulnerabilityEffect
;744:================
;745:*/
;746:int G_InvulnerabilityEffect( gentity_t *targ, vec3_t dir, vec3_t point, vec3_t impactpoint, vec3_t bouncedir ) {
line 751
;747:	gentity_t	*impact;
;748:	vec3_t		intersections[2], vec;
;749:	int			n;
;750:
;751:	if ( !targ->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $333
line 752
;752:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $332
JUMPV
LABELV $333
line 754
;753:	}
;754:	VectorCopy(dir, vec);
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 755
;755:	VectorInverse(vec);
ADDRLP4 0
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 757
;756:	// sphere model radius = 42 units
;757:	n = RaySphereIntersections( targ->client->ps.origin, 42, point, vec, intersections);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTF4 1109917696
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 44
ADDRGP4 RaySphereIntersections
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 44
INDIRI4
ASGNI4
line 758
;758:	if (n > 0) {
ADDRLP4 40
INDIRI4
CNSTI4 0
LEI4 $335
line 759
;759:		impact = G_TempEntity( targ->client->ps.origin, EV_INVUL_IMPACT );
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 71
ARGI4
ADDRLP4 48
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 48
INDIRP4
ASGNP4
line 760
;760:		VectorSubtract(intersections[0], targ->client->ps.origin, vec);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 761
;761:		vectoangles(vec, impact->s.angles);
ADDRLP4 0
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 116
ADDP4
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 762
;762:		impact->s.angles[0] += 90;
ADDRLP4 56
ADDRLP4 36
INDIRP4
CNSTI4 116
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 763
;763:		if (impact->s.angles[0] > 360)
ADDRLP4 36
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $341
line 764
;764:			impact->s.angles[0] -= 360;
ADDRLP4 60
ADDRLP4 36
INDIRP4
CNSTI4 116
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
LABELV $341
line 765
;765:		if ( impactpoint ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $343
line 766
;766:			VectorCopy( intersections[0], impactpoint );
ADDRFP4 12
INDIRP4
ADDRLP4 12
INDIRB
ASGNB 12
line 767
;767:		}
LABELV $343
line 768
;768:		if ( bouncedir ) {
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $345
line 769
;769:			VectorCopy( vec, bouncedir );
ADDRFP4 16
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 12
line 770
;770:			VectorNormalize( bouncedir );
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 771
;771:		}
LABELV $345
line 772
;772:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $332
JUMPV
LABELV $335
line 774
;773:	}
;774:	else {
line 775
;775:		return qfalse;
CNSTI4 0
RETI4
LABELV $332
endproc G_InvulnerabilityEffect 64 20
export G_Damage
proc G_Damage 108 24
line 805
;776:	}
;777:}
;778:
;779:
;780:/*
;781:============
;782:G_Damage
;783:
;784:targ		entity that is being damaged
;785:inflictor	entity that is causing the damage
;786:attacker	entity that caused the inflictor to damage targ
;787:	example: targ=monster, inflictor=rocket, attacker=player
;788:
;789:dir			direction of the attack for knockback
;790:point		point at which the damage is being inflicted, used for headshots
;791:damage		amount of damage being inflicted
;792:knockback	force to be applied against targ as a result of the damage
;793:
;794:inflictor, attacker, dir, and point can be NULL for environmental effects
;795:
;796:dflags		these flags are used to control how T_Damage works
;797:	DAMAGE_RADIUS			damage was indirect (from a nearby explosion)
;798:	DAMAGE_NO_ARMOR			armor does not protect from this damage
;799:	DAMAGE_NO_KNOCKBACK		do not affect velocity, just view angles
;800:	DAMAGE_NO_PROTECTION	kills godmode, armor, everything
;801:============
;802:*/
;803:
;804:void G_Damage( gentity_t *targ, gentity_t *inflictor, gentity_t *attacker,
;805:			   vec3_t dir, vec3_t point, int damage, int dflags, int mod ) {
line 813
;806:	gclient_t	*client;
;807:	int			take;
;808:	int			asave;
;809:	int			knockback;
;810:	int			max;
;811:	vec3_t		bouncedir, impactpoint;
;812:
;813:	if (!targ->takedamage) {
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
NEI4 $348
line 814
;814:		return;
ADDRGP4 $347
JUMPV
LABELV $348
line 819
;815:	}
;816:
;817:	// the intermission has allready been qualified for, so don't
;818:	// allow any extra scoring
;819:	if ( level.intermissionQueued ) {
ADDRGP4 level+5516
INDIRI4
CNSTI4 0
EQI4 $350
line 820
;820:		return;
ADDRGP4 $347
JUMPV
LABELV $350
line 823
;821:	}
;822:
;823:	if ( targ->client && mod != MOD_JUICED) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $353
ADDRFP4 28
INDIRI4
CNSTI4 27
EQI4 $353
line 824
;824:		if ( targ->client->invulnerabilityTime > level.time) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $355
line 825
;825:			if ( dir && point ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $347
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $347
line 826
;826:				G_InvulnerabilityEffect( targ, dir, point, impactpoint, bouncedir );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 G_InvulnerabilityEffect
CALLI4
pop
line 827
;827:			}
line 828
;828:			return;
ADDRGP4 $347
JUMPV
LABELV $355
line 830
;829:		}
;830:	}
LABELV $353
line 832
;831:
;832:	if ( !inflictor ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $360
line 833
;833:		inflictor = &g_entities[ENTITYNUM_WORLD];
ADDRFP4 4
ADDRGP4 g_entities+850304
ASGNP4
line 834
;834:	}
LABELV $360
line 835
;835:	if ( !attacker ) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $363
line 836
;836:		attacker = &g_entities[ENTITYNUM_WORLD];
ADDRFP4 8
ADDRGP4 g_entities+850304
ASGNP4
line 837
;837:	}
LABELV $363
line 840
;838:
;839:	// shootable doors / buttons don't actually have any health
;840:	if ( targ->s.eType == ET_MOVER ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 4
NEI4 $366
line 841
;841:		if ( targ->use && targ->moverState == MOVER_POS1 ) {
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 708
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $347
ADDRLP4 44
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 0
NEI4 $347
line 842
;842:			targ->use( targ, inflictor, attacker );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 708
ADDP4
INDIRP4
CALLV
pop
line 843
;843:		}
line 844
;844:		return;
ADDRGP4 $347
JUMPV
LABELV $366
line 847
;845:	}
;846:
;847:	if ( g_gametype.integer == GT_OBELISK && CheckObeliskAttack( targ, attacker ) ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 7
NEI4 $370
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 CheckObeliskAttack
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $370
line 848
;848:		return;
ADDRGP4 $347
JUMPV
LABELV $370
line 853
;849:	}
;850:
;851:	// reduce damage by the attacker's handicap value
;852:	// unless they are rocket jumping
;853:	if ( attacker->client && attacker != targ ) {
ADDRLP4 48
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $373
ADDRLP4 48
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $373
line 854
;854:		max = attacker->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 16
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 855
;855:		if ( bg_itemlist[attacker->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD ) {
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 11
NEI4 $375
line 856
;856:			max /= 2;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 857
;857:		}
LABELV $375
line 858
;858:		damage = damage * max / 100;
ADDRFP4 20
ADDRFP4 20
INDIRI4
ADDRLP4 16
INDIRI4
MULI4
CNSTI4 100
DIVI4
ASGNI4
line 859
;859:	}
LABELV $373
line 861
;860:
;861:	client = targ->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 863
;862:
;863:	if ( client ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $378
line 864
;864:		if ( client->noclip ) {
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRI4
CNSTI4 0
EQI4 $380
line 865
;865:			return;
ADDRGP4 $347
JUMPV
LABELV $380
line 867
;866:		}
;867:	}
LABELV $378
line 869
;868:
;869:	if ( !dir ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $382
line 870
;870:		dflags |= DAMAGE_NO_KNOCKBACK;
ADDRFP4 24
ADDRFP4 24
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 871
;871:	} else {
ADDRGP4 $383
JUMPV
LABELV $382
line 872
;872:		VectorNormalize(dir);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 873
;873:	}
LABELV $383
line 875
;874:
;875:	knockback = damage;
ADDRLP4 4
ADDRFP4 20
INDIRI4
ASGNI4
line 876
;876:	if ( knockback > 200 ) {
ADDRLP4 4
INDIRI4
CNSTI4 200
LEI4 $384
line 877
;877:		knockback = 200;
ADDRLP4 4
CNSTI4 200
ASGNI4
line 878
;878:	}
LABELV $384
line 879
;879:	if ( targ->flags & FL_NO_KNOCKBACK ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $386
line 880
;880:		knockback = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 881
;881:	}
LABELV $386
line 882
;882:	if ( dflags & DAMAGE_NO_KNOCKBACK ) {
ADDRFP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $388
line 883
;883:		knockback = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 884
;884:	}
LABELV $388
line 887
;885:
;886:	// figure momentum add, even if the damage won't be taken
;887:	if ( knockback && targ->client ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $390
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $390
line 889
;888:		vec3_t	kvel;
;889:		float	mass = 200.0f;
ADDRLP4 64
CNSTF4 1128792064
ASGNF4
line 890
;890:		float	kval = g_knockback.value;
ADDRLP4 68
ADDRGP4 g_knockback+8
INDIRF4
ASGNF4
line 892
;891:
;892:		switch (mod) {
ADDRLP4 72
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 1
LTI4 $393
ADDRLP4 72
INDIRI4
CNSTI4 32
GTI4 $393
ADDRLP4 72
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $429-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $429
address $399
address $395
address $397
address $401
address $401
address $403
address $403
address $413
address $413
address $411
address $409
address $419
address $419
address $393
address $393
address $393
address $393
address $393
address $393
address $393
address $393
address $393
address $421
address $425
address $423
address $393
address $393
address $393
address $393
address $393
address $393
address $427
code
LABELV $395
line 894
;893:		case MOD_GAUNTLET:
;894:			kval *= g_knockback_g.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_g+8
INDIRF4
MULF4
ASGNF4
line 895
;895:			break;
ADDRGP4 $394
JUMPV
LABELV $397
line 897
;896:		case MOD_MACHINEGUN:
;897:			kval *= g_knockback_mg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_mg+8
INDIRF4
MULF4
ASGNF4
line 898
;898:			break;
ADDRGP4 $394
JUMPV
LABELV $399
line 900
;899:		case MOD_SHOTGUN:
;900:			kval *= g_knockback_sg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_sg+8
INDIRF4
MULF4
ASGNF4
line 901
;901:			break;
ADDRGP4 $394
JUMPV
LABELV $401
line 904
;902:		case MOD_GRENADE:
;903:		case MOD_GRENADE_SPLASH:
;904:			kval *= g_knockback_gl.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_gl+8
INDIRF4
MULF4
ASGNF4
line 905
;905:			break;
ADDRGP4 $394
JUMPV
LABELV $403
line 908
;906:		case MOD_ROCKET:
;907:		case MOD_ROCKET_SPLASH:
;908:			kval *= attacker == targ ? g_knockback_rl_self.value : g_knockback_rl.value;
ADDRFP4 8
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $407
ADDRLP4 76
ADDRGP4 g_knockback_rl_self+8
INDIRF4
ASGNF4
ADDRGP4 $408
JUMPV
LABELV $407
ADDRLP4 76
ADDRGP4 g_knockback_rl+8
INDIRF4
ASGNF4
LABELV $408
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRLP4 76
INDIRF4
MULF4
ASGNF4
line 909
;909:			break;
ADDRGP4 $394
JUMPV
LABELV $409
line 911
;910:		case MOD_LIGHTNING:
;911:			kval *= g_knockback_lg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_lg+8
INDIRF4
MULF4
ASGNF4
line 912
;912:			break;
ADDRGP4 $394
JUMPV
LABELV $411
line 914
;913:		case MOD_RAILGUN:
;914:			kval *= g_knockback_rg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_rg+8
INDIRF4
MULF4
ASGNF4
line 915
;915:			break;
ADDRGP4 $394
JUMPV
LABELV $413
line 918
;916:		case MOD_PLASMA:
;917:		case MOD_PLASMA_SPLASH:
;918:			kval *= attacker == targ ? g_knockback_pg_self.value : g_knockback_pg.value;
ADDRFP4 8
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $417
ADDRLP4 80
ADDRGP4 g_knockback_pg_self+8
INDIRF4
ASGNF4
ADDRGP4 $418
JUMPV
LABELV $417
ADDRLP4 80
ADDRGP4 g_knockback_pg+8
INDIRF4
ASGNF4
LABELV $418
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ASGNF4
line 919
;919:			break;
ADDRGP4 $394
JUMPV
LABELV $419
line 922
;920:		case MOD_BFG:
;921:		case MOD_BFG_SPLASH:
;922:			kval *= g_knockback_bfg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_bfg+8
INDIRF4
MULF4
ASGNF4
line 923
;923:			break;
ADDRGP4 $394
JUMPV
LABELV $421
line 925
;924:		case MOD_NAIL:
;925:			kval *= g_knockback_ng.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_ng+8
INDIRF4
MULF4
ASGNF4
line 926
;926:			break;
ADDRGP4 $394
JUMPV
LABELV $423
line 928
;927:		case MOD_PROXIMITY_MINE:
;928:			kval *= g_knockback_pl.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_pl+8
INDIRF4
MULF4
ASGNF4
line 929
;929:			break;
ADDRGP4 $394
JUMPV
LABELV $425
line 931
;930:		case MOD_CHAINGUN:
;931:			kval *= g_knockback_cg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_cg+8
INDIRF4
MULF4
ASGNF4
line 932
;932:			break;
ADDRGP4 $394
JUMPV
LABELV $427
line 934
;933:		case MOD_HMG:
;934:			kval *= g_knockback_hmg.value;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRGP4 g_knockback_hmg+8
INDIRF4
MULF4
ASGNF4
line 935
;935:			break;
LABELV $393
LABELV $394
line 938
;936:		}
;937:
;938:		kval *= (float)knockback;
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 940
;939:
;940:		VectorScale (dir, g_knockback.value * (float)knockback / mass, kvel);
ADDRLP4 76
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 4
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 84
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 52
ADDRLP4 76
INDIRP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDRLP4 84
INDIRF4
DIVF4
MULF4
ASGNF4
ADDRLP4 52+4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDRLP4 84
INDIRF4
DIVF4
MULF4
ASGNF4
ADDRLP4 52+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
ADDRLP4 64
INDIRF4
DIVF4
MULF4
ASGNF4
line 941
;941:		VectorAdd (targ->client->ps.velocity, kvel, targ->client->ps.velocity);
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 52
INDIRF4
ADDF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 52+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 96
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 52+8
INDIRF4
ADDF4
ASGNF4
line 945
;942:
;943:		// set the timer so that the other client can't cancel
;944:		// out the movement immediately
;945:		if ( !targ->client->ps.pm_time ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
NEI4 $438
line 948
;946:			int		t;
;947:
;948:			t = knockback * 2;
ADDRLP4 100
ADDRLP4 4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 949
;949:			if ( t < 50 ) {
ADDRLP4 100
INDIRI4
CNSTI4 50
GEI4 $440
line 950
;950:				t = 50;
ADDRLP4 100
CNSTI4 50
ASGNI4
line 951
;951:			}
LABELV $440
line 952
;952:			if ( t > 200 ) {
ADDRLP4 100
INDIRI4
CNSTI4 200
LEI4 $442
line 953
;953:				t = 200;
ADDRLP4 100
CNSTI4 200
ASGNI4
line 954
;954:			}
LABELV $442
line 955
;955:			targ->client->ps.pm_time = t;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 956
;956:			targ->client->ps.pm_flags |= PMF_TIME_KNOCKBACK;
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 957
;957:		}
LABELV $438
line 958
;958:	}
LABELV $390
line 961
;959:
;960:	// check for completely getting out of the damage
;961:	if ( !(dflags & DAMAGE_NO_PROTECTION) ) {
ADDRFP4 24
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $444
line 965
;962:
;963:		// if TF_NO_FRIENDLY_FIRE is set, don't do damage to the target
;964:		// if the attacker was on the same team
;965:		if ( mod != MOD_JUICED && targ != attacker && !(dflags & DAMAGE_NO_TEAM_PROTECTION) && OnSameTeam (targ, attacker)  ) {
ADDRFP4 28
INDIRI4
CNSTI4 27
EQI4 $446
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
ADDRLP4 56
INDIRP4
CVPU4 4
EQU4 $446
ADDRFP4 24
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $446
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $446
line 966
;966:			if ( !g_friendlyFire.integer ) {
ADDRGP4 g_friendlyFire+12
INDIRI4
CNSTI4 0
NEI4 $448
line 967
;967:				return;
ADDRGP4 $347
JUMPV
LABELV $448
line 969
;968:			}
;969:		}
LABELV $446
line 971
;970:
;971:		if (mod == MOD_PROXIMITY_MINE) {
ADDRFP4 28
INDIRI4
CNSTI4 25
NEI4 $451
line 972
;972:			if (inflictor && inflictor->parent && OnSameTeam(targ, inflictor->parent)) {
ADDRLP4 64
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $453
ADDRLP4 64
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $453
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $453
line 973
;973:				return;
ADDRGP4 $347
JUMPV
LABELV $453
line 975
;974:			}
;975:			if (targ == attacker) {
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 8
INDIRP4
CVPU4 4
NEU4 $455
line 976
;976:				return;
ADDRGP4 $347
JUMPV
LABELV $455
line 978
;977:			}
;978:		}
LABELV $451
line 981
;979:
;980:		// check for godmode
;981:		if ( targ->flags & FL_GODMODE ) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $457
line 982
;982:			return;
ADDRGP4 $347
JUMPV
LABELV $457
line 984
;983:		}
;984:	}
LABELV $444
line 988
;985:
;986:	// battlesuit protects from all radius damage (but takes knockback)
;987:	// and protects 50% against all damage
;988:	if ( client && client->ps.powerups[PW_BATTLESUIT] ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $459
ADDRLP4 0
INDIRP4
CNSTI4 320
ADDP4
INDIRI4
CNSTI4 0
EQI4 $459
line 989
;989:		G_AddEvent( targ, EV_POWERUP_BATTLESUIT, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 62
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 990
;990:		if ( ( dflags & DAMAGE_RADIUS ) || ( mod == MOD_FALLING ) ) {
ADDRFP4 24
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $463
ADDRFP4 28
INDIRI4
CNSTI4 19
NEI4 $461
LABELV $463
line 991
;991:			return;
ADDRGP4 $347
JUMPV
LABELV $461
line 993
;992:		}
;993:		damage *= 0.5;
ADDRFP4 20
ADDRFP4 20
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
CVFI4 4
ASGNI4
line 994
;994:	}
LABELV $459
line 998
;995:
;996:	// always give half damage if hurting self
;997:	// calculated after knockback, so rocket jumping works
;998:	if ( targ == attacker) {
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 8
INDIRP4
CVPU4 4
NEU4 $464
line 999
;999:		damage *= 0.5;
ADDRFP4 20
ADDRFP4 20
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
CVFI4 4
ASGNI4
line 1000
;1000:	}
LABELV $464
line 1002
;1001:
;1002:	if ( damage < 1 ) {
ADDRFP4 20
INDIRI4
CNSTI4 1
GEI4 $466
line 1003
;1003:		damage = 1;
ADDRFP4 20
CNSTI4 1
ASGNI4
line 1004
;1004:	}
LABELV $466
line 1005
;1005:	take = damage;
ADDRLP4 8
ADDRFP4 20
INDIRI4
ASGNI4
line 1008
;1006:
;1007:	// save some from armor
;1008:	asave = CheckArmor( targ, take, dflags );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 24
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CheckArmor
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 56
INDIRI4
ASGNI4
line 1010
;1009:
;1010:	take -= asave;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
line 1012
;1011:
;1012:	if ( g_debugDamage.integer ) {
ADDRGP4 g_debugDamage+12
INDIRI4
CNSTI4 0
EQI4 $468
line 1013
;1013:		G_Printf( "%i: client:%i health:%i damage:%i armor:%i\n", level.time, targ->s.number,
ADDRGP4 $471
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 G_Printf
CALLV
pop
line 1015
;1014:			targ->health, take, asave );
;1015:	}
LABELV $468
line 1018
;1016:
;1017:	// add to the attacker's hit counter (if the target isn't a general entity like a prox mine)
;1018:	if ( attacker->client && client && targ != attacker && targ->health > 0
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $473
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $473
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CVPU4 4
ADDRLP4 60
INDIRP4
CVPU4 4
EQU4 $473
ADDRLP4 64
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 0
LEI4 $473
ADDRLP4 64
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $473
ADDRLP4 64
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $473
line 1020
;1019:			&& targ->s.eType != ET_MISSILE
;1020:			&& targ->s.eType != ET_GENERAL) {
line 1021
;1021:		if ( OnSameTeam( targ, attacker ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $475
line 1022
;1022:			attacker->client->ps.persistant[PERS_HITS]--;
ADDRLP4 72
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 252
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1023
;1023:		} else {
ADDRGP4 $476
JUMPV
LABELV $475
line 1024
;1024:			attacker->client->ps.persistant[PERS_HITS]++;
ADDRLP4 72
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 252
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1025
;1025:		}
LABELV $476
line 1026
;1026:		attacker->client->ps.persistant[PERS_ATTACKEE_ARMOR] = (targ->health<<8)|(client->ps.stats[STAT_ARMOR]);
ADDRFP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 276
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 8
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
BORI4
ASGNI4
line 1027
;1027:	}
LABELV $473
line 1032
;1028:
;1029:	// add to the damage inflicted on a player this frame
;1030:	// the total will be turned into screen blends and view angle kicks
;1031:	// at the end of the frame
;1032:	if ( client ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $477
line 1033
;1033:		if ( attacker ) { // FIXME: always true?
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $479
line 1034
;1034:			client->ps.persistant[PERS_ATTACKER] = attacker->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 1035
;1035:		} else {
ADDRGP4 $480
JUMPV
LABELV $479
line 1036
;1036:			client->ps.persistant[PERS_ATTACKER] = ENTITYNUM_WORLD;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1022
ASGNI4
line 1037
;1037:		}
LABELV $480
line 1038
;1038:		client->damage_armor += asave;
ADDRLP4 68
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
ADDI4
ASGNI4
line 1039
;1039:		client->damage_blood += take;
ADDRLP4 72
ADDRLP4 0
INDIRP4
CNSTI4 684
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1040
;1040:		client->damage_knockback += knockback;
ADDRLP4 76
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 1041
;1041:		if ( dir ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $481
line 1042
;1042:			VectorCopy ( dir, client->damage_from );
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 1043
;1043:			client->damage_fromWorld = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
CNSTI4 0
ASGNI4
line 1044
;1044:		} else {
ADDRGP4 $482
JUMPV
LABELV $481
line 1045
;1045:			VectorCopy ( targ->r.currentOrigin, client->damage_from );
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 1046
;1046:			client->damage_fromWorld = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
CNSTI4 1
ASGNI4
line 1047
;1047:		}
LABELV $482
line 1048
;1048:	}
LABELV $477
line 1051
;1049:
;1050:	// See if it's the player hurting the emeny flag carrier
;1051:	if( g_gametype.integer == GT_CTF || g_gametype.integer == GT_ONEFLAG ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $487
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
NEI4 $483
LABELV $487
line 1052
;1052:		Team_CheckHurtCarrier(targ, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Team_CheckHurtCarrier
CALLV
pop
line 1053
;1053:	}
LABELV $483
line 1055
;1054:
;1055:	if (targ->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $488
line 1057
;1056:		// set the last client who damaged the target
;1057:		targ->client->lasthurt_client = attacker->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 724
ADDP4
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 1058
;1058:		targ->client->lasthurt_mod = mod;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 728
ADDP4
ADDRFP4 28
INDIRI4
ASGNI4
line 1059
;1059:	}
LABELV $488
line 1062
;1060:
;1061:	// do the damage
;1062:	if (take) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $490
line 1063
;1063:		targ->health = targ->health - take;
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 1064
;1064:		if ( targ->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $492
line 1065
;1065:			targ->client->ps.stats[STAT_HEALTH] = targ->health;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ASGNI4
line 1066
;1066:		}
LABELV $492
line 1068
;1067:			
;1068:		if ( targ->health <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 0
GTI4 $494
line 1069
;1069:			if ( client )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $496
line 1070
;1070:				targ->flags |= FL_NO_KNOCKBACK;
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
LABELV $496
line 1072
;1071:
;1072:			if (targ->health < -999)
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 -999
GEI4 $498
line 1073
;1073:				targ->health = -999;
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 -999
ASGNI4
LABELV $498
line 1075
;1074:
;1075:			targ->enemy = attacker;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 1076
;1076:			targ->die (targ, inflictor, attacker, take, mod);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 28
INDIRI4
ARGI4
ADDRLP4 76
INDIRP4
CNSTI4 716
ADDP4
INDIRP4
CALLV
pop
line 1077
;1077:			return;
ADDRGP4 $347
JUMPV
LABELV $494
line 1078
;1078:		} else if ( targ->pain ) {
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $500
line 1079
;1079:			targ->pain (targ, attacker, take);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 72
INDIRP4
CNSTI4 712
ADDP4
INDIRP4
CALLV
pop
line 1080
;1080:		}
LABELV $500
line 1081
;1081:	}
LABELV $490
line 1083
;1082:
;1083:}
LABELV $347
endproc G_Damage 108 24
export CanDamage
proc CanDamage 144 28
line 1095
;1084:
;1085:
;1086:/*
;1087:============
;1088:CanDamage
;1089:
;1090:Returns qtrue if the inflictor can directly damage the target.  Used for
;1091:explosions and melee attacks.
;1092:============
;1093:*/
;1094:qboolean CanDamage( gentity_t *targ, vec3_t origin )
;1095:{
line 1103
;1096:	//we check if the attacker can damage the target, return qtrue if yes, qfalse if no
;1097:	vec3_t	dest;
;1098:	trace_t	tr;
;1099:	vec3_t	midpoint;
;1100:	vec3_t				size;
;1101:
;1102:	// use the midpoint of the bounds instead of the origin, because bmodels may have their origin 0,0,0
;1103:	VectorAdd (targ->r.absmin, targ->r.absmax, midpoint);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 92
INDIRP4
CNSTI4 464
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 80+4
ADDRLP4 92
INDIRP4
CNSTI4 468
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80+8
ADDRLP4 96
INDIRP4
CNSTI4 472
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1104
;1104:	VectorScale( midpoint, 0.5, dest );
ADDRLP4 0
ADDRLP4 80
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 80+4
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 80+8
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1106
;1105:
;1106:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1107
;1107:	if (tr.fraction == 1.0 || tr.entityNum == targ->s.number)
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
EQF4 $513
ADDRLP4 12+52
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $509
LABELV $513
line 1108
;1108:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $509
line 1110
;1109:
;1110:	VectorSubtract( targ->r.absmax, targ->r.absmin, size );
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 104
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDRLP4 104
INDIRP4
CNSTI4 464
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 104
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDRLP4 104
INDIRP4
CNSTI4 468
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68+8
ADDRLP4 108
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDRLP4 108
INDIRP4
CNSTI4 472
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1116
;1111:	
;1112:	// top quad
;1113:
;1114:	// - +
;1115:	// - -
;1116:	VectorCopy( targ->r.absmax, dest );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRB
ASGNB 12
line 1117
;1117:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1118
;1118:	if (tr.fraction == 1.0)
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $516
line 1119
;1119:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $516
line 1123
;1120:
;1121:	// + -
;1122:	// - -
;1123:	dest[0] -= size[0];
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 68
INDIRF4
SUBF4
ASGNF4
line 1124
;1124:	trap_Trace( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID );
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1125
;1125:	if ( tr.fraction == 1.0 )
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $519
line 1126
;1126:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $519
line 1130
;1127:
;1128:	// - -
;1129:	// + -
;1130:	dest[1] -= size[1];
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 68+4
INDIRF4
SUBF4
ASGNF4
line 1131
;1131:	trap_Trace( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID );
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1132
;1132:	if ( tr.fraction == 1.0 )
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $524
line 1133
;1133:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $524
line 1137
;1134:
;1135:	// - -
;1136:	// - +
;1137:	dest[0] += size[0];
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 68
INDIRF4
ADDF4
ASGNF4
line 1138
;1138:	trap_Trace( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID );
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1139
;1139:	if ( tr.fraction == 1.0 )
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $527
line 1140
;1140:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $527
line 1146
;1141:
;1142:	// bottom quad
;1143:
;1144:	// - -
;1145:	// + -
;1146:	VectorCopy( targ->r.absmin, dest );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRB
ASGNB 12
line 1147
;1147:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 128
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1148
;1148:	if (tr.fraction == 1.0)
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $530
line 1149
;1149:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $530
line 1153
;1150:
;1151:	// - -
;1152:	// - +
;1153:	dest[0] += size[0];
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 68
INDIRF4
ADDF4
ASGNF4
line 1154
;1154:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1155
;1155:	if (tr.fraction == 1.0)
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $533
line 1156
;1156:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $533
line 1160
;1157:
;1158:	// - +
;1159:	// - -
;1160:	dest[1] += size[1];
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 68+4
INDIRF4
ADDF4
ASGNF4
line 1161
;1161:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 136
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1162
;1162:	if (tr.fraction == 1.0)
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $538
line 1163
;1163:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $538
line 1167
;1164:
;1165:	// + -
;1166:	// - -
;1167:	dest[0] -= size[0];
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 68
INDIRF4
SUBF4
ASGNF4
line 1168
;1168:	trap_Trace( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID );
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 140
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1169
;1169:	if ( tr.fraction == 1.0 )
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $541
line 1170
;1170:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $541
line 1172
;1171:
;1172:	return qfalse;
CNSTI4 0
RETI4
LABELV $502
endproc CanDamage 144 28
export G_RadiusDamage
proc G_RadiusDamage 4200 32
line 1182
;1173:}
;1174:
;1175:
;1176:/*
;1177:============
;1178:G_RadiusDamage
;1179:============
;1180:*/
;1181:qboolean G_RadiusDamage ( vec3_t origin, gentity_t *attacker, float damage, float radius,
;1182:					 gentity_t *ignore, int mod) {
line 1191
;1183:	float		points, dist;
;1184:	gentity_t	*ent;
;1185:	int			entityList[MAX_GENTITIES];
;1186:	int			numListedEntities;
;1187:	vec3_t		mins, maxs;
;1188:	vec3_t		v;
;1189:	vec3_t		dir;
;1190:	int			i, e;
;1191:	qboolean	hitClient = qfalse;
ADDRLP4 4168
CNSTI4 0
ASGNI4
line 1193
;1192:
;1193:	if ( radius < 1 ) {
ADDRFP4 12
INDIRF4
CNSTF4 1065353216
GEF4 $545
line 1194
;1194:		radius = 1;
ADDRFP4 12
CNSTF4 1065353216
ASGNF4
line 1195
;1195:	}
LABELV $545
line 1197
;1196:
;1197:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $547
line 1198
;1198:		mins[i] = origin[i] - radius;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4144
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRFP4 12
INDIRF4
SUBF4
ASGNF4
line 1199
;1199:		maxs[i] = origin[i] + radius;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4156
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRFP4 12
INDIRF4
ADDF4
ASGNF4
line 1200
;1200:	}
LABELV $548
line 1197
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $547
line 1202
;1201:
;1202:	numListedEntities = trap_EntitiesInBox( mins, maxs, entityList, MAX_GENTITIES );
ADDRLP4 4144
ARGP4
ADDRLP4 4156
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4172
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 4140
ADDRLP4 4172
INDIRI4
ASGNI4
line 1204
;1203:
;1204:	for ( e = 0 ; e < numListedEntities ; e++ ) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $554
JUMPV
LABELV $551
line 1205
;1205:		ent = &g_entities[entityList[ e ]];
ADDRLP4 4
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 44
ADDP4
INDIRI4
CNSTI4 832
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1207
;1206:
;1207:		if (ent == ignore)
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 16
INDIRP4
CVPU4 4
NEU4 $555
line 1208
;1208:			continue;
ADDRGP4 $552
JUMPV
LABELV $555
line 1209
;1209:		if (!ent->takedamage)
ADDRLP4 4
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
NEI4 $557
line 1210
;1210:			continue;
ADDRGP4 $552
JUMPV
LABELV $557
line 1213
;1211:
;1212:		// find the distance from the edge of the bounding box
;1213:		for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $559
line 1214
;1214:			if ( origin[i] < ent->r.absmin[i] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
GEF4 $563
line 1215
;1215:				v[i] = ent->r.absmin[i] - origin[i];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1216
;1216:			} else if ( origin[i] > ent->r.absmax[i] ) {
ADDRGP4 $564
JUMPV
LABELV $563
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
LEF4 $565
line 1217
;1217:				v[i] = origin[i] - ent->r.absmax[i];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1218
;1218:			} else {
ADDRGP4 $566
JUMPV
LABELV $565
line 1219
;1219:				v[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
CNSTF4 0
ASGNF4
line 1220
;1220:			}
LABELV $566
LABELV $564
line 1221
;1221:		}
LABELV $560
line 1213
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $559
line 1223
;1222:
;1223:		dist = VectorLength( v );
ADDRLP4 8
ARGP4
ADDRLP4 4176
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 4176
INDIRF4
ASGNF4
line 1224
;1224:		if ( dist >= radius ) {
ADDRLP4 24
INDIRF4
ADDRFP4 12
INDIRF4
LTF4 $567
line 1225
;1225:			continue;
ADDRGP4 $552
JUMPV
LABELV $567
line 1228
;1226:		}
;1227:
;1228:		points = damage * ( 1.0 - dist / radius );
ADDRLP4 40
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
ADDRLP4 24
INDIRF4
ADDRFP4 12
INDIRF4
DIVF4
SUBF4
MULF4
ASGNF4
line 1230
;1229:
;1230:		if( CanDamage (ent, origin) ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4180
ADDRGP4 CanDamage
CALLI4
ASGNI4
ADDRLP4 4180
INDIRI4
CNSTI4 0
EQI4 $569
line 1231
;1231:			if( LogAccuracyHit( ent, attacker ) ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4184
ADDRGP4 LogAccuracyHit
CALLI4
ASGNI4
ADDRLP4 4184
INDIRI4
CNSTI4 0
EQI4 $571
line 1232
;1232:				hitClient = qtrue;
ADDRLP4 4168
CNSTI4 1
ASGNI4
line 1233
;1233:			}
LABELV $571
line 1234
;1234:			VectorSubtract (ent->r.currentOrigin, origin, dir);
ADDRLP4 4192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 4
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 4192
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 4192
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1237
;1235:			// push the center of mass higher than the origin so players
;1236:			// get knocked into the air more
;1237:			dir[2] += ent == attacker ? g_knockback_z_self.value : g_knockback_z.value;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CVPU4 4
NEU4 $579
ADDRLP4 4196
ADDRGP4 g_knockback_z_self+8
INDIRF4
ASGNF4
ADDRGP4 $580
JUMPV
LABELV $579
ADDRLP4 4196
ADDRGP4 g_knockback_z+8
INDIRF4
ASGNF4
LABELV $580
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 4196
INDIRF4
ADDF4
ASGNF4
line 1238
;1238:			G_Damage (ent, NULL, attacker, dir, origin, (int)points, DAMAGE_RADIUS, mod);
ADDRLP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
INDIRF4
CVFI4 4
ARGI4
CNSTI4 1
ARGI4
ADDRFP4 20
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1239
;1239:		}
LABELV $569
line 1240
;1240:	}
LABELV $552
line 1204
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $554
ADDRLP4 20
INDIRI4
ADDRLP4 4140
INDIRI4
LTI4 $551
line 1242
;1241:
;1242:	return hitClient;
ADDRLP4 4168
INDIRI4
RETI4
LABELV $544
endproc G_RadiusDamage 4200 32
import neutralObelisk
import svf_self_portal2
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_TraceCapsule
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Print
import g_training
import g_knockback_z_self
import g_knockback_z
import g_knockback_hmg
import g_knockback_cg
import g_knockback_pl
import g_knockback_ng
import g_knockback_gh
import g_knockback_bfg
import g_knockback_pg_self
import g_knockback_pg
import g_knockback_rg
import g_knockback_lg
import g_knockback_rl_self
import g_knockback_rl
import g_knockback_gl
import g_knockback_sg
import g_knockback_mg
import g_knockback_g
import g_velocity_rl
import g_velocity_pl
import g_velocity_pg
import g_velocity_gh
import g_velocity_gl
import g_velocity_bfg
import g_splashdamage_rl
import g_splashdamage_pl
import g_splashdamage_pg
import g_splashdamage_gl
import g_splashdamage_bfg
import g_splashradius_rl
import g_splashradius_pl
import g_splashradius_pg
import g_splashradius_gl
import g_splashradius_bfg
import g_damage_hmg
import g_damage_cg
import g_damage_pl
import g_damage_ng
import g_damage_gh
import g_damage_bfg
import g_damage_pg
import g_damage_rg
import g_damage_lg
import g_damage_rl
import g_damage_gl
import g_damage_sg
import g_damage_mg
import g_damage_g
import g_ammoPack
import g_ammoRespawn
import g_startingAmmo_hmg
import g_startingAmmo_cg
import g_startingAmmo_pl
import g_startingAmmo_ng
import g_startingAmmo_gh
import g_startingAmmo_bfg
import g_startingAmmo_pg
import g_startingAmmo_rg
import g_startingAmmo_lg
import g_startingAmmo_rl
import g_startingAmmo_gl
import g_startingAmmo_sg
import g_startingAmmo_mg
import g_startingAmmo_g
import g_startingWeapons
import armor_tiered
import g_rotation
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_predictPVS
import g_unlagged
import g_listEntity
import g_voteDelay
import g_voteLimit
import g_allowVoteMidGame
import g_allowSpecVote
import g_allowVote
import g_allowKill
import g_blood
import g_motd
import g_debugAlloc
import g_debugDamage
import g_debugMove
import g_inactivity
import g_respawn_delay_max
import g_respawn_delay_min
import g_weaponTeamRespawn
import g_weaponRespawn
import g_quadDamageFactor
import g_knockback
import g_gravity
import g_speed
import g_dedicated
import g_needpass
import g_filterBan
import g_banIPs
import g_password
import g_logSync
import g_log
import g_warmup
import g_teamForceBalance
import g_autoJoin
import g_friendlyFire
import g_synchronousClients
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_maxGameClients
import g_maxclients
import g_gametype
import sv_fps
import g_mapname
import g_cheats
import g_entities
import level
import AddTeamScore
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import G_MapExist
import G_LoadMap
import ParseMapRotation
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import UpdateTournamentInfo
import G_ClearClientSessionData
import G_WriteClientSessionData
import G_ReadClientSessionData
import G_InitSessionData
import G_WriteSessionData
import G_InitWorldSession
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_ResetFlags
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_BroadcastServerCommand
import G_Error
import G_Printf
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import MoveClientToIntermission
import DeathmatchScoreboardMessage
import G_StartKamikaze
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamConnectedCount
import TeamCount
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_prox
import fire_nail
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Add_Ammo
import Touch_Item
import FinishSpawningItem
import G_SpawnItem
import LaunchItem
import Drop_Item
import SpawnTime
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import G_RevertVote
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $471
byte 1 37
byte 1 105
byte 1 58
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 100
byte 1 97
byte 1 109
byte 1 97
byte 1 103
byte 1 101
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 58
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $248
byte 1 75
byte 1 105
byte 1 108
byte 1 108
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $247
byte 1 60
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 111
byte 1 98
byte 1 105
byte 1 116
byte 1 117
byte 1 97
byte 1 114
byte 1 121
byte 1 62
byte 1 0
align 1
LABELV $241
byte 1 60
byte 1 119
byte 1 111
byte 1 114
byte 1 108
byte 1 100
byte 1 62
byte 1 0
align 1
LABELV $240
byte 1 60
byte 1 110
byte 1 111
byte 1 110
byte 1 45
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 62
byte 1 0
align 1
LABELV $216
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $215
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $195
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $194
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $180
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 65
byte 1 73
byte 1 76
byte 1 71
byte 1 85
byte 1 78
byte 1 95
byte 1 72
byte 1 69
byte 1 65
byte 1 68
byte 1 83
byte 1 72
byte 1 79
byte 1 84
byte 1 0
align 1
LABELV $179
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 72
byte 1 77
byte 1 71
byte 1 0
align 1
LABELV $178
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 76
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 95
byte 1 68
byte 1 73
byte 1 83
byte 1 67
byte 1 72
byte 1 65
byte 1 82
byte 1 71
byte 1 69
byte 1 0
align 1
LABELV $177
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 72
byte 1 65
byte 1 87
byte 1 0
align 1
LABELV $176
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 87
byte 1 73
byte 1 84
byte 1 67
byte 1 72
byte 1 84
byte 1 69
byte 1 65
byte 1 77
byte 1 0
align 1
LABELV $175
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 82
byte 1 65
byte 1 80
byte 1 80
byte 1 76
byte 1 69
byte 1 0
align 1
LABELV $174
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 74
byte 1 85
byte 1 73
byte 1 67
byte 1 69
byte 1 68
byte 1 0
align 1
LABELV $173
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 75
byte 1 65
byte 1 77
byte 1 73
byte 1 75
byte 1 65
byte 1 90
byte 1 69
byte 1 0
align 1
LABELV $172
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 82
byte 1 79
byte 1 88
byte 1 73
byte 1 77
byte 1 73
byte 1 84
byte 1 89
byte 1 95
byte 1 77
byte 1 73
byte 1 78
byte 1 69
byte 1 0
align 1
LABELV $171
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 67
byte 1 72
byte 1 65
byte 1 73
byte 1 78
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $170
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 78
byte 1 65
byte 1 73
byte 1 76
byte 1 0
align 1
LABELV $169
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 82
byte 1 73
byte 1 71
byte 1 71
byte 1 69
byte 1 82
byte 1 95
byte 1 72
byte 1 85
byte 1 82
byte 1 84
byte 1 0
align 1
LABELV $168
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 65
byte 1 82
byte 1 71
byte 1 69
byte 1 84
byte 1 95
byte 1 76
byte 1 65
byte 1 83
byte 1 69
byte 1 82
byte 1 0
align 1
LABELV $167
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 85
byte 1 73
byte 1 67
byte 1 73
byte 1 68
byte 1 69
byte 1 0
align 1
LABELV $166
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 70
byte 1 65
byte 1 76
byte 1 76
byte 1 73
byte 1 78
byte 1 71
byte 1 0
align 1
LABELV $165
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 69
byte 1 76
byte 1 69
byte 1 70
byte 1 82
byte 1 65
byte 1 71
byte 1 0
align 1
LABELV $164
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 67
byte 1 82
byte 1 85
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $163
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 76
byte 1 65
byte 1 86
byte 1 65
byte 1 0
align 1
LABELV $162
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 76
byte 1 73
byte 1 77
byte 1 69
byte 1 0
align 1
LABELV $161
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 87
byte 1 65
byte 1 84
byte 1 69
byte 1 82
byte 1 0
align 1
LABELV $160
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 66
byte 1 70
byte 1 71
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $159
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 66
byte 1 70
byte 1 71
byte 1 0
align 1
LABELV $158
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 76
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 0
align 1
LABELV $157
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 65
byte 1 73
byte 1 76
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $156
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 77
byte 1 65
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $155
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 77
byte 1 65
byte 1 0
align 1
LABELV $154
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 79
byte 1 67
byte 1 75
byte 1 69
byte 1 84
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $153
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 79
byte 1 67
byte 1 75
byte 1 69
byte 1 84
byte 1 0
align 1
LABELV $152
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 82
byte 1 69
byte 1 78
byte 1 65
byte 1 68
byte 1 69
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $151
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 82
byte 1 69
byte 1 78
byte 1 65
byte 1 68
byte 1 69
byte 1 0
align 1
LABELV $150
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 77
byte 1 65
byte 1 67
byte 1 72
byte 1 73
byte 1 78
byte 1 69
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $149
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 65
byte 1 85
byte 1 78
byte 1 84
byte 1 76
byte 1 69
byte 1 84
byte 1 0
align 1
LABELV $148
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 72
byte 1 79
byte 1 84
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $147
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 85
byte 1 78
byte 1 75
byte 1 78
byte 1 79
byte 1 87
byte 1 78
byte 1 0
align 1
LABELV $140
byte 1 107
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $96
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 83
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $95
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 83
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 0
