export SpawnTime
code
proc SpawnTime 36 0
file "..\..\..\..\code\game\g_items.c"
line 40
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:#include "g_local.h"
;4:
;5:/*
;6:
;7:  Items are any object that a player can touch to gain some effect.
;8:
;9:  Pickup will return the number of seconds until they should respawn.
;10:
;11:  all items should pop when dropped in lava or slime
;12:
;13:  Respawnable items don't actually go away when picked up, they are
;14:  just made invisible and untouchable.  This allows them to ride
;15:  movers and respawn apropriately.
;16:*/
;17:
;18:// initial spawn times after warmup
;19:// in vq3 most of the items appears in one frame but we will delay that a bit
;20:// to reduce peak bandwidth and get some nice transition effects
;21:#define	SPAWN_WEAPONS		333
;22:#define	SPAWN_ARMOR			1200
;23:#define	SPAWN_HEALTH		900
;24:#define	SPAWN_AMMO			600
;25:#define	SPAWN_HOLDABLE		2500
;26:#define	SPAWN_MEGAHEALTH	10000
;27:#define	SPAWN_POWERUP		45000
;28:
;29:// periodic respawn times
;30:// g_weaponRespawn.integer || g_weaponTeamRespawn.integer
;31:#define	RESPAWN_ARMOR		25000
;32:#define	RESPAWN_HEALTH		35000
;33:#define	RESPAWN_AMMO		40000
;34:#define	RESPAWN_HOLDABLE	60000
;35:#define	RESPAWN_MEGAHEALTH	35000 //120000
;36:#define	RESPAWN_POWERUP		120000
;37:
;38://======================================================================
;39:
;40:int SpawnTime(gentity_t *ent, qboolean firstSpawn) {
line 41
;41:	if (!ent->item)
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $56
line 42
;42:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $55
JUMPV
LABELV $56
line 44
;43:
;44:	switch (ent->item->giType) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $58
ADDRLP4 0
INDIRI4
CNSTI4 7
GTI4 $58
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $100-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $100
address $61
address $69
address $78
address $82
address $91
address $96
address $95
code
LABELV $61
line 46
;45:	case IT_WEAPON:
;46:		if (firstSpawn)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $62
line 47
;47:			return SPAWN_WEAPONS;
CNSTI4 333
RETI4
ADDRGP4 $55
JUMPV
LABELV $62
line 48
;48:		if (g_gametype.integer == GT_TEAM)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $64
line 49
;49:			return g_weaponTeamRespawn.value * 1000;
ADDRGP4 g_weaponTeamRespawn+8
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
RETI4
ADDRGP4 $55
JUMPV
LABELV $64
line 51
;50:		else
;51:			return g_weaponRespawn.value * 1000;
ADDRGP4 g_weaponRespawn+8
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
RETI4
ADDRGP4 $55
JUMPV
LABELV $69
line 54
;52:
;53:	case IT_AMMO:
;54:		return firstSpawn ? SPAWN_AMMO : g_ammoRespawn.integer ? g_ammoRespawn.integer*1000 : RESPAWN_AMMO;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $74
ADDRLP4 8
CNSTI4 600
ASGNI4
ADDRGP4 $75
JUMPV
LABELV $74
ADDRGP4 g_ammoRespawn+12
INDIRI4
CNSTI4 0
EQI4 $76
ADDRLP4 12
ADDRGP4 g_ammoRespawn+12
INDIRI4
CNSTI4 1000
MULI4
ASGNI4
ADDRGP4 $77
JUMPV
LABELV $76
ADDRLP4 12
CNSTI4 40000
ASGNI4
LABELV $77
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
LABELV $75
ADDRLP4 8
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $78
line 57
;55:
;56:	case IT_ARMOR:
;57:		return firstSpawn ? SPAWN_ARMOR : RESPAWN_ARMOR;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $80
ADDRLP4 16
CNSTI4 1200
ASGNI4
ADDRGP4 $81
JUMPV
LABELV $80
ADDRLP4 16
CNSTI4 25000
ASGNI4
LABELV $81
ADDRLP4 16
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $82
line 60
;58:
;59:	case IT_HEALTH:
;60:		if (ent->item->quantity == 100) // mega health respawns slow
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 100
NEI4 $83
line 61
;61:			return firstSpawn ? SPAWN_MEGAHEALTH : RESPAWN_MEGAHEALTH;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $86
ADDRLP4 20
CNSTI4 10000
ASGNI4
ADDRGP4 $87
JUMPV
LABELV $86
ADDRLP4 20
CNSTI4 35000
ASGNI4
LABELV $87
ADDRLP4 20
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $83
line 63
;62:		else
;63:			return firstSpawn ? SPAWN_HEALTH : RESPAWN_HEALTH;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $89
ADDRLP4 24
CNSTI4 900
ASGNI4
ADDRGP4 $90
JUMPV
LABELV $89
ADDRLP4 24
CNSTI4 35000
ASGNI4
LABELV $90
ADDRLP4 24
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $91
line 66
;64:
;65:	case IT_POWERUP:
;66:		return firstSpawn ? SPAWN_POWERUP : RESPAWN_POWERUP;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $93
ADDRLP4 28
CNSTI4 45000
ASGNI4
ADDRGP4 $94
JUMPV
LABELV $93
ADDRLP4 28
CNSTI4 120000
ASGNI4
LABELV $94
ADDRLP4 28
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $95
line 69
;67:
;68:	case IT_PERSISTANT_POWERUP:
;69:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $55
JUMPV
line 70
;70:		break;
LABELV $96
line 73
;71:
;72:	case IT_HOLDABLE:
;73:		return firstSpawn ? SPAWN_HOLDABLE : RESPAWN_HOLDABLE;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $98
ADDRLP4 32
CNSTI4 2500
ASGNI4
ADDRGP4 $99
JUMPV
LABELV $98
ADDRLP4 32
CNSTI4 60000
ASGNI4
LABELV $99
ADDRLP4 32
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $58
line 76
;74:
;75:	default: // IT_BAD and others
;76:		return 0;
CNSTI4 0
RETI4
LABELV $55
endproc SpawnTime 36 0
export Pickup_Powerup
proc Pickup_Powerup 120 28
line 81
;77:	}
;78:}
;79:
;80:
;81:int Pickup_Powerup(gentity_t *ent, gentity_t *other) {
line 86
;82:	int			quantity;
;83:	int			i;
;84:	gclient_t *client;
;85:
;86:	if (!other->client->ps.powerups[ent->item->giTag]) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $103
line 88
;87:		// round timing to seconds to make multiple powerup timers count in sync
;88:		other->client->ps.powerups[ent->item->giTag] = level.time - (level.time % 1000);
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
MODI4
SUBI4
ASGNI4
line 89
;89:	}
LABELV $103
line 91
;90:
;91:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $107
line 92
;92:		quantity = ent->count;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 93
;93:	} else {
ADDRGP4 $108
JUMPV
LABELV $107
line 94
;94:		quantity = ent->item->quantity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 95
;95:	}
LABELV $108
line 97
;96:
;97:	other->client->ps.powerups[ent->item->giTag] += quantity * 1000;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 1000
MULI4
ADDI4
ASGNI4
line 103
;98:
;99:	//TODO: for Quad Hog
;100:	// if (g_quadHog.integer && ent->item->giTag == PW_QUAD)
;101:		//G_BroadcastServerCommand(-1, va("%s" S_COLOR_WHITE " is the " S_COLOR_CYAN "Quad Hog" S_COLOR_WHITE "!", other->client->pers.netname));
;102:	// else
;103:		G_BroadcastServerCommand(-1, va("%s" S_COLOR_YELLOW " got the %s!" S_COLOR_WHITE, other->client->pers.netname, ent->item->pickup_name));
ADDRGP4 $109
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 508
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 G_BroadcastServerCommand
CALLV
pop
line 106
;104:
;105:	// give any nearby players a "denied" anti-reward
;106:	for (i = 0; i < level.maxclients; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $113
JUMPV
LABELV $110
line 112
;107:		vec3_t		delta;
;108:		float		len;
;109:		vec3_t		forward;
;110:		trace_t		tr;
;111:
;112:		client = &level.clients[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 113
;113:		if (client == other->client) {
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
NEU4 $115
line 114
;114:			continue;
ADDRGP4 $111
JUMPV
LABELV $115
line 116
;115:		}
;116:		if (client->pers.connected != CON_CONNECTED) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $117
line 117
;117:			continue;
ADDRGP4 $111
JUMPV
LABELV $117
line 119
;118:		}
;119:		if (client->ps.stats[STAT_HEALTH] <= 0) {
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $119
line 120
;120:			continue;
ADDRGP4 $111
JUMPV
LABELV $119
line 125
;121:		}
;122:
;123:		// if same team in team game, no sound
;124:		// cannot use OnSameTeam as it expects to g_entities, not clients
;125:		if (g_gametype.integer >= GT_TEAM && other->client->sess.sessionTeam == client->sess.sessionTeam) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
LTI4 $121
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
NEI4 $121
line 126
;126:			continue;
ADDRGP4 $111
JUMPV
LABELV $121
line 130
;127:		}
;128:
;129:		// if too far away, no sound
;130:		VectorSubtract(ent->s.pos.trBase, client->ps.origin, delta);
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 104
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20+4
ADDRLP4 104
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 131
;131:		len = VectorNormalize(delta);
ADDRLP4 20
ARGP4
ADDRLP4 112
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 44
ADDRLP4 112
INDIRF4
ASGNF4
line 132
;132:		if (len > 192) {
ADDRLP4 44
INDIRF4
CNSTF4 1128267776
LEF4 $126
line 133
;133:			continue;
ADDRGP4 $111
JUMPV
LABELV $126
line 137
;134:		}
;135:
;136:		// if not facing, no sound
;137:		AngleVectors(client->ps.viewangles, forward, NULL, NULL);
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 32
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 138
;138:		if (DotProduct(delta, forward) < 0.4) {
ADDRLP4 20
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 32+4
INDIRF4
MULF4
ADDF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 32+8
INDIRF4
MULF4
ADDF4
CNSTF4 1053609165
GEF4 $128
line 139
;139:			continue;
ADDRGP4 $111
JUMPV
LABELV $128
line 143
;140:		}
;141:
;142:		// if not line of sight, no sound
;143:		trap_Trace(&tr, client->ps.origin, NULL, NULL, ent->s.pos.trBase, ENTITYNUM_NONE, CONTENTS_SOLID);
ADDRLP4 48
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 144
;144:		if (tr.fraction != 1.0) {
ADDRLP4 48+8
INDIRF4
CNSTF4 1065353216
EQF4 $134
line 145
;145:			continue;
ADDRGP4 $111
JUMPV
LABELV $134
line 149
;146:		}
;147:
;148:		// anti-reward
;149:		client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_DENIEDREWARD;
ADDRLP4 116
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
CNSTI4 1
BXORI4
ASGNI4
line 150
;150:	}
LABELV $111
line 106
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $113
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $110
line 152
;151:
;152:	return SpawnTime(ent, qfalse); // return RESPAWN_POWERUP;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
RETI4
LABELV $102
endproc Pickup_Powerup 120 28
export Pickup_PersistantPowerup
proc Pickup_PersistantPowerup 1104 12
line 158
;153:}
;154:
;155:
;156://======================================================================
;157:
;158:int Pickup_PersistantPowerup(gentity_t *ent, gentity_t *other) {
line 164
;159:	int		clientNum;
;160:	char	userinfo[MAX_INFO_STRING];
;161:	float	handicap;
;162:	int		max;
;163:
;164:	other->client->ps.stats[STAT_PERSISTANT_POWERUP] = ent->item - bg_itemlist;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 165
;165:	other->client->persistantPowerup = ent;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 776
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 167
;166:
;167:	switch (ent->item->giTag) {
ADDRLP4 1036
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1036
INDIRI4
CNSTI4 10
LTI4 $138
ADDRLP4 1036
INDIRI4
CNSTI4 13
GTI4 $138
ADDRLP4 1036
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $161-40
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $161
address $146
address $141
address $150
address $154
code
LABELV $141
line 169
;168:	case PW_GUARD:
;169:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 170
;170:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 171
;171:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $142
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1048
INDIRF4
ASGNF4
line 172
;172:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1052
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $145
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $143
LABELV $145
line 173
;173:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 174
;174:		}
LABELV $143
line 175
;175:		max = (int)(2 * handicap);
ADDRLP4 1032
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 177
;176:
;177:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 178
;178:		other->client->ps.stats[STAT_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 179
;179:		other->client->ps.stats[STAT_MAX_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 180
;180:		other->client->ps.stats[STAT_ARMOR] = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 181
;181:		other->client->pers.maxHealth = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 183
;182:
;183:		break;
ADDRGP4 $139
JUMPV
LABELV $146
line 186
;184:
;185:	case PW_SCOUT:
;186:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 187
;187:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 188
;188:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $142
ARGP4
ADDRLP4 1056
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1056
INDIRP4
ARGP4
ADDRLP4 1060
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1060
INDIRF4
ASGNF4
line 189
;189:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1064
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1064
INDIRF4
CNSTF4 0
LEF4 $149
ADDRLP4 1064
INDIRF4
CNSTF4 1120403456
LEF4 $147
LABELV $149
line 190
;190:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 191
;191:		}
LABELV $147
line 192
;192:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 193
;193:		other->client->ps.stats[STAT_ARMOR] = 0;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
CNSTI4 0
ASGNI4
line 194
;194:		break;
ADDRGP4 $139
JUMPV
LABELV $150
line 197
;195:
;196:	case PW_DOUBLER:
;197:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 198
;198:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 199
;199:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $142
ARGP4
ADDRLP4 1068
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1068
INDIRP4
ARGP4
ADDRLP4 1072
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1072
INDIRF4
ASGNF4
line 200
;200:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1076
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1076
INDIRF4
CNSTF4 0
LEF4 $153
ADDRLP4 1076
INDIRF4
CNSTF4 1120403456
LEF4 $151
LABELV $153
line 201
;201:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 202
;202:		}
LABELV $151
line 203
;203:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 204
;204:		break;
ADDRGP4 $139
JUMPV
LABELV $154
line 206
;205:	case PW_ARMORREGEN:
;206:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 207
;207:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 208
;208:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $142
ARGP4
ADDRLP4 1080
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1080
INDIRP4
ARGP4
ADDRLP4 1084
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1084
INDIRF4
ASGNF4
line 209
;209:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1088
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1088
INDIRF4
CNSTF4 0
LEF4 $157
ADDRLP4 1088
INDIRF4
CNSTF4 1120403456
LEF4 $155
LABELV $157
line 210
;210:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 211
;211:		}
LABELV $155
line 212
;212:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 213
;213:		memset(other->client->ammoTimes, 0, sizeof(other->client->ammoTimes));
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 784
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 60
ARGI4
ADDRGP4 memset
CALLP4
pop
line 214
;214:		break;
ADDRGP4 $139
JUMPV
LABELV $138
line 216
;215:	default:
;216:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 217
;217:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 218
;218:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $142
ARGP4
ADDRLP4 1092
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1092
INDIRP4
ARGP4
ADDRLP4 1096
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1096
INDIRF4
ASGNF4
line 219
;219:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1100
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1100
INDIRF4
CNSTF4 0
LEF4 $160
ADDRLP4 1100
INDIRF4
CNSTF4 1120403456
LEF4 $158
LABELV $160
line 220
;220:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 221
;221:		}
LABELV $158
line 222
;222:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 223
;223:		break;
LABELV $139
line 226
;224:	}
;225:
;226:	return SpawnTime(ent, qfalse); // return -1;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1044
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 1044
INDIRI4
RETI4
LABELV $137
endproc Pickup_PersistantPowerup 1104 12
export Pickup_Holdable
proc Pickup_Holdable 4 8
line 231
;227:}
;228:
;229://======================================================================
;230:
;231:int Pickup_Holdable(gentity_t *ent, gentity_t *other) {
line 233
;232:
;233:	other->client->ps.stats[STAT_HOLDABLE_ITEM] = ent->item - bg_itemlist;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 188
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 235
;234:
;235:	if (ent->item->giTag == HI_KAMIKAZE) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 3
NEI4 $164
line 236
;236:		other->client->ps.eFlags |= EF_KAMIKAZE;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 237
;237:	}
LABELV $164
line 239
;238:
;239:	return SpawnTime(ent, qfalse); // return RESPAWN_HOLDABLE;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $163
endproc Pickup_Holdable 4 8
export Add_Ammo
proc Add_Ammo 20 0
line 246
;240:}
;241:
;242:
;243://======================================================================
;244:
;245:
;246:void Add_Ammo(gentity_t *ent, weapon_t weapon, int count) {
line 247
;247:	if (weapon == WP_NONE) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $167
line 250
;248:		// it is an ammo pack
;249:		int i;
;250:		for (i = WP_NONE + 1; i < WP_NUM_WEAPONS; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $169
line 251
;251:			ent->client->ps.ammo[i] += bgWeapons[i].ammo_pickup;
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bgWeapons+8
ADDP4
INDIRI4
ADDI4
ASGNI4
line 252
;252:			if (ent->client->ps.ammo[i] > bgWeapons[i].ammo_max) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bgWeapons+4
ADDP4
INDIRI4
LEI4 $174
line 253
;253:				ent->client->ps.ammo[i] = bgWeapons[i].ammo_max;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bgWeapons+4
ADDP4
INDIRI4
ASGNI4
line 254
;254:			}
LABELV $174
line 255
;255:		}
LABELV $170
line 250
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 15
LTI4 $169
line 257
;256:
;257:	} else {
ADDRGP4 $168
JUMPV
LABELV $167
line 259
;258:		// normal ammo
;259:		ent->client->ps.ammo[weapon] += count;
ADDRLP4 0
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 260
;260:		if (ent->client->ps.ammo[weapon] > bgWeapons[weapon].ammo_max) {
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bgWeapons+4
ADDP4
INDIRI4
LEI4 $178
line 261
;261:			ent->client->ps.ammo[weapon] = bgWeapons[weapon].ammo_max;
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bgWeapons+4
ADDP4
INDIRI4
ASGNI4
line 262
;262:		}
LABELV $178
line 263
;263:	}
LABELV $168
line 264
;264:}
LABELV $166
endproc Add_Ammo 20 0
proc Pickup_Ammo 8 12
line 267
;265:
;266:
;267:static int Pickup_Ammo(gentity_t *ent, gentity_t *other) {
line 270
;268:	int		quantity;
;269:
;270:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $183
line 271
;271:		quantity = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 272
;272:	} else {
ADDRGP4 $184
JUMPV
LABELV $183
line 273
;273:		quantity = ent->item->quantity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 274
;274:	}
LABELV $184
line 276
;275:
;276:	Add_Ammo(other, ent->item->giTag, quantity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Add_Ammo
CALLV
pop
line 278
;277:
;278:	return SpawnTime(ent, qfalse); // return RESPAWN_AMMO;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
RETI4
LABELV $182
endproc Pickup_Ammo 8 12
proc Pickup_Weapon 12 12
line 284
;279:}
;280:
;281://======================================================================
;282:
;283:
;284:static int Pickup_Weapon(gentity_t *ent, gentity_t *other) {
line 287
;285:	int		quantity;
;286:
;287:	if (ent->count < 0) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
GEI4 $186
line 288
;288:		quantity = 0; // None for you, sir!
ADDRLP4 0
CNSTI4 0
ASGNI4
line 289
;289:	} else {
ADDRGP4 $187
JUMPV
LABELV $186
line 290
;290:		if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $188
line 291
;291:			quantity = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 292
;292:		} else {
ADDRGP4 $189
JUMPV
LABELV $188
line 293
;293:			quantity = ent->item->quantity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 294
;294:		}
LABELV $189
line 297
;295:
;296:		// dropped items and teamplay weapons always have full ammo
;297:		if (!(ent->flags & FL_DROPPED_ITEM) && g_gametype.integer != GT_TEAM) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $190
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
EQI4 $190
line 300
;298:			// respawning rules
;299:			// drop the quantity if the already have over the minimum
;300:			if (other->client->ps.ammo[ent->item->giTag] < quantity) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $193
line 301
;301:				quantity = quantity - other->client->ps.ammo[ent->item->giTag];
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 302
;302:			} else {
ADDRGP4 $194
JUMPV
LABELV $193
line 303
;303:				quantity = 1;		// only add a single shot
ADDRLP4 0
CNSTI4 1
ASGNI4
line 304
;304:			}
LABELV $194
line 305
;305:		}
LABELV $190
line 306
;306:	}
LABELV $187
line 309
;307:
;308:	// add the weapon
;309:	other->client->ps.stats[STAT_WEAPONS] |= (1 << ent->item->giTag);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LSHI4
BORI4
ASGNI4
line 311
;310:
;311:	Add_Ammo(other, ent->item->giTag, quantity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Add_Ammo
CALLV
pop
line 313
;312:
;313:	if (ent->item->giTag == WP_GRAPPLING_HOOK)
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 10
NEI4 $195
line 314
;314:		other->client->ps.ammo[ent->item->giTag] = -1; // unlimited ammo
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
CNSTI4 -1
ASGNI4
LABELV $195
line 322
;315:
;316:	// team deathmatch has slow weapon respawns
;317:	//if ( g_gametype.integer == GT_TEAM ) {
;318:	//	return g_weaponTeamRespawn.integer;
;319:	//} else {
;320:	//	return g_weaponRespawn.integer;
;321:	//}
;322:	return SpawnTime(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
RETI4
LABELV $185
endproc Pickup_Weapon 12 12
proc Pickup_Health 28 8
line 328
;323:}
;324:
;325:
;326://======================================================================
;327:
;328:static int Pickup_Health(gentity_t *ent, gentity_t *other) {
line 333
;329:	int			max;
;330:	int			quantity;
;331:
;332:	// small and mega healths will go over the max
;333:	if (other->client && bg_itemlist[other->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $198
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 11
NEI4 $198
line 334
;334:		max = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 335
;335:	} else if (ent->item->quantity != 5 && ent->item->quantity != 100) {
ADDRGP4 $199
JUMPV
LABELV $198
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 5
EQI4 $201
ADDRLP4 12
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 100
EQI4 $201
line 336
;336:		max = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 337
;337:	} else {
ADDRGP4 $202
JUMPV
LABELV $201
line 338
;338:		max = other->client->ps.stats[STAT_MAX_HEALTH] * 2;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 339
;339:	}
LABELV $202
LABELV $199
line 341
;340:
;341:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $203
line 342
;342:		quantity = ent->count;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 343
;343:	} else {
ADDRGP4 $204
JUMPV
LABELV $203
line 344
;344:		quantity = ent->item->quantity;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 345
;345:	}
LABELV $204
line 347
;346:
;347:	other->health += quantity;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 349
;348:
;349:	if (other->health > max) {
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $205
line 350
;350:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 351
;351:	}
LABELV $205
line 352
;352:	other->client->ps.stats[STAT_HEALTH] = other->health;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ASGNI4
line 359
;353:
;354:	//if ( ent->item->quantity == 100 ) { // mega health respawns slow
;355:	//	return RESPAWN_MEGAHEALTH;
;356:	//} else {
;357:	//	return RESPAWN_HEALTH;
;358:	//}
;359:	return SpawnTime(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
RETI4
LABELV $197
endproc Pickup_Health 28 8
proc Pickup_StandardArmor 16 8
line 365
;360:}
;361:
;362:
;363://======================================================================
;364:
;365:static int Pickup_StandardArmor(gentity_t *ent, gentity_t *other) {
line 368
;366:	int		upperBound;
;367:
;368:	other->client->ps.stats[STAT_ARMOR] += ent->item->quantity;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDI4
ASGNI4
line 370
;369:
;370:	if (other->client && bg_itemlist[other->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $208
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 11
NEI4 $208
line 371
;371:		upperBound = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 372
;372:	} else {
ADDRGP4 $209
JUMPV
LABELV $208
line 373
;373:		upperBound = other->client->ps.stats[STAT_MAX_HEALTH] * 2;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 374
;374:	}
LABELV $209
line 376
;375:
;376:	if (other->client->ps.stats[STAT_ARMOR] > upperBound) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $211
line 377
;377:		other->client->ps.stats[STAT_ARMOR] = upperBound;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 378
;378:	}
LABELV $211
line 380
;379:
;380:	return SpawnTime(ent, qfalse); // return RESPAWN_ARMOR;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 12
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
RETI4
LABELV $207
endproc Pickup_StandardArmor 16 8
proc Pickup_TieredArmor 24 8
line 383
;381:}
;382:
;383:static int Pickup_TieredArmor(gentity_t *ent, gentity_t *other) {
line 384
;384:	playerState_t *ps = &other->client->ps;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 388
;385:	gitem_armor_t *oldInfo, *newInfo;
;386:	int				oldTotal;
;387:
;388:	oldTotal = ps->stats[STAT_ARMOR];
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 389
;389:	oldInfo = &bgArmor[ps->stats[STAT_ARMOR_TIER]];
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 bgArmor
ADDP4
ASGNP4
line 391
;390:
;391:	newInfo = &bgArmor[ent->item->giTag];
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 bgArmor
ADDP4
ASGNP4
line 394
;392:
;393:	// if no armor, reset type
;394:	if (!oldTotal && oldInfo->armor)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $214
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $214
line 395
;395:		ps->stats[STAT_ARMOR_TIER] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 0
ASGNI4
LABELV $214
line 398
;396:
;397:	// shards: just add it and cap to max
;398:	if (ent->item->giTag == ARMOR_SHARD) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
NEI4 $216
line 399
;399:		gitem_armor_t *shard = &bgArmor[ARMOR_SHARD];
ADDRLP4 16
ADDRGP4 bgArmor
ASGNP4
line 400
;400:		if (!oldTotal)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $218
line 401
;401:			ps->stats[STAT_ARMOR] = shard->base_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $219
JUMPV
LABELV $218
line 403
;402:		else
;403:			ps->stats[STAT_ARMOR] += shard->base_count;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDI4
ASGNI4
LABELV $219
line 405
;404:
;405:		if (ps->stats[STAT_ARMOR] > shard->max_count)
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $217
line 406
;406:			ps->stats[STAT_ARMOR] = shard->max_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 407
;407:	} else {
ADDRGP4 $217
JUMPV
LABELV $216
line 408
;408:		ps->stats[STAT_ARMOR_TIER] = newInfo->armor;
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
line 410
;409:
;410:		ps->stats[STAT_ARMOR] = newInfo->base_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 411
;411:		if (ps->stats[STAT_ARMOR] > newInfo->max_count)
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $222
line 412
;412:			ps->stats[STAT_ARMOR] = newInfo->max_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
LABELV $222
line 413
;413:	}
LABELV $217
line 419
;414:
;415:#ifdef MATCHSTATS
;416:	Stats_PickupArmor(ent, other);
;417:#endif
;418:
;419:	return SpawnTime(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
RETI4
LABELV $213
endproc Pickup_TieredArmor 24 8
export RespawnItem
proc RespawnItem 24 12
line 429
;420:}
;421:
;422://======================================================================
;423:
;424:/*
;425:===============
;426:RespawnItem
;427:===============
;428:*/
;429:void RespawnItem(gentity_t *ent) {
line 431
;430:
;431:	if (!ent) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $225
line 432
;432:		return;
ADDRGP4 $224
JUMPV
LABELV $225
line 436
;433:	}
;434:
;435:	// randomly select from teamed entities
;436:	if (ent->team) {
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $227
line 441
;437:		gentity_t *master;
;438:		int	count;
;439:		int choice;
;440:
;441:		if (!ent->teammaster) {
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $229
line 442
;442:			G_Error("RespawnItem: bad teammaster");
ADDRGP4 $231
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 443
;443:		}
LABELV $229
line 445
;444:
;445:		master = ent->teammaster;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
line 447
;446:
;447:		for (count = 0, ent = master; ent; ent = ent->teamchain, count++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 8
INDIRP4
ASGNP4
ADDRGP4 $235
JUMPV
LABELV $232
line 449
;448:			// reset spawn timers on all teamed entities
;449:			ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 0
ASGNI4
line 450
;450:		}
LABELV $233
line 447
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $235
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $232
line 452
;451:
;452:		choice = rand() % count;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 454
;453:
;454:		for (count = 0, ent = master; ent && count < choice; ent = ent->teamchain, count++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 8
INDIRP4
ASGNP4
ADDRGP4 $239
JUMPV
LABELV $236
line 455
;455:			;
LABELV $237
line 454
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $239
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $240
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $236
LABELV $240
line 456
;456:	}
LABELV $227
line 458
;457:
;458:	if (!ent) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $241
line 459
;459:		return;
ADDRGP4 $224
JUMPV
LABELV $241
line 462
;460:	}
;461:
;462:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 463
;463:	ent->s.eFlags &= ~EF_NODRAW;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 464
;464:	ent->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 465
;465:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 467
;466:
;467:	if (ent->item->giType == IT_POWERUP) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
NEI4 $243
line 472
;468:		// play powerup spawn sound to all clients
;469:		gentity_t *te;
;470:
;471:		// if the powerup respawn sound should Not be global
;472:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
EQF4 $245
line 473
;473:			te = G_TempEntity(ent->s.pos.trBase, EV_GENERAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 12
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
ASGNP4
line 474
;474:		} else {
ADDRGP4 $246
JUMPV
LABELV $245
line 475
;475:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 12
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
ASGNP4
line 476
;476:		}
LABELV $246
line 477
;477:		te->s.eventParm = G_SoundIndex("sound/items/poweruprespawn.wav");
ADDRGP4 $247
ARGP4
ADDRLP4 12
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 478
;478:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 16
ADDRLP4 8
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 483
;479:
;480:		//TODO: for Quad Hog
;481:		// if (g_quadHog.integer && ent->item->giTag == PW_QUAD)
;482:			//G_BroadcastServerCommand(-1, S_COLOR_CYAN "Quad" S_COLOR_WHITE " respawned!");
;483:	}
LABELV $243
line 485
;484:
;485:	if (ent->item->giType == IT_HOLDABLE && ent->item->giTag == HI_KAMIKAZE) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $248
ADDRLP4 8
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 3
NEI4 $248
line 490
;486:		// play powerup spawn sound to all clients
;487:		gentity_t *te;
;488:
;489:		// if the powerup respawn sound should Not be global
;490:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
EQF4 $250
line 491
;491:			te = G_TempEntity(ent->s.pos.trBase, EV_GENERAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 492
;492:		} else {
ADDRGP4 $251
JUMPV
LABELV $250
line 493
;493:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 494
;494:		}
LABELV $251
line 495
;495:		te->s.eventParm = G_SoundIndex("sound/items/kamikazerespawn.wav");
ADDRGP4 $252
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 496
;496:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 20
ADDRLP4 12
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 497
;497:	}
LABELV $248
line 500
;498:
;499:	// play the normal respawn sound only to nearby clients
;500:	G_AddEvent(ent, EV_ITEM_RESPAWN, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 40
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 502
;501:
;502:	ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 0
ASGNI4
line 503
;503:}
LABELV $224
endproc RespawnItem 24 12
export Touch_Item
proc Touch_Item 64 12
line 511
;504:
;505:
;506:/*
;507:===============
;508:Touch_Item
;509:===============
;510:*/
;511:void Touch_Item(gentity_t *ent, gentity_t *other, trace_t *trace) {
line 515
;512:	int			respawn;
;513:	qboolean	predict;
;514:
;515:	if (!other->client)
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $254
line 516
;516:		return;
ADDRGP4 $253
JUMPV
LABELV $254
line 517
;517:	if (other->health < 1)
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 1
GEI4 $256
line 518
;518:		return;		// dead people can't pickup
ADDRGP4 $253
JUMPV
LABELV $256
line 521
;519:
;520:	// the same pickup rules are used for client side and server side
;521:	if (!BG_CanItemBeGrabbed(g_gametype.integer, &ent->s, &other->client->ps)) {
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 BG_CanItemBeGrabbed
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $258
line 522
;522:		return;
ADDRGP4 $253
JUMPV
LABELV $258
line 525
;523:	}
;524:
;525:	G_LogPrintf("Item: %i %s\n", other->s.number, ent->item->classname);
ADDRGP4 $261
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 527
;526:
;527:	predict = other->client->pers.predictItemPickup;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 504
ADDP4
INDIRI4
ASGNI4
line 530
;528:
;529:	// call the item-specific pickup function
;530:	switch (ent->item->giType) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 1
LTI4 $253
ADDRLP4 12
INDIRI4
CNSTI4 8
GTI4 $253
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $279-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $279
address $265
address $266
address $267
address $272
address $273
address $278
address $276
address $277
code
LABELV $265
line 532
;531:	case IT_WEAPON:
;532:		respawn = Pickup_Weapon(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 Pickup_Weapon
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 533
;533:		break;
ADDRGP4 $263
JUMPV
LABELV $266
line 535
;534:	case IT_AMMO:
;535:		respawn = Pickup_Ammo(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 Pickup_Ammo
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 536
;536:		break;
ADDRGP4 $263
JUMPV
LABELV $267
line 538
;537:	case IT_ARMOR:
;538:		respawn = armor_tiered.integer ? Pickup_TieredArmor(ent, other) : Pickup_StandardArmor(ent, other);
ADDRGP4 armor_tiered+12
INDIRI4
CNSTI4 0
EQI4 $270
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 Pickup_TieredArmor
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 32
INDIRI4
ASGNI4
ADDRGP4 $271
JUMPV
LABELV $270
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 Pickup_StandardArmor
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
ASGNI4
LABELV $271
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
line 539
;539:		break;
ADDRGP4 $263
JUMPV
LABELV $272
line 541
;540:	case IT_HEALTH:
;541:		respawn = Pickup_Health(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 Pickup_Health
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 40
INDIRI4
ASGNI4
line 542
;542:		break;
ADDRGP4 $263
JUMPV
LABELV $273
line 544
;543:	case IT_POWERUP:
;544:		respawn = Pickup_Powerup(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 Pickup_Powerup
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
ASGNI4
line 546
;545:		// allow prediction for some powerups
;546:		if (ent->item->giTag >= PW_QUAD && ent->item->giTag <= PW_FLIGHT)
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
LTI4 $274
ADDRLP4 48
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 6
GTI4 $274
line 547
;547:			predict = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRGP4 $263
JUMPV
LABELV $274
line 549
;548:		else
;549:			predict = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 550
;550:		break;
ADDRGP4 $263
JUMPV
LABELV $276
line 552
;551:	case IT_PERSISTANT_POWERUP:
;552:		respawn = Pickup_PersistantPowerup(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 Pickup_PersistantPowerup
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 52
INDIRI4
ASGNI4
line 553
;553:		break;
ADDRGP4 $263
JUMPV
LABELV $277
line 555
;554:	case IT_TEAM:
;555:		respawn = Pickup_Team(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 Pickup_Team
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 56
INDIRI4
ASGNI4
line 556
;556:		break;
ADDRGP4 $263
JUMPV
LABELV $278
line 558
;557:	case IT_HOLDABLE:
;558:		respawn = Pickup_Holdable(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 Pickup_Holdable
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
ASGNI4
line 559
;559:		break;
line 561
;560:	default:
;561:		return;
LABELV $263
line 564
;562:	}
;563:
;564:	if (!respawn) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $281
line 565
;565:		return;
ADDRGP4 $253
JUMPV
LABELV $281
line 569
;566:	}
;567:
;568:	// play the normal pickup sound
;569:	if (predict) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $283
line 570
;570:		G_AddPredictableEvent(other, EV_ITEM_PICKUP, ent->s.modelindex);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddPredictableEvent
CALLV
pop
line 571
;571:	} else {
ADDRGP4 $284
JUMPV
LABELV $283
line 572
;572:		G_AddEvent(other, EV_ITEM_PICKUP, ent->s.modelindex);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 573
;573:	}
LABELV $284
line 576
;574:
;575:	// powerup pickups are global broadcasts
;576:	if (ent->item->giType == IT_POWERUP || ent->item->giType == IT_TEAM) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $287
ADDRLP4 20
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $285
LABELV $287
line 578
;577:		// if we want the global sound to play
;578:		if (!ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $288
line 581
;579:			gentity_t *te;
;580:
;581:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_ITEM_PICKUP);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 20
ARGI4
ADDRLP4 28
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 582
;582:			te->s.eventParm = ent->s.modelindex;
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ASGNI4
line 583
;583:			te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 584
;584:		} else {
ADDRGP4 $289
JUMPV
LABELV $288
line 587
;585:			gentity_t *te;
;586:
;587:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_ITEM_PICKUP);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 20
ARGI4
ADDRLP4 28
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 588
;588:			te->s.eventParm = ent->s.modelindex;
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ASGNI4
line 590
;589:			// only send this temp entity to a single client
;590:			te->r.svFlags |= SVF_SINGLECLIENT;
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 591
;591:			te->r.singleClient = other->s.number;
ADDRLP4 24
INDIRP4
CNSTI4 428
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 592
;592:		}
LABELV $289
line 593
;593:	}
LABELV $285
line 596
;594:
;595:	// fire item targets
;596:	G_UseTargets(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 599
;597:
;598:	// wait of -1 will not respawn
;599:	if (ent->wait == -1) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRF4
CNSTF4 3212836864
NEF4 $290
line 600
;600:		ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 601
;601:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 602
;602:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 603
;603:		ent->unlinkAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 560
ADDP4
CNSTI4 1
ASGNI4
line 604
;604:		return;
ADDRGP4 $253
JUMPV
LABELV $290
line 608
;605:	}
;606:
;607:	// non zero wait overrides respawn time
;608:	if (ent->wait) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRF4
CNSTF4 0
EQF4 $292
line 609
;609:		respawn = ent->wait;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 610
;610:		respawn *= 1000;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1000
MULI4
ASGNI4
line 611
;611:	}
LABELV $292
line 614
;612:
;613:	// random can be used to vary the respawn time
;614:	if (ent->random) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRF4
CNSTF4 0
EQF4 $294
line 615
;615:		respawn += (crandom() * ent->random) * 1000;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRF4
MULF4
CNSTF4 1148846080
MULF4
ADDF4
CVFI4 4
ASGNI4
line 616
;616:		if (respawn < 1000) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
GEI4 $296
line 617
;617:			respawn = 1000;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 618
;618:		}
LABELV $296
line 619
;619:	}
LABELV $294
line 622
;620:
;621:	// dropped items will not respawn
;622:	if (ent->flags & FL_DROPPED_ITEM) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $298
line 623
;623:		ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 624
;624:	}
LABELV $298
line 629
;625:
;626:	// picked up items still stay around, they just don't
;627:	// draw anything.  This allows respawnable items
;628:	// to be placed on movers.
;629:	ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 630
;630:	ent->s.eFlags |= EF_NODRAW;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 631
;631:	ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 637
;632:
;633:	// ZOID
;634:	// A negative respawn times means to never respawn this item (but don't 
;635:	// delete it).  This is used by items that are respawned by third party 
;636:	// events such as ctf flags
;637:	if (respawn <= 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $300
line 638
;638:		ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 0
ASGNI4
line 639
;639:		ent->think = 0;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
CNSTP4 0
ASGNP4
line 640
;640:	} else {
ADDRGP4 $301
JUMPV
LABELV $300
line 641
;641:		ent->nextthink = level.time + respawn;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 642
;642:		ent->think = RespawnItem;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 RespawnItem
ASGNP4
line 643
;643:	}
LABELV $301
line 645
;644:
;645:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 646
;646:}
LABELV $253
endproc Touch_Item 64 12
export LaunchItem
proc LaunchItem 12 8
line 658
;647:
;648:
;649://======================================================================
;650:
;651:/*
;652:================
;653:LaunchItem
;654:
;655:Spawns an item and tosses it forward
;656:================
;657:*/
;658:gentity_t *LaunchItem(gitem_t *item, vec3_t origin, vec3_t velocity) {
line 661
;659:	gentity_t *dropped;
;660:
;661:	dropped = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 663
;662:
;663:	dropped->s.eType = ET_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 664
;664:	dropped->s.modelindex = item - bg_itemlist;	// store item number in modelindex
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 665
;665:	dropped->s.modelindex2 = 1; // This is non-zero is it's a dropped item
ADDRLP4 0
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 1
ASGNI4
line 668
;666:
;667:	// item scale-down
;668:	dropped->s.time = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 670
;669:
;670:	dropped->classname = item->classname;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 671
;671:	dropped->item = item;
ADDRLP4 0
INDIRP4
CNSTI4 820
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 672
;672:	VectorSet(dropped->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 3245342720
ASGNF4
line 673
;673:	VectorSet(dropped->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1097859072
ASGNF4
line 674
;674:	dropped->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 676
;675:
;676:	dropped->touch = Touch_Item;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 678
;677:
;678:	G_SetOrigin(dropped, origin);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 679
;679:	dropped->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 680
;680:	dropped->s.pos.trTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 681
;681:	VectorCopy(velocity, dropped->s.pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 683
;682:
;683:	dropped->s.eFlags |= EF_BOUNCE_HALF;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 684
;684:	if ((g_gametype.integer == GT_CTF || g_gametype.integer == GT_ONEFLAG) && item->giType == IT_TEAM) { // Special case for CTF flags
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $310
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
NEI4 $306
LABELV $310
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $306
line 685
;685:		dropped->think = Team_DroppedFlagThink;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Team_DroppedFlagThink
ASGNP4
line 686
;686:		dropped->nextthink = level.time + 30000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 30000
ADDI4
ASGNI4
line 687
;687:		Team_CheckDroppedItem(dropped);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Team_CheckDroppedItem
CALLV
pop
line 688
;688:	} else { // auto-remove after 30 seconds
ADDRGP4 $307
JUMPV
LABELV $306
line 689
;689:		dropped->think = G_FreeEntity;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 690
;690:		dropped->nextthink = level.time + 30000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 30000
ADDI4
ASGNI4
line 691
;691:	}
LABELV $307
line 693
;692:
;693:	dropped->flags = FL_DROPPED_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
CNSTI4 4096
ASGNI4
line 695
;694:
;695:	trap_LinkEntity(dropped);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 697
;696:
;697:	return dropped;
ADDRLP4 0
INDIRP4
RETP4
LABELV $303
endproc LaunchItem 12 8
export Drop_Item
proc Drop_Item 32 16
line 707
;698:}
;699:
;700:/*
;701:================
;702:Drop_Item
;703:
;704:Spawns an item and tosses it forward
;705:================
;706:*/
;707:gentity_t *Drop_Item(gentity_t *ent, gitem_t *item, float angle) {
line 711
;708:	vec3_t	velocity;
;709:	vec3_t	angles;
;710:
;711:	VectorCopy(ent->s.apos.trBase, angles);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 712
;712:	angles[YAW] += angle;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ASGNF4
line 713
;713:	angles[PITCH] = 0;	// always forward
ADDRLP4 12
CNSTF4 0
ASGNF4
line 715
;714:
;715:	AngleVectors(angles, velocity, NULL, NULL);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 716
;716:	VectorScale(velocity, 150, velocity);
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
line 717
;717:	velocity[2] += 200 + crandom() * 50;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1120403456
MULF4
CNSTF4 1128792064
ADDF4
ADDF4
ASGNF4
line 719
;718:
;719:	return LaunchItem(item, ent->s.pos.trBase, velocity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 28
ADDRGP4 LaunchItem
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
RETP4
LABELV $313
endproc Drop_Item 32 16
export Use_Item
proc Use_Item 0 4
line 730
;720:}
;721:
;722:
;723:/*
;724:================
;725:Use_Item
;726:
;727:Respawn the item
;728:================
;729:*/
;730:void Use_Item(gentity_t *ent, gentity_t *other, gentity_t *activator) {
line 731
;731:	RespawnItem(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 RespawnItem
CALLV
pop
line 732
;732:}
LABELV $320
endproc Use_Item 0 4
export FinishSpawningItem
proc FinishSpawningItem 84 28
line 744
;733:
;734://======================================================================
;735:
;736:/*
;737:================
;738:FinishSpawningItem
;739:
;740:Traces down to find where an item should rest, instead of letting them
;741:free fall from their spawn points
;742:================
;743:*/
;744:void FinishSpawningItem(gentity_t *ent) {
line 748
;745:	trace_t		tr;
;746:	vec3_t		dest;
;747:
;748:	VectorSet(ent->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS);
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 3245342720
ASGNF4
line 749
;749:	VectorSet(ent->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS);
ADDRFP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1097859072
ASGNF4
line 751
;750:
;751:	ent->s.eType = ET_ITEM;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 752
;752:	ent->s.modelindex = ent->item - bg_itemlist;		// store item number in modelindex
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 753
;753:	ent->s.modelindex2 = 0; // zero indicates this isn't a dropped item
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 0
ASGNI4
line 755
;754:
;755:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 756
;756:	ent->touch = Touch_Item;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 758
;757:	// using an item causes it to respawn
;758:	ent->use = Use_Item;
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Use_Item
ASGNP4
line 761
;759:
;760:	// for pickup prediction
;761:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $322
line 762
;762:		ent->s.time2 = ent->count;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 763
;763:	} else if (ent->item) {
ADDRGP4 $323
JUMPV
LABELV $322
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $324
line 764
;764:		ent->s.time2 = ent->item->quantity;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 765
;765:	}
LABELV $324
LABELV $323
line 767
;766:
;767:	if (ent->spawnflags & 1) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $326
line 769
;768:		// suspended
;769:		G_SetOrigin(ent, ent->s.origin);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 770
;770:	} else {
ADDRGP4 $327
JUMPV
LABELV $326
line 772
;771:		// drop to floor
;772:		VectorSet(dest, ent->s.origin[0], ent->s.origin[1], ent->s.origin[2] - 4096);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 72
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1166016512
SUBF4
ASGNF4
line 773
;773:		trap_Trace(&tr, ent->s.origin, ent->r.mins, ent->r.maxs, dest, ent->s.number, MASK_SOLID);
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 76
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 774
;774:		if (tr.startsolid) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $330
line 775
;775:			G_Printf("FinishSpawningItem: %s startsolid at %s\n", ent->classname, vtos(ent->s.origin));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $333
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 776
;776:			G_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 777
;777:			return;
ADDRGP4 $321
JUMPV
LABELV $330
line 781
;778:		}
;779:
;780:		// allow to ride movers
;781:		ent->s.groundEntityNum = tr.entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 0+52
INDIRI4
ASGNI4
line 783
;782:
;783:		G_SetOrigin(ent, tr.endpos);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 784
;784:	}
LABELV $327
line 787
;785:
;786:	// team slaves and targeted items aren't present at start
;787:	if ((ent->flags & FL_TEAMSLAVE) || ent->targetname) {
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $338
ADDRLP4 72
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $336
LABELV $338
line 788
;788:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 789
;789:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 790
;790:		return;
ADDRGP4 $321
JUMPV
LABELV $336
line 793
;791:	}
;792:
;793:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 794
;794:}
LABELV $321
endproc FinishSpawningItem 84 28
export G_CheckTeamItems
proc G_CheckTeamItems 28 12
line 804
;795:
;796:
;797:qboolean	itemRegistered[MAX_ITEMS];
;798:
;799:/*
;800:==================
;801:G_CheckTeamItems
;802:==================
;803:*/
;804:void G_CheckTeamItems(void) {
line 807
;805:
;806:	// Set up team stuff
;807:	Team_InitGame();
ADDRGP4 Team_InitGame
CALLV
pop
line 809
;808:
;809:	if (g_gametype.integer == GT_CTF) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
NEI4 $340
line 813
;810:		gitem_t *item;
;811:
;812:		// check for the two flags
;813:		item = BG_FindItem("Red Flag");
ADDRGP4 $343
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 814
;814:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $346
ADDRLP4 8
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $344
LABELV $346
line 815
;815:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_redflag in map\n");
ADDRGP4 $347
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 816
;816:		}
LABELV $344
line 817
;817:		item = BG_FindItem("Blue Flag");
ADDRGP4 $348
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 818
;818:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 16
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $351
ADDRLP4 16
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $341
LABELV $351
line 819
;819:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_blueflag in map\n");
ADDRGP4 $352
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 820
;820:		}
line 821
;821:	} else if (g_gametype.integer == GT_ONEFLAG) {
ADDRGP4 $341
JUMPV
LABELV $340
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
NEI4 $353
line 825
;822:		gitem_t *item;
;823:
;824:		// check for all three flags
;825:		item = BG_FindItem("Red Flag");
ADDRGP4 $343
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 826
;826:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $358
ADDRLP4 8
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $356
LABELV $358
line 827
;827:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_redflag in map\n");
ADDRGP4 $347
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 828
;828:		}
LABELV $356
line 829
;829:		item = BG_FindItem("Blue Flag");
ADDRGP4 $348
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 830
;830:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 16
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $361
ADDRLP4 16
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $359
LABELV $361
line 831
;831:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_blueflag in map\n");
ADDRGP4 $352
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 832
;832:		}
LABELV $359
line 833
;833:		item = BG_FindItem("Neutral Flag");
ADDRGP4 $362
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 834
;834:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 24
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 24
INDIRU4
CNSTU4 0
EQU4 $365
ADDRLP4 24
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $354
LABELV $365
line 835
;835:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_neutralflag in map\n");
ADDRGP4 $366
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 836
;836:		}
line 837
;837:	} else if (g_gametype.integer == GT_OBELISK) {
ADDRGP4 $354
JUMPV
LABELV $353
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 7
NEI4 $367
line 841
;838:		gentity_t *ent;
;839:
;840:		// check for the two obelisks
;841:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 842
;842:		ent = G_Find(ent, FOFS(classname), "team_redobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $370
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 843
;843:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $371
line 844
;844:			G_Printf(S_COLOR_YELLOW "WARNING: No team_redobelisk in map\n");
ADDRGP4 $373
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 845
;845:		}
LABELV $371
line 847
;846:
;847:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 848
;848:		ent = G_Find(ent, FOFS(classname), "team_blueobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $374
ARGP4
ADDRLP4 8
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 849
;849:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $368
line 850
;850:			G_Printf(S_COLOR_YELLOW "WARNING: No team_blueobelisk in map\n");
ADDRGP4 $377
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 851
;851:		}
line 852
;852:	} else if (g_gametype.integer == GT_HARVESTER) {
ADDRGP4 $368
JUMPV
LABELV $367
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $378
line 856
;853:		gentity_t *ent;
;854:
;855:		// check for all three obelisks
;856:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 857
;857:		ent = G_Find(ent, FOFS(classname), "team_redobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $370
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 858
;858:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $381
line 859
;859:			G_Printf(S_COLOR_YELLOW "WARNING: No team_redobelisk in map\n");
ADDRGP4 $373
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 860
;860:		}
LABELV $381
line 862
;861:
;862:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 863
;863:		ent = G_Find(ent, FOFS(classname), "team_blueobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $374
ARGP4
ADDRLP4 8
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 864
;864:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $383
line 865
;865:			G_Printf(S_COLOR_YELLOW "WARNING: No team_blueobelisk in map\n");
ADDRGP4 $377
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 866
;866:		}
LABELV $383
line 868
;867:
;868:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 869
;869:		ent = G_Find(ent, FOFS(classname), "team_neutralobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $385
ARGP4
ADDRLP4 12
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 870
;870:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $386
line 871
;871:			G_Printf(S_COLOR_YELLOW "WARNING: No team_neutralobelisk in map\n");
ADDRGP4 $388
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 872
;872:		}
LABELV $386
line 873
;873:	}
LABELV $378
LABELV $368
LABELV $354
LABELV $341
line 874
;874:}
LABELV $339
endproc G_CheckTeamItems 28 12
export ClearRegisteredItems
proc ClearRegisteredItems 16 12
line 882
;875:
;876:
;877:/*
;878:==============
;879:ClearRegisteredItems
;880:==============
;881:*/
;882:void ClearRegisteredItems(void) {
line 883
;883:	memset(itemRegistered, 0, sizeof(itemRegistered));
ADDRGP4 itemRegistered
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 886
;884:
;885:	// players always start with the base weapon
;886:	RegisterItem(BG_FindItemForWeapon(WP_MACHINEGUN));
CNSTI4 2
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 887
;887:	RegisterItem(BG_FindItemForWeapon(WP_GAUNTLET));
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 888
;888:	if (g_gametype.integer == GT_HARVESTER) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $390
line 889
;889:		RegisterItem(BG_FindItem("Red Skull"));
ADDRGP4 $393
ARGP4
ADDRLP4 8
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 890
;890:		RegisterItem(BG_FindItem("Blue Skull"));
ADDRGP4 $394
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 891
;891:	}
LABELV $390
line 892
;892:}
LABELV $389
endproc ClearRegisteredItems 16 12
export RegisterItem
proc RegisterItem 4 4
line 901
;893:
;894:/*
;895:===============
;896:RegisterItem
;897:
;898:The item will be added to the precache list
;899:===============
;900:*/
;901:void RegisterItem(gitem_t *item) {
line 902
;902:	if (!item) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $396
line 903
;903:		G_Error("RegisterItem: NULL");
ADDRGP4 $398
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 904
;904:	}
LABELV $396
line 906
;905:
;906:	if (item->giType == IT_WEAPON) {
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $399
line 907
;907:		level.mapWeapons |= (1<<item->giTag);
ADDRLP4 0
ADDRGP4 level+9724
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LSHI4
BORI4
ASGNI4
line 908
;908:	}
LABELV $399
line 909
;909:	itemRegistered[item - bg_itemlist] = qtrue;
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
CNSTI4 1
ASGNI4
line 910
;910:}
LABELV $395
endproc RegisterItem 4 4
export SaveRegisteredItems
proc SaveRegisteredItems 268 8
line 921
;911:
;912:
;913:/*
;914:===============
;915:SaveRegisteredItems
;916:
;917:Write the needed items to a config string
;918:so the client will know which ones to precache
;919:===============
;920:*/
;921:void SaveRegisteredItems(void) {
line 926
;922:	char	string[MAX_ITEMS + 1];
;923:	int		i;
;924:	int		count;
;925:
;926:	count = 0;
ADDRLP4 264
CNSTI4 0
ASGNI4
line 927
;927:	for (i = 0; i < bg_numItems; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $406
JUMPV
LABELV $403
line 928
;928:		if (itemRegistered[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
EQI4 $407
line 929
;929:			count++;
ADDRLP4 264
ADDRLP4 264
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 930
;930:			string[i] = '1';
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 49
ASGNI1
line 931
;931:		} else {
ADDRGP4 $408
JUMPV
LABELV $407
line 932
;932:			string[i] = '0';
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 48
ASGNI1
line 933
;933:		}
LABELV $408
line 934
;934:	}
LABELV $404
line 927
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $406
ADDRLP4 0
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $403
line 935
;935:	string[bg_numItems] = 0;
ADDRGP4 bg_numItems
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 0
ASGNI1
line 937
;936:
;937:	G_Printf("%i items registered\n", count);
ADDRGP4 $409
ARGP4
ADDRLP4 264
INDIRI4
ARGI4
ADDRGP4 G_Printf
CALLV
pop
line 938
;938:	trap_SetConfigstring(CS_ITEMS, string);
CNSTI4 15
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 939
;939:}
LABELV $402
endproc SaveRegisteredItems 268 8
proc G_ItemDisabled 132 16
line 946
;940:
;941:/*
;942:============
;943:G_ItemDisabled
;944:============
;945:*/
;946:static int G_ItemDisabled(gitem_t *item) {
line 950
;947:
;948:	char name[128];
;949:
;950:	if (item->giType == IT_AMMO) {
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $411
line 951
;951:		if (g_ammoPack.integer) {
ADDRGP4 g_ammoPack+12
INDIRI4
CNSTI4 0
EQI4 $413
line 952
;952:			if (item->giTag != WP_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
EQI4 $414
line 953
;953:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $410
JUMPV
line 954
;954:		} else {
LABELV $413
line 955
;955:			if (item->giTag == WP_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
NEI4 $418
line 956
;956:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $410
JUMPV
LABELV $418
line 957
;957:		}
LABELV $414
line 958
;958:	}
LABELV $411
line 960
;959:
;960:	Com_sprintf(name, sizeof(name), "disable_%s", item->classname);
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $420
ARGP4
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 961
;961:	return trap_Cvar_VariableIntegerValue(name);
ADDRLP4 0
ARGP4
ADDRLP4 128
ADDRGP4 trap_Cvar_VariableIntegerValue
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
RETI4
LABELV $410
endproc G_ItemDisabled 132 16
export G_SpawnItem
proc G_SpawnItem 8 12
line 974
;962:}
;963:
;964:/*
;965:============
;966:G_SpawnItem
;967:
;968:Sets the clipping size and plants the object on the floor.
;969:
;970:Items can't be immediately dropped to floor, because they might
;971:be on an entity that hasn't spawned yet.
;972:============
;973:*/
;974:void G_SpawnItem(gentity_t *ent, gitem_t *item) {
line 976
;975:
;976:	G_SpawnFloat("random", "0", &ent->random);
ADDRGP4 $422
ARGP4
ADDRGP4 $423
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 977
;977:	G_SpawnFloat("wait", "0", &ent->wait);
ADDRGP4 $424
ARGP4
ADDRGP4 $423
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 979
;978:
;979:	RegisterItem(item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 981
;980:
;981:	if (G_ItemDisabled(item)) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 G_ItemDisabled
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $425
line 982
;982:		ent->tag = TAG_DONTSPAWN;
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
CNSTI4 1
ASGNI4
line 983
;983:		return;
ADDRGP4 $421
JUMPV
LABELV $425
line 986
;984:	}
;985:
;986:	ent->item = item;
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 989
;987:	// some movers spawn on the second frame, so delay item
;988:	// spawns until the third frame so they can ride trains
;989:	ent->nextthink = level.time + FRAMETIME * 2;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 990
;990:	ent->think = FinishSpawningItem;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 FinishSpawningItem
ASGNP4
line 992
;991:
;992:	ent->physicsBounce = 0.50;		// items are bouncy
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
CNSTF4 1056964608
ASGNF4
line 994
;993:
;994:	if (item->giType == IT_POWERUP) {
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
NEI4 $428
line 995
;995:		G_SoundIndex("sound/items/poweruprespawn.wav");
ADDRGP4 $247
ARGP4
ADDRGP4 G_SoundIndex
CALLI4
pop
line 996
;996:		G_SpawnFloat("noglobalsound", "0", &ent->speed);
ADDRGP4 $430
ARGP4
ADDRGP4 $423
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 997
;997:	}
LABELV $428
line 999
;998:
;999:	if (item->giType == IT_PERSISTANT_POWERUP) {
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 7
NEI4 $431
line 1000
;1000:		ent->s.generic1 = ent->spawnflags;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ASGNI4
line 1001
;1001:	}
LABELV $431
line 1002
;1002:}
LABELV $421
endproc G_SpawnItem 8 12
export G_BounceItem
proc G_BounceItem 52 12
line 1011
;1003:
;1004:
;1005:/*
;1006:================
;1007:G_BounceItem
;1008:
;1009:================
;1010:*/
;1011:void G_BounceItem(gentity_t *ent, trace_t *trace) {
line 1017
;1012:	vec3_t	velocity;
;1013:	float	dot;
;1014:	int		hitTime;
;1015:
;1016:	// reflect the velocity on the trace plane
;1017:	hitTime = level.previousTime + (level.time - level.previousTime) * trace->fraction;
ADDRLP4 16
ADDRGP4 level+36
INDIRI4
CVIF4 4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1018
;1018:	BG_EvaluateTrajectoryDelta(&ent->s.pos, hitTime, velocity);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 1019
;1019:	dot = DotProduct(velocity, trace->plane.normal);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1020
;1020:	VectorMA(velocity, -2 * dot, trace->plane.normal, ent->s.pos.trDelta);
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 1023
;1021:
;1022:	// cut the velocity to keep from bouncing forever
;1023:	VectorScale(ent->s.pos.trDelta, ent->physicsBounce, ent->s.pos.trDelta);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
MULF4
ASGNF4
line 1026
;1024:
;1025:	// check for stop
;1026:	if (trace->plane.normal[2] > 0 && ent->s.pos.trDelta[2] < 40) {
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $441
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1109393408
GEF4 $441
line 1027
;1027:		trace->endpos[2] += 1.0;	// make sure it is off ground
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1028
;1028:		SnapVector(trace->endpos);
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1029
;1029:		G_SetOrigin(ent, trace->endpos);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1030
;1030:		ent->s.groundEntityNum = trace->entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1031
;1031:		return;
ADDRGP4 $433
JUMPV
LABELV $441
line 1034
;1032:	}
;1033:
;1034:	VectorAdd(ent->r.currentOrigin, trace->plane.normal, ent->r.currentOrigin);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1035
;1035:	VectorCopy(ent->r.currentOrigin, ent->s.pos.trBase);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 1036
;1036:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1037
;1037:}
LABELV $433
endproc G_BounceItem 52 12
export G_RunItem
proc G_RunItem 88 28
line 1046
;1038:
;1039:
;1040:/*
;1041:================
;1042:G_RunItem
;1043:
;1044:================
;1045:*/
;1046:void G_RunItem(gentity_t *ent) {
line 1053
;1047:	vec3_t		origin;
;1048:	trace_t		tr;
;1049:	int			contents;
;1050:	int			mask;
;1051:
;1052:	// if its groundentity has been set to ENTITYNUM_NONE, it may have been pushed off an edge
;1053:	if (ent->s.groundEntityNum == ENTITYNUM_NONE) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $445
line 1054
;1054:		if (ent->s.pos.trType != TR_GRAVITY) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 5
EQI4 $447
line 1055
;1055:			ent->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1056
;1056:			ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1057
;1057:		}
LABELV $447
line 1058
;1058:	}
LABELV $445
line 1060
;1059:
;1060:	if (ent->s.pos.trType == TR_STATIONARY) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $450
line 1062
;1061:		// check think function
;1062:		G_RunThink(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 1063
;1063:		return;
ADDRGP4 $444
JUMPV
LABELV $450
line 1067
;1064:	}
;1065:
;1066:	// get current position
;1067:	BG_EvaluateTrajectory(&ent->s.pos, level.time, origin);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1070
;1068:
;1069:	// trace a line from the previous position to the current position
;1070:	if (ent->clipmask) {
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
CNSTI4 0
EQI4 $453
line 1071
;1071:		mask = ent->clipmask;
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
line 1072
;1072:	} else {
ADDRGP4 $454
JUMPV
LABELV $453
line 1073
;1073:		mask = MASK_PLAYERSOLID & ~CONTENTS_BODY;//MASK_SOLID;
ADDRLP4 72
CNSTI4 65537
ASGNI4
line 1074
;1074:	}
LABELV $454
line 1075
;1075:	trap_Trace(&tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, origin,
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1078
;1076:		ent->r.ownerNum, mask);
;1077:
;1078:	VectorCopy(tr.endpos, ent->r.currentOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 1080
;1079:
;1080:	if (tr.startsolid) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $456
line 1081
;1081:		tr.fraction = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 1082
;1082:	}
LABELV $456
line 1084
;1083:
;1084:	trap_LinkEntity(ent);	// FIXME: avoid this for stationary?
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1087
;1085:
;1086:	// check think function
;1087:	G_RunThink(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 1089
;1088:
;1089:	if (tr.fraction == 1) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $460
line 1090
;1090:		return;
ADDRGP4 $444
JUMPV
LABELV $460
line 1094
;1091:	}
;1092:
;1093:	// if it is in a nodrop volume, remove it
;1094:	contents = trap_PointContents(ent->r.currentOrigin, -1);
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 80
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 80
INDIRI4
ASGNI4
line 1095
;1095:	if (contents & CONTENTS_NODROP) {
ADDRLP4 68
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $463
line 1096
;1096:		if (ent->item && ent->item->giType == IT_TEAM) {
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $465
ADDRLP4 84
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $465
line 1097
;1097:			Team_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Team_FreeEntity
CALLV
pop
line 1098
;1098:		} else {
ADDRGP4 $444
JUMPV
LABELV $465
line 1099
;1099:			G_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1100
;1100:		}
line 1101
;1101:		return;
ADDRGP4 $444
JUMPV
LABELV $463
line 1104
;1102:	}
;1103:
;1104:	G_BounceItem(ent, &tr);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_BounceItem
CALLV
pop
line 1105
;1105:}
LABELV $444
endproc G_RunItem 88 28
bss
export itemRegistered
align 4
LABELV itemRegistered
skip 1024
import svf_self_portal2
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_TraceCapsule
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Print
import g_training
import g_knockback_z_self
import g_knockback_z
import g_knockback_hmg
import g_knockback_cg
import g_knockback_pl
import g_knockback_ng
import g_knockback_gh
import g_knockback_bfg
import g_knockback_pg_self
import g_knockback_pg
import g_knockback_rg
import g_knockback_lg
import g_knockback_rl_self
import g_knockback_rl
import g_knockback_gl
import g_knockback_sg
import g_knockback_mg
import g_knockback_g
import g_velocity_rl
import g_velocity_pl
import g_velocity_pg
import g_velocity_gh
import g_velocity_gl
import g_velocity_bfg
import g_splashdamage_rl
import g_splashdamage_pl
import g_splashdamage_pg
import g_splashdamage_gl
import g_splashdamage_bfg
import g_splashradius_rl
import g_splashradius_pl
import g_splashradius_pg
import g_splashradius_gl
import g_splashradius_bfg
import g_damage_hmg
import g_damage_cg
import g_damage_pl
import g_damage_ng
import g_damage_gh
import g_damage_bfg
import g_damage_pg
import g_damage_rg
import g_damage_lg
import g_damage_rl
import g_damage_gl
import g_damage_sg
import g_damage_mg
import g_damage_g
import g_ammoPack
import g_ammoRespawn
import g_startingAmmo_hmg
import g_startingAmmo_cg
import g_startingAmmo_pl
import g_startingAmmo_ng
import g_startingAmmo_gh
import g_startingAmmo_bfg
import g_startingAmmo_pg
import g_startingAmmo_rg
import g_startingAmmo_lg
import g_startingAmmo_rl
import g_startingAmmo_gl
import g_startingAmmo_sg
import g_startingAmmo_mg
import g_startingAmmo_g
import g_startingWeapons
import armor_tiered
import g_rotation
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_predictPVS
import g_unlagged
import g_listEntity
import g_voteDelay
import g_voteLimit
import g_allowVoteMidGame
import g_allowSpecVote
import g_allowVote
import g_allowKill
import g_blood
import g_motd
import g_debugAlloc
import g_debugDamage
import g_debugMove
import g_inactivity
import g_respawn_delay_max
import g_respawn_delay_min
import g_weaponTeamRespawn
import g_weaponRespawn
import g_quadDamageFactor
import g_knockback
import g_gravity
import g_speed
import g_dedicated
import g_needpass
import g_filterBan
import g_banIPs
import g_password
import g_logSync
import g_log
import g_warmup
import g_teamForceBalance
import g_autoJoin
import g_friendlyFire
import g_synchronousClients
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_maxGameClients
import g_maxclients
import g_gametype
import sv_fps
import g_mapname
import g_cheats
import g_entities
import level
import AddTeamScore
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import G_MapExist
import G_LoadMap
import ParseMapRotation
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import UpdateTournamentInfo
import G_ClearClientSessionData
import G_WriteClientSessionData
import G_ReadClientSessionData
import G_InitSessionData
import G_WriteSessionData
import G_InitWorldSession
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_ResetFlags
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_BroadcastServerCommand
import G_Error
import G_Printf
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import MoveClientToIntermission
import DeathmatchScoreboardMessage
import G_StartKamikaze
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamConnectedCount
import TeamCount
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_prox
import fire_nail
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import TossClientSkulls
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import G_RevertVote
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $430
byte 1 110
byte 1 111
byte 1 103
byte 1 108
byte 1 111
byte 1 98
byte 1 97
byte 1 108
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $424
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $423
byte 1 48
byte 1 0
align 1
LABELV $422
byte 1 114
byte 1 97
byte 1 110
byte 1 100
byte 1 111
byte 1 109
byte 1 0
align 1
LABELV $420
byte 1 100
byte 1 105
byte 1 115
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 95
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $409
byte 1 37
byte 1 105
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $398
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 0
align 1
LABELV $394
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 83
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $393
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 83
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $388
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $385
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $377
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $374
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $373
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $370
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $366
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $362
byte 1 78
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $352
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $348
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $347
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $343
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $333
byte 1 70
byte 1 105
byte 1 110
byte 1 105
byte 1 115
byte 1 104
byte 1 83
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 115
byte 1 111
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $261
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $252
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 47
byte 1 107
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $247
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 47
byte 1 112
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 117
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $231
byte 1 82
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 109
byte 1 97
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $142
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 105
byte 1 99
byte 1 97
byte 1 112
byte 1 0
align 1
LABELV $109
byte 1 37
byte 1 115
byte 1 94
byte 1 51
byte 1 32
byte 1 103
byte 1 111
byte 1 116
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 33
byte 1 94
byte 1 55
byte 1 0
