export SpawnTime
code
proc SpawnTime 32 0
file "..\..\..\..\code\game\g_items.c"
line 40
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:#include "g_local.h"
;4:
;5:/*
;6:
;7:  Items are any object that a player can touch to gain some effect.
;8:
;9:  Pickup will return the number of seconds until they should respawn.
;10:
;11:  all items should pop when dropped in lava or slime
;12:
;13:  Respawnable items don't actually go away when picked up, they are
;14:  just made invisible and untouchable.  This allows them to ride
;15:  movers and respawn apropriately.
;16:*/
;17:
;18:// initial spawn times after warmup
;19:// in vq3 most of the items appears in one frame but we will delay that a bit
;20:// to reduce peak bandwidth and get some nice transition effects
;21:#define	SPAWN_WEAPONS		333
;22:#define	SPAWN_ARMOR			1200
;23:#define	SPAWN_HEALTH		900
;24:#define	SPAWN_AMMO			600
;25:#define	SPAWN_HOLDABLE		2500
;26:#define	SPAWN_MEGAHEALTH	10000
;27:#define	SPAWN_POWERUP		45000
;28:
;29:// periodic respawn times
;30:// g_weaponRespawn.integer || g_weaponTeamRespawn.integer
;31:#define	RESPAWN_ARMOR		25000
;32:#define	RESPAWN_HEALTH		35000
;33:#define	RESPAWN_AMMO		40000
;34:#define	RESPAWN_HOLDABLE	60000
;35:#define	RESPAWN_MEGAHEALTH	35000 //120000
;36:#define	RESPAWN_POWERUP		120000
;37:
;38://======================================================================
;39:
;40:int SpawnTime(gentity_t *ent, qboolean firstSpawn) {
line 41
;41:	if (!ent->item)
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $56
line 42
;42:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $55
JUMPV
LABELV $56
line 44
;43:
;44:	switch (ent->item->giType) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $58
ADDRLP4 0
INDIRI4
CNSTI4 7
GTI4 $58
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $95-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $95
address $61
address $69
address $73
address $77
address $86
address $91
address $90
code
LABELV $61
line 46
;45:	case IT_WEAPON:
;46:		if (firstSpawn)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $62
line 47
;47:			return SPAWN_WEAPONS;
CNSTI4 333
RETI4
ADDRGP4 $55
JUMPV
LABELV $62
line 48
;48:		if (g_gametype.integer == GT_TEAM)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $64
line 49
;49:			return g_weaponTeamRespawn.value * 1000;
ADDRGP4 g_weaponTeamRespawn+8
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
RETI4
ADDRGP4 $55
JUMPV
LABELV $64
line 51
;50:		else
;51:			return g_weaponRespawn.value * 1000;
ADDRGP4 g_weaponRespawn+8
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
RETI4
ADDRGP4 $55
JUMPV
LABELV $69
line 54
;52:
;53:	case IT_AMMO:
;54:		return firstSpawn ? SPAWN_AMMO : RESPAWN_AMMO;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $71
ADDRLP4 8
CNSTI4 600
ASGNI4
ADDRGP4 $72
JUMPV
LABELV $71
ADDRLP4 8
CNSTI4 40000
ASGNI4
LABELV $72
ADDRLP4 8
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $73
line 57
;55:
;56:	case IT_ARMOR:
;57:		return firstSpawn ? SPAWN_ARMOR : RESPAWN_ARMOR;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $75
ADDRLP4 12
CNSTI4 1200
ASGNI4
ADDRGP4 $76
JUMPV
LABELV $75
ADDRLP4 12
CNSTI4 25000
ASGNI4
LABELV $76
ADDRLP4 12
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $77
line 60
;58:
;59:	case IT_HEALTH:
;60:		if (ent->item->quantity == 100) // mega health respawns slow
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 100
NEI4 $78
line 61
;61:			return firstSpawn ? SPAWN_MEGAHEALTH : RESPAWN_MEGAHEALTH;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $81
ADDRLP4 16
CNSTI4 10000
ASGNI4
ADDRGP4 $82
JUMPV
LABELV $81
ADDRLP4 16
CNSTI4 35000
ASGNI4
LABELV $82
ADDRLP4 16
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $78
line 63
;62:		else
;63:			return firstSpawn ? SPAWN_HEALTH : RESPAWN_HEALTH;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $84
ADDRLP4 20
CNSTI4 900
ASGNI4
ADDRGP4 $85
JUMPV
LABELV $84
ADDRLP4 20
CNSTI4 35000
ASGNI4
LABELV $85
ADDRLP4 20
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $86
line 66
;64:
;65:	case IT_POWERUP:
;66:		return firstSpawn ? SPAWN_POWERUP : RESPAWN_POWERUP;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $88
ADDRLP4 24
CNSTI4 45000
ASGNI4
ADDRGP4 $89
JUMPV
LABELV $88
ADDRLP4 24
CNSTI4 120000
ASGNI4
LABELV $89
ADDRLP4 24
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $90
line 69
;67:
;68:	case IT_PERSISTANT_POWERUP:
;69:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $55
JUMPV
line 70
;70:		break;
LABELV $91
line 73
;71:
;72:	case IT_HOLDABLE:
;73:		return firstSpawn ? SPAWN_HOLDABLE : RESPAWN_HOLDABLE;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $93
ADDRLP4 28
CNSTI4 2500
ASGNI4
ADDRGP4 $94
JUMPV
LABELV $93
ADDRLP4 28
CNSTI4 60000
ASGNI4
LABELV $94
ADDRLP4 28
INDIRI4
RETI4
ADDRGP4 $55
JUMPV
LABELV $58
line 76
;74:
;75:	default: // IT_BAD and others
;76:		return 0;
CNSTI4 0
RETI4
LABELV $55
endproc SpawnTime 32 0
export Pickup_Powerup
proc Pickup_Powerup 116 28
line 81
;77:	}
;78:}
;79:
;80:
;81:int Pickup_Powerup(gentity_t *ent, gentity_t *other) {
line 86
;82:	int			quantity;
;83:	int			i;
;84:	gclient_t *client;
;85:
;86:	if (!other->client->ps.powerups[ent->item->giTag]) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $98
line 88
;87:		// round timing to seconds to make multiple powerup timers count in sync
;88:		other->client->ps.powerups[ent->item->giTag] = level.time - (level.time % 1000);
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
MODI4
SUBI4
ASGNI4
line 89
;89:	}
LABELV $98
line 91
;90:
;91:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $102
line 92
;92:		quantity = ent->count;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 93
;93:	} else {
ADDRGP4 $103
JUMPV
LABELV $102
line 94
;94:		quantity = ent->item->quantity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 95
;95:	}
LABELV $103
line 97
;96:
;97:	other->client->ps.powerups[ent->item->giTag] += quantity * 1000;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 1000
MULI4
ADDI4
ASGNI4
line 100
;98:
;99:	// give any nearby players a "denied" anti-reward
;100:	for (i = 0; i < level.maxclients; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $107
JUMPV
LABELV $104
line 106
;101:		vec3_t		delta;
;102:		float		len;
;103:		vec3_t		forward;
;104:		trace_t		tr;
;105:
;106:		client = &level.clients[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 1636
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 107
;107:		if (client == other->client) {
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
NEU4 $109
line 108
;108:			continue;
ADDRGP4 $105
JUMPV
LABELV $109
line 110
;109:		}
;110:		if (client->pers.connected != CON_CONNECTED) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 2
EQI4 $111
line 111
;111:			continue;
ADDRGP4 $105
JUMPV
LABELV $111
line 113
;112:		}
;113:		if (client->ps.stats[STAT_HEALTH] <= 0) {
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $113
line 114
;114:			continue;
ADDRGP4 $105
JUMPV
LABELV $113
line 119
;115:		}
;116:
;117:		// if same team in team game, no sound
;118:		// cannot use OnSameTeam as it expects to g_entities, not clients
;119:		if (g_gametype.integer >= GT_TEAM && other->client->sess.sessionTeam == client->sess.sessionTeam) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
LTI4 $115
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
NEI4 $115
line 120
;120:			continue;
ADDRGP4 $105
JUMPV
LABELV $115
line 124
;121:		}
;122:
;123:		// if too far away, no sound
;124:		VectorSubtract(ent->s.pos.trBase, client->ps.origin, delta);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 100
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 100
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 125
;125:		len = VectorNormalize(delta);
ADDRLP4 16
ARGP4
ADDRLP4 108
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 108
INDIRF4
ASGNF4
line 126
;126:		if (len > 192) {
ADDRLP4 40
INDIRF4
CNSTF4 1128267776
LEF4 $120
line 127
;127:			continue;
ADDRGP4 $105
JUMPV
LABELV $120
line 131
;128:		}
;129:
;130:		// if not facing, no sound
;131:		AngleVectors(client->ps.viewangles, forward, NULL, NULL);
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 28
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 132
;132:		if (DotProduct(delta, forward) < 0.4) {
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
MULF4
ADDF4
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
MULF4
ADDF4
CNSTF4 1053609165
GEF4 $122
line 133
;133:			continue;
ADDRGP4 $105
JUMPV
LABELV $122
line 137
;134:		}
;135:
;136:		// if not line of sight, no sound
;137:		trap_Trace(&tr, client->ps.origin, NULL, NULL, ent->s.pos.trBase, ENTITYNUM_NONE, CONTENTS_SOLID);
ADDRLP4 44
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 138
;138:		if (tr.fraction != 1.0) {
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
EQF4 $128
line 139
;139:			continue;
ADDRGP4 $105
JUMPV
LABELV $128
line 143
;140:		}
;141:
;142:		// anti-reward
;143:		client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_DENIEDREWARD;
ADDRLP4 112
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
CNSTI4 1
BXORI4
ASGNI4
line 144
;144:	}
LABELV $105
line 100
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $107
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $104
line 146
;145:
;146:	return SpawnTime(ent, qfalse); // return RESPAWN_POWERUP;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
RETI4
LABELV $97
endproc Pickup_Powerup 116 28
export Pickup_PersistantPowerup
proc Pickup_PersistantPowerup 1104 12
line 152
;147:}
;148:
;149:
;150://======================================================================
;151:
;152:int Pickup_PersistantPowerup(gentity_t *ent, gentity_t *other) {
line 158
;153:	int		clientNum;
;154:	char	userinfo[MAX_INFO_STRING];
;155:	float	handicap;
;156:	int		max;
;157:
;158:	other->client->ps.stats[STAT_PERSISTANT_POWERUP] = ent->item - bg_itemlist;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 159
;159:	other->client->persistantPowerup = ent;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 776
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 161
;160:
;161:	switch (ent->item->giTag) {
ADDRLP4 1036
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1036
INDIRI4
CNSTI4 10
LTI4 $132
ADDRLP4 1036
INDIRI4
CNSTI4 13
GTI4 $132
ADDRLP4 1036
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $155-40
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $155
address $140
address $135
address $144
address $148
code
LABELV $135
line 163
;162:	case PW_GUARD:
;163:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 164
;164:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 165
;165:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $136
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1048
INDIRF4
ASGNF4
line 166
;166:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1052
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $139
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $137
LABELV $139
line 167
;167:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 168
;168:		}
LABELV $137
line 169
;169:		max = (int)(2 * handicap);
ADDRLP4 1032
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 171
;170:
;171:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 172
;172:		other->client->ps.stats[STAT_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 173
;173:		other->client->ps.stats[STAT_MAX_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 174
;174:		other->client->ps.stats[STAT_ARMOR] = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 175
;175:		other->client->pers.maxHealth = max;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 1032
INDIRI4
ASGNI4
line 177
;176:
;177:		break;
ADDRGP4 $133
JUMPV
LABELV $140
line 180
;178:
;179:	case PW_SCOUT:
;180:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 181
;181:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 182
;182:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $136
ARGP4
ADDRLP4 1056
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1056
INDIRP4
ARGP4
ADDRLP4 1060
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1060
INDIRF4
ASGNF4
line 183
;183:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1064
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1064
INDIRF4
CNSTF4 0
LEF4 $143
ADDRLP4 1064
INDIRF4
CNSTF4 1120403456
LEF4 $141
LABELV $143
line 184
;184:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 185
;185:		}
LABELV $141
line 186
;186:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 187
;187:		other->client->ps.stats[STAT_ARMOR] = 0;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
CNSTI4 0
ASGNI4
line 188
;188:		break;
ADDRGP4 $133
JUMPV
LABELV $144
line 191
;189:
;190:	case PW_DOUBLER:
;191:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 192
;192:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 193
;193:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $136
ARGP4
ADDRLP4 1068
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1068
INDIRP4
ARGP4
ADDRLP4 1072
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1072
INDIRF4
ASGNF4
line 194
;194:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1076
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1076
INDIRF4
CNSTF4 0
LEF4 $147
ADDRLP4 1076
INDIRF4
CNSTF4 1120403456
LEF4 $145
LABELV $147
line 195
;195:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 196
;196:		}
LABELV $145
line 197
;197:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 198
;198:		break;
ADDRGP4 $133
JUMPV
LABELV $148
line 200
;199:	case PW_ARMORREGEN:
;200:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 201
;201:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 202
;202:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $136
ARGP4
ADDRLP4 1080
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1080
INDIRP4
ARGP4
ADDRLP4 1084
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1084
INDIRF4
ASGNF4
line 203
;203:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1088
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1088
INDIRF4
CNSTF4 0
LEF4 $151
ADDRLP4 1088
INDIRF4
CNSTF4 1120403456
LEF4 $149
LABELV $151
line 204
;204:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 205
;205:		}
LABELV $149
line 206
;206:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 207
;207:		memset(other->client->ammoTimes, 0, sizeof(other->client->ammoTimes));
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 784
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 60
ARGI4
ADDRGP4 memset
CALLP4
pop
line 208
;208:		break;
ADDRGP4 $133
JUMPV
LABELV $132
line 210
;209:	default:
;210:		clientNum = other->client->ps.clientNum;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 211
;211:		trap_GetUserinfo(clientNum, userinfo, sizeof(userinfo));
ADDRLP4 1028
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 212
;212:		handicap = atof(Info_ValueForKey(userinfo, "handicap"));
ADDRLP4 4
ARGP4
ADDRGP4 $136
ARGP4
ADDRLP4 1092
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1092
INDIRP4
ARGP4
ADDRLP4 1096
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 1096
INDIRF4
ASGNF4
line 213
;213:		if (handicap <= 0.0f || handicap > 100.0f) {
ADDRLP4 1100
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 1100
INDIRF4
CNSTF4 0
LEF4 $154
ADDRLP4 1100
INDIRF4
CNSTF4 1120403456
LEF4 $152
LABELV $154
line 214
;214:			handicap = 100.0f;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 215
;215:		}
LABELV $152
line 216
;216:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 217
;217:		break;
LABELV $133
line 220
;218:	}
;219:
;220:	return SpawnTime(ent, qfalse); // return -1;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1044
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 1044
INDIRI4
RETI4
LABELV $131
endproc Pickup_PersistantPowerup 1104 12
export Pickup_Holdable
proc Pickup_Holdable 4 8
line 225
;221:}
;222:
;223://======================================================================
;224:
;225:int Pickup_Holdable(gentity_t *ent, gentity_t *other) {
line 227
;226:
;227:	other->client->ps.stats[STAT_HOLDABLE_ITEM] = ent->item - bg_itemlist;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 188
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 229
;228:
;229:	if (ent->item->giTag == HI_KAMIKAZE) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 3
NEI4 $158
line 230
;230:		other->client->ps.eFlags |= EF_KAMIKAZE;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 231
;231:	}
LABELV $158
line 233
;232:
;233:	return SpawnTime(ent, qfalse); // return RESPAWN_HOLDABLE;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $157
endproc Pickup_Holdable 4 8
proc Add_Ammo 4 0
line 240
;234:}
;235:
;236:
;237://======================================================================
;238:
;239:
;240:static void Add_Ammo(gentity_t *ent, int weapon, int count) {
line 241
;241:	ent->client->ps.ammo[weapon] += count;
ADDRLP4 0
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 242
;242:	if (ent->client->ps.ammo[weapon] > AMMO_HARD_LIMIT) {
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 200
LEI4 $161
line 243
;243:		ent->client->ps.ammo[weapon] = AMMO_HARD_LIMIT;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
CNSTI4 200
ASGNI4
line 244
;244:	}
LABELV $161
line 245
;245:}
LABELV $160
endproc Add_Ammo 4 0
proc Pickup_Ammo 8 12
line 248
;246:
;247:
;248:static int Pickup_Ammo(gentity_t *ent, gentity_t *other) {
line 251
;249:	int		quantity;
;250:
;251:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $164
line 252
;252:		quantity = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 253
;253:	} else {
ADDRGP4 $165
JUMPV
LABELV $164
line 254
;254:		quantity = ent->item->quantity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 255
;255:	}
LABELV $165
line 257
;256:
;257:	Add_Ammo(other, ent->item->giTag, quantity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Add_Ammo
CALLV
pop
line 259
;258:
;259:	return SpawnTime(ent, qfalse); // return RESPAWN_AMMO;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
RETI4
LABELV $163
endproc Pickup_Ammo 8 12
proc Pickup_Weapon 12 12
line 265
;260:}
;261:
;262://======================================================================
;263:
;264:
;265:static int Pickup_Weapon(gentity_t *ent, gentity_t *other) {
line 268
;266:	int		quantity;
;267:
;268:	if (ent->count < 0) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
GEI4 $167
line 269
;269:		quantity = 0; // None for you, sir!
ADDRLP4 0
CNSTI4 0
ASGNI4
line 270
;270:	} else {
ADDRGP4 $168
JUMPV
LABELV $167
line 271
;271:		if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $169
line 272
;272:			quantity = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 273
;273:		} else {
ADDRGP4 $170
JUMPV
LABELV $169
line 274
;274:			quantity = ent->item->quantity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 275
;275:		}
LABELV $170
line 278
;276:
;277:		// dropped items and teamplay weapons always have full ammo
;278:		if (!(ent->flags & FL_DROPPED_ITEM) && g_gametype.integer != GT_TEAM) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $171
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
EQI4 $171
line 281
;279:			// respawning rules
;280:			// drop the quantity if the already have over the minimum
;281:			if (other->client->ps.ammo[ent->item->giTag] < quantity) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $174
line 282
;282:				quantity = quantity - other->client->ps.ammo[ent->item->giTag];
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 283
;283:			} else {
ADDRGP4 $175
JUMPV
LABELV $174
line 284
;284:				quantity = 1;		// only add a single shot
ADDRLP4 0
CNSTI4 1
ASGNI4
line 285
;285:			}
LABELV $175
line 286
;286:		}
LABELV $171
line 287
;287:	}
LABELV $168
line 290
;288:
;289:	// add the weapon
;290:	other->client->ps.stats[STAT_WEAPONS] |= (1 << ent->item->giTag);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LSHI4
BORI4
ASGNI4
line 292
;291:
;292:	Add_Ammo(other, ent->item->giTag, quantity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Add_Ammo
CALLV
pop
line 294
;293:
;294:	if (ent->item->giTag == WP_GRAPPLING_HOOK)
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 10
NEI4 $176
line 295
;295:		other->client->ps.ammo[ent->item->giTag] = -1; // unlimited ammo
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
CNSTI4 -1
ASGNI4
LABELV $176
line 303
;296:
;297:	// team deathmatch has slow weapon respawns
;298:	//if ( g_gametype.integer == GT_TEAM ) {
;299:	//	return g_weaponTeamRespawn.integer;
;300:	//} else {
;301:	//	return g_weaponRespawn.integer;
;302:	//}
;303:	return SpawnTime(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
RETI4
LABELV $166
endproc Pickup_Weapon 12 12
proc Pickup_Health 28 8
line 309
;304:}
;305:
;306:
;307://======================================================================
;308:
;309:static int Pickup_Health(gentity_t *ent, gentity_t *other) {
line 314
;310:	int			max;
;311:	int			quantity;
;312:
;313:	// small and mega healths will go over the max
;314:	if (other->client && bg_itemlist[other->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $179
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 11
NEI4 $179
line 315
;315:		max = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 316
;316:	} else if (ent->item->quantity != 5 && ent->item->quantity != 100) {
ADDRGP4 $180
JUMPV
LABELV $179
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 5
EQI4 $182
ADDRLP4 12
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 100
EQI4 $182
line 317
;317:		max = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 318
;318:	} else {
ADDRGP4 $183
JUMPV
LABELV $182
line 319
;319:		max = other->client->ps.stats[STAT_MAX_HEALTH] * 2;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 320
;320:	}
LABELV $183
LABELV $180
line 322
;321:
;322:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $184
line 323
;323:		quantity = ent->count;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 324
;324:	} else {
ADDRGP4 $185
JUMPV
LABELV $184
line 325
;325:		quantity = ent->item->quantity;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 326
;326:	}
LABELV $185
line 328
;327:
;328:	other->health += quantity;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 330
;329:
;330:	if (other->health > max) {
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $186
line 331
;331:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 332
;332:	}
LABELV $186
line 333
;333:	other->client->ps.stats[STAT_HEALTH] = other->health;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
ASGNI4
line 340
;334:
;335:	//if ( ent->item->quantity == 100 ) { // mega health respawns slow
;336:	//	return RESPAWN_MEGAHEALTH;
;337:	//} else {
;338:	//	return RESPAWN_HEALTH;
;339:	//}
;340:	return SpawnTime(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
RETI4
LABELV $178
endproc Pickup_Health 28 8
proc Pickup_StandardArmor 16 8
line 346
;341:}
;342:
;343:
;344://======================================================================
;345:
;346:static int Pickup_StandardArmor(gentity_t *ent, gentity_t *other) {
line 349
;347:	int		upperBound;
;348:
;349:	other->client->ps.stats[STAT_ARMOR] += ent->item->quantity;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDI4
ASGNI4
line 351
;350:
;351:	if (other->client && bg_itemlist[other->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $189
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 11
NEI4 $189
line 352
;352:		upperBound = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 353
;353:	} else {
ADDRGP4 $190
JUMPV
LABELV $189
line 354
;354:		upperBound = other->client->ps.stats[STAT_MAX_HEALTH] * 2;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 355
;355:	}
LABELV $190
line 357
;356:
;357:	if (other->client->ps.stats[STAT_ARMOR] > upperBound) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $192
line 358
;358:		other->client->ps.stats[STAT_ARMOR] = upperBound;
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 359
;359:	}
LABELV $192
line 361
;360:
;361:	return SpawnTime(ent, qfalse); // return RESPAWN_ARMOR;
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 12
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
RETI4
LABELV $188
endproc Pickup_StandardArmor 16 8
proc Pickup_TieredArmor 24 8
line 364
;362:}
;363:
;364:static int Pickup_TieredArmor(gentity_t *ent, gentity_t *other) {
line 365
;365:	playerState_t *ps = &other->client->ps;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
line 369
;366:	gitem_armor_t *oldInfo, *newInfo;
;367:	int				oldTotal;
;368:
;369:	oldTotal = ps->stats[STAT_ARMOR];
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 370
;370:	oldInfo = &bgArmor[ps->stats[STAT_ARMOR_TIER]];
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 bgArmor
ADDP4
ASGNP4
line 372
;371:
;372:	newInfo = &bgArmor[ent->item->giTag];
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 bgArmor
ADDP4
ASGNP4
line 375
;373:
;374:	// if no armor, reset type
;375:	if (!oldTotal && oldInfo->armor)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $195
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $195
line 376
;376:		ps->stats[STAT_ARMOR_TIER] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 0
ASGNI4
LABELV $195
line 379
;377:
;378:	// shards: just add it and cap to max
;379:	if (ent->item->giTag == ARMOR_SHARD) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
NEI4 $197
line 380
;380:		gitem_armor_t *shard = &bgArmor[ARMOR_SHARD];
ADDRLP4 16
ADDRGP4 bgArmor
ASGNP4
line 381
;381:		if (!oldTotal)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $199
line 382
;382:			ps->stats[STAT_ARMOR] = shard->base_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $200
JUMPV
LABELV $199
line 384
;383:		else
;384:			ps->stats[STAT_ARMOR] += shard->base_count;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDI4
ASGNI4
LABELV $200
line 386
;385:
;386:		if (ps->stats[STAT_ARMOR] > shard->max_count)
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $198
line 387
;387:			ps->stats[STAT_ARMOR] = shard->max_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 388
;388:	} else {
ADDRGP4 $198
JUMPV
LABELV $197
line 389
;389:		ps->stats[STAT_ARMOR_TIER] = newInfo->armor;
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
line 391
;390:
;391:		ps->stats[STAT_ARMOR] = newInfo->base_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 392
;392:		if (ps->stats[STAT_ARMOR] > newInfo->max_count)
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $203
line 393
;393:			ps->stats[STAT_ARMOR] = newInfo->max_count;
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
LABELV $203
line 394
;394:	}
LABELV $198
line 400
;395:
;396:#ifdef MATCHSTATS
;397:	Stats_PickupArmor(ent, other);
;398:#endif
;399:
;400:	return SpawnTime(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16
ADDRGP4 SpawnTime
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
RETI4
LABELV $194
endproc Pickup_TieredArmor 24 8
export RespawnItem
proc RespawnItem 24 12
line 410
;401:}
;402:
;403://======================================================================
;404:
;405:/*
;406:===============
;407:RespawnItem
;408:===============
;409:*/
;410:void RespawnItem(gentity_t *ent) {
line 412
;411:
;412:	if (!ent) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $206
line 413
;413:		return;
ADDRGP4 $205
JUMPV
LABELV $206
line 417
;414:	}
;415:
;416:	// randomly select from teamed entities
;417:	if (ent->team) {
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $208
line 422
;418:		gentity_t *master;
;419:		int	count;
;420:		int choice;
;421:
;422:		if (!ent->teammaster) {
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $210
line 423
;423:			G_Error("RespawnItem: bad teammaster");
ADDRGP4 $212
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 424
;424:		}
LABELV $210
line 426
;425:
;426:		master = ent->teammaster;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
line 428
;427:
;428:		for (count = 0, ent = master; ent; ent = ent->teamchain, count++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 8
INDIRP4
ASGNP4
ADDRGP4 $216
JUMPV
LABELV $213
line 430
;429:			// reset spawn timers on all teamed entities
;430:			ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 0
ASGNI4
line 431
;431:		}
LABELV $214
line 428
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $216
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $213
line 433
;432:
;433:		choice = rand() % count;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 435
;434:
;435:		for (count = 0, ent = master; ent && count < choice; ent = ent->teamchain, count++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 8
INDIRP4
ASGNP4
ADDRGP4 $220
JUMPV
LABELV $217
line 436
;436:			;
LABELV $218
line 435
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $220
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $221
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $217
LABELV $221
line 437
;437:	}
LABELV $208
line 439
;438:
;439:	if (!ent) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $222
line 440
;440:		return;
ADDRGP4 $205
JUMPV
LABELV $222
line 443
;441:	}
;442:
;443:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 444
;444:	ent->s.eFlags &= ~EF_NODRAW;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 445
;445:	ent->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 446
;446:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 448
;447:
;448:	if (ent->item->giType == IT_POWERUP) {
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
NEI4 $224
line 453
;449:		// play powerup spawn sound to all clients
;450:		gentity_t *te;
;451:
;452:		// if the powerup respawn sound should Not be global
;453:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
EQF4 $226
line 454
;454:			te = G_TempEntity(ent->s.pos.trBase, EV_GENERAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 12
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
ASGNP4
line 455
;455:		} else {
ADDRGP4 $227
JUMPV
LABELV $226
line 456
;456:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 12
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
ASGNP4
line 457
;457:		}
LABELV $227
line 458
;458:		te->s.eventParm = G_SoundIndex("sound/items/poweruprespawn.wav");
ADDRGP4 $228
ARGP4
ADDRLP4 12
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 459
;459:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 16
ADDRLP4 8
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 460
;460:	}
LABELV $224
line 462
;461:
;462:	if (ent->item->giType == IT_HOLDABLE && ent->item->giTag == HI_KAMIKAZE) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $229
ADDRLP4 8
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 3
NEI4 $229
line 467
;463:		// play powerup spawn sound to all clients
;464:		gentity_t *te;
;465:
;466:		// if the powerup respawn sound should Not be global
;467:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
EQF4 $231
line 468
;468:			te = G_TempEntity(ent->s.pos.trBase, EV_GENERAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 469
;469:		} else {
ADDRGP4 $232
JUMPV
LABELV $231
line 470
;470:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_SOUND);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 471
;471:		}
LABELV $232
line 472
;472:		te->s.eventParm = G_SoundIndex("sound/items/kamikazerespawn.wav");
ADDRGP4 $233
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 473
;473:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 20
ADDRLP4 12
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 474
;474:	}
LABELV $229
line 477
;475:
;476:	// play the normal respawn sound only to nearby clients
;477:	G_AddEvent(ent, EV_ITEM_RESPAWN, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 40
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 479
;478:
;479:	ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 0
ASGNI4
line 480
;480:}
LABELV $205
endproc RespawnItem 24 12
export Touch_Item
proc Touch_Item 64 12
line 488
;481:
;482:
;483:/*
;484:===============
;485:Touch_Item
;486:===============
;487:*/
;488:void Touch_Item(gentity_t *ent, gentity_t *other, trace_t *trace) {
line 492
;489:	int			respawn;
;490:	qboolean	predict;
;491:
;492:	if (!other->client)
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $235
line 493
;493:		return;
ADDRGP4 $234
JUMPV
LABELV $235
line 494
;494:	if (other->health < 1)
ADDRFP4 4
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 1
GEI4 $237
line 495
;495:		return;		// dead people can't pickup
ADDRGP4 $234
JUMPV
LABELV $237
line 498
;496:
;497:	// the same pickup rules are used for client side and server side
;498:	if (!BG_CanItemBeGrabbed(g_gametype.integer, &ent->s, &other->client->ps)) {
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 BG_CanItemBeGrabbed
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $239
line 499
;499:		return;
ADDRGP4 $234
JUMPV
LABELV $239
line 502
;500:	}
;501:
;502:	G_LogPrintf("Item: %i %s\n", other->s.number, ent->item->classname);
ADDRGP4 $242
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 504
;503:
;504:	predict = other->client->pers.predictItemPickup;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 504
ADDP4
INDIRI4
ASGNI4
line 507
;505:
;506:	// call the item-specific pickup function
;507:	switch (ent->item->giType) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 1
LTI4 $234
ADDRLP4 12
INDIRI4
CNSTI4 8
GTI4 $234
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $260-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $260
address $246
address $247
address $248
address $253
address $254
address $259
address $257
address $258
code
LABELV $246
line 509
;508:	case IT_WEAPON:
;509:		respawn = Pickup_Weapon(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 Pickup_Weapon
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 510
;510:		break;
ADDRGP4 $244
JUMPV
LABELV $247
line 512
;511:	case IT_AMMO:
;512:		respawn = Pickup_Ammo(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 Pickup_Ammo
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 513
;513:		break;
ADDRGP4 $244
JUMPV
LABELV $248
line 515
;514:	case IT_ARMOR:
;515:		respawn = armor_tiered.integer ? Pickup_TieredArmor(ent, other) : Pickup_StandardArmor(ent, other);
ADDRGP4 armor_tiered+12
INDIRI4
CNSTI4 0
EQI4 $251
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 Pickup_TieredArmor
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 32
INDIRI4
ASGNI4
ADDRGP4 $252
JUMPV
LABELV $251
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 Pickup_StandardArmor
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
ASGNI4
LABELV $252
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
line 516
;516:		break;
ADDRGP4 $244
JUMPV
LABELV $253
line 518
;517:	case IT_HEALTH:
;518:		respawn = Pickup_Health(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 Pickup_Health
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 40
INDIRI4
ASGNI4
line 519
;519:		break;
ADDRGP4 $244
JUMPV
LABELV $254
line 521
;520:	case IT_POWERUP:
;521:		respawn = Pickup_Powerup(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 Pickup_Powerup
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
ASGNI4
line 523
;522:		// allow prediction for some powerups
;523:		if (ent->item->giTag >= PW_QUAD && ent->item->giTag <= PW_FLIGHT)
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
LTI4 $255
ADDRLP4 48
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 6
GTI4 $255
line 524
;524:			predict = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRGP4 $244
JUMPV
LABELV $255
line 526
;525:		else
;526:			predict = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 527
;527:		break;
ADDRGP4 $244
JUMPV
LABELV $257
line 529
;528:	case IT_PERSISTANT_POWERUP:
;529:		respawn = Pickup_PersistantPowerup(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 Pickup_PersistantPowerup
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 52
INDIRI4
ASGNI4
line 530
;530:		break;
ADDRGP4 $244
JUMPV
LABELV $258
line 532
;531:	case IT_TEAM:
;532:		respawn = Pickup_Team(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 Pickup_Team
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 56
INDIRI4
ASGNI4
line 533
;533:		break;
ADDRGP4 $244
JUMPV
LABELV $259
line 535
;534:	case IT_HOLDABLE:
;535:		respawn = Pickup_Holdable(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 Pickup_Holdable
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
ASGNI4
line 536
;536:		break;
line 538
;537:	default:
;538:		return;
LABELV $244
line 541
;539:	}
;540:
;541:	if (!respawn) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $262
line 542
;542:		return;
ADDRGP4 $234
JUMPV
LABELV $262
line 546
;543:	}
;544:
;545:	// play the normal pickup sound
;546:	if (predict) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $264
line 547
;547:		G_AddPredictableEvent(other, EV_ITEM_PICKUP, ent->s.modelindex);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddPredictableEvent
CALLV
pop
line 548
;548:	} else {
ADDRGP4 $265
JUMPV
LABELV $264
line 549
;549:		G_AddEvent(other, EV_ITEM_PICKUP, ent->s.modelindex);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 550
;550:	}
LABELV $265
line 553
;551:
;552:	// powerup pickups are global broadcasts
;553:	if (ent->item->giType == IT_POWERUP || ent->item->giType == IT_TEAM) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $268
ADDRLP4 20
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $266
LABELV $268
line 555
;554:		// if we want the global sound to play
;555:		if (!ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $269
line 558
;556:			gentity_t *te;
;557:
;558:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_ITEM_PICKUP);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 20
ARGI4
ADDRLP4 28
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 559
;559:			te->s.eventParm = ent->s.modelindex;
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ASGNI4
line 560
;560:			te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 561
;561:		} else {
ADDRGP4 $270
JUMPV
LABELV $269
line 564
;562:			gentity_t *te;
;563:
;564:			te = G_TempEntity(ent->s.pos.trBase, EV_GLOBAL_ITEM_PICKUP);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 20
ARGI4
ADDRLP4 28
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 565
;565:			te->s.eventParm = ent->s.modelindex;
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ASGNI4
line 567
;566:			// only send this temp entity to a single client
;567:			te->r.svFlags |= SVF_SINGLECLIENT;
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 568
;568:			te->r.singleClient = other->s.number;
ADDRLP4 24
INDIRP4
CNSTI4 428
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 569
;569:		}
LABELV $270
line 570
;570:	}
LABELV $266
line 573
;571:
;572:	// fire item targets
;573:	G_UseTargets(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 576
;574:
;575:	// wait of -1 will not respawn
;576:	if (ent->wait == -1) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRF4
CNSTF4 3212836864
NEF4 $271
line 577
;577:		ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 578
;578:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 579
;579:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 580
;580:		ent->unlinkAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 560
ADDP4
CNSTI4 1
ASGNI4
line 581
;581:		return;
ADDRGP4 $234
JUMPV
LABELV $271
line 585
;582:	}
;583:
;584:	// non zero wait overrides respawn time
;585:	if (ent->wait) {
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRF4
CNSTF4 0
EQF4 $273
line 586
;586:		respawn = ent->wait;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 587
;587:		respawn *= 1000;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1000
MULI4
ASGNI4
line 588
;588:	}
LABELV $273
line 591
;589:
;590:	// random can be used to vary the respawn time
;591:	if (ent->random) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRF4
CNSTF4 0
EQF4 $275
line 592
;592:		respawn += (crandom() * ent->random) * 1000;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRF4
MULF4
CNSTF4 1148846080
MULF4
ADDF4
CVFI4 4
ASGNI4
line 593
;593:		if (respawn < 1000) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
GEI4 $277
line 594
;594:			respawn = 1000;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 595
;595:		}
LABELV $277
line 596
;596:	}
LABELV $275
line 599
;597:
;598:	// dropped items will not respawn
;599:	if (ent->flags & FL_DROPPED_ITEM) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $279
line 600
;600:		ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 601
;601:	}
LABELV $279
line 606
;602:
;603:	// picked up items still stay around, they just don't
;604:	// draw anything.  This allows respawnable items
;605:	// to be placed on movers.
;606:	ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 607
;607:	ent->s.eFlags |= EF_NODRAW;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 608
;608:	ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 614
;609:
;610:	// ZOID
;611:	// A negative respawn times means to never respawn this item (but don't 
;612:	// delete it).  This is used by items that are respawned by third party 
;613:	// events such as ctf flags
;614:	if (respawn <= 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $281
line 615
;615:		ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 0
ASGNI4
line 616
;616:		ent->think = 0;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
CNSTP4 0
ASGNP4
line 617
;617:	} else {
ADDRGP4 $282
JUMPV
LABELV $281
line 618
;618:		ent->nextthink = level.time + respawn;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 619
;619:		ent->think = RespawnItem;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 RespawnItem
ASGNP4
line 620
;620:	}
LABELV $282
line 622
;621:
;622:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 623
;623:}
LABELV $234
endproc Touch_Item 64 12
export LaunchItem
proc LaunchItem 12 8
line 635
;624:
;625:
;626://======================================================================
;627:
;628:/*
;629:================
;630:LaunchItem
;631:
;632:Spawns an item and tosses it forward
;633:================
;634:*/
;635:gentity_t *LaunchItem(gitem_t *item, vec3_t origin, vec3_t velocity) {
line 638
;636:	gentity_t *dropped;
;637:
;638:	dropped = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 640
;639:
;640:	dropped->s.eType = ET_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 641
;641:	dropped->s.modelindex = item - bg_itemlist;	// store item number in modelindex
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 642
;642:	dropped->s.modelindex2 = 1; // This is non-zero is it's a dropped item
ADDRLP4 0
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 1
ASGNI4
line 645
;643:
;644:	// item scale-down
;645:	dropped->s.time = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 647
;646:
;647:	dropped->classname = item->classname;
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 648
;648:	dropped->item = item;
ADDRLP4 0
INDIRP4
CNSTI4 820
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 649
;649:	VectorSet(dropped->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 3245342720
ASGNF4
line 650
;650:	VectorSet(dropped->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1097859072
ASGNF4
line 651
;651:	dropped->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 653
;652:
;653:	dropped->touch = Touch_Item;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 655
;654:
;655:	G_SetOrigin(dropped, origin);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 656
;656:	dropped->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 657
;657:	dropped->s.pos.trTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 658
;658:	VectorCopy(velocity, dropped->s.pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 660
;659:
;660:	dropped->s.eFlags |= EF_BOUNCE_HALF;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 661
;661:	if ((g_gametype.integer == GT_CTF || g_gametype.integer == GT_1FCTF) && item->giType == IT_TEAM) { // Special case for CTF flags
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $291
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
NEI4 $287
LABELV $291
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $287
line 662
;662:		dropped->think = Team_DroppedFlagThink;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Team_DroppedFlagThink
ASGNP4
line 663
;663:		dropped->nextthink = level.time + 30000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 30000
ADDI4
ASGNI4
line 664
;664:		Team_CheckDroppedItem(dropped);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Team_CheckDroppedItem
CALLV
pop
line 665
;665:	} else { // auto-remove after 30 seconds
ADDRGP4 $288
JUMPV
LABELV $287
line 666
;666:		dropped->think = G_FreeEntity;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 667
;667:		dropped->nextthink = level.time + 30000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 30000
ADDI4
ASGNI4
line 668
;668:	}
LABELV $288
line 670
;669:
;670:	dropped->flags = FL_DROPPED_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
CNSTI4 4096
ASGNI4
line 672
;671:
;672:	trap_LinkEntity(dropped);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 674
;673:
;674:	return dropped;
ADDRLP4 0
INDIRP4
RETP4
LABELV $284
endproc LaunchItem 12 8
export Drop_Item
proc Drop_Item 32 16
line 684
;675:}
;676:
;677:/*
;678:================
;679:Drop_Item
;680:
;681:Spawns an item and tosses it forward
;682:================
;683:*/
;684:gentity_t *Drop_Item(gentity_t *ent, gitem_t *item, float angle) {
line 688
;685:	vec3_t	velocity;
;686:	vec3_t	angles;
;687:
;688:	VectorCopy(ent->s.apos.trBase, angles);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 689
;689:	angles[YAW] += angle;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ASGNF4
line 690
;690:	angles[PITCH] = 0;	// always forward
ADDRLP4 12
CNSTF4 0
ASGNF4
line 692
;691:
;692:	AngleVectors(angles, velocity, NULL, NULL);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 693
;693:	VectorScale(velocity, 150, velocity);
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1125515264
MULF4
ASGNF4
line 694
;694:	velocity[2] += 200 + crandom() * 50;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1120403456
MULF4
CNSTF4 1128792064
ADDF4
ADDF4
ASGNF4
line 696
;695:
;696:	return LaunchItem(item, ent->s.pos.trBase, velocity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 28
ADDRGP4 LaunchItem
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
RETP4
LABELV $294
endproc Drop_Item 32 16
export Use_Item
proc Use_Item 0 4
line 707
;697:}
;698:
;699:
;700:/*
;701:================
;702:Use_Item
;703:
;704:Respawn the item
;705:================
;706:*/
;707:void Use_Item(gentity_t *ent, gentity_t *other, gentity_t *activator) {
line 708
;708:	RespawnItem(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 RespawnItem
CALLV
pop
line 709
;709:}
LABELV $301
endproc Use_Item 0 4
export FinishSpawningItem
proc FinishSpawningItem 84 28
line 721
;710:
;711://======================================================================
;712:
;713:/*
;714:================
;715:FinishSpawningItem
;716:
;717:Traces down to find where an item should rest, instead of letting them
;718:free fall from their spawn points
;719:================
;720:*/
;721:void FinishSpawningItem(gentity_t *ent) {
line 725
;722:	trace_t		tr;
;723:	vec3_t		dest;
;724:
;725:	VectorSet(ent->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS);
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 3245342720
ASGNF4
line 726
;726:	VectorSet(ent->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS);
ADDRFP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1097859072
ASGNF4
line 728
;727:
;728:	ent->s.eType = ET_ITEM;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 729
;729:	ent->s.modelindex = ent->item - bg_itemlist;		// store item number in modelindex
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ASGNI4
line 730
;730:	ent->s.modelindex2 = 0; // zero indicates this isn't a dropped item
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 0
ASGNI4
line 732
;731:
;732:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 733
;733:	ent->touch = Touch_Item;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 735
;734:	// using an item causes it to respawn
;735:	ent->use = Use_Item;
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Use_Item
ASGNP4
line 738
;736:
;737:	// for pickup prediction
;738:	if (ent->count) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
EQI4 $303
line 739
;739:		ent->s.time2 = ent->count;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 740
;740:	} else if (ent->item) {
ADDRGP4 $304
JUMPV
LABELV $303
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $305
line 741
;741:		ent->s.time2 = ent->item->quantity;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 742
;742:	}
LABELV $305
LABELV $304
line 744
;743:
;744:	if (ent->spawnflags & 1) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $307
line 746
;745:		// suspended
;746:		G_SetOrigin(ent, ent->s.origin);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 747
;747:	} else {
ADDRGP4 $308
JUMPV
LABELV $307
line 749
;748:		// drop to floor
;749:		VectorSet(dest, ent->s.origin[0], ent->s.origin[1], ent->s.origin[2] - 4096);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 72
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1166016512
SUBF4
ASGNF4
line 750
;750:		trap_Trace(&tr, ent->s.origin, ent->r.mins, ent->r.maxs, dest, ent->s.number, MASK_SOLID);
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 76
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 751
;751:		if (tr.startsolid) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $311
line 752
;752:			G_Printf("FinishSpawningItem: %s startsolid at %s\n", ent->classname, vtos(ent->s.origin));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $314
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 753
;753:			G_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 754
;754:			return;
ADDRGP4 $302
JUMPV
LABELV $311
line 758
;755:		}
;756:
;757:		// allow to ride movers
;758:		ent->s.groundEntityNum = tr.entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 0+52
INDIRI4
ASGNI4
line 760
;759:
;760:		G_SetOrigin(ent, tr.endpos);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 761
;761:	}
LABELV $308
line 764
;762:
;763:	// team slaves and targeted items aren't present at start
;764:	if ((ent->flags & FL_TEAMSLAVE) || ent->targetname) {
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $319
ADDRLP4 72
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $317
LABELV $319
line 765
;765:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 766
;766:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 767
;767:		return;
ADDRGP4 $302
JUMPV
LABELV $317
line 770
;768:	}
;769:
;770:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 771
;771:}
LABELV $302
endproc FinishSpawningItem 84 28
export G_CheckTeamItems
proc G_CheckTeamItems 28 12
line 781
;772:
;773:
;774:qboolean	itemRegistered[MAX_ITEMS];
;775:
;776:/*
;777:==================
;778:G_CheckTeamItems
;779:==================
;780:*/
;781:void G_CheckTeamItems(void) {
line 784
;782:
;783:	// Set up team stuff
;784:	Team_InitGame();
ADDRGP4 Team_InitGame
CALLV
pop
line 786
;785:
;786:	if (g_gametype.integer == GT_CTF) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
NEI4 $321
line 790
;787:		gitem_t *item;
;788:
;789:		// check for the two flags
;790:		item = BG_FindItem("Red Flag");
ADDRGP4 $324
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 791
;791:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $327
ADDRLP4 8
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $325
LABELV $327
line 792
;792:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_redflag in map\n");
ADDRGP4 $328
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 793
;793:		}
LABELV $325
line 794
;794:		item = BG_FindItem("Blue Flag");
ADDRGP4 $329
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 795
;795:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 16
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $332
ADDRLP4 16
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $322
LABELV $332
line 796
;796:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_blueflag in map\n");
ADDRGP4 $333
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 797
;797:		}
line 798
;798:	} else if (g_gametype.integer == GT_1FCTF) {
ADDRGP4 $322
JUMPV
LABELV $321
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
NEI4 $334
line 802
;799:		gitem_t *item;
;800:
;801:		// check for all three flags
;802:		item = BG_FindItem("Red Flag");
ADDRGP4 $324
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 803
;803:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $339
ADDRLP4 8
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $337
LABELV $339
line 804
;804:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_redflag in map\n");
ADDRGP4 $328
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 805
;805:		}
LABELV $337
line 806
;806:		item = BG_FindItem("Blue Flag");
ADDRGP4 $329
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 807
;807:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 16
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $342
ADDRLP4 16
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $340
LABELV $342
line 808
;808:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_blueflag in map\n");
ADDRGP4 $333
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 809
;809:		}
LABELV $340
line 810
;810:		item = BG_FindItem("Neutral Flag");
ADDRGP4 $343
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 811
;811:		if (!item || !itemRegistered[item - bg_itemlist]) {
ADDRLP4 24
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 24
INDIRU4
CNSTU4 0
EQU4 $346
ADDRLP4 24
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $335
LABELV $346
line 812
;812:			G_Printf(S_COLOR_YELLOW "WARNING: No team_CTF_neutralflag in map\n");
ADDRGP4 $347
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 813
;813:		}
line 814
;814:	} else if (g_gametype.integer == GT_OBELISK) {
ADDRGP4 $335
JUMPV
LABELV $334
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 7
NEI4 $348
line 818
;815:		gentity_t *ent;
;816:
;817:		// check for the two obelisks
;818:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 819
;819:		ent = G_Find(ent, FOFS(classname), "team_redobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $351
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 820
;820:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $352
line 821
;821:			G_Printf(S_COLOR_YELLOW "WARNING: No team_redobelisk in map\n");
ADDRGP4 $354
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 822
;822:		}
LABELV $352
line 824
;823:
;824:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 825
;825:		ent = G_Find(ent, FOFS(classname), "team_blueobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $355
ARGP4
ADDRLP4 8
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 826
;826:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $349
line 827
;827:			G_Printf(S_COLOR_YELLOW "WARNING: No team_blueobelisk in map\n");
ADDRGP4 $358
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 828
;828:		}
line 829
;829:	} else if (g_gametype.integer == GT_HARVESTER) {
ADDRGP4 $349
JUMPV
LABELV $348
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $359
line 833
;830:		gentity_t *ent;
;831:
;832:		// check for all three obelisks
;833:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 834
;834:		ent = G_Find(ent, FOFS(classname), "team_redobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $351
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 835
;835:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $362
line 836
;836:			G_Printf(S_COLOR_YELLOW "WARNING: No team_redobelisk in map\n");
ADDRGP4 $354
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 837
;837:		}
LABELV $362
line 839
;838:
;839:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 840
;840:		ent = G_Find(ent, FOFS(classname), "team_blueobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $355
ARGP4
ADDRLP4 8
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 841
;841:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $364
line 842
;842:			G_Printf(S_COLOR_YELLOW "WARNING: No team_blueobelisk in map\n");
ADDRGP4 $358
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 843
;843:		}
LABELV $364
line 845
;844:
;845:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 846
;846:		ent = G_Find(ent, FOFS(classname), "team_neutralobelisk");
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 524
ARGI4
ADDRGP4 $366
ARGP4
ADDRLP4 12
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 847
;847:		if (!ent) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $367
line 848
;848:			G_Printf(S_COLOR_YELLOW "WARNING: No team_neutralobelisk in map\n");
ADDRGP4 $369
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 849
;849:		}
LABELV $367
line 850
;850:	}
LABELV $359
LABELV $349
LABELV $335
LABELV $322
line 851
;851:}
LABELV $320
endproc G_CheckTeamItems 28 12
export ClearRegisteredItems
proc ClearRegisteredItems 16 12
line 859
;852:
;853:
;854:/*
;855:==============
;856:ClearRegisteredItems
;857:==============
;858:*/
;859:void ClearRegisteredItems(void) {
line 860
;860:	memset(itemRegistered, 0, sizeof(itemRegistered));
ADDRGP4 itemRegistered
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 863
;861:
;862:	// players always start with the base weapon
;863:	RegisterItem(BG_FindItemForWeapon(WP_MACHINEGUN));
CNSTI4 2
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 864
;864:	RegisterItem(BG_FindItemForWeapon(WP_GAUNTLET));
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 865
;865:	if (g_gametype.integer == GT_HARVESTER) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $371
line 866
;866:		RegisterItem(BG_FindItem("Red Skull"));
ADDRGP4 $374
ARGP4
ADDRLP4 8
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 867
;867:		RegisterItem(BG_FindItem("Blue Skull"));
ADDRGP4 $375
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 868
;868:	}
LABELV $371
line 869
;869:}
LABELV $370
endproc ClearRegisteredItems 16 12
export RegisterItem
proc RegisterItem 4 8
line 878
;870:
;871:/*
;872:===============
;873:RegisterItem
;874:
;875:The item will be added to the precache list
;876:===============
;877:*/
;878:void RegisterItem(gitem_t *item) {
line 879
;879:	if (!item) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $377
line 880
;880:		G_Error("RegisterItem: NULL");
ADDRGP4 $379
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 881
;881:	}
LABELV $377
line 883
;882:
;883:	if (item->giType == IT_WEAPON) {
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $380
line 884
;884:		level.mapWeapons |= (1<<item->giTag);
ADDRLP4 0
ADDRGP4 level+9720
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LSHI4
BORI4
ASGNI4
line 885
;885:		G_Printf("RegisterItem: mapWeapons=%i\n", level.mapWeapons);
ADDRGP4 $383
ARGP4
ADDRGP4 level+9720
INDIRI4
ARGI4
ADDRGP4 G_Printf
CALLV
pop
line 886
;886:	}
LABELV $380
line 887
;887:	itemRegistered[item - bg_itemlist] = qtrue;
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
CNSTI4 1
ASGNI4
line 888
;888:}
LABELV $376
endproc RegisterItem 4 8
export SaveRegisteredItems
proc SaveRegisteredItems 268 8
line 899
;889:
;890:
;891:/*
;892:===============
;893:SaveRegisteredItems
;894:
;895:Write the needed items to a config string
;896:so the client will know which ones to precache
;897:===============
;898:*/
;899:void SaveRegisteredItems(void) {
line 904
;900:	char	string[MAX_ITEMS + 1];
;901:	int		i;
;902:	int		count;
;903:
;904:	count = 0;
ADDRLP4 264
CNSTI4 0
ASGNI4
line 905
;905:	for (i = 0; i < bg_numItems; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $389
JUMPV
LABELV $386
line 906
;906:		if (itemRegistered[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
EQI4 $390
line 907
;907:			count++;
ADDRLP4 264
ADDRLP4 264
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 908
;908:			string[i] = '1';
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 49
ASGNI1
line 909
;909:		} else {
ADDRGP4 $391
JUMPV
LABELV $390
line 910
;910:			string[i] = '0';
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 48
ASGNI1
line 911
;911:		}
LABELV $391
line 912
;912:	}
LABELV $387
line 905
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $389
ADDRLP4 0
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $386
line 913
;913:	string[bg_numItems] = 0;
ADDRGP4 bg_numItems
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 0
ASGNI1
line 915
;914:
;915:	G_Printf("%i items registered\n", count);
ADDRGP4 $392
ARGP4
ADDRLP4 264
INDIRI4
ARGI4
ADDRGP4 G_Printf
CALLV
pop
line 916
;916:	trap_SetConfigstring(CS_ITEMS, string);
CNSTI4 15
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 917
;917:}
LABELV $385
endproc SaveRegisteredItems 268 8
export G_ItemDisabled
proc G_ItemDisabled 132 16
line 924
;918:
;919:/*
;920:============
;921:G_ItemDisabled
;922:============
;923:*/
;924:int G_ItemDisabled(gitem_t *item) {
line 928
;925:
;926:	char name[128];
;927:
;928:	Com_sprintf(name, sizeof(name), "disable_%s", item->classname);
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $394
ARGP4
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 929
;929:	return trap_Cvar_VariableIntegerValue(name);
ADDRLP4 0
ARGP4
ADDRLP4 128
ADDRGP4 trap_Cvar_VariableIntegerValue
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
RETI4
LABELV $393
endproc G_ItemDisabled 132 16
export G_SpawnItem
proc G_SpawnItem 8 12
line 942
;930:}
;931:
;932:/*
;933:============
;934:G_SpawnItem
;935:
;936:Sets the clipping size and plants the object on the floor.
;937:
;938:Items can't be immediately dropped to floor, because they might
;939:be on an entity that hasn't spawned yet.
;940:============
;941:*/
;942:void G_SpawnItem(gentity_t *ent, gitem_t *item) {
line 944
;943:
;944:	G_SpawnFloat("random", "0", &ent->random);
ADDRGP4 $396
ARGP4
ADDRGP4 $397
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 945
;945:	G_SpawnFloat("wait", "0", &ent->wait);
ADDRGP4 $398
ARGP4
ADDRGP4 $397
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 804
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 947
;946:
;947:	RegisterItem(item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 949
;948:
;949:	if (G_ItemDisabled(item)) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 G_ItemDisabled
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $399
line 950
;950:		ent->tag = TAG_DONTSPAWN;
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
CNSTI4 1
ASGNI4
line 951
;951:		return;
ADDRGP4 $395
JUMPV
LABELV $399
line 954
;952:	}
;953:
;954:	ent->item = item;
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 957
;955:	// some movers spawn on the second frame, so delay item
;956:	// spawns until the third frame so they can ride trains
;957:	ent->nextthink = level.time + FRAMETIME * 2;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 958
;958:	ent->think = FinishSpawningItem;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 FinishSpawningItem
ASGNP4
line 960
;959:
;960:	ent->physicsBounce = 0.50;		// items are bouncy
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
CNSTF4 1056964608
ASGNF4
line 962
;961:
;962:	if (item->giType == IT_POWERUP) {
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
NEI4 $402
line 963
;963:		G_SoundIndex("sound/items/poweruprespawn.wav");
ADDRGP4 $228
ARGP4
ADDRGP4 G_SoundIndex
CALLI4
pop
line 964
;964:		G_SpawnFloat("noglobalsound", "0", &ent->speed);
ADDRGP4 $404
ARGP4
ADDRGP4 $397
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 965
;965:	}
LABELV $402
line 967
;966:
;967:	if (item->giType == IT_PERSISTANT_POWERUP) {
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 7
NEI4 $405
line 968
;968:		ent->s.generic1 = ent->spawnflags;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ASGNI4
line 969
;969:	}
LABELV $405
line 970
;970:}
LABELV $395
endproc G_SpawnItem 8 12
export G_BounceItem
proc G_BounceItem 52 12
line 979
;971:
;972:
;973:/*
;974:================
;975:G_BounceItem
;976:
;977:================
;978:*/
;979:void G_BounceItem(gentity_t *ent, trace_t *trace) {
line 985
;980:	vec3_t	velocity;
;981:	float	dot;
;982:	int		hitTime;
;983:
;984:	// reflect the velocity on the trace plane
;985:	hitTime = level.previousTime + (level.time - level.previousTime) * trace->fraction;
ADDRLP4 16
ADDRGP4 level+36
INDIRI4
CVIF4 4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 986
;986:	BG_EvaluateTrajectoryDelta(&ent->s.pos, hitTime, velocity);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 987
;987:	dot = DotProduct(velocity, trace->plane.normal);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 988
;988:	VectorMA(velocity, -2 * dot, trace->plane.normal, ent->s.pos.trDelta);
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 991
;989:
;990:	// cut the velocity to keep from bouncing forever
;991:	VectorScale(ent->s.pos.trDelta, ent->physicsBounce, ent->s.pos.trDelta);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
MULF4
ASGNF4
line 994
;992:
;993:	// check for stop
;994:	if (trace->plane.normal[2] > 0 && ent->s.pos.trDelta[2] < 40) {
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $415
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1109393408
GEF4 $415
line 995
;995:		trace->endpos[2] += 1.0;	// make sure it is off ground
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 996
;996:		SnapVector(trace->endpos);
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 997
;997:		G_SetOrigin(ent, trace->endpos);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 998
;998:		ent->s.groundEntityNum = trace->entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 999
;999:		return;
ADDRGP4 $407
JUMPV
LABELV $415
line 1002
;1000:	}
;1001:
;1002:	VectorAdd(ent->r.currentOrigin, trace->plane.normal, ent->r.currentOrigin);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1003
;1003:	VectorCopy(ent->r.currentOrigin, ent->s.pos.trBase);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 1004
;1004:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1005
;1005:}
LABELV $407
endproc G_BounceItem 52 12
export G_RunItem
proc G_RunItem 88 28
line 1014
;1006:
;1007:
;1008:/*
;1009:================
;1010:G_RunItem
;1011:
;1012:================
;1013:*/
;1014:void G_RunItem(gentity_t *ent) {
line 1021
;1015:	vec3_t		origin;
;1016:	trace_t		tr;
;1017:	int			contents;
;1018:	int			mask;
;1019:
;1020:	// if its groundentity has been set to ENTITYNUM_NONE, it may have been pushed off an edge
;1021:	if (ent->s.groundEntityNum == ENTITYNUM_NONE) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $419
line 1022
;1022:		if (ent->s.pos.trType != TR_GRAVITY) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 5
EQI4 $421
line 1023
;1023:			ent->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1024
;1024:			ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1025
;1025:		}
LABELV $421
line 1026
;1026:	}
LABELV $419
line 1028
;1027:
;1028:	if (ent->s.pos.trType == TR_STATIONARY) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $424
line 1030
;1029:		// check think function
;1030:		G_RunThink(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 1031
;1031:		return;
ADDRGP4 $418
JUMPV
LABELV $424
line 1035
;1032:	}
;1033:
;1034:	// get current position
;1035:	BG_EvaluateTrajectory(&ent->s.pos, level.time, origin);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1038
;1036:
;1037:	// trace a line from the previous position to the current position
;1038:	if (ent->clipmask) {
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
CNSTI4 0
EQI4 $427
line 1039
;1039:		mask = ent->clipmask;
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
line 1040
;1040:	} else {
ADDRGP4 $428
JUMPV
LABELV $427
line 1041
;1041:		mask = MASK_PLAYERSOLID & ~CONTENTS_BODY;//MASK_SOLID;
ADDRLP4 72
CNSTI4 65537
ASGNI4
line 1042
;1042:	}
LABELV $428
line 1043
;1043:	trap_Trace(&tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, origin,
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1046
;1044:		ent->r.ownerNum, mask);
;1045:
;1046:	VectorCopy(tr.endpos, ent->r.currentOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 1048
;1047:
;1048:	if (tr.startsolid) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $430
line 1049
;1049:		tr.fraction = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 1050
;1050:	}
LABELV $430
line 1052
;1051:
;1052:	trap_LinkEntity(ent);	// FIXME: avoid this for stationary?
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1055
;1053:
;1054:	// check think function
;1055:	G_RunThink(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 1057
;1056:
;1057:	if (tr.fraction == 1) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $434
line 1058
;1058:		return;
ADDRGP4 $418
JUMPV
LABELV $434
line 1062
;1059:	}
;1060:
;1061:	// if it is in a nodrop volume, remove it
;1062:	contents = trap_PointContents(ent->r.currentOrigin, -1);
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 80
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 80
INDIRI4
ASGNI4
line 1063
;1063:	if (contents & CONTENTS_NODROP) {
ADDRLP4 68
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $437
line 1064
;1064:		if (ent->item && ent->item->giType == IT_TEAM) {
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $439
ADDRLP4 84
INDIRP4
CNSTI4 820
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $439
line 1065
;1065:			Team_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Team_FreeEntity
CALLV
pop
line 1066
;1066:		} else {
ADDRGP4 $418
JUMPV
LABELV $439
line 1067
;1067:			G_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1068
;1068:		}
line 1069
;1069:		return;
ADDRGP4 $418
JUMPV
LABELV $437
line 1072
;1070:	}
;1071:
;1072:	G_BounceItem(ent, &tr);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_BounceItem
CALLV
pop
line 1073
;1073:}
LABELV $418
endproc G_RunItem 88 28
bss
export itemRegistered
align 4
LABELV itemRegistered
skip 1024
import svf_self_portal2
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_TraceCapsule
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Print
import g_startingAmmo_hmg
import g_startingAmmo_cg
import g_startingAmmo_pl
import g_startingAmmo_ng
import g_startingAmmo_gh
import g_startingAmmo_bfg
import g_startingAmmo_pg
import g_startingAmmo_rg
import g_startingAmmo_lg
import g_startingAmmo_rl
import g_startingAmmo_gl
import g_startingAmmo_sg
import g_startingAmmo_mg
import g_startingAmmo_g
import g_startingWeapons
import armor_tiered
import g_rotation
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_predictPVS
import g_unlagged
import g_listEntity
import g_allowVote
import g_allowKill
import g_blood
import g_motd
import g_debugAlloc
import g_debugDamage
import g_debugMove
import g_inactivity
import g_respawn_delay_max
import g_respawn_delay_min
import g_weaponTeamRespawn
import g_weaponRespawn
import g_quadDamageFactor
import g_knockback
import g_gravity
import g_speed
import g_dedicated
import g_needpass
import g_filterBan
import g_banIPs
import g_password
import g_logSync
import g_log
import g_warmup
import g_teamForceBalance
import g_autoJoin
import g_friendlyFire
import g_synchronousClients
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_maxGameClients
import g_maxclients
import g_gametype
import sv_fps
import g_mapname
import g_cheats
import g_entities
import level
import AddTeamScore
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import G_MapExist
import G_LoadMap
import ParseMapRotation
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import UpdateTournamentInfo
import G_ClearClientSessionData
import G_WriteClientSessionData
import G_ReadClientSessionData
import G_InitSessionData
import G_WriteSessionData
import G_InitWorldSession
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_ResetFlags
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_BroadcastServerCommand
import G_Error
import G_Printf
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import MoveClientToIntermission
import DeathmatchScoreboardMessage
import G_StartKamikaze
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamConnectedCount
import TeamCount
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_prox
import fire_nail
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import TossClientSkulls
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import G_RevertVote
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $404
byte 1 110
byte 1 111
byte 1 103
byte 1 108
byte 1 111
byte 1 98
byte 1 97
byte 1 108
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $398
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $397
byte 1 48
byte 1 0
align 1
LABELV $396
byte 1 114
byte 1 97
byte 1 110
byte 1 100
byte 1 111
byte 1 109
byte 1 0
align 1
LABELV $394
byte 1 100
byte 1 105
byte 1 115
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 95
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $392
byte 1 37
byte 1 105
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $383
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 61
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $379
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 0
align 1
LABELV $375
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 83
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $374
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 83
byte 1 107
byte 1 117
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $369
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $366
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $358
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $355
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $354
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $351
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $347
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $343
byte 1 78
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $333
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $329
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $328
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $324
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $314
byte 1 70
byte 1 105
byte 1 110
byte 1 105
byte 1 115
byte 1 104
byte 1 83
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 115
byte 1 111
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $242
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $233
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 47
byte 1 107
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $228
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 47
byte 1 112
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 117
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $212
byte 1 82
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 109
byte 1 97
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $136
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 105
byte 1 99
byte 1 97
byte 1 112
byte 1 0
