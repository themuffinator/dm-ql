data
export vec3_origin
align 4
LABELV vec3_origin
byte 4 0
byte 4 0
byte 4 0
export axisDefault
align 4
LABELV axisDefault
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
export colorBlack
align 4
LABELV colorBlack
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
export colorRed
align 4
LABELV colorRed
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
export colorGreen
align 4
LABELV colorGreen
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1065353216
export colorBlue
align 4
LABELV colorBlue
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
export colorYellow
align 4
LABELV colorYellow
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
export colorMagenta
align 4
LABELV colorMagenta
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
export colorCyan
align 4
LABELV colorCyan
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export colorWhite
align 4
LABELV colorWhite
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export colorLtGrey
align 4
LABELV colorLtGrey
byte 4 1061158912
byte 4 1061158912
byte 4 1061158912
byte 4 1065353216
export colorMdGrey
align 4
LABELV colorMdGrey
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
byte 4 1065353216
export colorDkGrey
align 4
LABELV colorDkGrey
byte 4 1048576000
byte 4 1048576000
byte 4 1048576000
byte 4 1065353216
export g_color_table
align 4
LABELV g_color_table
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export bytedirs
align 4
LABELV bytedirs
byte 4 3204879951
byte 4 0
byte 4 1062847556
byte 4 3202531056
byte 4 1047828139
byte 4 1063074669
byte 4 3197577718
byte 4 0
byte 4 1064605338
byte 4 3198039930
byte 4 1056964608
byte 4 1062149053
byte 4 3190184938
byte 4 1049007711
byte 4 1064532072
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1062847556
byte 4 1057396303
byte 4 3189189110
byte 4 1060597999
byte 4 1060013330
byte 4 1041705462
byte 4 1060597999
byte 4 1060013330
byte 4 0
byte 4 1057396303
byte 4 1062847556
byte 4 1050556282
byte 4 1056964608
byte 4 1062149053
byte 4 1057396303
byte 4 0
byte 4 1062847556
byte 4 1050094070
byte 4 0
byte 4 1064605338
byte 4 1055047408
byte 4 1047828139
byte 4 1063074669
byte 4 1042701290
byte 4 1049007711
byte 4 1064532072
byte 4 3207496978
byte 4 1041705462
byte 4 1060597999
byte 4 3209632701
byte 4 1050556282
byte 4 1056964608
byte 4 3205921044
byte 4 1054458931
byte 4 1060121929
byte 4 3210331204
byte 4 1057396303
byte 4 0
byte 4 3210558317
byte 4 1055047408
byte 4 1047828139
byte 4 3208081647
byte 4 1060013330
byte 4 1041705462
byte 4 3207605577
byte 4 1058437396
byte 4 1054458931
byte 4 3204448256
byte 4 1062149053
byte 4 1050556282
byte 4 3195311787
byte 4 1063074669
byte 4 1055047408
byte 4 3201942579
byte 4 1060121929
byte 4 1058437396
byte 4 3208081647
byte 4 1060013330
byte 4 3189189110
byte 4 3204448256
byte 4 1062149053
byte 4 3198039930
byte 4 3204879951
byte 4 1062847556
byte 4 0
byte 4 0
byte 4 1062847556
byte 4 3204879951
byte 4 3195311787
byte 4 1063074669
byte 4 3202531056
byte 4 0
byte 4 1064605338
byte 4 3197577718
byte 4 3196491359
byte 4 1064532072
byte 4 3190184938
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1064605338
byte 4 1050094070
byte 4 3196491359
byte 4 1064532072
byte 4 1042701290
byte 4 1047828139
byte 4 1063074669
byte 4 1055047408
byte 4 1049007711
byte 4 1064532072
byte 4 1042701290
byte 4 1056964608
byte 4 1062149053
byte 4 1050556282
byte 4 1047828139
byte 4 1063074669
byte 4 3202531056
byte 4 1049007711
byte 4 1064532072
byte 4 3190184938
byte 4 1056964608
byte 4 1062149053
byte 4 3198039930
byte 4 1062847556
byte 4 1057396303
byte 4 0
byte 4 1060597999
byte 4 1060013330
byte 4 1041705462
byte 4 1060597999
byte 4 1060013330
byte 4 3189189110
byte 4 1057396303
byte 4 1062847556
byte 4 0
byte 4 1054458931
byte 4 1060121929
byte 4 1058437396
byte 4 1063074669
byte 4 1055047408
byte 4 1047828139
byte 4 1060121929
byte 4 1058437396
byte 4 1054458931
byte 4 1062149053
byte 4 1050556282
byte 4 1056964608
byte 4 1060013330
byte 4 1041705462
byte 4 1060597999
byte 4 1058437396
byte 4 1054458931
byte 4 1060121929
byte 4 1064605338
byte 4 1050094070
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1064532072
byte 4 1042701290
byte 4 1049007711
byte 4 1062847556
byte 4 3204879951
byte 4 0
byte 4 1064605338
byte 4 3197577718
byte 4 0
byte 4 1063074669
byte 4 3202531056
byte 4 1047828139
byte 4 1064532072
byte 4 3190184938
byte 4 1049007711
byte 4 1062149053
byte 4 3198039930
byte 4 1056964608
byte 4 1060013330
byte 4 3189189110
byte 4 1060597999
byte 4 1062847556
byte 4 0
byte 4 1057396303
byte 4 1063074669
byte 4 1055047408
byte 4 3195311787
byte 4 1062149053
byte 4 1050556282
byte 4 3204448256
byte 4 1064532072
byte 4 1042701290
byte 4 3196491359
byte 4 1057396303
byte 4 0
byte 4 3210331204
byte 4 1060013330
byte 4 1041705462
byte 4 3208081647
byte 4 1060013330
byte 4 3189189110
byte 4 3208081647
byte 4 1062847556
byte 4 0
byte 4 3204879951
byte 4 1062149053
byte 4 3198039930
byte 4 3204448256
byte 4 1063074669
byte 4 3202531056
byte 4 3195311787
byte 4 1064532072
byte 4 3190184938
byte 4 3196491359
byte 4 1041705462
byte 4 1060597999
byte 4 3207496978
byte 4 1050556282
byte 4 1056964608
byte 4 3209632701
byte 4 1054458931
byte 4 1060121929
byte 4 3205921044
byte 4 1055047408
byte 4 1047828139
byte 4 3210558317
byte 4 1058437396
byte 4 1054458931
byte 4 3207605577
byte 4 1060121929
byte 4 1058437396
byte 4 3201942579
byte 4 3189189110
byte 4 1060597999
byte 4 3207496978
byte 4 3198039930
byte 4 1056964608
byte 4 3209632701
byte 4 0
byte 4 1057396303
byte 4 3210331204
byte 4 3204879951
byte 4 0
byte 4 3210331204
byte 4 3202531056
byte 4 1047828139
byte 4 3210558317
byte 4 3197577718
byte 4 0
byte 4 3212088986
byte 4 3190184938
byte 4 1049007711
byte 4 3212015720
byte 4 0
byte 4 0
byte 4 3212836864
byte 4 1050094070
byte 4 0
byte 4 3212088986
byte 4 1042701290
byte 4 1049007711
byte 4 3212015720
byte 4 3202531056
byte 4 3195311787
byte 4 3210558317
byte 4 3198039930
byte 4 3204448256
byte 4 3209632701
byte 4 3190184938
byte 4 3196491359
byte 4 3212015720
byte 4 0
byte 4 3210331204
byte 4 3204879951
byte 4 3189189110
byte 4 3208081647
byte 4 3207496978
byte 4 1041705462
byte 4 3208081647
byte 4 3207496978
byte 4 0
byte 4 3204879951
byte 4 3210331204
byte 4 1050556282
byte 4 3204448256
byte 4 3209632701
byte 4 1055047408
byte 4 3195311787
byte 4 3210558317
byte 4 1042701290
byte 4 3196491359
byte 4 3212015720
byte 4 1047828139
byte 4 3210558317
byte 4 3202531056
byte 4 1056964608
byte 4 3209632701
byte 4 3198039930
byte 4 1054458931
byte 4 3207605577
byte 4 3205921044
byte 4 1060597999
byte 4 3207496978
byte 4 3189189110
byte 4 1060121929
byte 4 3205921044
byte 4 3201942579
byte 4 1058437396
byte 4 3201942579
byte 4 3207605577
byte 4 0
byte 4 3212088986
byte 4 3197577718
byte 4 0
byte 4 3212836864
byte 4 0
byte 4 1049007711
byte 4 3212015720
byte 4 3190184938
byte 4 0
byte 4 3210331204
byte 4 1057396303
byte 4 0
byte 4 3212088986
byte 4 1050094070
byte 4 1047828139
byte 4 3210558317
byte 4 1055047408
byte 4 1049007711
byte 4 3212015720
byte 4 1042701290
byte 4 1056964608
byte 4 3209632701
byte 4 1050556282
byte 4 1060597999
byte 4 3207496978
byte 4 1041705462
byte 4 1057396303
byte 4 3210331204
byte 4 0
byte 4 3195311787
byte 4 3210558317
byte 4 3202531056
byte 4 3204448256
byte 4 3209632701
byte 4 3198039930
byte 4 3196491359
byte 4 3212015720
byte 4 3190184938
byte 4 3210331204
byte 4 3204879951
byte 4 0
byte 4 3208081647
byte 4 3207496978
byte 4 3189189110
byte 4 3208081647
byte 4 3207496978
byte 4 1041705462
byte 4 3204879951
byte 4 3210331204
byte 4 0
byte 4 3204448256
byte 4 3209632701
byte 4 1050556282
byte 4 3195311787
byte 4 3210558317
byte 4 1055047408
byte 4 3196491359
byte 4 3212015720
byte 4 1042701290
byte 4 3210558317
byte 4 3202531056
byte 4 1047828139
byte 4 3209632701
byte 4 3198039930
byte 4 1056964608
byte 4 3207605577
byte 4 3205921044
byte 4 1054458931
byte 4 3207496978
byte 4 3189189110
byte 4 1060597999
byte 4 3202531056
byte 4 3195311787
byte 4 1063074669
byte 4 3205921044
byte 4 3201942579
byte 4 1060121929
byte 4 3198039930
byte 4 3204448256
byte 4 1062149053
byte 4 3189189110
byte 4 3208081647
byte 4 1060013330
byte 4 3201942579
byte 4 3207605577
byte 4 1058437396
byte 4 3190184938
byte 4 3196491359
byte 4 1064532072
byte 4 1055047408
byte 4 3195311787
byte 4 1063074669
byte 4 1042701290
byte 4 3196491359
byte 4 1064532072
byte 4 1050556282
byte 4 3204448256
byte 4 1062149053
byte 4 1041705462
byte 4 3208081647
byte 4 1060013330
byte 4 0
byte 4 3204879951
byte 4 1062847556
byte 4 1054458931
byte 4 3207605577
byte 4 1058437396
byte 4 1058437396
byte 4 3201942579
byte 4 1060121929
byte 4 1060121929
byte 4 3205921044
byte 4 1054458931
byte 4 3212088986
byte 4 1050094070
byte 4 0
byte 4 3212015720
byte 4 1042701290
byte 4 1049007711
byte 4 3212836864
byte 4 0
byte 4 0
byte 4 3210331204
byte 4 0
byte 4 1057396303
byte 4 3212088986
byte 4 3197577718
byte 4 0
byte 4 3212015720
byte 4 3190184938
byte 4 1049007711
byte 4 3210558317
byte 4 1055047408
byte 4 3195311787
byte 4 3212015720
byte 4 1042701290
byte 4 3196491359
byte 4 3209632701
byte 4 1050556282
byte 4 3204448256
byte 4 3210558317
byte 4 3202531056
byte 4 3195311787
byte 4 3212015720
byte 4 3190184938
byte 4 3196491359
byte 4 3209632701
byte 4 3198039930
byte 4 3204448256
byte 4 3207496978
byte 4 1041705462
byte 4 3208081647
byte 4 3207496978
byte 4 3189189110
byte 4 3208081647
byte 4 3210331204
byte 4 0
byte 4 3204879951
byte 4 3207605577
byte 4 1058437396
byte 4 3201942579
byte 4 3205921044
byte 4 1054458931
byte 4 3207605577
byte 4 3201942579
byte 4 1060121929
byte 4 3205921044
byte 4 3201942579
byte 4 3207605577
byte 4 3205921044
byte 4 3205921044
byte 4 3201942579
byte 4 3207605577
byte 4 3207605577
byte 4 3205921044
byte 4 3201942579
export Q_rand
code
proc Q_rand 4 0
file "..\..\..\..\code\game\q_math.c"
line 123
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// q_math.c -- stateless support routines that are included in each code module
;4:#include "q_shared.h"
;5:
;6:
;7:vec3_t	vec3_origin = { 0,0,0 };
;8:vec3_t	axisDefault[3] = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };
;9:
;10:
;11:vec4_t		colorBlack = { 0, 0, 0, 1 };
;12:vec4_t		colorRed = { 1, 0, 0, 1 };
;13:vec4_t		colorGreen = { 0, 1, 0, 1 };
;14:vec4_t		colorBlue = { 0, 0, 1, 1 };
;15:vec4_t		colorYellow = { 1, 1, 0, 1 };
;16:vec4_t		colorMagenta = { 1, 0, 1, 1 };
;17:vec4_t		colorCyan = { 0, 1, 1, 1 };
;18:vec4_t		colorWhite = { 1, 1, 1, 1 };
;19:vec4_t		colorLtGrey = { 0.75, 0.75, 0.75, 1 };
;20:vec4_t		colorMdGrey = { 0.5, 0.5, 0.5, 1 };
;21:vec4_t		colorDkGrey = { 0.25, 0.25, 0.25, 1 };
;22:
;23:vec4_t	g_color_table[8] =
;24:{
;25:{0.0, 0.0, 0.0, 1.0},
;26:{1.0, 0.0, 0.0, 1.0},
;27:{0.0, 1.0, 0.0, 1.0},
;28:{1.0, 1.0, 0.0, 1.0},
;29:{0.0, 0.0, 1.0, 1.0},
;30:{0.0, 1.0, 1.0, 1.0},
;31:{1.0, 0.0, 1.0, 1.0},
;32:{1.0, 1.0, 1.0, 1.0},
;33:};
;34:
;35:
;36:vec3_t	bytedirs[NUMVERTEXNORMALS] =
;37:{
;38:{-0.525731f, 0.000000f, 0.850651f}, {-0.442863f, 0.238856f, 0.864188f},
;39:{-0.295242f, 0.000000f, 0.955423f}, {-0.309017f, 0.500000f, 0.809017f},
;40:{-0.162460f, 0.262866f, 0.951056f}, {0.000000f, 0.000000f, 1.000000f},
;41:{0.000000f, 0.850651f, 0.525731f}, {-0.147621f, 0.716567f, 0.681718f},
;42:{0.147621f, 0.716567f, 0.681718f}, {0.000000f, 0.525731f, 0.850651f},
;43:{0.309017f, 0.500000f, 0.809017f}, {0.525731f, 0.000000f, 0.850651f},
;44:{0.295242f, 0.000000f, 0.955423f}, {0.442863f, 0.238856f, 0.864188f},
;45:{0.162460f, 0.262866f, 0.951056f}, {-0.681718f, 0.147621f, 0.716567f},
;46:{-0.809017f, 0.309017f, 0.500000f},{-0.587785f, 0.425325f, 0.688191f},
;47:{-0.850651f, 0.525731f, 0.000000f},{-0.864188f, 0.442863f, 0.238856f},
;48:{-0.716567f, 0.681718f, 0.147621f},{-0.688191f, 0.587785f, 0.425325f},
;49:{-0.500000f, 0.809017f, 0.309017f}, {-0.238856f, 0.864188f, 0.442863f},
;50:{-0.425325f, 0.688191f, 0.587785f}, {-0.716567f, 0.681718f, -0.147621f},
;51:{-0.500000f, 0.809017f, -0.309017f}, {-0.525731f, 0.850651f, 0.000000f},
;52:{0.000000f, 0.850651f, -0.525731f}, {-0.238856f, 0.864188f, -0.442863f},
;53:{0.000000f, 0.955423f, -0.295242f}, {-0.262866f, 0.951056f, -0.162460f},
;54:{0.000000f, 1.000000f, 0.000000f}, {0.000000f, 0.955423f, 0.295242f},
;55:{-0.262866f, 0.951056f, 0.162460f}, {0.238856f, 0.864188f, 0.442863f},
;56:{0.262866f, 0.951056f, 0.162460f}, {0.500000f, 0.809017f, 0.309017f},
;57:{0.238856f, 0.864188f, -0.442863f},{0.262866f, 0.951056f, -0.162460f},
;58:{0.500000f, 0.809017f, -0.309017f},{0.850651f, 0.525731f, 0.000000f},
;59:{0.716567f, 0.681718f, 0.147621f}, {0.716567f, 0.681718f, -0.147621f},
;60:{0.525731f, 0.850651f, 0.000000f}, {0.425325f, 0.688191f, 0.587785f},
;61:{0.864188f, 0.442863f, 0.238856f}, {0.688191f, 0.587785f, 0.425325f},
;62:{0.809017f, 0.309017f, 0.500000f}, {0.681718f, 0.147621f, 0.716567f},
;63:{0.587785f, 0.425325f, 0.688191f}, {0.955423f, 0.295242f, 0.000000f},
;64:{1.000000f, 0.000000f, 0.000000f}, {0.951056f, 0.162460f, 0.262866f},
;65:{0.850651f, -0.525731f, 0.000000f},{0.955423f, -0.295242f, 0.000000f},
;66:{0.864188f, -0.442863f, 0.238856f}, {0.951056f, -0.162460f, 0.262866f},
;67:{0.809017f, -0.309017f, 0.500000f}, {0.681718f, -0.147621f, 0.716567f},
;68:{0.850651f, 0.000000f, 0.525731f}, {0.864188f, 0.442863f, -0.238856f},
;69:{0.809017f, 0.309017f, -0.500000f}, {0.951056f, 0.162460f, -0.262866f},
;70:{0.525731f, 0.000000f, -0.850651f}, {0.681718f, 0.147621f, -0.716567f},
;71:{0.681718f, -0.147621f, -0.716567f},{0.850651f, 0.000000f, -0.525731f},
;72:{0.809017f, -0.309017f, -0.500000f}, {0.864188f, -0.442863f, -0.238856f},
;73:{0.951056f, -0.162460f, -0.262866f}, {0.147621f, 0.716567f, -0.681718f},
;74:{0.309017f, 0.500000f, -0.809017f}, {0.425325f, 0.688191f, -0.587785f},
;75:{0.442863f, 0.238856f, -0.864188f}, {0.587785f, 0.425325f, -0.688191f},
;76:{0.688191f, 0.587785f, -0.425325f}, {-0.147621f, 0.716567f, -0.681718f},
;77:{-0.309017f, 0.500000f, -0.809017f}, {0.000000f, 0.525731f, -0.850651f},
;78:{-0.525731f, 0.000000f, -0.850651f}, {-0.442863f, 0.238856f, -0.864188f},
;79:{-0.295242f, 0.000000f, -0.955423f}, {-0.162460f, 0.262866f, -0.951056f},
;80:{0.000000f, 0.000000f, -1.000000f}, {0.295242f, 0.000000f, -0.955423f},
;81:{0.162460f, 0.262866f, -0.951056f}, {-0.442863f, -0.238856f, -0.864188f},
;82:{-0.309017f, -0.500000f, -0.809017f}, {-0.162460f, -0.262866f, -0.951056f},
;83:{0.000000f, -0.850651f, -0.525731f}, {-0.147621f, -0.716567f, -0.681718f},
;84:{0.147621f, -0.716567f, -0.681718f}, {0.000000f, -0.525731f, -0.850651f},
;85:{0.309017f, -0.500000f, -0.809017f}, {0.442863f, -0.238856f, -0.864188f},
;86:{0.162460f, -0.262866f, -0.951056f}, {0.238856f, -0.864188f, -0.442863f},
;87:{0.500000f, -0.809017f, -0.309017f}, {0.425325f, -0.688191f, -0.587785f},
;88:{0.716567f, -0.681718f, -0.147621f}, {0.688191f, -0.587785f, -0.425325f},
;89:{0.587785f, -0.425325f, -0.688191f}, {0.000000f, -0.955423f, -0.295242f},
;90:{0.000000f, -1.000000f, 0.000000f}, {0.262866f, -0.951056f, -0.162460f},
;91:{0.000000f, -0.850651f, 0.525731f}, {0.000000f, -0.955423f, 0.295242f},
;92:{0.238856f, -0.864188f, 0.442863f}, {0.262866f, -0.951056f, 0.162460f},
;93:{0.500000f, -0.809017f, 0.309017f}, {0.716567f, -0.681718f, 0.147621f},
;94:{0.525731f, -0.850651f, 0.000000f}, {-0.238856f, -0.864188f, -0.442863f},
;95:{-0.500000f, -0.809017f, -0.309017f}, {-0.262866f, -0.951056f, -0.162460f},
;96:{-0.850651f, -0.525731f, 0.000000f}, {-0.716567f, -0.681718f, -0.147621f},
;97:{-0.716567f, -0.681718f, 0.147621f}, {-0.525731f, -0.850651f, 0.000000f},
;98:{-0.500000f, -0.809017f, 0.309017f}, {-0.238856f, -0.864188f, 0.442863f},
;99:{-0.262866f, -0.951056f, 0.162460f}, {-0.864188f, -0.442863f, 0.238856f},
;100:{-0.809017f, -0.309017f, 0.500000f}, {-0.688191f, -0.587785f, 0.425325f},
;101:{-0.681718f, -0.147621f, 0.716567f}, {-0.442863f, -0.238856f, 0.864188f},
;102:{-0.587785f, -0.425325f, 0.688191f}, {-0.309017f, -0.500000f, 0.809017f},
;103:{-0.147621f, -0.716567f, 0.681718f}, {-0.425325f, -0.688191f, 0.587785f},
;104:{-0.162460f, -0.262866f, 0.951056f}, {0.442863f, -0.238856f, 0.864188f},
;105:{0.162460f, -0.262866f, 0.951056f}, {0.309017f, -0.500000f, 0.809017f},
;106:{0.147621f, -0.716567f, 0.681718f}, {0.000000f, -0.525731f, 0.850651f},
;107:{0.425325f, -0.688191f, 0.587785f}, {0.587785f, -0.425325f, 0.688191f},
;108:{0.688191f, -0.587785f, 0.425325f}, {-0.955423f, 0.295242f, 0.000000f},
;109:{-0.951056f, 0.162460f, 0.262866f}, {-1.000000f, 0.000000f, 0.000000f},
;110:{-0.850651f, 0.000000f, 0.525731f}, {-0.955423f, -0.295242f, 0.000000f},
;111:{-0.951056f, -0.162460f, 0.262866f}, {-0.864188f, 0.442863f, -0.238856f},
;112:{-0.951056f, 0.162460f, -0.262866f}, {-0.809017f, 0.309017f, -0.500000f},
;113:{-0.864188f, -0.442863f, -0.238856f}, {-0.951056f, -0.162460f, -0.262866f},
;114:{-0.809017f, -0.309017f, -0.500000f}, {-0.681718f, 0.147621f, -0.716567f},
;115:{-0.681718f, -0.147621f, -0.716567f}, {-0.850651f, 0.000000f, -0.525731f},
;116:{-0.688191f, 0.587785f, -0.425325f}, {-0.587785f, 0.425325f, -0.688191f},
;117:{-0.425325f, 0.688191f, -0.587785f}, {-0.425325f, -0.688191f, -0.587785f},
;118:{-0.587785f, -0.425325f, -0.688191f}, {-0.688191f, -0.587785f, -0.425325f}
;119:};
;120:
;121://==============================================================
;122:
;123:int		Q_rand(int *seed) {
line 124
;124:	*seed = (69069 * *seed + 1);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 69069
MULI4
CNSTI4 1
ADDI4
ASGNI4
line 125
;125:	return *seed;
ADDRFP4 0
INDIRP4
INDIRI4
RETI4
LABELV $21
endproc Q_rand 4 0
export Q_random
proc Q_random 4 4
line 128
;126:}
;127:
;128:float	Q_random(int *seed) {
line 129
;129:	return (Q_rand(seed) & 0xffff) / (float)0x10000;
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 Q_rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 65535
BANDI4
CVIF4 4
CNSTF4 931135488
MULF4
RETF4
LABELV $22
endproc Q_random 4 4
export Q_crandom
proc Q_crandom 4 4
line 132
;130:}
;131:
;132:float	Q_crandom(int *seed) {
line 133
;133:	return 2.0 * (Q_random(seed) - 0.5);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 0
INDIRF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
RETF4
LABELV $23
endproc Q_crandom 4 4
export VectorCompare
proc VectorCompare 8 0
line 138
;134:}
;135:
;136:#ifdef __LCC__
;137:
;138:int VectorCompare(const vec3_t v1, const vec3_t v2) {
line 139
;139:	if (v1[0] != v2[0] || v1[1] != v2[1] || v1[2] != v2[2]) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
NEF4 $28
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEF4 $28
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
EQF4 $25
LABELV $28
line 140
;140:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $24
JUMPV
LABELV $25
line 142
;141:	}
;142:	return 1;
CNSTI4 1
RETI4
LABELV $24
endproc VectorCompare 8 0
export VectorLength
proc VectorLength 12 4
line 145
;143:}
;144:
;145:vec_t VectorLength(const vec3_t v) {
line 146
;146:	return (vec_t)sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 8
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 8
INDIRF4
RETF4
LABELV $29
endproc VectorLength 12 4
export VectorLengthSquared
proc VectorLengthSquared 8 0
line 149
;147:}
;148:
;149:vec_t VectorLengthSquared(const vec3_t v) {
line 150
;150:	return (v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
RETF4
LABELV $30
endproc VectorLengthSquared 8 0
export Distance
proc Distance 24 4
line 153
;151:}
;152:
;153:vec_t Distance(const vec3_t p1, const vec3_t p2) {
line 156
;154:	vec3_t	v;
;155:
;156:	VectorSubtract(p2, p1, v);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 157
;157:	return VectorLength(v);
ADDRLP4 0
ARGP4
ADDRLP4 20
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
INDIRF4
RETF4
LABELV $31
endproc Distance 24 4
export DistanceSquared
proc DistanceSquared 24 0
line 160
;158:}
;159:
;160:vec_t DistanceSquared(const vec3_t p1, const vec3_t p2) {
line 163
;161:	vec3_t	v;
;162:
;163:	VectorSubtract(p2, p1, v);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 164
;164:	return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
ADDRLP4 20
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
RETF4
LABELV $34
endproc DistanceSquared 24 0
export VectorNormalizeFast
proc VectorNormalizeFast 28 4
line 169
;165:}
;166:
;167:// fast vector normalize routine that does not check to make sure
;168:// that length != 0, nor does it return length, uses rsqrt approximation
;169:void VectorNormalizeFast(vec3_t v) {
line 172
;170:	float ilength;
;171:
;172:	ilength = Q_rsqrt(DotProduct(v, v));
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 4
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 12
ADDRGP4 Q_rsqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 174
;173:
;174:	v[0] *= ilength;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 175
;175:	v[1] *= ilength;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 176
;176:	v[2] *= ilength;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 177
;177:}
LABELV $41
endproc VectorNormalizeFast 28 4
export VectorInverse
proc VectorInverse 12 0
line 179
;178:
;179:void VectorInverse(vec3_t v) {
line 180
;180:	v[0] = -v[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
NEGF4
ASGNF4
line 181
;181:	v[1] = -v[1];
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEGF4
ASGNF4
line 182
;182:	v[2] = -v[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
NEGF4
ASGNF4
line 183
;183:}
LABELV $42
endproc VectorInverse 12 0
export CrossProduct
proc CrossProduct 24 0
line 185
;184:
;185:void CrossProduct(const vec3_t v1, const vec3_t v2, vec3_t cross) {
line 186
;186:	cross[0] = v1[1] * v2[2] - v1[2] * v2[1];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 187
;187:	cross[1] = v1[2] * v2[0] - v1[0] * v2[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 188
;188:	cross[2] = v1[0] * v2[1] - v1[1] * v2[0];
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 189
;189:}
LABELV $43
endproc CrossProduct 24 0
export ClampChar
proc ClampChar 0 0
line 194
;190:#endif
;191:
;192://=======================================================
;193:
;194:signed char ClampChar(int i) {
line 195
;195:	if (i < -128) {
ADDRFP4 0
INDIRI4
CNSTI4 -128
GEI4 $45
line 196
;196:		return -128;
CNSTI4 -128
RETI4
ADDRGP4 $44
JUMPV
LABELV $45
line 198
;197:	}
;198:	if (i > 127) {
ADDRFP4 0
INDIRI4
CNSTI4 127
LEI4 $47
line 199
;199:		return 127;
CNSTI4 127
RETI4
ADDRGP4 $44
JUMPV
LABELV $47
line 201
;200:	}
;201:	return i;
ADDRFP4 0
INDIRI4
CVII1 4
CVII4 1
RETI4
LABELV $44
endproc ClampChar 0 0
export ClampShort
proc ClampShort 0 0
line 204
;202:}
;203:
;204:signed short ClampShort(int i) {
line 205
;205:	if (i < -32768) {
ADDRFP4 0
INDIRI4
CNSTI4 -32768
GEI4 $50
line 206
;206:		return -32768;
CNSTI4 -32768
RETI4
ADDRGP4 $49
JUMPV
LABELV $50
line 208
;207:	}
;208:	if (i > 0x7fff) {
ADDRFP4 0
INDIRI4
CNSTI4 32767
LEI4 $52
line 209
;209:		return 0x7fff;
CNSTI4 32767
RETI4
ADDRGP4 $49
JUMPV
LABELV $52
line 211
;210:	}
;211:	return i;
ADDRFP4 0
INDIRI4
CVII2 4
CVII4 2
RETI4
LABELV $49
endproc ClampShort 0 0
export DirToByte
proc DirToByte 24 0
line 216
;212:}
;213:
;214:
;215:// this isn't a real cheap function to call!
;216:int DirToByte(vec3_t dir) {
line 220
;217:	int		i, best;
;218:	float	d, bestd;
;219:
;220:	if (!dir) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $55
line 221
;221:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $54
JUMPV
LABELV $55
line 224
;222:	}
;223:
;224:	bestd = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 225
;225:	best = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 226
;226:	for (i = 0; i < NUMVERTEXNORMALS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $57
line 227
;227:		d = DotProduct(dir, bytedirs[i]);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs+4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs+8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 228
;228:		if (d > bestd) {
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
LEF4 $63
line 229
;229:			bestd = d;
ADDRLP4 8
ADDRLP4 4
INDIRF4
ASGNF4
line 230
;230:			best = i;
ADDRLP4 12
ADDRLP4 0
INDIRI4
ASGNI4
line 231
;231:		}
LABELV $63
line 232
;232:	}
LABELV $58
line 226
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 162
LTI4 $57
line 234
;233:
;234:	return best;
ADDRLP4 12
INDIRI4
RETI4
LABELV $54
endproc DirToByte 24 0
export ByteToDir
proc ByteToDir 4 0
line 237
;235:}
;236:
;237:void ByteToDir(int b, vec3_t dir) {
line 238
;238:	if (b < 0 || b >= NUMVERTEXNORMALS) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $68
ADDRLP4 0
INDIRI4
CNSTI4 162
LTI4 $66
LABELV $68
line 239
;239:		VectorCopy(vec3_origin, dir);
ADDRFP4 4
INDIRP4
ADDRGP4 vec3_origin
INDIRB
ASGNB 12
line 240
;240:		return;
ADDRGP4 $65
JUMPV
LABELV $66
line 242
;241:	}
;242:	VectorCopy(bytedirs[b], dir);
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs
ADDP4
INDIRB
ASGNB 12
line 243
;243:}
LABELV $65
endproc ByteToDir 4 0
export ColorBytes3
proc ColorBytes3 40 0
line 246
;244:
;245:
;246:unsigned ColorBytes3(float r, float g, float b) {
line 249
;247:	unsigned	i;
;248:
;249:	((byte *)&i)[0] = r * 255;
ADDRLP4 8
ADDRFP4 0
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 12
CNSTF4 1325400064
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
LTF4 $71
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $72
JUMPV
LABELV $71
ADDRLP4 4
ADDRLP4 8
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $72
ADDRLP4 0
ADDRLP4 4
INDIRU4
CVUU1 4
ASGNU1
line 250
;250:	((byte *)&i)[1] = g * 255;
ADDRLP4 20
ADDRFP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $75
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $76
JUMPV
LABELV $75
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $76
ADDRLP4 0+1
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 251
;251:	((byte *)&i)[2] = b * 255;
ADDRLP4 32
ADDRFP4 8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $79
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $80
JUMPV
LABELV $79
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $80
ADDRLP4 0+2
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 253
;252:
;253:	return i;
ADDRLP4 0
INDIRU4
RETU4
LABELV $69
endproc ColorBytes3 40 0
export ColorBytes4
proc ColorBytes4 52 0
line 256
;254:}
;255:
;256:unsigned ColorBytes4(float r, float g, float b, float a) {
line 259
;257:	unsigned	i;
;258:
;259:	((byte *)&i)[0] = r * 255;
ADDRLP4 8
ADDRFP4 0
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 12
CNSTF4 1325400064
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
LTF4 $83
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $84
JUMPV
LABELV $83
ADDRLP4 4
ADDRLP4 8
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $84
ADDRLP4 0
ADDRLP4 4
INDIRU4
CVUU1 4
ASGNU1
line 260
;260:	((byte *)&i)[1] = g * 255;
ADDRLP4 20
ADDRFP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $87
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $88
JUMPV
LABELV $87
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $88
ADDRLP4 0+1
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 261
;261:	((byte *)&i)[2] = b * 255;
ADDRLP4 32
ADDRFP4 8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $91
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $92
JUMPV
LABELV $91
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $92
ADDRLP4 0+2
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 262
;262:	((byte *)&i)[3] = a * 255;
ADDRLP4 44
ADDRFP4 12
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $95
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $96
JUMPV
LABELV $95
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $96
ADDRLP4 0+3
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 264
;263:
;264:	return i;
ADDRLP4 0
INDIRU4
RETU4
LABELV $81
endproc ColorBytes4 52 0
export NormalizeColor
proc NormalizeColor 4 0
line 267
;265:}
;266:
;267:float NormalizeColor(const vec3_t in, vec3_t out) {
line 270
;268:	float	max;
;269:
;270:	max = in[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 271
;271:	if (in[1] > max) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
LEF4 $98
line 272
;272:		max = in[1];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 273
;273:	}
LABELV $98
line 274
;274:	if (in[2] > max) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
LEF4 $100
line 275
;275:		max = in[2];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 276
;276:	}
LABELV $100
line 278
;277:
;278:	if (!max) {
ADDRLP4 0
INDIRF4
CNSTF4 0
NEF4 $102
line 279
;279:		VectorClear(out);
ADDRFP4 4
INDIRP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 280
;280:	} else {
ADDRGP4 $103
JUMPV
LABELV $102
line 281
;281:		out[0] = in[0] / max;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 282
;282:		out[1] = in[1] / max;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 283
;283:		out[2] = in[2] / max;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 284
;284:	}
LABELV $103
line 285
;285:	return max;
ADDRLP4 0
INDIRF4
RETF4
LABELV $97
endproc NormalizeColor 4 0
export PlaneFromPoints
proc PlaneFromPoints 52 12
line 297
;286:}
;287:
;288:
;289:/*
;290:=====================
;291:PlaneFromPoints
;292:
;293:Returns false if the triangle is degenrate.
;294:The normal will point out of the clock for clockwise ordered points
;295:=====================
;296:*/
;297:qboolean PlaneFromPoints(vec4_t plane, const vec3_t a, const vec3_t b, const vec3_t c) {
line 300
;298:	vec3_t	d1, d2;
;299:
;300:	VectorSubtract(b, a, d1);
ADDRLP4 24
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 28
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 301
;301:	VectorSubtract(c, a, d2);
ADDRLP4 32
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 302
;302:	CrossProduct(d2, d1, plane);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 303
;303:	if (VectorNormalize(plane) == 0) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 40
INDIRF4
CNSTF4 0
NEF4 $109
line 304
;304:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $104
JUMPV
LABELV $109
line 307
;305:	}
;306:
;307:	plane[3] = DotProduct(a, plane);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 308
;308:	return qtrue;
CNSTI4 1
RETI4
LABELV $104
endproc PlaneFromPoints 52 12
export RotatePointAroundVector
proc RotatePointAroundVector 252 12
line 319
;309:}
;310:
;311:/*
;312:===============
;313:RotatePointAroundVector
;314:
;315:This is not implemented very well...
;316:===============
;317:*/
;318:void RotatePointAroundVector(vec3_t dst, const vec3_t dir, const vec3_t point,
;319:	float degrees) {
line 329
;320:	float	m[3][3];
;321:	float	im[3][3];
;322:	float	zrot[3][3];
;323:	float	tmpmat[3][3];
;324:	float	rot[3][3];
;325:	int	i;
;326:	vec3_t vr, vup, vf;
;327:	float	rad;
;328:
;329:	vf[0] = dir[0];
ADDRLP4 148
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 330
;330:	vf[1] = dir[1];
ADDRLP4 148+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 331
;331:	vf[2] = dir[2];
ADDRLP4 148+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 333
;332:
;333:	PerpendicularVector(vr, dir);
ADDRLP4 160
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 334
;334:	CrossProduct(vr, vf, vup);
ADDRLP4 160
ARGP4
ADDRLP4 148
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 336
;335:
;336:	m[0][0] = vr[0];
ADDRLP4 40
ADDRLP4 160
INDIRF4
ASGNF4
line 337
;337:	m[1][0] = vr[1];
ADDRLP4 40+12
ADDRLP4 160+4
INDIRF4
ASGNF4
line 338
;338:	m[2][0] = vr[2];
ADDRLP4 40+24
ADDRLP4 160+8
INDIRF4
ASGNF4
line 340
;339:
;340:	m[0][1] = vup[0];
ADDRLP4 40+4
ADDRLP4 176
INDIRF4
ASGNF4
line 341
;341:	m[1][1] = vup[1];
ADDRLP4 40+12+4
ADDRLP4 176+4
INDIRF4
ASGNF4
line 342
;342:	m[2][1] = vup[2];
ADDRLP4 40+24+4
ADDRLP4 176+8
INDIRF4
ASGNF4
line 344
;343:
;344:	m[0][2] = vf[0];
ADDRLP4 40+8
ADDRLP4 148
INDIRF4
ASGNF4
line 345
;345:	m[1][2] = vf[1];
ADDRLP4 40+12+8
ADDRLP4 148+4
INDIRF4
ASGNF4
line 346
;346:	m[2][2] = vf[2];
ADDRLP4 40+24+8
ADDRLP4 148+8
INDIRF4
ASGNF4
line 348
;347:
;348:	memcpy(im, m, sizeof(im));
ADDRLP4 112
ARGP4
ADDRLP4 40
ARGP4
CNSTI4 36
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 350
;349:
;350:	im[0][1] = m[1][0];
ADDRLP4 112+4
ADDRLP4 40+12
INDIRF4
ASGNF4
line 351
;351:	im[0][2] = m[2][0];
ADDRLP4 112+8
ADDRLP4 40+24
INDIRF4
ASGNF4
line 352
;352:	im[1][0] = m[0][1];
ADDRLP4 112+12
ADDRLP4 40+4
INDIRF4
ASGNF4
line 353
;353:	im[1][2] = m[2][1];
ADDRLP4 112+12+8
ADDRLP4 40+24+4
INDIRF4
ASGNF4
line 354
;354:	im[2][0] = m[0][2];
ADDRLP4 112+24
ADDRLP4 40+8
INDIRF4
ASGNF4
line 355
;355:	im[2][1] = m[1][2];
ADDRLP4 112+24+4
ADDRLP4 40+12+8
INDIRF4
ASGNF4
line 357
;356:
;357:	memset(zrot, 0, sizeof(zrot));
ADDRLP4 76
ARGP4
CNSTI4 0
ARGI4
CNSTI4 36
ARGI4
ADDRGP4 memset
CALLP4
pop
line 358
;358:	zrot[0][0] = zrot[1][1] = zrot[2][2] = 1.0F;
ADDRLP4 224
CNSTF4 1065353216
ASGNF4
ADDRLP4 76+24+8
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 76+12+4
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 76
ADDRLP4 224
INDIRF4
ASGNF4
line 360
;359:
;360:	rad = DEG2RAD(degrees);
ADDRLP4 172
ADDRFP4 12
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 361
;361:	zrot[0][0] = cos(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 228
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 76
ADDRLP4 228
INDIRF4
ASGNF4
line 362
;362:	zrot[0][1] = sin(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 232
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 232
INDIRF4
ASGNF4
line 363
;363:	zrot[1][0] = -sin(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 236
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 76+12
ADDRLP4 236
INDIRF4
NEGF4
ASGNF4
line 364
;364:	zrot[1][1] = cos(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 240
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 76+12+4
ADDRLP4 240
INDIRF4
ASGNF4
line 366
;365:
;366:	MatrixMultiply(m, zrot, tmpmat);
ADDRLP4 40
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 188
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 367
;367:	MatrixMultiply(tmpmat, im, rot);
ADDRLP4 188
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 369
;368:
;369:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $156
line 370
;370:		dst[i] = rot[i][0] * point[0] + rot[i][1] * point[1] + rot[i][2] * point[2];
ADDRLP4 248
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4+4
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4+8
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 371
;371:	}
LABELV $157
line 369
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $156
line 372
;372:}
LABELV $111
endproc RotatePointAroundVector 252 12
export RotateAroundDirection
proc RotateAroundDirection 20 16
line 379
;373:
;374:/*
;375:===============
;376:RotateAroundDirection
;377:===============
;378:*/
;379:void RotateAroundDirection(vec3_t axis[3], float yaw) {
line 382
;380:
;381:	// create an arbitrary axis[1] 
;382:	PerpendicularVector(axis[1], axis[0]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 385
;383:
;384:	// rotate it around axis[0] by yaw
;385:	if (yaw) {
ADDRFP4 4
INDIRF4
CNSTF4 0
EQF4 $163
line 388
;386:		vec3_t	temp;
;387:
;388:		VectorCopy(axis[1], temp);
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 389
;389:		RotatePointAroundVector(axis[1], axis[0], temp, yaw);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 390
;390:	}
LABELV $163
line 393
;391:
;392:	// cross to get axis[2]
;393:	CrossProduct(axis[0], axis[1], axis[2]);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 394
;394:}
LABELV $162
endproc RotateAroundDirection 20 16
export vectoangles
proc vectoangles 32 8
line 398
;395:
;396:
;397:
;398:void vectoangles(const vec3_t value1, vec3_t angles) {
line 402
;399:	float	forward;
;400:	float	yaw, pitch;
;401:
;402:	if (value1[1] == 0 && value1[0] == 0) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 0
NEF4 $166
line 403
;403:		yaw = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 404
;404:		if (value1[2] > 0) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $168
line 405
;405:			pitch = 90;
ADDRLP4 4
CNSTF4 1119092736
ASGNF4
line 406
;406:		} else {
ADDRGP4 $167
JUMPV
LABELV $168
line 407
;407:			pitch = 270;
ADDRLP4 4
CNSTF4 1132920832
ASGNF4
line 408
;408:		}
line 409
;409:	} else {
ADDRGP4 $167
JUMPV
LABELV $166
line 410
;410:		if (value1[0]) {
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 0
EQF4 $170
line 411
;411:			yaw = (atan2(value1[1], value1[0]) * 180 / M_PI);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
CNSTF4 1113927393
MULF4
ASGNF4
line 412
;412:		} else if (value1[1] > 0) {
ADDRGP4 $171
JUMPV
LABELV $170
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
LEF4 $172
line 413
;413:			yaw = 90;
ADDRLP4 0
CNSTF4 1119092736
ASGNF4
line 414
;414:		} else {
ADDRGP4 $173
JUMPV
LABELV $172
line 415
;415:			yaw = 270;
ADDRLP4 0
CNSTF4 1132920832
ASGNF4
line 416
;416:		}
LABELV $173
LABELV $171
line 417
;417:		if (yaw < 0) {
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $174
line 418
;418:			yaw += 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 419
;419:		}
LABELV $174
line 421
;420:
;421:		forward = sqrt(value1[0] * value1[0] + value1[1] * value1[1]);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 24
INDIRF4
ASGNF4
line 422
;422:		pitch = (atan2(value1[2], forward) * 180 / M_PI);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
CNSTF4 1113927393
MULF4
ASGNF4
line 423
;423:		if (pitch < 0) {
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $176
line 424
;424:			pitch += 360;
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 425
;425:		}
LABELV $176
line 426
;426:	}
LABELV $167
line 428
;427:
;428:	angles[PITCH] = -pitch;
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRF4
NEGF4
ASGNF4
line 429
;429:	angles[YAW] = yaw;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 430
;430:	angles[ROLL] = 0;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 431
;431:}
LABELV $165
endproc vectoangles 32 8
export AnglesToAxis
proc AnglesToAxis 16 16
line 439
;432:
;433:
;434:/*
;435:=================
;436:AnglesToAxis
;437:=================
;438:*/
;439:void AnglesToAxis(const vec3_t angles, vec3_t axis[3]) {
line 443
;440:	vec3_t	right;
;441:
;442:	// angle vectors returns "right" instead of "y axis"
;443:	AngleVectors(angles, axis[0], right, axis[2]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 444
;444:	VectorSubtract(vec3_origin, right, axis[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 vec3_origin+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 445
;445:}
LABELV $178
endproc AnglesToAxis 16 16
export AxisClear
proc AxisClear 0 0
line 447
;446:
;447:void AxisClear(vec3_t axis[3]) {
line 448
;448:	axis[0][0] = 1;
ADDRFP4 0
INDIRP4
CNSTF4 1065353216
ASGNF4
line 449
;449:	axis[0][1] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
line 450
;450:	axis[0][2] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 451
;451:	axis[1][0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 0
ASGNF4
line 452
;452:	axis[1][1] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ASGNF4
line 453
;453:	axis[1][2] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 0
ASGNF4
line 454
;454:	axis[2][0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 455
;455:	axis[2][1] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 456
;456:	axis[2][2] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1065353216
ASGNF4
line 457
;457:}
LABELV $183
endproc AxisClear 0 0
export AxisCopy
proc AxisCopy 0 0
line 459
;458:
;459:void AxisCopy(vec3_t in[3], vec3_t out[3]) {
line 460
;460:	VectorCopy(in[0], out[0]);
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 461
;461:	VectorCopy(in[1], out[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 462
;462:	VectorCopy(in[2], out[2]);
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 463
;463:}
LABELV $184
endproc AxisCopy 0 0
export ProjectPointOnPlane
proc ProjectPointOnPlane 40 4
line 465
;464:
;465:void ProjectPointOnPlane(vec3_t dst, const vec3_t p, const vec3_t normal) {
line 470
;466:	float d;
;467:	vec3_t n;
;468:	float inv_denom;
;469:
;470:	inv_denom = DotProduct(normal, normal);
ADDRLP4 20
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 471
;471:	if (Q_fabs(inv_denom) == 0.0f) {
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 Q_fabs
CALLF4
ASGNF4
ADDRLP4 28
INDIRF4
CNSTF4 0
NEF4 $186
line 472
;472:		VectorCopy(p, dst);
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 473
;473:		return;
ADDRGP4 $185
JUMPV
LABELV $186
line 478
;474:	}
;475:#ifndef Q3_VM
;476:	//assert( Q_fabs(inv_denom) != 0.0f ); // zero vectors get here
;477:#endif
;478:	inv_denom = 1.0f / inv_denom;
ADDRLP4 0
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 480
;479:
;480:	d = DotProduct(normal, p) * inv_denom;
ADDRLP4 32
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
MULF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 482
;481:
;482:	n[0] = normal[0] * inv_denom;
ADDRLP4 4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 483
;483:	n[1] = normal[1] * inv_denom;
ADDRLP4 4+4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 484
;484:	n[2] = normal[2] * inv_denom;
ADDRLP4 4+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 486
;485:
;486:	dst[0] = p[0] - d * n[0];
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
SUBF4
ASGNF4
line 487
;487:	dst[1] = p[1] - d * n[1];
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
SUBF4
ASGNF4
line 488
;488:	dst[2] = p[2] - d * n[2];
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
SUBF4
ASGNF4
line 489
;489:}
LABELV $185
endproc ProjectPointOnPlane 40 4
export MakeNormalVectors
proc MakeNormalVectors 24 12
line 499
;490:
;491:/*
;492:================
;493:MakeNormalVectors
;494:
;495:Given a normalized forward vector, create two
;496:other perpendicular vectors
;497:================
;498:*/
;499:void MakeNormalVectors(const vec3_t forward, vec3_t right, vec3_t up) {
line 504
;500:	float		d;
;501:
;502:	// this rotate and negate guarantees a vector
;503:	// not colinear with the original
;504:	right[1] = -forward[0];
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
INDIRF4
NEGF4
ASGNF4
line 505
;505:	right[2] = forward[1];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 506
;506:	right[0] = forward[2];
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 508
;507:
;508:	d = DotProduct(right, forward);
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 8
INDIRP4
INDIRF4
MULF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 509
;509:	VectorMA(right, -d, forward, right);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 510
;510:	VectorNormalize(right);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 511
;511:	CrossProduct(right, forward, up);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 512
;512:}
LABELV $192
endproc MakeNormalVectors 24 12
export VectorRotate
proc VectorRotate 24 0
line 515
;513:
;514:
;515:void VectorRotate(vec3_t in, vec3_t matrix[3], vec3_t out) {
line 516
;516:	out[0] = DotProduct(in, matrix[0]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 517
;517:	out[1] = DotProduct(in, matrix[1]);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 518
;518:	out[2] = DotProduct(in, matrix[2]);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 519
;519:}
LABELV $193
endproc VectorRotate 24 0
export Q_rsqrt
proc Q_rsqrt 20 0
line 527
;520:
;521://============================================================================
;522:
;523:#if !idppc
;524:/*
;525:** float q_rsqrt( float number )
;526:*/
;527:float Q_rsqrt(float number) {
line 530
;528:	long i;
;529:	float x2, y;
;530:	const float threehalfs = 1.5F;
ADDRLP4 12
CNSTF4 1069547520
ASGNF4
line 532
;531:
;532:	x2 = number * 0.5F;
ADDRLP4 8
ADDRFP4 0
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
line 533
;533:	y = number;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 534
;534:	i = *(long *)&y;						// evil floating point bit level hacking
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 535
;535:	i = 0x5f3759df - (i >> 1);               // what the fuck?
ADDRLP4 4
CNSTI4 1597463007
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
SUBI4
ASGNI4
line 536
;536:	y = *(float *)&i;
ADDRLP4 0
ADDRLP4 4
INDIRF4
ASGNF4
line 537
;537:	y = y * (threehalfs - (x2 * y * y));   // 1st iteration
ADDRLP4 16
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 16
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 540
;538:	//	y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed
;539:
;540:	return y;
ADDRLP4 0
INDIRF4
RETF4
LABELV $194
endproc Q_rsqrt 20 0
export Q_fabs
proc Q_fabs 4 0
line 543
;541:}
;542:
;543:float Q_fabs(float f) {
line 544
;544:	int tmp = *(int *)&f;
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
line 545
;545:	tmp &= 0x7FFFFFFF;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 2147483647
BANDI4
ASGNI4
line 546
;546:	return *(float *)&tmp;
ADDRLP4 0
INDIRF4
RETF4
LABELV $195
endproc Q_fabs 4 0
export LerpAngle
proc LerpAngle 8 0
line 558
;547:}
;548:#endif
;549:
;550://============================================================
;551:
;552:/*
;553:===============
;554:LerpAngle
;555:
;556:===============
;557:*/
;558:float LerpAngle(float from, float to, float frac) {
line 561
;559:	float	a;
;560:
;561:	if (to - from > 180) {
ADDRFP4 4
INDIRF4
ADDRFP4 0
INDIRF4
SUBF4
CNSTF4 1127481344
LEF4 $197
line 562
;562:		to -= 360;
ADDRFP4 4
ADDRFP4 4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 563
;563:	}
LABELV $197
line 564
;564:	if (to - from < -180) {
ADDRFP4 4
INDIRF4
ADDRFP4 0
INDIRF4
SUBF4
CNSTF4 3274964992
GEF4 $199
line 565
;565:		to += 360;
ADDRFP4 4
ADDRFP4 4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 566
;566:	}
LABELV $199
line 567
;567:	a = from + frac * (to - from);
ADDRLP4 4
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
ADDRFP4 8
INDIRF4
ADDRFP4 4
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 569
;568:
;569:	return a;
ADDRLP4 0
INDIRF4
RETF4
LABELV $196
endproc LerpAngle 8 0
export AngleSubtract
proc AngleSubtract 4 0
line 580
;570:}
;571:
;572:
;573:/*
;574:=================
;575:AngleSubtract
;576:
;577:Always returns a value from -180 to 180
;578:=================
;579:*/
;580:float	AngleSubtract(float a1, float a2) {
line 583
;581:	float	a;
;582:
;583:	a = a1 - a2;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $203
JUMPV
LABELV $202
line 584
;584:	while (a > 180) {
line 585
;585:		a -= 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 586
;586:	}
LABELV $203
line 584
ADDRLP4 0
INDIRF4
CNSTF4 1127481344
GTF4 $202
ADDRGP4 $206
JUMPV
LABELV $205
line 587
;587:	while (a < -180) {
line 588
;588:		a += 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 589
;589:	}
LABELV $206
line 587
ADDRLP4 0
INDIRF4
CNSTF4 3274964992
LTF4 $205
line 590
;590:	return a;
ADDRLP4 0
INDIRF4
RETF4
LABELV $201
endproc AngleSubtract 4 0
export AnglesSubtract
proc AnglesSubtract 12 8
line 594
;591:}
;592:
;593:
;594:void AnglesSubtract(vec3_t v1, vec3_t v2, vec3_t v3) {
line 595
;595:	v3[0] = AngleSubtract(v1[0], v2[0]);
ADDRFP4 0
INDIRP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRF4
ASGNF4
line 596
;596:	v3[1] = AngleSubtract(v1[1], v2[1]);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 597
;597:	v3[2] = AngleSubtract(v1[2], v2[2]);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 598
;598:}
LABELV $208
endproc AnglesSubtract 12 8
export AngleMod
proc AngleMod 0 0
line 601
;599:
;600:
;601:float	AngleMod(float a) {
line 602
;602:	a = (360.0 / 65536) * ((int)(a * (65536 / 360.0)) & 65535);
ADDRFP4 0
ADDRFP4 0
INDIRF4
CNSTF4 1127615329
MULF4
CVFI4 4
CNSTI4 65535
BANDI4
CVIF4 4
CNSTF4 1001652224
MULF4
ASGNF4
line 603
;603:	return a;
ADDRFP4 0
INDIRF4
RETF4
LABELV $209
endproc AngleMod 0 0
export AngleNormalize360
proc AngleNormalize360 0 0
line 614
;604:}
;605:
;606:
;607:/*
;608:=================
;609:AngleNormalize360
;610:
;611:returns angle normalized to the range [0 <= angle < 360]
;612:=================
;613:*/
;614:float AngleNormalize360(float angle) {
line 615
;615:	return (360.0 / 65536) * ((int)(angle * (65536 / 360.0)) & 65535);
ADDRFP4 0
INDIRF4
CNSTF4 1127615329
MULF4
CVFI4 4
CNSTI4 65535
BANDI4
CVIF4 4
CNSTF4 1001652224
MULF4
RETF4
LABELV $210
endproc AngleNormalize360 0 0
export AngleNormalize180
proc AngleNormalize180 4 4
line 626
;616:}
;617:
;618:
;619:/*
;620:=================
;621:AngleNormalize180
;622:
;623:returns angle normalized to the range [-180 < angle <= 180]
;624:=================
;625:*/
;626:float AngleNormalize180(float angle) {
line 627
;627:	angle = AngleNormalize360(angle);
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 0
ADDRGP4 AngleNormalize360
CALLF4
ASGNF4
ADDRFP4 0
ADDRLP4 0
INDIRF4
ASGNF4
line 628
;628:	if (angle > 180.0) {
ADDRFP4 0
INDIRF4
CNSTF4 1127481344
LEF4 $212
line 629
;629:		angle -= 360.0;
ADDRFP4 0
ADDRFP4 0
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 630
;630:	}
LABELV $212
line 631
;631:	return angle;
ADDRFP4 0
INDIRF4
RETF4
LABELV $211
endproc AngleNormalize180 4 4
export AngleDelta
proc AngleDelta 4 4
line 642
;632:}
;633:
;634:
;635:/*
;636:=================
;637:AngleDelta
;638:
;639:returns the normalized delta from angle1 to angle2
;640:=================
;641:*/
;642:float AngleDelta(float angle1, float angle2) {
line 643
;643:	return AngleNormalize180(angle1 - angle2);
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRF4
SUBF4
ARGF4
ADDRLP4 0
ADDRGP4 AngleNormalize180
CALLF4
ASGNF4
ADDRLP4 0
INDIRF4
RETF4
LABELV $214
endproc AngleDelta 4 4
export SetPlaneSignbits
proc SetPlaneSignbits 8 0
line 655
;644:}
;645:
;646:
;647://============================================================
;648:
;649:
;650:/*
;651:=================
;652:SetPlaneSignbits
;653:=================
;654:*/
;655:void SetPlaneSignbits(cplane_t *out) {
line 659
;656:	int	bits, j;
;657:
;658:	// for fast box on planeside test
;659:	bits = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 660
;660:	for (j = 0; j < 3; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $216
line 661
;661:		if (out->normal[j] < 0) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
CNSTF4 0
GEF4 $220
line 662
;662:			bits |= 1 << j;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 663
;663:		}
LABELV $220
line 664
;664:	}
LABELV $217
line 660
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $216
line 665
;665:	out->signbits = bits;
ADDRFP4 0
INDIRP4
CNSTI4 17
ADDP4
ADDRLP4 4
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 666
;666:}
LABELV $215
endproc SetPlaneSignbits 8 0
export BoxOnPlaneSide
proc BoxOnPlaneSide 152 0
line 714
;667:
;668:
;669:/*
;670:==================
;671:BoxOnPlaneSide
;672:
;673:Returns 1, 2, or 1 + 2
;674:
;675:// this is the slow, general version
;676:int BoxOnPlaneSide2 (vec3_t emins, vec3_t emaxs, struct cplane_s *p)
;677:{
;678:	int		i;
;679:	float	dist1, dist2;
;680:	int		sides;
;681:	vec3_t	corners[2];
;682:
;683:	for (i=0 ; i<3 ; i++)
;684:	{
;685:		if (p->normal[i] < 0)
;686:		{
;687:			corners[0][i] = emins[i];
;688:			corners[1][i] = emaxs[i];
;689:		}
;690:		else
;691:		{
;692:			corners[1][i] = emins[i];
;693:			corners[0][i] = emaxs[i];
;694:		}
;695:	}
;696:	dist1 = DotProduct (p->normal, corners[0]) - p->dist;
;697:	dist2 = DotProduct (p->normal, corners[1]) - p->dist;
;698:	sides = 0;
;699:	if (dist1 >= 0)
;700:		sides = 1;
;701:	if (dist2 < 0)
;702:		sides |= 2;
;703:
;704:	return sides;
;705:}
;706:
;707:==================
;708:*/
;709:
;710:#if !( (defined __linux__ || __FreeBSD__) && (defined __i386__) && (!defined C_ONLY)) // rb010123
;711:
;712:#if defined __LCC__ || defined C_ONLY || !id386 || defined __VECTORC
;713:
;714:int BoxOnPlaneSide(vec3_t emins, vec3_t emaxs, struct cplane_s *p) {
line 719
;715:	float	dist1, dist2;
;716:	int		sides;
;717:
;718:	// fast axial cases
;719:	if (p->type < 3) {
ADDRFP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRU1
CVUI4 1
CNSTI4 3
GEI4 $223
line 720
;720:		if (p->dist <= emins[p->type])
ADDRLP4 12
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
GTF4 $225
line 721
;721:			return 1;
CNSTI4 1
RETI4
ADDRGP4 $222
JUMPV
LABELV $225
line 722
;722:		if (p->dist >= emaxs[p->type])
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
LTF4 $227
line 723
;723:			return 2;
CNSTI4 2
RETI4
ADDRGP4 $222
JUMPV
LABELV $227
line 724
;724:		return 3;
CNSTI4 3
RETI4
ADDRGP4 $222
JUMPV
LABELV $223
line 728
;725:	}
;726:
;727:	// general case
;728:	switch (p->signbits) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 17
ADDP4
INDIRU1
CVUI4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $229
ADDRLP4 12
INDIRI4
CNSTI4 7
GTI4 $229
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $240
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $240
address $232
address $233
address $234
address $235
address $236
address $237
address $238
address $239
code
LABELV $232
line 730
;729:	case 0:
;730:		dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 20
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 731
;731:		dist2 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 28
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
INDIRF4
MULF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 732
;732:		break;
ADDRGP4 $230
JUMPV
LABELV $233
line 734
;733:	case 1:
;734:		dist1 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 36
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
MULF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 735
;735:		dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 44
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 736
;736:		break;
ADDRGP4 $230
JUMPV
LABELV $234
line 738
;737:	case 2:
;738:		dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 52
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 56
INDIRP4
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 739
;739:		dist2 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 64
INDIRP4
INDIRF4
MULF4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 60
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 740
;740:		break;
ADDRGP4 $230
JUMPV
LABELV $235
line 742
;741:	case 3:
;742:		dist1 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 68
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 72
INDIRP4
INDIRF4
MULF4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 68
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 743
;743:		dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 76
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 80
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 80
INDIRP4
INDIRF4
MULF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 744
;744:		break;
ADDRGP4 $230
JUMPV
LABELV $236
line 746
;745:	case 4:
;746:		dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 88
INDIRP4
INDIRF4
MULF4
ADDRLP4 84
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 84
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 747
;747:		dist2 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
MULF4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 748
;748:		break;
ADDRGP4 $230
JUMPV
LABELV $237
line 750
;749:	case 5:
;750:		dist1 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 100
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRLP4 104
INDIRP4
INDIRF4
MULF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 104
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 751
;751:		dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 108
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 112
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 112
INDIRP4
INDIRF4
MULF4
ADDRLP4 108
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 108
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 112
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 752
;752:		break;
ADDRGP4 $230
JUMPV
LABELV $238
line 754
;753:	case 6:
;754:		dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 116
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 116
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 120
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 116
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 120
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 755
;755:		dist2 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 124
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 128
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 124
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
MULF4
ADDRLP4 124
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 128
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 124
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 128
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 756
;756:		break;
ADDRGP4 $230
JUMPV
LABELV $239
line 758
;757:	case 7:
;758:		dist1 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 132
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 136
INDIRP4
INDIRF4
MULF4
ADDRLP4 132
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 132
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 759
;759:		dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 140
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 144
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 140
INDIRP4
INDIRF4
ADDRLP4 144
INDIRP4
INDIRF4
MULF4
ADDRLP4 140
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 140
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 760
;760:		break;
ADDRGP4 $230
JUMPV
LABELV $229
line 762
;761:	default:
;762:		dist1 = dist2 = 0;		// shut up compiler
ADDRLP4 148
CNSTF4 0
ASGNF4
ADDRLP4 8
ADDRLP4 148
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 148
INDIRF4
ASGNF4
line 763
;763:		break;
LABELV $230
line 766
;764:	}
;765:
;766:	sides = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 767
;767:	if (dist1 >= p->dist)
ADDRLP4 4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
LTF4 $241
line 768
;768:		sides = 1;
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $241
line 769
;769:	if (dist2 < p->dist)
ADDRLP4 8
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
GEF4 $243
line 770
;770:		sides |= 2;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $243
line 772
;771:
;772:	return sides;
ADDRLP4 0
INDIRI4
RETI4
LABELV $222
endproc BoxOnPlaneSide 152 0
export RadiusFromBounds
proc RadiusFromBounds 36 4
line 1015
;773:}
;774:#else
;775:#pragma warning( disable: 4035 )
;776:
;777:__declspec(naked) int BoxOnPlaneSide(vec3_t emins, vec3_t emaxs, struct cplane_s *p) {
;778:	static int bops_initialized;
;779:	static int Ljmptab[8];
;780:
;781:	__asm {
;782:
;783:		push ebx
;784:
;785:		cmp bops_initialized, 1
;786:		je  initialized
;787:		mov bops_initialized, 1
;788:
;789:		mov Ljmptab[0 * 4], offset Lcase0
;790:		mov Ljmptab[1 * 4], offset Lcase1
;791:		mov Ljmptab[2 * 4], offset Lcase2
;792:		mov Ljmptab[3 * 4], offset Lcase3
;793:		mov Ljmptab[4 * 4], offset Lcase4
;794:		mov Ljmptab[5 * 4], offset Lcase5
;795:		mov Ljmptab[6 * 4], offset Lcase6
;796:		mov Ljmptab[7 * 4], offset Lcase7
;797:
;798:		initialized :
;799:
;800:		mov edx, dword ptr[4 + 12 + esp]
;801:			mov ecx, dword ptr[4 + 4 + esp]
;802:			xor eax, eax
;803:			mov ebx, dword ptr[4 + 8 + esp]
;804:			mov al, byte ptr[17 + edx]
;805:			cmp al, 8
;806:			jge Lerror
;807:			fld dword ptr[0 + edx]
;808:			fld st(0)
;809:			jmp dword ptr[Ljmptab + eax * 4]
;810:			Lcase0:
;811:		fmul dword ptr[ebx]
;812:			fld dword ptr[0 + 4 + edx]
;813:			fxch st(2)
;814:			fmul dword ptr[ecx]
;815:			fxch st(2)
;816:			fld st(0)
;817:			fmul dword ptr[4 + ebx]
;818:			fld dword ptr[0 + 8 + edx]
;819:			fxch st(2)
;820:			fmul dword ptr[4 + ecx]
;821:			fxch st(2)
;822:			fld st(0)
;823:			fmul dword ptr[8 + ebx]
;824:			fxch st(5)
;825:			faddp st(3), st(0)
;826:			fmul dword ptr[8 + ecx]
;827:			fxch st(1)
;828:			faddp st(3), st(0)
;829:			fxch st(3)
;830:			faddp st(2), st(0)
;831:			jmp LSetSides
;832:			Lcase1 :
;833:		fmul dword ptr[ecx]
;834:			fld dword ptr[0 + 4 + edx]
;835:			fxch st(2)
;836:			fmul dword ptr[ebx]
;837:			fxch st(2)
;838:			fld st(0)
;839:			fmul dword ptr[4 + ebx]
;840:			fld dword ptr[0 + 8 + edx]
;841:			fxch st(2)
;842:			fmul dword ptr[4 + ecx]
;843:			fxch st(2)
;844:			fld st(0)
;845:			fmul dword ptr[8 + ebx]
;846:			fxch st(5)
;847:			faddp st(3), st(0)
;848:			fmul dword ptr[8 + ecx]
;849:			fxch st(1)
;850:			faddp st(3), st(0)
;851:			fxch st(3)
;852:			faddp st(2), st(0)
;853:			jmp LSetSides
;854:			Lcase2 :
;855:		fmul dword ptr[ebx]
;856:			fld dword ptr[0 + 4 + edx]
;857:			fxch st(2)
;858:			fmul dword ptr[ecx]
;859:			fxch st(2)
;860:			fld st(0)
;861:			fmul dword ptr[4 + ecx]
;862:			fld dword ptr[0 + 8 + edx]
;863:			fxch st(2)
;864:			fmul dword ptr[4 + ebx]
;865:			fxch st(2)
;866:			fld st(0)
;867:			fmul dword ptr[8 + ebx]
;868:			fxch st(5)
;869:			faddp st(3), st(0)
;870:			fmul dword ptr[8 + ecx]
;871:			fxch st(1)
;872:			faddp st(3), st(0)
;873:			fxch st(3)
;874:			faddp st(2), st(0)
;875:			jmp LSetSides
;876:			Lcase3 :
;877:		fmul dword ptr[ecx]
;878:			fld dword ptr[0 + 4 + edx]
;879:			fxch st(2)
;880:			fmul dword ptr[ebx]
;881:			fxch st(2)
;882:			fld st(0)
;883:			fmul dword ptr[4 + ecx]
;884:			fld dword ptr[0 + 8 + edx]
;885:			fxch st(2)
;886:			fmul dword ptr[4 + ebx]
;887:			fxch st(2)
;888:			fld st(0)
;889:			fmul dword ptr[8 + ebx]
;890:			fxch st(5)
;891:			faddp st(3), st(0)
;892:			fmul dword ptr[8 + ecx]
;893:			fxch st(1)
;894:			faddp st(3), st(0)
;895:			fxch st(3)
;896:			faddp st(2), st(0)
;897:			jmp LSetSides
;898:			Lcase4 :
;899:		fmul dword ptr[ebx]
;900:			fld dword ptr[0 + 4 + edx]
;901:			fxch st(2)
;902:			fmul dword ptr[ecx]
;903:			fxch st(2)
;904:			fld st(0)
;905:			fmul dword ptr[4 + ebx]
;906:			fld dword ptr[0 + 8 + edx]
;907:			fxch st(2)
;908:			fmul dword ptr[4 + ecx]
;909:			fxch st(2)
;910:			fld st(0)
;911:			fmul dword ptr[8 + ecx]
;912:			fxch st(5)
;913:			faddp st(3), st(0)
;914:			fmul dword ptr[8 + ebx]
;915:			fxch st(1)
;916:			faddp st(3), st(0)
;917:			fxch st(3)
;918:			faddp st(2), st(0)
;919:			jmp LSetSides
;920:			Lcase5 :
;921:		fmul dword ptr[ecx]
;922:			fld dword ptr[0 + 4 + edx]
;923:			fxch st(2)
;924:			fmul dword ptr[ebx]
;925:			fxch st(2)
;926:			fld st(0)
;927:			fmul dword ptr[4 + ebx]
;928:			fld dword ptr[0 + 8 + edx]
;929:			fxch st(2)
;930:			fmul dword ptr[4 + ecx]
;931:			fxch st(2)
;932:			fld st(0)
;933:			fmul dword ptr[8 + ecx]
;934:			fxch st(5)
;935:			faddp st(3), st(0)
;936:			fmul dword ptr[8 + ebx]
;937:			fxch st(1)
;938:			faddp st(3), st(0)
;939:			fxch st(3)
;940:			faddp st(2), st(0)
;941:			jmp LSetSides
;942:			Lcase6 :
;943:		fmul dword ptr[ebx]
;944:			fld dword ptr[0 + 4 + edx]
;945:			fxch st(2)
;946:			fmul dword ptr[ecx]
;947:			fxch st(2)
;948:			fld st(0)
;949:			fmul dword ptr[4 + ecx]
;950:			fld dword ptr[0 + 8 + edx]
;951:			fxch st(2)
;952:			fmul dword ptr[4 + ebx]
;953:			fxch st(2)
;954:			fld st(0)
;955:			fmul dword ptr[8 + ecx]
;956:			fxch st(5)
;957:			faddp st(3), st(0)
;958:			fmul dword ptr[8 + ebx]
;959:			fxch st(1)
;960:			faddp st(3), st(0)
;961:			fxch st(3)
;962:			faddp st(2), st(0)
;963:			jmp LSetSides
;964:			Lcase7 :
;965:		fmul dword ptr[ecx]
;966:			fld dword ptr[0 + 4 + edx]
;967:			fxch st(2)
;968:			fmul dword ptr[ebx]
;969:			fxch st(2)
;970:			fld st(0)
;971:			fmul dword ptr[4 + ecx]
;972:			fld dword ptr[0 + 8 + edx]
;973:			fxch st(2)
;974:			fmul dword ptr[4 + ebx]
;975:			fxch st(2)
;976:			fld st(0)
;977:			fmul dword ptr[8 + ecx]
;978:			fxch st(5)
;979:			faddp st(3), st(0)
;980:			fmul dword ptr[8 + ebx]
;981:			fxch st(1)
;982:			faddp st(3), st(0)
;983:			fxch st(3)
;984:			faddp st(2), st(0)
;985:			LSetSides:
;986:		faddp st(2), st(0)
;987:			fcomp dword ptr[12 + edx]
;988:			xor ecx, ecx
;989:			fnstsw ax
;990:			fcomp dword ptr[12 + edx]
;991:			and ah, 1
;992:			xor ah, 1
;993:			add cl, ah
;994:			fnstsw ax
;995:			and ah, 1
;996:			add ah, ah
;997:			add cl, ah
;998:			pop ebx
;999:			mov eax, ecx
;1000:			ret
;1001:			Lerror :
;1002:		int 3
;1003:	}
;1004:}
;1005:#pragma warning( default: 4035 )
;1006:
;1007:#endif
;1008:#endif
;1009:
;1010:/*
;1011:=================
;1012:RadiusFromBounds
;1013:=================
;1014:*/
;1015:float RadiusFromBounds(const vec3_t mins, const vec3_t maxs) {
line 1020
;1016:	int		i;
;1017:	vec3_t	corner;
;1018:	float	a, b;
;1019:
;1020:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $246
line 1021
;1021:		a = fabs(mins[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 1022
;1022:		b = fabs(maxs[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 28
INDIRF4
ASGNF4
line 1023
;1023:		corner[i] = a > b ? a : b;
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
LEF4 $251
ADDRLP4 32
ADDRLP4 4
INDIRF4
ASGNF4
ADDRGP4 $252
JUMPV
LABELV $251
ADDRLP4 32
ADDRLP4 8
INDIRF4
ASGNF4
LABELV $252
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 1024
;1024:	}
LABELV $247
line 1020
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $246
line 1026
;1025:
;1026:	return VectorLength(corner);
ADDRLP4 12
ARGP4
ADDRLP4 24
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
INDIRF4
RETF4
LABELV $245
endproc RadiusFromBounds 36 4
export ClearBounds
proc ClearBounds 16 0
line 1030
;1027:}
;1028:
;1029:
;1030:void ClearBounds(vec3_t mins, vec3_t maxs) {
line 1031
;1031:	mins[0] = mins[1] = mins[2] = 99999;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 1203982208
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1032
;1032:	maxs[0] = maxs[1] = maxs[2] = -99999;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 3351465856
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1033
;1033:}
LABELV $253
endproc ClearBounds 16 0
export AddPointToBounds
proc AddPointToBounds 0 0
line 1035
;1034:
;1035:void AddPointToBounds(const vec3_t v, vec3_t mins, vec3_t maxs) {
line 1036
;1036:	if (v[0] < mins[0]) {
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
GEF4 $255
line 1037
;1037:		mins[0] = v[0];
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 1038
;1038:	}
LABELV $255
line 1039
;1039:	if (v[0] > maxs[0]) {
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
LEF4 $257
line 1040
;1040:		maxs[0] = v[0];
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 1041
;1041:	}
LABELV $257
line 1043
;1042:
;1043:	if (v[1] < mins[1]) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
GEF4 $259
line 1044
;1044:		mins[1] = v[1];
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1045
;1045:	}
LABELV $259
line 1046
;1046:	if (v[1] > maxs[1]) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
LEF4 $261
line 1047
;1047:		maxs[1] = v[1];
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1048
;1048:	}
LABELV $261
line 1050
;1049:
;1050:	if (v[2] < mins[2]) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
GEF4 $263
line 1051
;1051:		mins[2] = v[2];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1052
;1052:	}
LABELV $263
line 1053
;1053:	if (v[2] > maxs[2]) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
LEF4 $265
line 1054
;1054:		maxs[2] = v[2];
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1055
;1055:	}
LABELV $265
line 1056
;1056:}
LABELV $254
endproc AddPointToBounds 0 0
export VectorNormalize
proc VectorNormalize 32 4
line 1059
;1057:
;1058:
;1059:vec_t VectorNormalize(vec3_t v) {
line 1062
;1060:	float	length, ilength;
;1061:
;1062:	length = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1063
;1063:	length = sqrt(length);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1065
;1064:
;1065:	if (length) {
ADDRLP4 0
INDIRF4
CNSTF4 0
EQF4 $268
line 1066
;1066:		ilength = 1 / length;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 1067
;1067:		v[0] *= ilength;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1068
;1068:		v[1] *= ilength;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1069
;1069:		v[2] *= ilength;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1070
;1070:	}
LABELV $268
line 1072
;1071:
;1072:	return length;
ADDRLP4 0
INDIRF4
RETF4
LABELV $267
endproc VectorNormalize 32 4
export VectorNormalize2
proc VectorNormalize2 20 4
line 1075
;1073:}
;1074:
;1075:vec_t VectorNormalize2(const vec3_t v, vec3_t out) {
line 1078
;1076:	float	length, ilength;
;1077:
;1078:	length = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1079
;1079:	length = sqrt(length);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1081
;1080:
;1081:	if (length) {
ADDRLP4 0
INDIRF4
CNSTF4 0
EQF4 $271
line 1085
;1082:#ifndef Q3_VM // bk0101022 - FPE related
;1083:		//	  assert( ((Q_fabs(v[0])!=0.0f) || (Q_fabs(v[1])!=0.0f) || (Q_fabs(v[2])!=0.0f)) );
;1084:#endif
;1085:		ilength = 1 / length;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 1086
;1086:		out[0] = v[0] * ilength;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1087
;1087:		out[1] = v[1] * ilength;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1088
;1088:		out[2] = v[2] * ilength;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1089
;1089:	} else {
ADDRGP4 $272
JUMPV
LABELV $271
line 1093
;1090:#ifndef Q3_VM // bk0101022 - FPE related
;1091:		//	  assert( ((Q_fabs(v[0])==0.0f) && (Q_fabs(v[1])==0.0f) && (Q_fabs(v[2])==0.0f)) );
;1092:#endif
;1093:		VectorClear(out);
ADDRFP4 4
INDIRP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 1094
;1094:	}
LABELV $272
line 1096
;1095:
;1096:	return length;
ADDRLP4 0
INDIRF4
RETF4
LABELV $270
endproc VectorNormalize2 20 4
export _VectorMA
proc _VectorMA 0 0
line 1100
;1097:
;1098:}
;1099:
;1100:void _VectorMA(const vec3_t veca, float scale, const vec3_t vecb, vec3_t vecc) {
line 1101
;1101:	vecc[0] = veca[0] + scale * vecb[0];
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1102
;1102:	vecc[1] = veca[1] + scale * vecb[1];
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1103
;1103:	vecc[2] = veca[2] + scale * vecb[2];
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1104
;1104:}
LABELV $273
endproc _VectorMA 0 0
export _DotProduct
proc _DotProduct 8 0
line 1107
;1105:
;1106:
;1107:vec_t _DotProduct(const vec3_t v1, const vec3_t v2) {
line 1108
;1108:	return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
RETF4
LABELV $274
endproc _DotProduct 8 0
export _VectorSubtract
proc _VectorSubtract 0 0
line 1111
;1109:}
;1110:
;1111:void _VectorSubtract(const vec3_t veca, const vec3_t vecb, vec3_t out) {
line 1112
;1112:	out[0] = veca[0] - vecb[0];
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
SUBF4
ASGNF4
line 1113
;1113:	out[1] = veca[1] - vecb[1];
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1114
;1114:	out[2] = veca[2] - vecb[2];
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1115
;1115:}
LABELV $275
endproc _VectorSubtract 0 0
export _VectorAdd
proc _VectorAdd 0 0
line 1117
;1116:
;1117:void _VectorAdd(const vec3_t veca, const vec3_t vecb, vec3_t out) {
line 1118
;1118:	out[0] = veca[0] + vecb[0];
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 1119
;1119:	out[1] = veca[1] + vecb[1];
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1120
;1120:	out[2] = veca[2] + vecb[2];
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1121
;1121:}
LABELV $276
endproc _VectorAdd 0 0
export _VectorCopy
proc _VectorCopy 0 0
line 1123
;1122:
;1123:void _VectorCopy(const vec3_t in, vec3_t out) {
line 1124
;1124:	out[0] = in[0];
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 1125
;1125:	out[1] = in[1];
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1126
;1126:	out[2] = in[2];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1127
;1127:}
LABELV $277
endproc _VectorCopy 0 0
export _VectorScale
proc _VectorScale 0 0
line 1129
;1128:
;1129:void _VectorScale(const vec3_t in, vec_t scale, vec3_t out) {
line 1130
;1130:	out[0] = in[0] * scale;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1131
;1131:	out[1] = in[1] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1132
;1132:	out[2] = in[2] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1133
;1133:}
LABELV $278
endproc _VectorScale 0 0
export Vector4Scale
proc Vector4Scale 0 0
line 1135
;1134:
;1135:void Vector4Scale(const vec4_t in, vec_t scale, vec4_t out) {
line 1136
;1136:	out[0] = in[0] * scale;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1137
;1137:	out[1] = in[1] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1138
;1138:	out[2] = in[2] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1139
;1139:	out[3] = in[3] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1140
;1140:}
LABELV $279
endproc Vector4Scale 0 0
export Q_log2
proc Q_log2 8 0
line 1143
;1141:
;1142:
;1143:int Q_log2(int val) {
line 1146
;1144:	int answer;
;1145:
;1146:	answer = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $282
JUMPV
LABELV $281
line 1147
;1147:	while ((val >>= 1) != 0) {
line 1148
;1148:		answer++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1149
;1149:	}
LABELV $282
line 1147
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 1
RSHI4
ASGNI4
ADDRFP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $281
line 1150
;1150:	return answer;
ADDRLP4 0
INDIRI4
RETI4
LABELV $280
endproc Q_log2 8 0
export MatrixMultiply
proc MatrixMultiply 72 0
line 1179
;1151:}
;1152:
;1153:
;1154:
;1155:/*
;1156:=================
;1157:PlaneTypeForNormal
;1158:=================
;1159:*/
;1160:/*
;1161:int	PlaneTypeForNormal (vec3_t normal) {
;1162:	if ( normal[0] == 1.0 )
;1163:		return PLANE_X;
;1164:	if ( normal[1] == 1.0 )
;1165:		return PLANE_Y;
;1166:	if ( normal[2] == 1.0 )
;1167:		return PLANE_Z;
;1168:
;1169:	return PLANE_NON_AXIAL;
;1170:}
;1171:*/
;1172:
;1173:
;1174:/*
;1175:================
;1176:MatrixMultiply
;1177:================
;1178:*/
;1179:void MatrixMultiply(float in1[3][3], float in2[3][3], float out[3][3]) {
line 1180
;1180:	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] +
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1182
;1181:		in1[0][2] * in2[2][0];
;1182:	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] +
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1184
;1183:		in1[0][2] * in2[2][1];
;1184:	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] +
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1186
;1185:		in1[0][2] * in2[2][2];
;1186:	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] +
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
INDIRF4
MULF4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1188
;1187:		in1[1][2] * in2[2][0];
;1188:	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] +
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 32
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1190
;1189:		in1[1][2] * in2[2][1];
;1190:	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] +
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1192
;1191:		in1[1][2] * in2[2][2];
;1192:	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] +
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1194
;1193:		in1[2][2] * in2[2][0];
;1194:	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] +
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 56
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1196
;1195:		in1[2][2] * in2[2][1];
;1196:	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] +
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 64
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1198
;1197:		in1[2][2] * in2[2][2];
;1198:}
LABELV $284
endproc MatrixMultiply 72 0
bss
align 4
LABELV $286
skip 4
align 4
LABELV $287
skip 4
align 4
LABELV $288
skip 4
align 4
LABELV $289
skip 4
align 4
LABELV $290
skip 4
align 4
LABELV $291
skip 4
export AngleVectors
code
proc AngleVectors 28 4
line 1201
;1199:
;1200:
;1201:void AngleVectors(const vec3_t angles, vec3_t forward, vec3_t right, vec3_t up) {
line 1206
;1202:	float		angle;
;1203:	static float		sr, sp, sy, cr, cp, cy;
;1204:	// static to help MS compiler fp bugs
;1205:
;1206:	angle = angles[YAW] * (M_PI * 2 / 360);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 1207
;1207:	sy = sin(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 $288
ADDRLP4 4
INDIRF4
ASGNF4
line 1208
;1208:	cy = cos(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 $291
ADDRLP4 8
INDIRF4
ASGNF4
line 1209
;1209:	angle = angles[PITCH] * (M_PI * 2 / 360);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 1210
;1210:	sp = sin(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 $287
ADDRLP4 12
INDIRF4
ASGNF4
line 1211
;1211:	cp = cos(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 $290
ADDRLP4 16
INDIRF4
ASGNF4
line 1212
;1212:	angle = angles[ROLL] * (M_PI * 2 / 360);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 1213
;1213:	sr = sin(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 $286
ADDRLP4 20
INDIRF4
ASGNF4
line 1214
;1214:	cr = cos(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 $289
ADDRLP4 24
INDIRF4
ASGNF4
line 1216
;1215:
;1216:	if (forward) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $292
line 1217
;1217:		forward[0] = cp * cy;
ADDRFP4 4
INDIRP4
ADDRGP4 $290
INDIRF4
ADDRGP4 $291
INDIRF4
MULF4
ASGNF4
line 1218
;1218:		forward[1] = cp * sy;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 $290
INDIRF4
ADDRGP4 $288
INDIRF4
MULF4
ASGNF4
line 1219
;1219:		forward[2] = -sp;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 $287
INDIRF4
NEGF4
ASGNF4
line 1220
;1220:	}
LABELV $292
line 1221
;1221:	if (right) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $294
line 1222
;1222:		right[0] = (-1 * sr * sp * cy + -1 * cr * -sy);
ADDRFP4 8
INDIRP4
ADDRGP4 $286
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $287
INDIRF4
MULF4
ADDRGP4 $291
INDIRF4
MULF4
ADDRGP4 $289
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $288
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1223
;1223:		right[1] = (-1 * sr * sp * sy + -1 * cr * cy);
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 $286
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $287
INDIRF4
MULF4
ADDRGP4 $288
INDIRF4
MULF4
ADDRGP4 $289
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $291
INDIRF4
MULF4
ADDF4
ASGNF4
line 1224
;1224:		right[2] = -1 * sr * cp;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 $286
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $290
INDIRF4
MULF4
ASGNF4
line 1225
;1225:	}
LABELV $294
line 1226
;1226:	if (up) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $296
line 1227
;1227:		up[0] = (cr * sp * cy + -sr * -sy);
ADDRFP4 12
INDIRP4
ADDRGP4 $289
INDIRF4
ADDRGP4 $287
INDIRF4
MULF4
ADDRGP4 $291
INDIRF4
MULF4
ADDRGP4 $286
INDIRF4
NEGF4
ADDRGP4 $288
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1228
;1228:		up[1] = (cr * sp * sy + -sr * cy);
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 $289
INDIRF4
ADDRGP4 $287
INDIRF4
MULF4
ADDRGP4 $288
INDIRF4
MULF4
ADDRGP4 $286
INDIRF4
NEGF4
ADDRGP4 $291
INDIRF4
MULF4
ADDF4
ASGNF4
line 1229
;1229:		up[2] = cr * cp;
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 $289
INDIRF4
ADDRGP4 $290
INDIRF4
MULF4
ASGNF4
line 1230
;1230:	}
LABELV $296
line 1231
;1231:}
LABELV $285
endproc AngleVectors 28 4
export PerpendicularVector
proc PerpendicularVector 32 12
line 1236
;1232:
;1233:/*
;1234:** assumes "src" is normalized
;1235:*/
;1236:void PerpendicularVector(vec3_t dst, const vec3_t src) {
line 1239
;1237:	int	pos;
;1238:	int i;
;1239:	float f, minelem = 1.0F;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 1245
;1240:	vec3_t tempvec;
;1241:
;1242:	/*
;1243:	** find the smallest magnitude axially aligned vector
;1244:	*/
;1245:	for (pos = 0, i = 0; i < 3; i++) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $302
JUMPV
LABELV $299
line 1246
;1246:		f = fabs(src[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
ASGNF4
line 1247
;1247:		if (f < minelem) {
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
GEF4 $303
line 1248
;1248:			pos = i;
ADDRLP4 12
ADDRLP4 0
INDIRI4
ASGNI4
line 1249
;1249:			minelem = f;
ADDRLP4 8
ADDRLP4 4
INDIRF4
ASGNF4
line 1250
;1250:		}
LABELV $303
line 1251
;1251:	}
LABELV $300
line 1245
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $302
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $299
line 1252
;1252:	tempvec[0] = tempvec[1] = tempvec[2] = 0.0F;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 16+8
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 28
INDIRF4
ASGNF4
line 1253
;1253:	tempvec[pos] = 1.0F;
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
CNSTF4 1065353216
ASGNF4
line 1258
;1254:
;1255:	/*
;1256:	** project the point onto the plane defined by src
;1257:	*/
;1258:	ProjectPointOnPlane(dst, tempvec, src);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 ProjectPointOnPlane
CALLV
pop
line 1263
;1259:
;1260:	/*
;1261:	** normalize the result
;1262:	*/
;1263:	VectorNormalize(dst);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1264
;1264:}
LABELV $298
endproc PerpendicularVector 32 12
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import Q_acos
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
