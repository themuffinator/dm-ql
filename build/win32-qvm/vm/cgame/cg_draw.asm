data
export menuScoreboard
align 4
LABELV menuScoreboard
byte 4 0
export CG_Text_Width
code
proc CG_Text_Width 40 4
file "..\..\..\..\code\cgame\cg_draw.c"
line 20
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_draw.c -- draw all of the graphical elements during
;4:// active (after loading) gameplay
;5:
;6:#include "cg_local.h"
;7:
;8:// used for scoreboard
;9:extern displayContextDef_t cgDC;
;10:menuDef_t *menuScoreboard = NULL;
;11:
;12:int sortedTeamPlayers[TEAM_MAXOVERLAY];
;13:int	numSortedTeamPlayers;
;14:
;15:char systemChat[256];
;16:char teamChat1[256];
;17:char teamChat2[256];
;18:
;19:
;20:float CG_Text_Width(const char *text, float scale, int limit, int fontIndex, int widescreen) { //, rectDef_t menuRect) {
line 27
;21:	int count, len;
;22:	float out;
;23:	glyphInfo_t *glyph;
;24:	float useScale;
;25:	// FIXME: see ui_main.c, same problem
;26:	//	const unsigned char *s = text;
;27:	const char *s = text;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 28
;28:	fontInfo_t *font = &cgDC.Assets.textFont;
ADDRLP4 12
ADDRGP4 cgDC+236+12
ASGNP4
line 29
;29:	if (scale <= cg_smallFont.value) {
ADDRFP4 4
INDIRF4
ADDRGP4 cg_smallFont+8
INDIRF4
GTF4 $84
line 30
;30:		font = &cgDC.Assets.smallFont;
ADDRLP4 12
ADDRGP4 cgDC+236+20560
ASGNP4
line 31
;31:	} else if (scale > cg_bigFont.value) {
ADDRGP4 $85
JUMPV
LABELV $84
ADDRFP4 4
INDIRF4
ADDRGP4 cg_bigFont+8
INDIRF4
LEF4 $89
line 32
;32:		font = &cgDC.Assets.bigFont;
ADDRLP4 12
ADDRGP4 cgDC+236+41108
ASGNP4
line 33
;33:	}
LABELV $89
LABELV $85
line 34
;34:	useScale = scale * font->glyphScale;
ADDRLP4 24
ADDRFP4 4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 20480
ADDP4
INDIRF4
MULF4
ASGNF4
line 35
;35:	out = 0;
ADDRLP4 20
CNSTF4 0
ASGNF4
line 36
;36:	if (text) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $94
line 37
;37:		len = strlen(text);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
line 38
;38:		if (limit > 0 && len > limit) {
ADDRLP4 32
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
LEI4 $96
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LEI4 $96
line 39
;39:			len = limit;
ADDRLP4 8
ADDRFP4 8
INDIRI4
ASGNI4
line 40
;40:		}
LABELV $96
line 41
;41:		count = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $99
JUMPV
LABELV $98
line 42
;42:		while (s && *s && count < len) {
line 43
;43:			if (Q_IsColorString(s)) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $101
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $101
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $101
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $101
line 44
;44:				s += 2;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 45
;45:				continue;
ADDRGP4 $99
JUMPV
LABELV $101
line 46
;46:			} else {
line 47
;47:				glyph = &font->glyphs[(int)*s]; // TTimo: FIXME: getting nasty warnings without the cast, hopefully this doesn't break the VM build
ADDRLP4 16
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 80
MULI4
ADDRLP4 12
INDIRP4
ADDP4
ASGNP4
line 48
;48:				out += glyph->xSkip;
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 49
;49:				s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 50
;50:				count++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 51
;51:			}
line 52
;52:		}
LABELV $99
line 42
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $104
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $104
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $98
LABELV $104
line 53
;53:	}
LABELV $94
line 54
;54:	return out * useScale;
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
RETF4
LABELV $81
endproc CG_Text_Width 40 4
export CG_Text_Height
proc CG_Text_Height 40 4
line 57
;55:}
;56:
;57:float CG_Text_Height(const char *text, float scale, int limit, int fontIndex, int widescreen) { //, rectDef_t menuRect) {
line 64
;58:	int len, count;
;59:	float max;
;60:	glyphInfo_t *glyph;
;61:	float useScale;
;62:	// TTimo: FIXME
;63:	//	const unsigned char *s = text;
;64:	const char *s = text;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 65
;65:	fontInfo_t *font = &cgDC.Assets.textFont;
ADDRLP4 20
ADDRGP4 cgDC+236+12
ASGNP4
line 66
;66:	if (scale <= cg_smallFont.value) {
ADDRFP4 4
INDIRF4
ADDRGP4 cg_smallFont+8
INDIRF4
GTF4 $108
line 67
;67:		font = &cgDC.Assets.smallFont;
ADDRLP4 20
ADDRGP4 cgDC+236+20560
ASGNP4
line 68
;68:	} else if (scale > cg_bigFont.value) {
ADDRGP4 $109
JUMPV
LABELV $108
ADDRFP4 4
INDIRF4
ADDRGP4 cg_bigFont+8
INDIRF4
LEF4 $113
line 69
;69:		font = &cgDC.Assets.bigFont;
ADDRLP4 20
ADDRGP4 cgDC+236+41108
ASGNP4
line 70
;70:	}
LABELV $113
LABELV $109
line 71
;71:	useScale = scale * font->glyphScale;
ADDRLP4 24
ADDRFP4 4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 20480
ADDP4
INDIRF4
MULF4
ASGNF4
line 72
;72:	max = 0;
ADDRLP4 16
CNSTF4 0
ASGNF4
line 73
;73:	if (text) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $118
line 74
;74:		len = strlen(text);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
line 75
;75:		if (limit > 0 && len > limit) {
ADDRLP4 32
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
LEI4 $120
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LEI4 $120
line 76
;76:			len = limit;
ADDRLP4 8
ADDRFP4 8
INDIRI4
ASGNI4
line 77
;77:		}
LABELV $120
line 78
;78:		count = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $123
JUMPV
LABELV $122
line 79
;79:		while (s && *s && count < len) {
line 80
;80:			if (Q_IsColorString(s)) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $125
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $125
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $125
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $125
line 81
;81:				s += 2;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 82
;82:				continue;
ADDRGP4 $123
JUMPV
LABELV $125
line 83
;83:			} else {
line 84
;84:				glyph = &font->glyphs[(int)*s]; // TTimo: FIXME: getting nasty warnings without the cast, hopefully this doesn't break the VM build
ADDRLP4 12
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 80
MULI4
ADDRLP4 20
INDIRP4
ADDP4
ASGNP4
line 85
;85:				if (max < glyph->height) {
ADDRLP4 16
INDIRF4
ADDRLP4 12
INDIRP4
INDIRI4
CVIF4 4
GEF4 $127
line 86
;86:					max = glyph->height;
ADDRLP4 16
ADDRLP4 12
INDIRP4
INDIRI4
CVIF4 4
ASGNF4
line 87
;87:				}
LABELV $127
line 88
;88:				s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 89
;89:				count++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 90
;90:			}
line 91
;91:		}
LABELV $123
line 79
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $130
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $130
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $122
LABELV $130
line 92
;92:	}
LABELV $118
line 93
;93:	return max * useScale;
ADDRLP4 16
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
RETF4
LABELV $105
endproc CG_Text_Height 40 4
export CG_Text_PaintChar
proc CG_Text_PaintChar 8 36
line 96
;94:}
;95:
;96:void CG_Text_PaintChar(float x, float y, float width, float height, float scale, float s, float t, float s2, float t2, qhandle_t hShader) {
line 98
;97:	float w, h;
;98:	w = width * scale;
ADDRLP4 0
ADDRFP4 8
INDIRF4
ADDRFP4 16
INDIRF4
MULF4
ASGNF4
line 99
;99:	h = height * scale;
ADDRLP4 4
ADDRFP4 12
INDIRF4
ADDRFP4 16
INDIRF4
MULF4
ASGNF4
line 100
;100:	CG_AdjustFrom640(&x, &y, &w, &h);
ADDRFP4 0
ARGP4
ADDRFP4 4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 101
;101:	trap_R_DrawStretchPic(x, y, w, h, s, t, s2, t2, hShader);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRFP4 20
INDIRF4
ARGF4
ADDRFP4 24
INDIRF4
ARGF4
ADDRFP4 28
INDIRF4
ARGF4
ADDRFP4 32
INDIRF4
ARGF4
ADDRFP4 36
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 102
;102:}
LABELV $131
endproc CG_Text_PaintChar 8 36
export CG_Text_Paint
proc CG_Text_Paint 76 40
line 104
;103:
;104:void CG_Text_Paint(float x, float y, float scale, const vec4_t color, const char *text, float adjust, int limit, int style, int fontIndex, int widescreen) { //, rectDef_t menuRect) {
line 109
;105:	int len, count;
;106:	vec4_t newColor;
;107:	glyphInfo_t *glyph;
;108:	float useScale;
;109:	fontInfo_t *font = &cgDC.Assets.textFont;
ADDRLP4 28
ADDRGP4 cgDC+236+12
ASGNP4
line 110
;110:	if (scale <= cg_smallFont.value) {
ADDRFP4 8
INDIRF4
ADDRGP4 cg_smallFont+8
INDIRF4
GTF4 $135
line 111
;111:		font = &cgDC.Assets.smallFont;
ADDRLP4 28
ADDRGP4 cgDC+236+20560
ASGNP4
line 112
;112:	} else if (scale > cg_bigFont.value) {
ADDRGP4 $136
JUMPV
LABELV $135
ADDRFP4 8
INDIRF4
ADDRGP4 cg_bigFont+8
INDIRF4
LEF4 $140
line 113
;113:		font = &cgDC.Assets.bigFont;
ADDRLP4 28
ADDRGP4 cgDC+236+41108
ASGNP4
line 114
;114:	}
LABELV $140
LABELV $136
line 115
;115:	useScale = scale * font->glyphScale;
ADDRLP4 20
ADDRFP4 8
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 20480
ADDP4
INDIRF4
MULF4
ASGNF4
line 116
;116:	if (text) {
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $145
line 119
;117:		// TTimo: FIXME
;118:		//		const unsigned char *s = text;
;119:		const char *s = text;
ADDRLP4 36
ADDRFP4 16
INDIRP4
ASGNP4
line 120
;120:		trap_R_SetColor(color);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 121
;121:		memcpy(&newColor[0], &color[0], sizeof(vec4_t));
ADDRLP4 4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 122
;122:		len = strlen(text);
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 40
INDIRI4
ASGNI4
line 123
;123:		if (limit > 0 && len > limit) {
ADDRLP4 44
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
LEI4 $147
ADDRLP4 32
INDIRI4
ADDRLP4 44
INDIRI4
LEI4 $147
line 124
;124:			len = limit;
ADDRLP4 32
ADDRFP4 24
INDIRI4
ASGNI4
line 125
;125:		}
LABELV $147
line 126
;126:		count = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 $150
JUMPV
LABELV $149
line 127
;127:		while (s && *s && count < len) {
line 128
;128:			glyph = &font->glyphs[(int)*s]; // TTimo: FIXME: getting nasty warnings without the cast, hopefully this doesn't break the VM build
ADDRLP4 0
ADDRLP4 36
INDIRP4
INDIRI1
CVII4 1
CNSTI4 80
MULI4
ADDRLP4 28
INDIRP4
ADDP4
ASGNP4
line 131
;129:			//int yadj = Assets.textFont.glyphs[text[i]].bottom + Assets.textFont.glyphs[text[i]].top;
;130:			//float yadj = scale * (Assets.textFont.glyphs[text[i]].imageHeight - Assets.textFont.glyphs[text[i]].height);
;131:			if (Q_IsColorString(s)) {
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $152
ADDRLP4 36
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $152
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $152
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $152
line 132
;132:				memcpy(newColor, g_color_table[ColorIndex(*(s + 1))], sizeof(newColor));
ADDRLP4 4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CNSTI4 7
BANDI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 133
;133:				newColor[3] = color[3];
ADDRLP4 4+12
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 134
;134:				trap_R_SetColor(newColor);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 135
;135:				s += 2;
ADDRLP4 36
ADDRLP4 36
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 136
;136:				continue;
ADDRGP4 $150
JUMPV
LABELV $152
line 137
;137:			} else {
line 138
;138:				float yadj = useScale * glyph->top;
ADDRLP4 52
ADDRLP4 20
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 139
;139:				if (style == ITEM_TEXTSTYLE_SHADOWED || style == ITEM_TEXTSTYLE_SHADOWEDMORE) {
ADDRLP4 56
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 3
EQI4 $157
ADDRLP4 56
INDIRI4
CNSTI4 6
NEI4 $155
LABELV $157
line 140
;140:					int ofs = style == ITEM_TEXTSTYLE_SHADOWED ? 1 : 2;
ADDRFP4 28
INDIRI4
CNSTI4 3
NEI4 $159
ADDRLP4 64
CNSTI4 1
ASGNI4
ADDRGP4 $160
JUMPV
LABELV $159
ADDRLP4 64
CNSTI4 2
ASGNI4
LABELV $160
ADDRLP4 60
ADDRLP4 64
INDIRI4
ASGNI4
line 141
;141:					colorBlack[3] = newColor[3];
ADDRGP4 colorBlack+12
ADDRLP4 4+12
INDIRF4
ASGNF4
line 142
;142:					trap_R_SetColor(colorBlack);
ADDRGP4 colorBlack
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 143
;143:					CG_Text_PaintChar(x + ofs, y - yadj + ofs,
ADDRLP4 68
ADDRLP4 60
INDIRI4
CVIF4 4
ASGNF4
ADDRFP4 0
INDIRF4
ADDRLP4 68
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
ADDRLP4 68
INDIRF4
ADDF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Text_PaintChar
CALLV
pop
line 152
;144:						glyph->imageWidth,
;145:						glyph->imageHeight,
;146:						useScale,
;147:						glyph->s,
;148:						glyph->t,
;149:						glyph->s2,
;150:						glyph->t2,
;151:						glyph->glyph);
;152:					colorBlack[3] = 1.0;
ADDRGP4 colorBlack+12
CNSTF4 1065353216
ASGNF4
line 153
;153:					trap_R_SetColor(newColor);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 154
;154:				}
LABELV $155
line 155
;155:				CG_Text_PaintChar(x, y - yadj,
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Text_PaintChar
CALLV
pop
line 165
;156:					glyph->imageWidth,
;157:					glyph->imageHeight,
;158:					useScale,
;159:					glyph->s,
;160:					glyph->t,
;161:					glyph->s2,
;162:					glyph->t2,
;163:					glyph->glyph);
;164:				// CG_DrawPic(x, y - yadj, scale * cgDC.Assets.textFont.glyphs[text[i]].imageWidth, scale * cgDC.Assets.textFont.glyphs[text[i]].imageHeight, cgDC.Assets.textFont.glyphs[text[i]].glyph, WIDESCREEN_STRETCH); //, mRect);
;165:				x += (glyph->xSkip * useScale) + adjust;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 20
INDIRF4
MULF4
ADDRFP4 20
INDIRF4
ADDF4
ADDF4
ASGNF4
line 166
;166:				s++;
ADDRLP4 36
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 167
;167:				count++;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 168
;168:			}
line 169
;169:		}
LABELV $150
line 127
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $165
ADDRLP4 36
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $165
ADDRLP4 24
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $149
LABELV $165
line 170
;170:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 171
;171:	}
LABELV $145
line 172
;172:}
LABELV $132
endproc CG_Text_Paint 76 40
export CG_Draw3DModel
proc CG_Draw3DModel 508 16
line 179
;173:
;174:/*
;175:================
;176:CG_Draw3DModel
;177:================
;178:*/
;179:void CG_Draw3DModel(float x, float y, float w, float h, qhandle_t model, qhandle_t skin, vec3_t origin, vec3_t angles) {
line 183
;180:	refdef_t		refdef;
;181:	refEntity_t		ent;
;182:
;183:	if (!cg_draw3dIcons.integer || !cg_drawIcons.integer) {
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $171
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
NEI4 $167
LABELV $171
line 184
;184:		return;
ADDRGP4 $166
JUMPV
LABELV $167
line 187
;185:	}
;186:
;187:	CG_AdjustFrom640(&x, &y, &w, &h);
ADDRFP4 0
ARGP4
ADDRFP4 4
ARGP4
ADDRFP4 8
ARGP4
ADDRFP4 12
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 189
;188:
;189:	memset(&refdef, 0, sizeof(refdef));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 368
ARGI4
ADDRGP4 memset
CALLP4
pop
line 191
;190:
;191:	memset(&ent, 0, sizeof(ent));
ADDRLP4 368
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 192
;192:	AnglesToAxis(angles, ent.axis);
ADDRFP4 28
INDIRP4
ARGP4
ADDRLP4 368+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 193
;193:	VectorCopy(origin, ent.origin);
ADDRLP4 368+68
ADDRFP4 24
INDIRP4
INDIRB
ASGNB 12
line 194
;194:	ent.hModel = model;
ADDRLP4 368+8
ADDRFP4 16
INDIRI4
ASGNI4
line 195
;195:	ent.customSkin = skin;
ADDRLP4 368+108
ADDRFP4 20
INDIRI4
ASGNI4
line 196
;196:	ent.renderfx = RF_NOSHADOW;		// no stencil shadows
ADDRLP4 368+4
CNSTI4 64
ASGNI4
line 198
;197:
;198:	refdef.rdflags = RDF_NOWORLDMODEL;
ADDRLP4 0+76
CNSTI4 1
ASGNI4
line 200
;199:
;200:	AxisClear(refdef.viewaxis);
ADDRLP4 0+36
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 202
;201:
;202:	refdef.fov_x = 30;
ADDRLP4 0+16
CNSTF4 1106247680
ASGNF4
line 203
;203:	refdef.fov_y = 30;
ADDRLP4 0+20
CNSTF4 1106247680
ASGNF4
line 205
;204:
;205:	refdef.x = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
CVFI4 4
ASGNI4
line 206
;206:	refdef.y = y;
ADDRLP4 0+4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
line 207
;207:	refdef.width = w;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
CVFI4 4
ASGNI4
line 208
;208:	refdef.height = h;
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
CVFI4 4
ASGNI4
line 210
;209:
;210:	refdef.time = cg.time;
ADDRLP4 0+72
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 212
;211:
;212:	trap_R_ClearScene();
ADDRGP4 trap_R_ClearScene
CALLV
pop
line 213
;213:	trap_R_AddRefEntityToScene(&ent);
ADDRLP4 368
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 214
;214:	trap_R_RenderScene(&refdef);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_RenderScene
CALLV
pop
line 215
;215:}
LABELV $166
endproc CG_Draw3DModel 508 16
export CG_Draw3DModelColor
proc CG_Draw3DModelColor 544 16
line 224
;216:
;217:
;218:
;219:/*
;220:================
;221:CG_Draw3DModel
;222:================
;223:*/
;224:void CG_Draw3DModelColor(float x, float y, float w, float h, qhandle_t model, qhandle_t skin, vec3_t origin, vec3_t angles, vec3_t color) {
line 228
;225:	refdef_t		refdef;
;226:	refEntity_t		ent;
;227:
;228:	if (!cg_draw3dIcons.integer || !cg_drawIcons.integer) {
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $191
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
NEI4 $187
LABELV $191
line 229
;229:		return;
ADDRGP4 $186
JUMPV
LABELV $187
line 232
;230:	}
;231:
;232:	CG_AdjustFrom640(&x, &y, &w, &h);
ADDRFP4 0
ARGP4
ADDRFP4 4
ARGP4
ADDRFP4 8
ARGP4
ADDRFP4 12
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 234
;233:
;234:	memset(&refdef, 0, sizeof(refdef));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 368
ARGI4
ADDRGP4 memset
CALLP4
pop
line 236
;235:
;236:	memset(&ent, 0, sizeof(ent));
ADDRLP4 368
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 237
;237:	AnglesToAxis(angles, ent.axis);
ADDRFP4 28
INDIRP4
ARGP4
ADDRLP4 368+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 238
;238:	VectorCopy(origin, ent.origin);
ADDRLP4 368+68
ADDRFP4 24
INDIRP4
INDIRB
ASGNB 12
line 239
;239:	ent.hModel = model;
ADDRLP4 368+8
ADDRFP4 16
INDIRI4
ASGNI4
line 240
;240:	ent.customSkin = skin;
ADDRLP4 368+108
ADDRFP4 20
INDIRI4
ASGNI4
line 241
;241:	ent.renderfx = RF_NOSHADOW;		// no stencil shadows
ADDRLP4 368+4
CNSTI4 64
ASGNI4
line 243
;242:
;243:	refdef.rdflags = RDF_NOWORLDMODEL;
ADDRLP4 0+76
CNSTI4 1
ASGNI4
line 245
;244:
;245:	AxisClear(refdef.viewaxis);
ADDRLP4 0+36
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 247
;246:
;247:	refdef.fov_x = 30;
ADDRLP4 0+16
CNSTF4 1106247680
ASGNF4
line 248
;248:	refdef.fov_y = 30;
ADDRLP4 0+20
CNSTF4 1106247680
ASGNF4
line 250
;249:
;250:	refdef.x = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
CVFI4 4
ASGNI4
line 251
;251:	refdef.y = y;
ADDRLP4 0+4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
line 252
;252:	refdef.width = w;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
CVFI4 4
ASGNI4
line 253
;253:	refdef.height = h;
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
CVFI4 4
ASGNI4
line 255
;254:
;255:	refdef.time = cg.time;
ADDRLP4 0+72
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 257
;256:
;257:	ent.shaderRGBA[0] = color[0] * 255;
ADDRLP4 512
ADDRFP4 32
INDIRP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 516
CNSTF4 1325400064
ASGNF4
ADDRLP4 512
INDIRF4
ADDRLP4 516
INDIRF4
LTF4 $208
ADDRLP4 508
ADDRLP4 512
INDIRF4
ADDRLP4 516
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $209
JUMPV
LABELV $208
ADDRLP4 508
ADDRLP4 512
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $209
ADDRLP4 368+116
ADDRLP4 508
INDIRU4
CVUU1 4
ASGNU1
line 258
;258:	ent.shaderRGBA[1] = color[1] * 255;
ADDRLP4 524
ADDRFP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 528
CNSTF4 1325400064
ASGNF4
ADDRLP4 524
INDIRF4
ADDRLP4 528
INDIRF4
LTF4 $213
ADDRLP4 520
ADDRLP4 524
INDIRF4
ADDRLP4 528
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $214
JUMPV
LABELV $213
ADDRLP4 520
ADDRLP4 524
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $214
ADDRLP4 368+116+1
ADDRLP4 520
INDIRU4
CVUU1 4
ASGNU1
line 259
;259:	ent.shaderRGBA[2] = color[2] * 255;
ADDRLP4 536
ADDRFP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 540
CNSTF4 1325400064
ASGNF4
ADDRLP4 536
INDIRF4
ADDRLP4 540
INDIRF4
LTF4 $218
ADDRLP4 532
ADDRLP4 536
INDIRF4
ADDRLP4 540
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $219
JUMPV
LABELV $218
ADDRLP4 532
ADDRLP4 536
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $219
ADDRLP4 368+116+2
ADDRLP4 532
INDIRU4
CVUU1 4
ASGNU1
line 260
;260:	ent.shaderRGBA[3] = 255;
ADDRLP4 368+116+3
CNSTU1 255
ASGNU1
line 262
;261:
;262:	trap_R_ClearScene();
ADDRGP4 trap_R_ClearScene
CALLV
pop
line 263
;263:	trap_R_AddRefEntityToScene(&ent);
ADDRLP4 368
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 264
;264:	trap_R_RenderScene(&refdef);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_RenderScene
CALLV
pop
line 265
;265:}
LABELV $186
endproc CG_Draw3DModelColor 544 16
export CG_DrawHead
proc CG_DrawHead 56 36
line 275
;266:
;267:
;268:/*
;269:================
;270:CG_DrawHead
;271:
;272:Used for both the status bar and the scoreboard
;273:================
;274:*/
;275:void CG_DrawHead(float x, float y, float w, float h, int clientNum, vec3_t headAngles) {
line 282
;276:	clipHandle_t	cm;
;277:	clientInfo_t *ci;
;278:	float			len;
;279:	vec3_t			origin;
;280:	vec3_t			mins, maxs;
;281:
;282:	ci = &cgs.clientinfo[clientNum];
ADDRLP4 0
ADDRFP4 16
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 284
;283:
;284:	if (cg_draw3dIcons.integer) {
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $224
line 285
;285:		cm = ci->headModel;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 286
;286:		if (!cm) {
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $227
line 287
;287:			return;
ADDRGP4 $222
JUMPV
LABELV $227
line 291
;288:		}
;289:
;290:		// offset the origin y and z to center the head
;291:		trap_R_ModelBounds(cm, mins, maxs);
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 293
;292:
;293:		origin[2] = -0.5 * (mins[2] + maxs[2]);
ADDRLP4 4+8
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
CNSTF4 3204448256
MULF4
ASGNF4
line 294
;294:		origin[1] = 0.5 * (mins[1] + maxs[1]);
ADDRLP4 4+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 298
;295:
;296:		// calculate distance so the head nearly fills the box
;297:		// assume heads are taller than wide
;298:		len = 0.7 * (maxs[2] - mins[2]);
ADDRLP4 44
ADDRLP4 28+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
CNSTF4 1060320051
MULF4
ASGNF4
line 299
;299:		origin[0] = len / 0.268;	// len / tan( fov/2 )
ADDRLP4 4
ADDRLP4 44
INDIRF4
CNSTF4 1081003604
MULF4
ASGNF4
line 302
;300:
;301:		// allow per-model tweaking
;302:		VectorAdd(origin, ci->headOffset, origin);
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 400
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 404
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRF4
ADDF4
ASGNF4
line 304
;303:
;304:		CG_Draw3DModelColor(x, y, w, h, ci->headModel, ci->headSkin, origin, headAngles, ci->headColor);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 1616
ADDP4
ARGP4
ADDRGP4 CG_Draw3DModelColor
CALLV
pop
line 305
;305:	} else if (cg_drawIcons.integer) {
ADDRGP4 $225
JUMPV
LABELV $224
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $241
line 306
;306:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 307
;307:		CG_DrawPic(x, y, w, h, ci->modelIcon, WIDESCREEN_STRETCH); //, mRect);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 308
;308:	}
LABELV $241
LABELV $225
line 311
;309:
;310:	// if they are deferred, draw a cross out
;311:	if (ci->deferred) {
ADDRLP4 0
INDIRP4
CNSTI4 384
ADDP4
INDIRI4
CNSTI4 0
EQI4 $244
line 312
;312:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 313
;313:		CG_DrawPic(x, y, w, h, cgs.media.deferShader, WIDESCREEN_STRETCH); //, mRect);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 cgs+146664+164
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 314
;314:	}
LABELV $244
line 315
;315:}
LABELV $222
endproc CG_DrawHead 56 36
export CG_DrawFlagModel
proc CG_DrawFlagModel 68 32
line 324
;316:
;317:/*
;318:================
;319:CG_DrawFlagModel
;320:
;321:Used for both the status bar and the scoreboard
;322:================
;323:*/
;324:void CG_DrawFlagModel(float x, float y, float w, float h, int team, qboolean force2D) {
line 331
;325:	qhandle_t		cm;
;326:	float			len;
;327:	vec3_t			origin, angles;
;328:	vec3_t			mins, maxs;
;329:	qhandle_t		handle;
;330:
;331:	if (!force2D && cg_draw3dIcons.integer) {
ADDRFP4 20
INDIRI4
CNSTI4 0
NEI4 $249
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $249
line 333
;332:
;333:		VectorClear(angles);
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0+4
CNSTF4 0
ASGNF4
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 335
;334:
;335:		cm = cgs.media.redFlagModel;
ADDRLP4 48
ADDRGP4 cgs+146664+36
INDIRI4
ASGNI4
line 338
;336:
;337:		// offset the origin y and z to center the flag
;338:		trap_R_ModelBounds(cm, mins, maxs);
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 36
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 340
;339:
;340:		origin[2] = -0.5 * (mins[2] + maxs[2]);
ADDRLP4 12+8
ADDRLP4 24+8
INDIRF4
ADDRLP4 36+8
INDIRF4
ADDF4
CNSTF4 3204448256
MULF4
ASGNF4
line 341
;341:		origin[1] = 0.5 * (mins[1] + maxs[1]);
ADDRLP4 12+4
ADDRLP4 24+4
INDIRF4
ADDRLP4 36+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 345
;342:
;343:		// calculate distance so the flag nearly fills the box
;344:		// assume heads are taller than wide
;345:		len = 0.5 * (maxs[2] - mins[2]);
ADDRLP4 52
ADDRLP4 36+8
INDIRF4
ADDRLP4 24+8
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ASGNF4
line 346
;346:		origin[0] = len / 0.268;	// len / tan( fov/2 )
ADDRLP4 12
ADDRLP4 52
INDIRF4
CNSTF4 1081003604
MULF4
ASGNF4
line 348
;347:
;348:		angles[YAW] = 60 * sin((cg.time % TMOD_2000) / 2000.0);;
ADDRGP4 cg+107604
INDIRI4
CNSTI4 5730265
MODI4
CVIF4 4
CNSTF4 973279855
MULF4
ARGF4
ADDRLP4 60
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 60
INDIRF4
CNSTF4 1114636288
MULF4
ASGNF4
line 350
;349:
;350:		if (team == TEAM_RED) {
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $266
line 351
;351:			handle = cgs.media.redFlagModel;
ADDRLP4 56
ADDRGP4 cgs+146664+36
INDIRI4
ASGNI4
line 352
;352:		} else if (team == TEAM_BLUE) {
ADDRGP4 $267
JUMPV
LABELV $266
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $270
line 353
;353:			handle = cgs.media.blueFlagModel;
ADDRLP4 56
ADDRGP4 cgs+146664+40
INDIRI4
ASGNI4
line 354
;354:		} else if (team == TEAM_FREE) {
ADDRGP4 $271
JUMPV
LABELV $270
ADDRFP4 16
INDIRI4
CNSTI4 0
NEI4 $248
line 355
;355:			handle = cgs.media.neutralFlagModel;
ADDRLP4 56
ADDRGP4 cgs+146664+44
INDIRI4
ASGNI4
line 356
;356:		} else {
line 357
;357:			return;
LABELV $275
LABELV $271
LABELV $267
line 359
;358:		}
;359:		CG_Draw3DModel(x, y, w, h, handle, 0, origin, angles);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 56
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 360
;360:	} else if (cg_drawIcons.integer) {
ADDRGP4 $250
JUMPV
LABELV $249
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $278
line 363
;361:		gitem_t *item;
;362:
;363:		if (team == TEAM_RED) {
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $281
line 364
;364:			item = BG_FindItemForPowerup(PW_REDFLAG);
CNSTI4 7
ARGI4
ADDRLP4 64
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 60
ADDRLP4 64
INDIRP4
ASGNP4
line 365
;365:		} else if (team == TEAM_BLUE) {
ADDRGP4 $282
JUMPV
LABELV $281
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $283
line 366
;366:			item = BG_FindItemForPowerup(PW_BLUEFLAG);
CNSTI4 8
ARGI4
ADDRLP4 64
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 60
ADDRLP4 64
INDIRP4
ASGNP4
line 367
;367:		} else if (team == TEAM_FREE) {
ADDRGP4 $284
JUMPV
LABELV $283
ADDRFP4 16
INDIRI4
CNSTI4 0
NEI4 $248
line 368
;368:			item = BG_FindItemForPowerup(PW_NEUTRALFLAG);
CNSTI4 9
ARGI4
ADDRLP4 64
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 60
ADDRLP4 64
INDIRP4
ASGNP4
line 369
;369:		} else {
line 370
;370:			return;
LABELV $286
LABELV $284
LABELV $282
line 372
;371:		}
;372:		if (item) {
ADDRLP4 60
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $287
line 373
;373:			CG_DrawPic(x, y, w, h, cg_items[ITEM_INDEX(item)].icon, WIDESCREEN_STRETCH); //, mRect);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 60
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 374
;374:		}
LABELV $287
line 375
;375:	}
LABELV $278
LABELV $250
line 376
;376:}
LABELV $248
endproc CG_DrawFlagModel 68 32
export CG_DrawTeamBackground
proc CG_DrawTeamBackground 16 24
line 385
;377:
;378:
;379:/*
;380:================
;381:CG_DrawTeamBackground
;382:
;383:================
;384:*/
;385:void CG_DrawTeamBackground(int x, int y, int w, int h, float alpha, int team) {
line 388
;386:	vec4_t		hcolor;
;387:
;388:	hcolor[3] = alpha;
ADDRLP4 0+12
ADDRFP4 16
INDIRF4
ASGNF4
line 389
;389:	if (team == TEAM_RED) {
ADDRFP4 20
INDIRI4
CNSTI4 1
NEI4 $292
line 390
;390:		hcolor[0] = 1.0f;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 391
;391:		hcolor[1] = 0.0f;
ADDRLP4 0+4
CNSTF4 0
ASGNF4
line 392
;392:		hcolor[2] = 0.0f;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 393
;393:	} else if (team == TEAM_BLUE) {
ADDRGP4 $293
JUMPV
LABELV $292
ADDRFP4 20
INDIRI4
CNSTI4 2
NEI4 $290
line 394
;394:		hcolor[0] = 0.0f;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 395
;395:		hcolor[1] = 0.1f;
ADDRLP4 0+4
CNSTF4 1036831949
ASGNF4
line 396
;396:		hcolor[2] = 1.0f;
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 397
;397:	} else {
line 398
;398:		return;
LABELV $297
LABELV $293
line 400
;399:	}
;400:	trap_R_SetColor(hcolor);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 401
;401:	CG_DrawPic(x, y, w, h, cgs.media.teamStatusBar, WIDESCREEN_STRETCH); //, mRect);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+146664+160
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 402
;402:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 403
;403:}
LABELV $290
endproc CG_DrawTeamBackground 16 24
proc CG_DrawAttacker 64 32
line 420
;404:
;405:
;406:/*
;407:===========================================================================================
;408:
;409:  UPPER RIGHT CORNER
;410:
;411:===========================================================================================
;412:*/
;413:
;414:/*
;415:================
;416:CG_DrawAttacker
;417:
;418:================
;419:*/
;420:static float CG_DrawAttacker(float y) {
line 429
;421:	int			t;
;422:	float		size;
;423:	vec3_t		angles;
;424:	const char *info;
;425:	const char *name;
;426:	int			clientNum;
;427:	vec4_t		color;
;428:
;429:	if (cg.predictedPlayerState.stats[STAT_HEALTH] <= 0) {
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
GTI4 $303
line 430
;430:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $302
JUMPV
LABELV $303
line 433
;431:	}
;432:
;433:	if (!cg.attackerTime) {
ADDRGP4 cg+125524
INDIRI4
CNSTI4 0
NEI4 $307
line 434
;434:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $302
JUMPV
LABELV $307
line 437
;435:	}
;436:
;437:	clientNum = cg.predictedPlayerState.persistant[PERS_ATTACKER];
ADDRLP4 0
ADDRGP4 cg+107636+248+24
INDIRI4
ASGNI4
line 438
;438:	if (clientNum < 0 || clientNum >= MAX_CLIENTS || clientNum == cg.snap->ps.clientNum) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $317
ADDRLP4 0
INDIRI4
CNSTI4 64
GEI4 $317
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $313
LABELV $317
line 439
;439:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $302
JUMPV
LABELV $313
line 442
;440:	}
;441:
;442:	t = cg.time - cg.attackerTime;
ADDRLP4 36
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125524
INDIRI4
SUBI4
ASGNI4
line 443
;443:	if (t > ATTACKER_HEAD_TIME) {
ADDRLP4 36
INDIRI4
CNSTI4 10000
LEI4 $320
line 444
;444:		cg.attackerTime = 0;
ADDRGP4 cg+125524
CNSTI4 0
ASGNI4
line 445
;445:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $302
JUMPV
LABELV $320
line 448
;446:	}
;447:
;448:	size = ICON_SIZE * 1.25;
ADDRLP4 4
CNSTF4 1114636288
ASGNF4
line 450
;449:
;450:	angles[PITCH] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 451
;451:	angles[YAW] = 180;
ADDRLP4 24+4
CNSTF4 1127481344
ASGNF4
line 452
;452:	angles[ROLL] = 0;
ADDRLP4 24+8
CNSTF4 0
ASGNF4
line 453
;453:	CG_DrawHead(cgs.screenXmax + 1 - size, y, size, size, clientNum, angles);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1065353216
ADDF4
ADDRLP4 4
INDIRF4
SUBF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 455
;454:
;455:	info = CG_ConfigString(CS_PLAYERS + clientNum);
ADDRLP4 0
INDIRI4
CNSTI4 529
ADDI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 56
INDIRP4
ASGNP4
line 456
;456:	name = Info_ValueForKey(info, "n");
ADDRLP4 40
INDIRP4
ARGP4
ADDRGP4 $326
ARGP4
ADDRLP4 60
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 60
INDIRP4
ASGNP4
line 457
;457:	y += size;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRLP4 4
INDIRF4
ADDF4
ASGNF4
line 459
;458:
;459:	VectorSet(color, 1, 1, 1);
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
ADDRLP4 8+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 8+8
CNSTF4 1065353216
ASGNF4
line 460
;460:	color[3] = 0.5f;
ADDRLP4 8+12
CNSTF4 1056964608
ASGNF4
line 462
;461:
;462:	CG_DrawString(cgs.screenXmax - 4, y, name, color, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_PROPORTIONAL | DS_RIGHT);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1082130432
SUBF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 20
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 464
;463:
;464:	return y + BIGCHAR_HEIGHT + 2;
ADDRFP4 0
INDIRF4
CNSTF4 1098907648
ADDF4
CNSTF4 1073741824
ADDF4
RETF4
LABELV $302
endproc CG_DrawAttacker 64 32
proc CG_DrawSpeedMeter 8 32
line 473
;465:}
;466:
;467:
;468:/*
;469:================
;470:CG_DrawSpeedMeter
;471:================
;472:*/
;473:static float CG_DrawSpeedMeter(float y) {
line 477
;474:	const char *s;
;475:
;476:	/* speed meter can get in the way of the scoreboard */
;477:	if (cg.scoreBoardShowing) {
ADDRGP4 cg+115360
INDIRI4
CNSTI4 0
EQI4 $332
line 478
;478:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $331
JUMPV
LABELV $332
line 481
;479:	}
;480:
;481:	s = va("%1.0fups", cg.xyspeed);
ADDRGP4 $335
ARGP4
ADDRGP4 cg+125880
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 483
;482:
;483:	if (cg_drawSpeed.integer == 1) {
ADDRGP4 cg_drawSpeed+12
INDIRI4
CNSTI4 1
NEI4 $337
line 485
;484:		/* top left-hand corner of screen */
;485:		CG_DrawString(cgs.screenXmax - 4, y + 2, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_RIGHT | DS_PROPORTIONAL);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1082130432
SUBF4
ARGF4
ADDRFP4 0
INDIRF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 21
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 486
;486:		return y + BIGCHAR_HEIGHT + 4;
ADDRFP4 0
INDIRF4
CNSTF4 1098907648
ADDF4
CNSTF4 1082130432
ADDF4
RETF4
ADDRGP4 $331
JUMPV
LABELV $337
line 487
;487:	} else {
line 489
;488:		/* center of screen */
;489:		CG_DrawString(HALFSCR_WIDTH, 300, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
CNSTF4 1133903872
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 490
;490:		return y;
ADDRFP4 0
INDIRF4
RETF4
LABELV $331
endproc CG_DrawSpeedMeter 8 32
proc CG_DrawSnapshot 8 32
line 500
;491:	}
;492:}
;493:
;494:
;495:/*
;496:==================
;497:CG_DrawSnapshot
;498:==================
;499:*/
;500:static float CG_DrawSnapshot(float y) {
line 503
;501:	const char *s;
;502:
;503:	s = va("time:%i snap:%i cmd:%i", cg.snap->serverTime,
ADDRGP4 $342
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 cg+28
INDIRI4
ARGI4
ADDRGP4 cgs+31468
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 506
;504:		cg.latestSnapshotNum, cgs.serverCommandSequence);
;505:
;506:	CG_DrawString(cgs.screenXmax - 4, y + 2, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_RIGHT);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1082130432
SUBF4
ARGF4
ADDRFP4 0
INDIRF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 17
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 508
;507:
;508:	return y + BIGCHAR_HEIGHT + 4;
ADDRFP4 0
INDIRF4
CNSTF4 1098907648
ADDF4
CNSTF4 1082130432
ADDF4
RETF4
LABELV $341
endproc CG_DrawSnapshot 8 32
bss
align 4
LABELV $348
skip 16
align 4
LABELV $349
skip 4
align 4
LABELV $350
skip 4
code
proc CG_DrawFPS 36 32
line 518
;509:}
;510:
;511:
;512:/*
;513:==================
;514:CG_DrawFPS
;515:==================
;516:*/
;517:#define	FPS_FRAMES	4
;518:static float CG_DrawFPS(float y) {
line 529
;519:	const char *s;
;520:	static int	previousTimes[FPS_FRAMES];
;521:	static int	index;
;522:	int		i, total;
;523:	int		fps;
;524:	static	int	previous;
;525:	int		t, frameTime;
;526:
;527:	// don't use serverTime, because that will be drifting to
;528:	// correct for internet lag changes, timescales, timedemos, etc
;529:	t = trap_Milliseconds();
ADDRLP4 24
ADDRGP4 trap_Milliseconds
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
line 530
;530:	frameTime = t - previous;
ADDRLP4 12
ADDRLP4 8
INDIRI4
ADDRGP4 $350
INDIRI4
SUBI4
ASGNI4
line 531
;531:	previous = t;
ADDRGP4 $350
ADDRLP4 8
INDIRI4
ASGNI4
line 533
;532:
;533:	previousTimes[index % FPS_FRAMES] = frameTime;
ADDRGP4 $349
INDIRI4
CNSTI4 4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 $348
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 534
;534:	index++;
ADDRLP4 28
ADDRGP4 $349
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 535
;535:	if (index > FPS_FRAMES) {
ADDRGP4 $349
INDIRI4
CNSTI4 4
LEI4 $351
line 537
;536:		// average multiple frames together to smooth changes out a bit
;537:		total = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 538
;538:		for (i = 0; i < FPS_FRAMES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $353
line 539
;539:			total += previousTimes[i];
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $348
ADDP4
INDIRI4
ADDI4
ASGNI4
line 540
;540:		}
LABELV $354
line 538
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $353
line 541
;541:		if (!total) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $357
line 542
;542:			total = 1;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 543
;543:		}
LABELV $357
line 544
;544:		fps = 1000 * FPS_FRAMES / total;
ADDRLP4 20
CNSTI4 4000
ADDRLP4 4
INDIRI4
DIVI4
ASGNI4
line 546
;545:
;546:		s = va("%ifps", fps);
ADDRGP4 $359
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 32
INDIRP4
ASGNP4
line 547
;547:		CG_DrawString(cgs.screenXmax - 4, y + 2, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_RIGHT | DS_PROPORTIONAL);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1082130432
SUBF4
ARGF4
ADDRFP4 0
INDIRF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 21
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 548
;548:	}
LABELV $351
line 550
;549:
;550:	return y + BIGCHAR_HEIGHT + 4;
ADDRFP4 0
INDIRF4
CNSTF4 1098907648
ADDF4
CNSTF4 1082130432
ADDF4
RETF4
LABELV $347
endproc CG_DrawFPS 36 32
proc CG_DrawTimer 20 32
line 559
;551:}
;552:
;553:
;554:/*
;555:=================
;556:CG_DrawTimer
;557:=================
;558:*/
;559:static float CG_DrawTimer(float y) {
line 564
;560:	const char *s;
;561:	int			mins, seconds;
;562:	int			msec;
;563:
;564:	msec = cg.time - cgs.levelStartTime;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+32740
INDIRI4
SUBI4
ASGNI4
line 566
;565:
;566:	seconds = msec / 1000;
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 567
;567:	mins = seconds / 60;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 568
;568:	seconds -= mins * 60;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 60
MULI4
SUBI4
ASGNI4
line 570
;569:
;570:	s = va("%i:%02i", mins, seconds);
ADDRGP4 $364
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 16
INDIRP4
ASGNP4
line 571
;571:	CG_DrawString(cgs.screenXmax - 4, y + 2, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_RIGHT | DS_PROPORTIONAL);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1082130432
SUBF4
ARGF4
ADDRFP4 0
INDIRF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 21
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 573
;572:
;573:	return y + BIGCHAR_HEIGHT + 4;
ADDRFP4 0
INDIRF4
CNSTF4 1098907648
ADDF4
CNSTF4 1082130432
ADDF4
RETF4
LABELV $361
endproc CG_DrawTimer 20 32
proc CG_DrawTeamOverlay 120 32
line 582
;574:}
;575:
;576:
;577:/*
;578:=================
;579:CG_DrawTeamOverlay
;580:=================
;581:*/
;582:static float CG_DrawTeamOverlay(float y, qboolean right, qboolean upper) {
line 594
;583:	int x, w, h, xx;
;584:	int i, j, len;
;585:	const char *p;
;586:	vec4_t		hcolor;
;587:	int pwidth, lwidth;
;588:	int plyrs;
;589:	char st[16];
;590:	clientInfo_t *ci;
;591:	gitem_t *item;
;592:	int ret_y, count;
;593:
;594:	if (!cg_drawTeamOverlay.integer) {
ADDRGP4 cg_drawTeamOverlay+12
INDIRI4
CNSTI4 0
NEI4 $367
line 595
;595:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $366
JUMPV
LABELV $367
line 598
;596:	}
;597:
;598:	if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_RED && cg.snap->ps.persistant[PERS_TEAM] != TEAM_BLUE) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 1
EQI4 $370
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
EQI4 $370
line 599
;599:		return y; // Not on any team
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $366
JUMPV
LABELV $370
line 602
;600:	}
;601:
;602:	plyrs = 0;
ADDRLP4 76
CNSTI4 0
ASGNI4
line 605
;603:
;604:	// max player name width
;605:	pwidth = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
line 606
;606:	count = (numSortedTeamPlayers > 8) ? 8 : numSortedTeamPlayers;
ADDRGP4 numSortedTeamPlayers
INDIRI4
CNSTI4 8
LEI4 $375
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRGP4 $376
JUMPV
LABELV $375
ADDRLP4 92
ADDRGP4 numSortedTeamPlayers
INDIRI4
ASGNI4
LABELV $376
ADDRLP4 48
ADDRLP4 92
INDIRI4
ASGNI4
line 607
;607:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $380
JUMPV
LABELV $377
line 608
;608:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 609
;609:		if (ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $382
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $382
line 610
;610:			plyrs++;
ADDRLP4 76
ADDRLP4 76
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 611
;611:			len = CG_DrawStrlen(ci->name);
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 100
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 100
INDIRI4
ASGNI4
line 612
;612:			if (len > pwidth)
ADDRLP4 40
INDIRI4
ADDRLP4 56
INDIRI4
LEI4 $385
line 613
;613:				pwidth = len;
ADDRLP4 56
ADDRLP4 40
INDIRI4
ASGNI4
LABELV $385
line 614
;614:		}
LABELV $382
line 615
;615:	}
LABELV $378
line 607
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $380
ADDRLP4 8
INDIRI4
ADDRLP4 48
INDIRI4
LTI4 $377
line 617
;616:
;617:	if (!plyrs)
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $387
line 618
;618:		return y;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $366
JUMPV
LABELV $387
line 620
;619:
;620:	if (pwidth > TEAM_OVERLAY_MAXNAME_WIDTH)
ADDRLP4 56
INDIRI4
CNSTI4 12
LEI4 $389
line 621
;621:		pwidth = TEAM_OVERLAY_MAXNAME_WIDTH;
ADDRLP4 56
CNSTI4 12
ASGNI4
LABELV $389
line 624
;622:
;623:	// max location name width
;624:	lwidth = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 625
;625:	for (i = 1; i < MAX_LOCATIONS; i++) {
ADDRLP4 8
CNSTI4 1
ASGNI4
LABELV $391
line 626
;626:		p = CG_ConfigString(CS_LOCATIONS + i);
ADDRLP4 8
INDIRI4
CNSTI4 593
ADDI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 96
INDIRP4
ASGNP4
line 627
;627:		if (p && *p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $395
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $395
line 628
;628:			len = CG_DrawStrlen(p);
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 104
INDIRI4
ASGNI4
line 629
;629:			if (len > lwidth)
ADDRLP4 40
INDIRI4
ADDRLP4 44
INDIRI4
LEI4 $397
line 630
;630:				lwidth = len;
ADDRLP4 44
ADDRLP4 40
INDIRI4
ASGNI4
LABELV $397
line 631
;631:		}
LABELV $395
line 632
;632:	}
LABELV $392
line 625
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $391
line 634
;633:
;634:	if (lwidth > TEAM_OVERLAY_MAXLOCATION_WIDTH)
ADDRLP4 44
INDIRI4
CNSTI4 16
LEI4 $399
line 635
;635:		lwidth = TEAM_OVERLAY_MAXLOCATION_WIDTH;
ADDRLP4 44
CNSTI4 16
ASGNI4
LABELV $399
line 637
;636:
;637:	w = (pwidth + lwidth + 4 + 7) * TINYCHAR_WIDTH;
ADDRLP4 80
ADDRLP4 56
INDIRI4
ADDRLP4 44
INDIRI4
ADDI4
CNSTI4 3
LSHI4
CNSTI4 32
ADDI4
CNSTI4 56
ADDI4
ASGNI4
line 639
;638:
;639:	if (right)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $401
line 640
;640:		x = cgs.screenXmax + 1 - w;
ADDRLP4 52
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1065353216
ADDF4
ADDRLP4 80
INDIRI4
CVIF4 4
SUBF4
CVFI4 4
ASGNI4
ADDRGP4 $402
JUMPV
LABELV $401
line 642
;641:	else
;642:		x = cgs.screenXmin;
ADDRLP4 52
ADDRGP4 cgs+31452
INDIRF4
CVFI4 4
ASGNI4
LABELV $402
line 644
;643:
;644:	h = plyrs * TINYCHAR_HEIGHT;
ADDRLP4 84
ADDRLP4 76
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 646
;645:
;646:	if (upper) {
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $405
line 647
;647:		ret_y = y + h;
ADDRLP4 88
ADDRFP4 0
INDIRF4
ADDRLP4 84
INDIRI4
CVIF4 4
ADDF4
CVFI4 4
ASGNI4
line 648
;648:	} else {
ADDRGP4 $406
JUMPV
LABELV $405
line 649
;649:		y -= h;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRLP4 84
INDIRI4
CVIF4 4
SUBF4
ASGNF4
line 650
;650:		ret_y = y;
ADDRLP4 88
ADDRFP4 0
INDIRF4
CVFI4 4
ASGNI4
line 651
;651:	}
LABELV $406
line 653
;652:
;653:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_RED) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 1
NEI4 $407
line 654
;654:		hcolor[0] = 1.0f;
ADDRLP4 24
CNSTF4 1065353216
ASGNF4
line 655
;655:		hcolor[1] = 0.0f;
ADDRLP4 24+4
CNSTF4 0
ASGNF4
line 656
;656:		hcolor[2] = 0.0f;
ADDRLP4 24+8
CNSTF4 0
ASGNF4
line 657
;657:		hcolor[3] = 0.33f;
ADDRLP4 24+12
CNSTF4 1051260355
ASGNF4
line 658
;658:	} else { // if ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE )
ADDRGP4 $408
JUMPV
LABELV $407
line 659
;659:		hcolor[0] = 0.0f;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 660
;660:		hcolor[1] = 0.0f;
ADDRLP4 24+4
CNSTF4 0
ASGNF4
line 661
;661:		hcolor[2] = 1.0f;
ADDRLP4 24+8
CNSTF4 1065353216
ASGNF4
line 662
;662:		hcolor[3] = 0.33f;
ADDRLP4 24+12
CNSTF4 1051260355
ASGNF4
line 663
;663:	}
LABELV $408
line 664
;664:	trap_R_SetColor(hcolor);
ADDRLP4 24
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 665
;665:	CG_DrawPic(x, y, w, h, cgs.media.teamStatusBar, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 52
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 80
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 84
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+146664+160
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 666
;666:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 668
;667:
;668:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $421
JUMPV
LABELV $418
line 669
;669:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 670
;670:		if (ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $423
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $423
line 672
;671:
;672:			hcolor[0] = hcolor[1] = hcolor[2] = hcolor[3] = 1.0;
ADDRLP4 100
CNSTF4 1065353216
ASGNF4
ADDRLP4 24+12
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 24
ADDRLP4 100
INDIRF4
ASGNF4
line 674
;673:
;674:			xx = x + TINYCHAR_WIDTH;
ADDRLP4 12
ADDRLP4 52
INDIRI4
CNSTI4 8
ADDI4
ASGNI4
line 676
;675:
;676:			CG_DrawString(xx, y, ci->name, hcolor, TINYCHAR_WIDTH, TINYCHAR_HEIGHT, TEAM_OVERLAY_MAXNAME_WIDTH, DS_PROPORTIONAL);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 24
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1090519040
ARGF4
CNSTI4 12
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 678
;677:
;678:			if (lwidth) {
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $429
line 679
;679:				p = CG_ConfigString(CS_LOCATIONS + ci->location);
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 593
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 104
INDIRP4
ASGNP4
line 680
;680:				if (!p || !*p)
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $433
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $431
LABELV $433
line 681
;681:					p = "unknown";
ADDRLP4 20
ADDRGP4 $434
ASGNP4
LABELV $431
line 682
;682:				len = CG_DrawStrlen(p);
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 112
INDIRI4
ASGNI4
line 683
;683:				if (len > lwidth)
ADDRLP4 40
INDIRI4
ADDRLP4 44
INDIRI4
LEI4 $435
line 684
;684:					len = lwidth;
ADDRLP4 40
ADDRLP4 44
INDIRI4
ASGNI4
LABELV $435
line 688
;685:
;686:				//				xx = x + TINYCHAR_WIDTH * 2 + TINYCHAR_WIDTH * pwidth + 
;687:				//					((lwidth/2 - len/2) * TINYCHAR_WIDTH);
;688:				xx = x + TINYCHAR_WIDTH * 2 + TINYCHAR_WIDTH * pwidth;
ADDRLP4 12
ADDRLP4 52
INDIRI4
CNSTI4 16
ADDI4
ADDRLP4 56
INDIRI4
CNSTI4 3
LSHI4
ADDI4
ASGNI4
line 689
;689:				CG_DrawString(xx, y, p, hcolor, TINYCHAR_WIDTH, TINYCHAR_HEIGHT, TEAM_OVERLAY_MAXLOCATION_WIDTH, DS_PROPORTIONAL);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1090519040
ARGF4
CNSTI4 16
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 690
;690:			}
LABELV $429
line 692
;691:
;692:			CG_GetColorForHealth(ci->health, ci->armor, hcolor);
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 694
;693:
;694:			Com_sprintf(st, sizeof(st), "%3i %3i", ci->health, ci->armor);
ADDRLP4 60
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $437
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 696
;695:
;696:			xx = x + TINYCHAR_WIDTH * 3 +
ADDRLP4 12
ADDRLP4 52
INDIRI4
CNSTI4 24
ADDI4
ADDRLP4 56
INDIRI4
CNSTI4 3
LSHI4
ADDI4
ADDRLP4 44
INDIRI4
CNSTI4 3
LSHI4
ADDI4
ASGNI4
line 699
;697:				TINYCHAR_WIDTH * pwidth + TINYCHAR_WIDTH * lwidth;
;698:
;699:			CG_DrawString(xx, y, st, hcolor, TINYCHAR_WIDTH, TINYCHAR_HEIGHT, 0, 0);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 60
ARGP4
ADDRLP4 24
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1090519040
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 702
;700:
;701:			// draw weapon icon
;702:			xx += TINYCHAR_WIDTH * 3;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 24
ADDI4
ASGNI4
line 704
;703:			
;704:			if (cg_weapons[ci->curWeapon].weaponIcon) {
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
CNSTI4 0
EQI4 $438
line 705
;705:				CG_DrawPic(xx, y, TINYCHAR_WIDTH, TINYCHAR_HEIGHT,
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
CNSTF4 1090519040
ARGF4
CNSTF4 1090519040
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 707
;706:					cg_weapons[ci->curWeapon].weaponIcon, WIDESCREEN_STRETCH); //, mRect);
;707:			} else {
ADDRGP4 $439
JUMPV
LABELV $438
line 708
;708:				CG_DrawPic(xx, y, TINYCHAR_WIDTH, TINYCHAR_HEIGHT,
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
CNSTF4 1090519040
ARGF4
CNSTF4 1090519040
ARGF4
ADDRGP4 cgs+146664+164
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 710
;709:					cgs.media.deferShader, WIDESCREEN_STRETCH); //, mRect);
;710:			}
LABELV $439
line 713
;711:
;712:			// Draw powerup icons
;713:			if (right) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $444
line 714
;714:				xx = x;
ADDRLP4 12
ADDRLP4 52
INDIRI4
ASGNI4
line 715
;715:			} else {
ADDRGP4 $445
JUMPV
LABELV $444
line 716
;716:				xx = x + w - TINYCHAR_WIDTH;
ADDRLP4 12
ADDRLP4 52
INDIRI4
ADDRLP4 80
INDIRI4
ADDI4
CNSTI4 8
SUBI4
ASGNI4
line 717
;717:			}
LABELV $445
line 718
;718:			for (j = 0; j <= PW_NUM_POWERUPS; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $446
line 719
;719:				if (ci->powerups & (1 << j)) {
ADDRLP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $450
line 721
;720:
;721:					item = BG_FindItemForPowerup(j);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 112
INDIRP4
ASGNP4
line 723
;722:
;723:					if (item) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $452
line 724
;724:						CG_DrawPic(xx, y, TINYCHAR_WIDTH, TINYCHAR_HEIGHT,
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
CNSTF4 1090519040
ARGF4
CNSTF4 1090519040
ARGF4
ADDRLP4 116
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 726
;725:							trap_R_RegisterShader(item->icon), WIDESCREEN_STRETCH); //, mRect);
;726:						if (right) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $454
line 727
;727:							xx -= TINYCHAR_WIDTH;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 8
SUBI4
ASGNI4
line 728
;728:						} else {
ADDRGP4 $455
JUMPV
LABELV $454
line 729
;729:							xx += TINYCHAR_WIDTH;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 8
ADDI4
ASGNI4
line 730
;730:						}
LABELV $455
line 731
;731:					}
LABELV $452
line 732
;732:				}
LABELV $450
line 733
;733:			}
LABELV $447
line 718
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $446
line 735
;734:
;735:			y += TINYCHAR_HEIGHT;
ADDRFP4 0
ADDRFP4 0
INDIRF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 736
;736:		}
LABELV $423
line 737
;737:	}
LABELV $419
line 668
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $421
ADDRLP4 8
INDIRI4
ADDRLP4 48
INDIRI4
LTI4 $418
line 739
;738:
;739:	return ret_y;
ADDRLP4 88
INDIRI4
CVIF4 4
RETF4
LABELV $366
endproc CG_DrawTeamOverlay 120 32
proc CG_DrawUpperRight 12 12
line 749
;740:}
;741:
;742:
;743:/*
;744:=====================
;745:CG_DrawUpperRight
;746:
;747:=====================
;748:*/
;749:static void CG_DrawUpperRight(stereoFrame_t stereoFrame) {
line 752
;750:	float	y;
;751:
;752:	y = cgs.screenYmin;
ADDRLP4 0
ADDRGP4 cgs+31460
INDIRF4
ASGNF4
line 754
;753:
;754:	if (cgs.gametype >= GT_TEAM && cg_drawTeamOverlay.integer == 1) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $458
ADDRGP4 cg_drawTeamOverlay+12
INDIRI4
CNSTI4 1
NEI4 $458
line 755
;755:		y = CG_DrawTeamOverlay(y, qtrue, qtrue);
ADDRLP4 0
INDIRF4
ARGF4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_DrawTeamOverlay
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
ASGNF4
line 756
;756:	}
LABELV $458
line 757
;757:	if (cg_drawSnapshot.integer) {
ADDRGP4 cg_drawSnapshot+12
INDIRI4
CNSTI4 0
EQI4 $462
line 758
;758:		y = CG_DrawSnapshot(y);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 CG_DrawSnapshot
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
ASGNF4
line 759
;759:	}
LABELV $462
line 760
;760:	if (cg_drawFPS.integer && (stereoFrame == STEREO_CENTER || stereoFrame == STEREO_RIGHT)) {
ADDRGP4 cg_drawFPS+12
INDIRI4
CNSTI4 0
EQI4 $465
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $468
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $465
LABELV $468
line 761
;761:		y = CG_DrawFPS(y);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 CG_DrawFPS
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRF4
ASGNF4
line 762
;762:	}
LABELV $465
line 763
;763:	if (cg_drawSpeed.integer) {
ADDRGP4 cg_drawSpeed+12
INDIRI4
CNSTI4 0
EQI4 $469
line 764
;764:		y = CG_DrawSpeedMeter(y);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 CG_DrawSpeedMeter
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRF4
ASGNF4
line 765
;765:	}
LABELV $469
line 766
;766:	if (cg_drawTimer.integer) {
ADDRGP4 cg_drawTimer+12
INDIRI4
CNSTI4 0
EQI4 $472
line 767
;767:		y = CG_DrawTimer(y);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 CG_DrawTimer
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRF4
ASGNF4
line 768
;768:	}
LABELV $472
line 769
;769:	if (cg_drawAttacker.integer) {
ADDRGP4 cg_drawAttacker+12
INDIRI4
CNSTI4 0
EQI4 $475
line 770
;770:		y = CG_DrawAttacker(y);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 CG_DrawAttacker
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRF4
ASGNF4
line 771
;771:	}
LABELV $475
line 772
;772:}
LABELV $456
endproc CG_DrawUpperRight 12 12
proc CG_DrawReward 68 32
line 789
;773:
;774:
;775:/*
;776:===========================================================================================
;777:
;778:  LOWER RIGHT CORNER
;779:
;780:===========================================================================================
;781:*/
;782:
;783:
;784:/*
;785:===================
;786:CG_DrawReward
;787:===================
;788:*/
;789:static void CG_DrawReward(void) {
line 795
;790:	float *color;
;791:	int		i, count;
;792:	float	x, y;
;793:	char	buf[32];
;794:
;795:	if (!cg_drawRewards.integer) {
ADDRGP4 cg_drawRewards+12
INDIRI4
CNSTI4 0
NEI4 $479
line 796
;796:		return;
ADDRGP4 $478
JUMPV
LABELV $479
line 799
;797:	}
;798:
;799:	color = CG_FadeColor(cg.rewardTime, REWARD_TIME);
ADDRGP4 cg+125532
INDIRI4
ARGI4
CNSTI4 3000
ARGI4
ADDRLP4 52
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 52
INDIRP4
ASGNP4
line 800
;800:	if (!color) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $483
line 801
;801:		if (cg.rewardStack > 0) {
ADDRGP4 cg+125528
INDIRI4
CNSTI4 0
LEI4 $478
line 802
;802:			for (i = 0; i < cg.rewardStack; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $491
JUMPV
LABELV $488
line 803
;803:				cg.rewardSound[i] = cg.rewardSound[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+125616
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+125616+4
ADDP4
INDIRI4
ASGNI4
line 804
;804:				cg.rewardShader[i] = cg.rewardShader[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+125576
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+125576+4
ADDP4
INDIRI4
ASGNI4
line 805
;805:				cg.rewardCount[i] = cg.rewardCount[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+125536
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+125536+4
ADDP4
INDIRI4
ASGNI4
line 806
;806:			}
LABELV $489
line 802
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $491
ADDRLP4 0
INDIRI4
ADDRGP4 cg+125528
INDIRI4
LTI4 $488
line 807
;807:			cg.rewardTime = cg.time;
ADDRGP4 cg+125532
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 808
;808:			cg.rewardStack--;
ADDRLP4 56
ADDRGP4 cg+125528
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 809
;809:			color = CG_FadeColor(cg.rewardTime, REWARD_TIME);
ADDRGP4 cg+125532
INDIRI4
ARGI4
CNSTI4 3000
ARGI4
ADDRLP4 60
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 60
INDIRP4
ASGNP4
line 810
;810:			trap_S_StartLocalSound(cg.rewardSound[0], CHAN_ANNOUNCER);
ADDRGP4 cg+125616
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 811
;811:		} else {
line 812
;812:			return;
LABELV $486
line 814
;813:		}
;814:	}
LABELV $483
line 816
;815:
;816:	trap_R_SetColor(color);
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 833
;817:
;818:	/*
;819:	count = cg.rewardCount[0]/10;				// number of big rewards to draw
;820:
;821:	if (count) {
;822:		y = 4;
;823:		x = HALFSCR_WIDTH - count * ICON_SIZE;
;824:		for ( i = 0 ; i < count ; i++ ) {
;825:			CG_DrawPic( x, y, (ICON_SIZE*2)-4, (ICON_SIZE*2)-4, cg.rewardShader[0], WIDESCREEN_STRETCH); //, mRect);
;826:			x += (ICON_SIZE*2);
;827:		}
;828:	}
;829:
;830:	count = cg.rewardCount[0] - count*10;		// number of small rewards to draw
;831:	*/
;832:
;833:	if (cg.rewardCount[0] >= 10) {
ADDRGP4 cg+125536
INDIRI4
CNSTI4 10
LTI4 $507
line 834
;834:		y = 56; // FIXME: cgs.screenYmin + 56?
ADDRLP4 8
CNSTF4 1113587712
ASGNF4
line 835
;835:		x = HALFSCR_WIDTH - ICON_SIZE / 2;
ADDRLP4 4
CNSTF4 1133772800
ASGNF4
line 836
;836:		CG_DrawPic(x, y, ICON_SIZE - 4, ICON_SIZE - 4, cg.rewardShader[0], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
CNSTF4 1110441984
ARGF4
CNSTF4 1110441984
ARGF4
ADDRGP4 cg+125576
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 837
;837:		Com_sprintf(buf, sizeof(buf), "%d", cg.rewardCount[0]);
ADDRLP4 20
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $511
ARGP4
ADDRGP4 cg+125536
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 838
;838:		CG_DrawString(HALFSCR_WIDTH, y + ICON_SIZE, buf, color, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER);
CNSTF4 1134559232
ARGF4
ADDRLP4 8
INDIRF4
CNSTF4 1111490560
ADDF4
ARGF4
ADDRLP4 20
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 9
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 839
;839:	} else {
ADDRGP4 $508
JUMPV
LABELV $507
line 841
;840:
;841:		count = cg.rewardCount[0];
ADDRLP4 12
ADDRGP4 cg+125536
INDIRI4
ASGNI4
line 843
;842:
;843:		y = 56; // FIXME: cgs.screenYmin + 56?
ADDRLP4 8
CNSTF4 1113587712
ASGNF4
line 844
;844:		x = HALFSCR_WIDTH - count * ICON_SIZE / 2;
ADDRLP4 4
CNSTI4 320
ADDRLP4 12
INDIRI4
CNSTI4 48
MULI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ASGNF4
line 845
;845:		for (i = 0; i < count; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $517
JUMPV
LABELV $514
line 846
;846:			CG_DrawPic(x, y, ICON_SIZE - 4, ICON_SIZE - 4, cg.rewardShader[0], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
CNSTF4 1110441984
ARGF4
CNSTF4 1110441984
ARGF4
ADDRGP4 cg+125576
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 847
;847:			x += ICON_SIZE;
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1111490560
ADDF4
ASGNF4
line 848
;848:		}
LABELV $515
line 845
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $517
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $514
line 849
;849:	}
LABELV $508
line 850
;850:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 851
;851:}
LABELV $478
endproc CG_DrawReward 68 32
export CG_AddLagometerFrameInfo
proc CG_AddLagometerFrameInfo 8 0
line 882
;852:
;853:
;854:/*
;855:===============================================================================
;856:
;857:LAGOMETER
;858:
;859:===============================================================================
;860:*/
;861:
;862:#define	LAG_SAMPLES		128
;863:
;864:
;865:typedef struct {
;866:	int		frameSamples[LAG_SAMPLES];
;867:	int		frameCount;
;868:	int		snapshotFlags[LAG_SAMPLES];
;869:	int		snapshotSamples[LAG_SAMPLES];
;870:	int		snapshotCount;
;871:} lagometer_t;
;872:
;873:lagometer_t		lagometer;
;874:
;875:/*
;876:==============
;877:CG_AddLagometerFrameInfo
;878:
;879:Adds the current interpolate / extrapolate bar for this frame
;880:==============
;881:*/
;882:void CG_AddLagometerFrameInfo(void) {
line 885
;883:	int			offset;
;884:
;885:	offset = cg.time - cg.latestSnapshotTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+32
INDIRI4
SUBI4
ASGNI4
line 886
;886:	lagometer.frameSamples[lagometer.frameCount & (LAG_SAMPLES - 1)] = offset;
ADDRGP4 lagometer+512
INDIRI4
CNSTI4 127
BANDI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 887
;887:	lagometer.frameCount++;
ADDRLP4 4
ADDRGP4 lagometer+512
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 888
;888:}
LABELV $520
endproc CG_AddLagometerFrameInfo 8 0
export CG_AddLagometerSnapshotInfo
proc CG_AddLagometerSnapshotInfo 4 0
line 901
;889:
;890:
;891:/*
;892:==============
;893:CG_AddLagometerSnapshotInfo
;894:
;895:Each time a snapshot is received, log its ping time and
;896:the number of snapshots that were dropped before it.
;897:
;898:Pass NULL for a dropped packet.
;899:==============
;900:*/
;901:void CG_AddLagometerSnapshotInfo(snapshot_t *snap) {
line 903
;902:	// dropped packet
;903:	if (!snap) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $526
line 904
;904:		lagometer.snapshotSamples[lagometer.snapshotCount & (LAG_SAMPLES - 1)] = -1;
ADDRGP4 lagometer+1540
INDIRI4
CNSTI4 127
BANDI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+1028
ADDP4
CNSTI4 -1
ASGNI4
line 905
;905:		lagometer.snapshotCount++;
ADDRLP4 0
ADDRGP4 lagometer+1540
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 906
;906:		return;
ADDRGP4 $525
JUMPV
LABELV $526
line 910
;907:	}
;908:
;909:	// add this snapshot's info
;910:	lagometer.snapshotSamples[lagometer.snapshotCount & (LAG_SAMPLES - 1)] = snap->ping;
ADDRGP4 lagometer+1540
INDIRI4
CNSTI4 127
BANDI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+1028
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 911
;911:	lagometer.snapshotFlags[lagometer.snapshotCount & (LAG_SAMPLES - 1)] = snap->snapFlags;
ADDRGP4 lagometer+1540
INDIRI4
CNSTI4 127
BANDI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+516
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 912
;912:	lagometer.snapshotCount++;
ADDRLP4 0
ADDRGP4 lagometer+1540
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 913
;913:}
LABELV $525
endproc CG_AddLagometerSnapshotInfo 4 0
proc CG_DrawDisconnect 52 32
line 923
;914:
;915:
;916:/*
;917:==============
;918:CG_DrawDisconnect
;919:
;920:Should we draw something differnet for long lag vs no packets?
;921:==============
;922:*/
;923:static void CG_DrawDisconnect(void) {
line 930
;924:	float		x, y;
;925:	int			cmdNum;
;926:	usercmd_t	cmd;
;927:	const char *s;
;928:
;929:	// draw the phone jack if we are completely past our buffers
;930:	cmdNum = trap_GetCurrentCmdNumber() - CMD_BACKUP + 1;
ADDRLP4 40
ADDRGP4 trap_GetCurrentCmdNumber
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 40
INDIRI4
CNSTI4 64
SUBI4
CNSTI4 1
ADDI4
ASGNI4
line 931
;931:	trap_GetUserCmd(cmdNum, &cmd);
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_GetUserCmd
CALLI4
pop
line 932
;932:	if (cmd.serverTime <= cg.snap->ps.commandTime
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
LEI4 $541
ADDRLP4 44
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $537
LABELV $541
line 933
;933:		|| cmd.serverTime > cg.time) {	// special check for map_restart // bk 0102165 - FIXME
line 934
;934:		return;
ADDRGP4 $536
JUMPV
LABELV $537
line 938
;935:	}
;936:
;937:	// also add text in center of screen
;938:	s = "Connection Interrupted";
ADDRLP4 36
ADDRGP4 $542
ASGNP4
line 939
;939:	CG_DrawString(HALFSCR_WIDTH, cgs.screenYmin + 100, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_PROPORTIONAL | DS_CENTER);
CNSTF4 1134559232
ARGF4
ADDRGP4 cgs+31460
INDIRF4
CNSTF4 1120403456
ADDF4
ARGF4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 942
;940:
;941:	// blink the icon
;942:	if ((cg.time >> 9) & 1) {
ADDRGP4 cg+107604
INDIRI4
CNSTI4 9
RSHI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $544
line 943
;943:		return;
ADDRGP4 $536
JUMPV
LABELV $544
line 946
;944:	}
;945:
;946:	x = cgs.screenXmax + 1 - 48;
ADDRLP4 24
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1111490560
SUBF4
ASGNF4
line 947
;947:	y = cgs.screenYmax + 1 - 48;
ADDRLP4 28
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1111490560
SUBF4
ASGNF4
line 949
;948:
;949:	CG_DrawPic(x, y, 48, 48, trap_R_RegisterShader("gfx/2d/net.tga"), WIDESCREEN_STRETCH); //, mRect);
ADDRGP4 $549
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
CNSTF4 1111490560
ARGF4
CNSTF4 1111490560
ARGF4
ADDRLP4 48
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 950
;950:}
LABELV $536
endproc CG_DrawDisconnect 52 32
proc CG_DrawLagometer 56 36
line 961
;951:
;952:
;953:#define	MAX_LAGOMETER_PING	900
;954:#define	MAX_LAGOMETER_RANGE	300
;955:
;956:/*
;957:==============
;958:CG_DrawLagometer
;959:==============
;960:*/
;961:static void CG_DrawLagometer(void) {
line 968
;962:	int		a, x, y, i;
;963:	float	v;
;964:	float	ax, ay, aw, ah, mid, range;
;965:	int		color;
;966:	float	vscale;
;967:
;968:	if (!cg_lagometer.integer || cgs.localServer) {
ADDRGP4 cg_lagometer+12
INDIRI4
CNSTI4 0
EQI4 $555
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 0
EQI4 $551
LABELV $555
line 969
;969:		CG_DrawDisconnect();
ADDRGP4 CG_DrawDisconnect
CALLV
pop
line 970
;970:		return;
ADDRGP4 $550
JUMPV
LABELV $551
line 976
;971:	}
;972:
;973:	//
;974:	// draw the graph
;975:	//
;976:	x = cgs.screenXmax + 1 - 48;
ADDRLP4 48
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1111490560
SUBF4
CVFI4 4
ASGNI4
line 977
;977:	y = cgs.screenYmax + 1 - 144;
ADDRLP4 44
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1125122048
SUBF4
CVFI4 4
ASGNI4
line 979
;978:
;979:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 980
;980:	CG_DrawPic(x, y, 48, 48, cgs.media.lagometerShader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 48
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 44
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1111490560
ARGF4
CNSTF4 1111490560
ARGF4
ADDRGP4 cgs+146664+376
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 982
;981:
;982:	ax = x;
ADDRLP4 24
ADDRLP4 48
INDIRI4
CVIF4 4
ASGNF4
line 983
;983:	ay = y;
ADDRLP4 36
ADDRLP4 44
INDIRI4
CVIF4 4
ASGNF4
line 984
;984:	aw = 48;
ADDRLP4 12
CNSTF4 1111490560
ASGNF4
line 985
;985:	ah = 48;
ADDRLP4 32
CNSTF4 1111490560
ASGNF4
line 986
;986:	CG_AdjustFrom640(&ax, &ay, &aw, &ah);
ADDRLP4 24
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 32
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 988
;987:
;988:	color = -1;
ADDRLP4 20
CNSTI4 -1
ASGNI4
line 989
;989:	range = ah / 3;
ADDRLP4 16
ADDRLP4 32
INDIRF4
CNSTF4 1051372203
MULF4
ASGNF4
line 990
;990:	mid = ay + range;
ADDRLP4 40
ADDRLP4 36
INDIRF4
ADDRLP4 16
INDIRF4
ADDF4
ASGNF4
line 992
;991:
;992:	vscale = range / MAX_LAGOMETER_RANGE;
ADDRLP4 28
ADDRLP4 16
INDIRF4
CNSTF4 995783694
MULF4
ASGNF4
line 995
;993:
;994:	// draw the frame interpoalte / extrapolate graph
;995:	for (a = 0; a < aw; a++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $563
JUMPV
LABELV $560
line 996
;996:		i = (lagometer.frameCount - 1 - a) & (LAG_SAMPLES - 1);
ADDRLP4 8
ADDRGP4 lagometer+512
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 127
BANDI4
ASGNI4
line 997
;997:		v = lagometer.frameSamples[i];
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 998
;998:		v *= vscale;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 999
;999:		if (v > 0) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $565
line 1000
;1000:			if (color != 1) {
ADDRLP4 20
INDIRI4
CNSTI4 1
EQI4 $567
line 1001
;1001:				color = 1;
ADDRLP4 20
CNSTI4 1
ASGNI4
line 1002
;1002:				trap_R_SetColor(g_color_table[ColorIndex(COLOR_YELLOW)]);
ADDRGP4 g_color_table+48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1003
;1003:			}
LABELV $567
line 1004
;1004:			if (v > range) {
ADDRLP4 0
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $570
line 1005
;1005:				v = range;
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1006
;1006:			}
LABELV $570
line 1007
;1007:			trap_R_DrawStretchPic(ax + aw - a, mid - v, 1, v, 0, 0, 0, 0, cgs.media.whiteShader);
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 40
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
ADDRGP4 cgs+146664+16
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1008
;1008:		} else if (v < 0) {
ADDRGP4 $566
JUMPV
LABELV $565
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $574
line 1009
;1009:			if (color != 2) {
ADDRLP4 20
INDIRI4
CNSTI4 2
EQI4 $576
line 1010
;1010:				color = 2;
ADDRLP4 20
CNSTI4 2
ASGNI4
line 1011
;1011:				trap_R_SetColor(g_color_table[ColorIndex(COLOR_BLUE)]);
ADDRGP4 g_color_table+64
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1012
;1012:			}
LABELV $576
line 1013
;1013:			v = -v;
ADDRLP4 0
ADDRLP4 0
INDIRF4
NEGF4
ASGNF4
line 1014
;1014:			if (v > range) {
ADDRLP4 0
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $579
line 1015
;1015:				v = range;
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1016
;1016:			}
LABELV $579
line 1017
;1017:			trap_R_DrawStretchPic(ax + aw - a, mid, 1, v, 0, 0, 0, 0, cgs.media.whiteShader);
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
ADDRGP4 cgs+146664+16
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1018
;1018:		}
LABELV $574
LABELV $566
line 1019
;1019:	}
LABELV $561
line 995
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $563
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
LTF4 $560
line 1022
;1020:
;1021:	// draw the snapshot latency / drop graph
;1022:	range = ah / 2;
ADDRLP4 16
ADDRLP4 32
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1023
;1023:	vscale = range / MAX_LAGOMETER_PING;
ADDRLP4 28
ADDRLP4 16
INDIRF4
CNSTF4 982622900
MULF4
ASGNF4
line 1025
;1024:
;1025:	for (a = 0; a < aw; a++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $586
JUMPV
LABELV $583
line 1026
;1026:		i = (lagometer.snapshotCount - 1 - a) & (LAG_SAMPLES - 1);
ADDRLP4 8
ADDRGP4 lagometer+1540
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 127
BANDI4
ASGNI4
line 1027
;1027:		v = lagometer.snapshotSamples[i];
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+1028
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1028
;1028:		if (v > 0) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $589
line 1029
;1029:			if (lagometer.snapshotFlags[i] & SNAPFLAG_RATE_DELAYED) {
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+516
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $591
line 1030
;1030:				if (color != 5) {
ADDRLP4 20
INDIRI4
CNSTI4 5
EQI4 $592
line 1031
;1031:					color = 5;	// YELLOW for rate delay
ADDRLP4 20
CNSTI4 5
ASGNI4
line 1032
;1032:					trap_R_SetColor(g_color_table[ColorIndex(COLOR_YELLOW)]);
ADDRGP4 g_color_table+48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1033
;1033:				}
line 1034
;1034:			} else {
ADDRGP4 $592
JUMPV
LABELV $591
line 1035
;1035:				if (color != 3) {
ADDRLP4 20
INDIRI4
CNSTI4 3
EQI4 $597
line 1036
;1036:					color = 3;
ADDRLP4 20
CNSTI4 3
ASGNI4
line 1037
;1037:					trap_R_SetColor(g_color_table[ColorIndex(COLOR_GREEN)]);
ADDRGP4 g_color_table+32
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1038
;1038:				}
LABELV $597
line 1039
;1039:			}
LABELV $592
line 1040
;1040:			v = v * vscale;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 1041
;1041:			if (v > range) {
ADDRLP4 0
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $600
line 1042
;1042:				v = range;
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1043
;1043:			}
LABELV $600
line 1044
;1044:			trap_R_DrawStretchPic(ax + aw - a, ay + ah - v, 1, v, 0, 0, 0, 0, cgs.media.whiteShader);
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 36
INDIRF4
ADDRLP4 32
INDIRF4
ADDF4
ADDRLP4 0
INDIRF4
SUBF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
ADDRGP4 cgs+146664+16
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1045
;1045:		} else if (v < 0) {
ADDRGP4 $590
JUMPV
LABELV $589
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $604
line 1046
;1046:			if (color != 4) {
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $606
line 1047
;1047:				color = 4;		// RED for dropped snapshots
ADDRLP4 20
CNSTI4 4
ASGNI4
line 1048
;1048:				trap_R_SetColor(g_color_table[ColorIndex(COLOR_RED)]);
ADDRGP4 g_color_table+16
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1049
;1049:			}
LABELV $606
line 1050
;1050:			trap_R_DrawStretchPic(ax + aw - a, ay + ah - range, 1, range, 0, 0, 0, 0, cgs.media.whiteShader);
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 36
INDIRF4
ADDRLP4 32
INDIRF4
ADDF4
ADDRLP4 16
INDIRF4
SUBF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
ADDRGP4 cgs+146664+16
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1051
;1051:		}
LABELV $604
LABELV $590
line 1052
;1052:	}
LABELV $584
line 1025
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $586
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
LTF4 $583
line 1054
;1053:
;1054:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1056
;1055:
;1056:	if (cg_nopredict.integer || cgs.synchronousClients) {
ADDRGP4 cg_nopredict+12
INDIRI4
CNSTI4 0
NEI4 $615
ADDRGP4 cgs+148000
INDIRI4
CNSTI4 0
EQI4 $611
LABELV $615
line 1057
;1057:		CG_DrawString(cgs.screenXmax - 1, y, "snc", colorWhite, 5, 10, 0, DS_PROPORTIONAL | DS_RIGHT);
ADDRGP4 cgs+31456
INDIRF4
CNSTF4 1065353216
SUBF4
ARGF4
ADDRLP4 44
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 $617
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1084227584
ARGF4
CNSTF4 1092616192
ARGF4
CNSTI4 0
ARGI4
CNSTI4 20
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1058
;1058:	}
LABELV $611
line 1060
;1059:
;1060:	if (!cg.demoPlayback) {
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
NEI4 $618
line 1061
;1061:		CG_DrawString(x + 1, y, va("%ims", cg.meanPing), colorWhite, 5, 10, 0, DS_PROPORTIONAL);
ADDRGP4 $621
ARGP4
ADDRGP4 cg+156996
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
CVIF4 4
ARGF4
ADDRLP4 44
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 52
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1084227584
ARGF4
CNSTF4 1092616192
ARGF4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1062
;1062:	}
LABELV $618
line 1064
;1063:
;1064:	CG_DrawDisconnect();
ADDRGP4 CG_DrawDisconnect
CALLV
pop
line 1065
;1065:}
LABELV $550
endproc CG_DrawLagometer 56 36
export CG_CenterPrint
proc CG_CenterPrint 8 12
line 1086
;1066:
;1067:
;1068:
;1069:/*
;1070:===============================================================================
;1071:
;1072:CENTER PRINTING
;1073:
;1074:===============================================================================
;1075:*/
;1076:
;1077:
;1078:/*
;1079:==============
;1080:CG_CenterPrint
;1081:
;1082:Called for important messages that should stay in the center of the screen
;1083:for a few moments
;1084:==============
;1085:*/
;1086:void CG_CenterPrint(const char *str, int y, int charWidth) {
line 1089
;1087:	char *s;
;1088:
;1089:	Q_strncpyz(cg.centerPrint, str, sizeof(cg.centerPrint));
ADDRGP4 cg+124436
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1091
;1090:
;1091:	cg.centerPrintTime = cg.time;
ADDRGP4 cg+124424
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1092
;1092:	cg.centerPrintY = y;
ADDRGP4 cg+124432
ADDRFP4 4
INDIRI4
ASGNI4
line 1093
;1093:	cg.centerPrintCharWidth = charWidth;
ADDRGP4 cg+124428
ADDRFP4 8
INDIRI4
ASGNI4
line 1096
;1094:
;1095:	// count the number of lines for centering
;1096:	cg.centerPrintLines = 1;
ADDRGP4 cg+125460
CNSTI4 1
ASGNI4
line 1097
;1097:	s = cg.centerPrint;
ADDRLP4 0
ADDRGP4 cg+124436
ASGNP4
ADDRGP4 $633
JUMPV
LABELV $632
line 1098
;1098:	while (*s) {
line 1099
;1099:		if (*s == '\n')
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 10
NEI4 $635
line 1100
;1100:			cg.centerPrintLines++;
ADDRLP4 4
ADDRGP4 cg+125460
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $635
line 1101
;1101:		s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1102
;1102:	}
LABELV $633
line 1098
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $632
line 1103
;1103:}
LABELV $623
endproc CG_CenterPrint 8 12
proc CG_DrawCenterString 1068 40
line 1111
;1104:
;1105:
;1106:/*
;1107:===================
;1108:CG_DrawCenterString
;1109:===================
;1110:*/
;1111:static void CG_DrawCenterString(void) {
line 1118
;1112:	char *start;
;1113:	int		l;
;1114:	int		x, y;
;1115:	int		w, h;
;1116:	float *color;
;1117:
;1118:	if (!cg.centerPrintTime) {
ADDRGP4 cg+124424
INDIRI4
CNSTI4 0
NEI4 $639
line 1119
;1119:		return;
ADDRGP4 $638
JUMPV
LABELV $639
line 1122
;1120:	}
;1121:
;1122:	color = CG_FadeColor(cg.centerPrintTime, 1000 * cg_centertime.value);
ADDRGP4 cg+124424
INDIRI4
ARGI4
ADDRGP4 cg_centertime+8
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
ARGI4
ADDRLP4 28
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 1123
;1123:	if (!color) {
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $644
line 1124
;1124:		return;
ADDRGP4 $638
JUMPV
LABELV $644
line 1127
;1125:	}
;1126:
;1127:	trap_R_SetColor(color);
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1129
;1128:
;1129:	start = cg.centerPrint;
ADDRLP4 0
ADDRGP4 cg+124436
ASGNP4
line 1131
;1130:
;1131:	y = cg.centerPrintY - cg.centerPrintLines * BIGCHAR_HEIGHT / 2;
ADDRLP4 12
ADDRGP4 cg+124432
INDIRI4
ADDRGP4 cg+125460
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
ADDRGP4 $650
JUMPV
LABELV $649
line 1133
;1132:
;1133:	while (1) {
line 1136
;1134:		char linebuffer[1024];
;1135:
;1136:		for (l = 0; l < 50; l++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $652
line 1137
;1137:			if (!start[l] || start[l] == '\n') {
ADDRLP4 1056
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1056
INDIRI4
CNSTI4 0
EQI4 $658
ADDRLP4 1056
INDIRI4
CNSTI4 10
NEI4 $656
LABELV $658
line 1138
;1138:				break;
ADDRGP4 $654
JUMPV
LABELV $656
line 1140
;1139:			}
;1140:			linebuffer[l] = start[l];
ADDRLP4 4
INDIRI4
ADDRLP4 32
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 1141
;1141:		}
LABELV $653
line 1136
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 50
LTI4 $652
LABELV $654
line 1142
;1142:		linebuffer[l] = 0;
ADDRLP4 4
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 1144
;1143:
;1144:		w = CG_Text_Width(linebuffer, 0.5, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 32
ARGP4
CNSTF4 1056964608
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 1056
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 1056
INDIRF4
CVFI4 4
ASGNI4
line 1145
;1145:		h = CG_Text_Height(linebuffer, 0.5, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 32
ARGP4
CNSTF4 1056964608
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 1060
ADDRGP4 CG_Text_Height
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 1060
INDIRF4
CVFI4 4
ASGNI4
line 1146
;1146:		x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 16
CNSTI4 640
ADDRLP4 20
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 1147
;1147:		CG_Text_Paint(x, y + h, 0.5, color, linebuffer, 0, 0, ITEM_TEXTSTYLE_SHADOWEDMORE, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
CVIF4 4
ARGF4
CNSTF4 1056964608
ARGF4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 6
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1148
;1148:		y += h + 6;
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 6
ADDI4
ADDI4
ASGNI4
ADDRGP4 $660
JUMPV
LABELV $659
line 1150
;1149:
;1150:		while (*start && (*start != '\n')) {
line 1151
;1151:			start++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1152
;1152:		}
LABELV $660
line 1150
ADDRLP4 1064
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1064
INDIRI4
CNSTI4 0
EQI4 $662
ADDRLP4 1064
INDIRI4
CNSTI4 10
NEI4 $659
LABELV $662
line 1153
;1153:		if (!*start) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $663
line 1154
;1154:			break;
ADDRGP4 $651
JUMPV
LABELV $663
line 1156
;1155:		}
;1156:		start++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1157
;1157:	}
LABELV $650
line 1133
ADDRGP4 $649
JUMPV
LABELV $651
line 1159
;1158:
;1159:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1160
;1160:}
LABELV $638
endproc CG_DrawCenterString 1068 40
proc CG_DrawCrosshair 44 36
line 1178
;1161:
;1162:
;1163:
;1164:/*
;1165:================================================================================
;1166:
;1167:CROSSHAIR
;1168:
;1169:================================================================================
;1170:*/
;1171:
;1172:
;1173:/*
;1174:=================
;1175:CG_DrawCrosshair
;1176:=================
;1177:*/
;1178:static void CG_DrawCrosshair(void) {
line 1185
;1179:	float		w, h;
;1180:	qhandle_t	hShader;
;1181:	float		f;
;1182:	float		x, y;
;1183:	int			ca;
;1184:
;1185:	if (!cg_drawCrosshair.integer) {
ADDRGP4 cg_drawCrosshair+12
INDIRI4
CNSTI4 0
NEI4 $666
line 1186
;1186:		return;
ADDRGP4 $665
JUMPV
LABELV $666
line 1189
;1187:	}
;1188:
;1189:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $669
line 1190
;1190:		return;
ADDRGP4 $665
JUMPV
LABELV $669
line 1193
;1191:	}
;1192:
;1193:	if (cg.renderingThirdPerson) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $672
line 1194
;1194:		return;
ADDRGP4 $665
JUMPV
LABELV $672
line 1198
;1195:	}
;1196:
;1197:	// set color based on health
;1198:	if (cg_crosshairHealth.integer) {
ADDRGP4 cg_crosshairHealth+12
INDIRI4
CNSTI4 0
EQI4 $675
line 1201
;1199:		vec4_t		hcolor;
;1200:
;1201:		CG_ColorForHealth(hcolor);
ADDRLP4 28
ARGP4
ADDRGP4 CG_ColorForHealth
CALLV
pop
line 1202
;1202:		trap_R_SetColor(hcolor);
ADDRLP4 28
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1203
;1203:	} else {
ADDRGP4 $676
JUMPV
LABELV $675
line 1204
;1204:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1205
;1205:	}
LABELV $676
line 1207
;1206:
;1207:	w = h = cg_crosshairSize.value;
ADDRLP4 28
ADDRGP4 cg_crosshairSize+8
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRF4
ASGNF4
line 1210
;1208:
;1209:	// pulse the size of the crosshair when picking up items
;1210:	f = cg.time - cg.itemPickupBlendTime;
ADDRLP4 8
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125776
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 1211
;1211:	if (f > 0 && f < ITEM_BLOB_TIME) {
ADDRLP4 8
INDIRF4
CNSTF4 0
LEF4 $681
ADDRLP4 8
INDIRF4
CNSTF4 1128792064
GEF4 $681
line 1212
;1212:		f /= ITEM_BLOB_TIME;
ADDRLP4 8
ADDRLP4 8
INDIRF4
CNSTF4 1000593162
MULF4
ASGNF4
line 1213
;1213:		w *= (1 + f);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
ADDF4
MULF4
ASGNF4
line 1214
;1214:		h *= (1 + f);
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
ADDF4
MULF4
ASGNF4
line 1215
;1215:	}
LABELV $681
line 1217
;1216:
;1217:	x = cg_crosshairX.integer;
ADDRLP4 16
ADDRGP4 cg_crosshairX+12
INDIRI4
CVIF4 4
ASGNF4
line 1218
;1218:	y = cg_crosshairY.integer;
ADDRLP4 20
ADDRGP4 cg_crosshairY+12
INDIRI4
CVIF4 4
ASGNF4
line 1220
;1219:
;1220:	CG_AdjustFrom640(&x, &y, &w, &h);
ADDRLP4 16
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 1222
;1221:
;1222:	ca = cg_drawCrosshair.integer;
ADDRLP4 12
ADDRGP4 cg_drawCrosshair+12
INDIRI4
ASGNI4
line 1223
;1223:	if (ca < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $686
line 1224
;1224:		ca = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1225
;1225:	}
LABELV $686
line 1227
;1226:
;1227:	hShader = cgs.media.crosshairShader[ca % NUM_CROSSHAIRS];
ADDRLP4 24
ADDRLP4 12
INDIRI4
CNSTI4 30
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146664+256
ADDP4
INDIRI4
ASGNI4
line 1229
;1228:
;1229:	trap_R_DrawStretchPic(x + cg.refdef.x + 0.5 * (cg.refdef.width - w) - cgs.screenXBias,
ADDRLP4 36
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 16
INDIRF4
ADDRGP4 cg+109056
INDIRI4
CVIF4 4
ADDF4
ADDRGP4 cg+109056+8
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ADDRGP4 cgs+31444
INDIRF4
SUBF4
ARGF4
ADDRLP4 40
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRGP4 cg+109056+4
INDIRI4
CVIF4 4
ADDF4
ADDRGP4 cg+109056+12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ADDRGP4 cgs+31448
INDIRF4
SUBF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1232
;1230:		y + cg.refdef.y + 0.5 * (cg.refdef.height - h) - cgs.screenYBias,
;1231:		w, h, 0, 0, 1, 1, hShader);
;1232:}
LABELV $665
endproc CG_DrawCrosshair 44 36
proc CG_ScanForCrosshairEntity 92 28
line 1241
;1233:
;1234:
;1235:
;1236:/*
;1237:=================
;1238:CG_ScanForCrosshairEntity
;1239:=================
;1240:*/
;1241:static void CG_ScanForCrosshairEntity(void) {
line 1246
;1242:	trace_t		trace;
;1243:	vec3_t		start, end;
;1244:	int			content;
;1245:
;1246:	VectorCopy(cg.refdef.vieworg, start);
ADDRLP4 56
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 1247
;1247:	VectorMA(start, 131072, cg.refdef.viewaxis[0], end);
ADDRLP4 68
ADDRLP4 56
INDIRF4
ADDRGP4 cg+109056+36
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 56+4
INDIRF4
ADDRGP4 cg+109056+36+4
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 68+8
ADDRLP4 56+8
INDIRF4
ADDRGP4 cg+109056+36+8
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
line 1249
;1248:
;1249:	CG_Trace(&trace, start, vec3_origin, vec3_origin, end,
ADDRLP4 0
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 84
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1251
;1250:		cg.snap->ps.clientNum, CONTENTS_SOLID | CONTENTS_BODY);
;1251:	if (trace.entityNum >= MAX_CLIENTS) {
ADDRLP4 0+52
INDIRI4
CNSTI4 64
LTI4 $715
line 1252
;1252:		return;
ADDRGP4 $699
JUMPV
LABELV $715
line 1256
;1253:	}
;1254:
;1255:	// if the player is in fog, don't show it
;1256:	content = CG_PointContents(trace.endpos, 0);
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 88
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 80
ADDRLP4 88
INDIRI4
ASGNI4
line 1257
;1257:	if (content & CONTENTS_FOG) {
ADDRLP4 80
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $719
line 1258
;1258:		return;
ADDRGP4 $699
JUMPV
LABELV $719
line 1262
;1259:	}
;1260:
;1261:	// if the player is invisible, don't show it
;1262:	if (cg_entities[trace.entityNum].currentState.powerups & (1 << PW_INVIS)) {
ADDRLP4 0+52
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $721
line 1263
;1263:		return;
ADDRGP4 $699
JUMPV
LABELV $721
line 1267
;1264:	}
;1265:
;1266:	// update the fade timer
;1267:	cg.crosshairClientNum = trace.entityNum;
ADDRGP4 cg+125472
ADDRLP4 0+52
INDIRI4
ASGNI4
line 1268
;1268:	cg.crosshairClientTime = cg.time;
ADDRGP4 cg+125476
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1269
;1269:}
LABELV $699
endproc CG_ScanForCrosshairEntity 92 28
proc CG_DrawCrosshairNames 24 40
line 1277
;1270:
;1271:
;1272:/*
;1273:=====================
;1274:CG_DrawCrosshairNames
;1275:=====================
;1276:*/
;1277:static void CG_DrawCrosshairNames(void) {
line 1282
;1278:	float *color;
;1279:	const char *name;
;1280:	int			w;
;1281:
;1282:	if (!cg_drawCrosshair.integer) {
ADDRGP4 cg_drawCrosshair+12
INDIRI4
CNSTI4 0
NEI4 $730
line 1283
;1283:		return;
ADDRGP4 $729
JUMPV
LABELV $730
line 1285
;1284:	}
;1285:	if (!cg_drawCrosshairNames.integer) {
ADDRGP4 cg_drawCrosshairNames+12
INDIRI4
CNSTI4 0
NEI4 $733
line 1286
;1286:		return;
ADDRGP4 $729
JUMPV
LABELV $733
line 1288
;1287:	}
;1288:	if (cg.renderingThirdPerson) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $736
line 1289
;1289:		return;
ADDRGP4 $729
JUMPV
LABELV $736
line 1293
;1290:	}
;1291:
;1292:	// scan the known entities to see if the crosshair is sighted on one
;1293:	CG_ScanForCrosshairEntity();
ADDRGP4 CG_ScanForCrosshairEntity
CALLV
pop
line 1296
;1294:
;1295:	// draw the name of the player being looked at
;1296:	color = CG_FadeColor(cg.crosshairClientTime, 1000);
ADDRGP4 cg+125476
INDIRI4
ARGI4
CNSTI4 1000
ARGI4
ADDRLP4 12
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 1297
;1297:	if (!color) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $740
line 1298
;1298:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1299
;1299:		return;
ADDRGP4 $729
JUMPV
LABELV $740
line 1302
;1300:	}
;1301:
;1302:	name = cgs.clientinfo[cg.crosshairClientNum].name;
ADDRLP4 4
ADDRGP4 cg+125472
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+4
ADDP4
ASGNP4
line 1303
;1303:	color[3] *= 0.5f;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1304
;1304:	w = CG_Text_Width(name, 0.3f, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 1050253722
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 20
INDIRF4
CVFI4 4
ASGNI4
line 1305
;1305:	CG_Text_Paint(HALFSCR_WIDTH - w / 2, 190, 0.3f, color, name, 0, 0, ITEM_TEXTSTYLE_SHADOWED, 0, WIDESCREEN_STRETCH); //, mRect);
CNSTI4 320
ADDRLP4 8
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1128136704
ARGF4
CNSTF4 1050253722
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1307
;1306:
;1307:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1308
;1308:}
LABELV $729
endproc CG_DrawCrosshairNames 24 40
proc CG_DrawSpectator 0 32
line 1318
;1309:
;1310:
;1311://==============================================================================
;1312:
;1313:/*
;1314:=================
;1315:CG_DrawSpectator
;1316:=================
;1317:*/
;1318:static void CG_DrawSpectator(void) {
line 1319
;1319:	CG_DrawString(HALFSCR_WIDTH, cgs.screenYmax - 40 + 1, "SPECTATOR", colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1109393408
SUBF4
CNSTF4 1065353216
ADDF4
ARGF4
ADDRGP4 $747
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1320
;1320:	if (cgs.gametype == GT_DUEL) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 1
NEI4 $748
line 1321
;1321:		CG_DrawString(HALFSCR_WIDTH, cgs.screenYmax - 20 + 1, "waiting to play", colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1101004800
SUBF4
CNSTF4 1065353216
ADDF4
ARGF4
ADDRGP4 $752
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1322
;1322:	} else if (cgs.gametype >= GT_TEAM) {
ADDRGP4 $749
JUMPV
LABELV $748
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $753
line 1323
;1323:		CG_DrawString(HALFSCR_WIDTH, cgs.screenYmax - 20 + 1, "press ESC and use the JOIN menu to play", colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1101004800
SUBF4
CNSTF4 1065353216
ADDF4
ARGF4
ADDRGP4 $757
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1324
;1324:	}
LABELV $753
LABELV $749
line 1325
;1325:}
LABELV $745
endproc CG_DrawSpectator 0 32
proc CG_DrawVote 12 32
line 1333
;1326:
;1327:
;1328:/*
;1329:=================
;1330:CG_DrawVote
;1331:=================
;1332:*/
;1333:static void CG_DrawVote(void) {
line 1337
;1334:	char *s;
;1335:	int		sec;
;1336:
;1337:	if (!cgs.voteTime) {
ADDRGP4 cgs+31700
INDIRI4
CNSTI4 0
NEI4 $759
line 1338
;1338:		return;
ADDRGP4 $758
JUMPV
LABELV $759
line 1342
;1339:	}
;1340:
;1341:	// play a talk beep whenever it is modified
;1342:	if (cgs.voteModified) {
ADDRGP4 cgs+31712
INDIRI4
CNSTI4 0
EQI4 $762
line 1343
;1343:		cgs.voteModified = qfalse;
ADDRGP4 cgs+31712
CNSTI4 0
ASGNI4
line 1344
;1344:		trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+146664+984
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1345
;1345:	}
LABELV $762
line 1347
;1346:
;1347:	sec = (VOTE_TIME - (cg.time - cgs.voteTime)) / 1000;
ADDRLP4 4
CNSTI4 30000
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+31700
INDIRI4
SUBI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 1348
;1348:	if (sec < 0) {
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $770
line 1349
;1349:		sec = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1350
;1350:	}
LABELV $770
line 1352
;1351:
;1352:	s = va("VOTE(%i):%s yes:%i no:%i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo);
ADDRGP4 $772
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 cgs+31716
ARGP4
ADDRGP4 cgs+31704
INDIRI4
ARGI4
ADDRGP4 cgs+31708
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1353
;1353:	CG_DrawString(cgs.screenXmin - 0, 58, s, colorWhite, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_PROPORTIONAL);
ADDRGP4 cgs+31452
INDIRF4
CNSTF4 0
SUBF4
ARGF4
CNSTF4 1114112000
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1354
;1354:	s = "or press ESC then click Vote";
ADDRLP4 0
ADDRGP4 $777
ASGNP4
line 1355
;1355:	CG_DrawString(cgs.screenXmin - 0, 58 + SMALLCHAR_HEIGHT + 2, s, colorWhite, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_PROPORTIONAL);
ADDRGP4 cgs+31452
INDIRF4
CNSTF4 0
SUBF4
ARGF4
CNSTF4 1117257728
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1357
;1356:
;1357:}
LABELV $758
endproc CG_DrawVote 12 32
data
align 4
LABELV $780
byte 4 1
code
proc CG_DrawScoreboard 16 8
line 1360
;1358:
;1359:
;1360:static qboolean CG_DrawScoreboard(void) {
line 1364
;1361:	static qboolean firstTime = qtrue;
;1362:	float fade, *fadeColor;
;1363:
;1364:	if (menuScoreboard) {
ADDRGP4 menuScoreboard
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $781
line 1365
;1365:		menuScoreboard->window.flags &= ~WINDOW_FORCED;
ADDRLP4 8
ADDRGP4 menuScoreboard
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -1048577
BANDI4
ASGNI4
line 1366
;1366:	}
LABELV $781
line 1367
;1367:	if (cg_paused.integer) {
ADDRGP4 cg_paused+12
INDIRI4
CNSTI4 0
EQI4 $783
line 1368
;1368:		cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 1369
;1369:		firstTime = qtrue;
ADDRGP4 $780
CNSTI4 1
ASGNI4
line 1370
;1370:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $779
JUMPV
LABELV $783
line 1374
;1371:	}
;1372:
;1373:	// don't draw scoreboard during death while warmup up
;1374:	if (cg.warmup && !cg.showScores) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
EQI4 $787
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $787
line 1375
;1375:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $779
JUMPV
LABELV $787
line 1378
;1376:	}
;1377:
;1378:	if (cg.showScores || cg.predictedPlayerState.pm_type == PM_DEAD || cg.predictedPlayerState.pm_type == PM_INTERMISSION) {
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $799
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 3
EQI4 $799
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 5
NEI4 $791
LABELV $799
line 1379
;1379:		fade = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1380
;1380:		fadeColor = colorWhite;
ADDRLP4 0
ADDRGP4 colorWhite
ASGNP4
line 1381
;1381:	} else {
ADDRGP4 $792
JUMPV
LABELV $791
line 1382
;1382:		fadeColor = CG_FadeColor(cg.scoreFadeTime, FADE_TIME);
ADDRGP4 cg+115364
INDIRI4
ARGI4
CNSTI4 200
ARGI4
ADDRLP4 8
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1383
;1383:		if (!fadeColor) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $801
line 1385
;1384:			// next time scoreboard comes up, don't print killer
;1385:			cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 1386
;1386:			cg.killerName[0] = 0;
ADDRGP4 cg+115368
CNSTI1 0
ASGNI1
line 1387
;1387:			firstTime = qtrue;
ADDRGP4 $780
CNSTI4 1
ASGNI4
line 1388
;1388:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $779
JUMPV
LABELV $801
line 1390
;1389:		}
;1390:		fade = *fadeColor;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRF4
ASGNF4
line 1391
;1391:	}
LABELV $792
line 1394
;1392:
;1393:
;1394:	if (menuScoreboard == NULL) {
ADDRGP4 menuScoreboard
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $805
line 1395
;1395:		if (cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $807
line 1396
;1396:			menuScoreboard = Menus_FindByName("teamscore_menu");
ADDRGP4 $810
ARGP4
ADDRLP4 8
ADDRGP4 Menus_FindByName
CALLP4
ASGNP4
ADDRGP4 menuScoreboard
ADDRLP4 8
INDIRP4
ASGNP4
line 1397
;1397:		} else {
ADDRGP4 $808
JUMPV
LABELV $807
line 1398
;1398:			menuScoreboard = Menus_FindByName("score_menu");
ADDRGP4 $811
ARGP4
ADDRLP4 8
ADDRGP4 Menus_FindByName
CALLP4
ASGNP4
ADDRGP4 menuScoreboard
ADDRLP4 8
INDIRP4
ASGNP4
line 1399
;1399:		}
LABELV $808
line 1400
;1400:	}
LABELV $805
line 1402
;1401:
;1402:	if (menuScoreboard) {
ADDRGP4 menuScoreboard
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $812
line 1403
;1403:		if (firstTime) {
ADDRGP4 $780
INDIRI4
CNSTI4 0
EQI4 $814
line 1404
;1404:			CG_SetScoreSelection(menuScoreboard);
ADDRGP4 menuScoreboard
INDIRP4
ARGP4
ADDRGP4 CG_SetScoreSelection
CALLV
pop
line 1405
;1405:			firstTime = qfalse;
ADDRGP4 $780
CNSTI4 0
ASGNI4
line 1406
;1406:		}
LABELV $814
line 1407
;1407:		Menu_Paint(menuScoreboard, qtrue);
ADDRGP4 menuScoreboard
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 Menu_Paint
CALLV
pop
line 1408
;1408:	}
LABELV $812
line 1411
;1409:
;1410:	// load any models that have been deferred
;1411:	if (++cg.deferredPlayerLoading > 10) {
ADDRLP4 8
ADDRGP4 cg+16
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 10
LEI4 $816
line 1412
;1412:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 1413
;1413:	}
LABELV $816
line 1415
;1414:
;1415:	return qtrue;
CNSTI4 1
RETI4
LABELV $779
endproc CG_DrawScoreboard 16 8
proc CG_DrawIntermission 4 0
line 1424
;1416:}
;1417:
;1418:
;1419:/*
;1420:=================
;1421:CG_DrawIntermission
;1422:=================
;1423:*/
;1424:static void CG_DrawIntermission(void) {
line 1425
;1425:	cg.scoreFadeTime = cg.time;
ADDRGP4 cg+115364
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1426
;1426:	cg.scoreBoardShowing = CG_DrawScoreboard();
ADDRLP4 0
ADDRGP4 CG_DrawScoreboard
CALLI4
ASGNI4
ADDRGP4 cg+115360
ADDRLP4 0
INDIRI4
ASGNI4
line 1427
;1427:}
LABELV $819
endproc CG_DrawIntermission 4 0
proc CG_DrawFollow 4 32
line 1435
;1428:
;1429:
;1430:/*
;1431:=================
;1432:CG_DrawFollow
;1433:=================
;1434:*/
;1435:static qboolean CG_DrawFollow(void) {
line 1439
;1436:
;1437:	const char *name;
;1438:
;1439:	if (!(cg.snap->ps.pm_flags & PMF_FOLLOW)) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $824
line 1440
;1440:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $823
JUMPV
LABELV $824
line 1443
;1441:	}
;1442:
;1443:	CG_DrawString(HALFSCR_WIDTH, cgs.screenYmin + 24, "following", colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_CENTER | DS_SHADOW);
CNSTF4 1134559232
ARGF4
ADDRGP4 cgs+31460
INDIRF4
CNSTF4 1103101952
ADDF4
ARGF4
ADDRGP4 $828
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 9
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1445
;1444:
;1445:	name = cgs.clientinfo[cg.snap->ps.clientNum].name;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+4
ADDP4
ASGNP4
line 1447
;1446:
;1447:	CG_DrawString(HALFSCR_WIDTH, cgs.screenYmin + 40, name, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_FORCE_COLOR | DS_SHADOW | DS_CENTER);
CNSTF4 1134559232
ARGF4
ADDRGP4 cgs+31460
INDIRF4
CNSTF4 1109393408
ADDF4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 11
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1449
;1448:
;1449:	return qtrue;
CNSTI4 1
RETI4
LABELV $823
endproc CG_DrawFollow 4 32
proc CG_DrawAmmoWarning 4 32
line 1459
;1450:}
;1451:
;1452:
;1453:
;1454:/*
;1455:=================
;1456:CG_DrawAmmoWarning
;1457:=================
;1458:*/
;1459:static void CG_DrawAmmoWarning(void) {
line 1462
;1460:	const char *s;
;1461:
;1462:	if (cg_drawAmmoWarning.integer == 0) {
ADDRGP4 cg_drawAmmoWarning+12
INDIRI4
CNSTI4 0
NEI4 $834
line 1463
;1463:		return;
ADDRGP4 $833
JUMPV
LABELV $834
line 1466
;1464:	}
;1465:
;1466:	if (!cg.lowAmmoWarning) {
ADDRGP4 cg+125464
INDIRI4
CNSTI4 0
NEI4 $837
line 1467
;1467:		return;
ADDRGP4 $833
JUMPV
LABELV $837
line 1470
;1468:	}
;1469:
;1470:	if (cg.lowAmmoWarning == 2) {
ADDRGP4 cg+125464
INDIRI4
CNSTI4 2
NEI4 $840
line 1471
;1471:		s = "OUT OF AMMO";
ADDRLP4 0
ADDRGP4 $843
ASGNP4
line 1472
;1472:	} else {
ADDRGP4 $841
JUMPV
LABELV $840
line 1473
;1473:		s = "LOW AMMO WARNING";
ADDRLP4 0
ADDRGP4 $844
ASGNP4
line 1474
;1474:	}
LABELV $841
line 1476
;1475:
;1476:	CG_DrawString(HALFSCR_WIDTH, 64, s, colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_PROPORTIONAL | DS_CENTER | DS_SHADOW);
CNSTF4 1134559232
ARGF4
CNSTF4 1115684864
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1477
;1477:}
LABELV $833
endproc CG_DrawAmmoWarning 4 32
bss
align 4
LABELV $846
skip 4
align 4
LABELV $847
skip 4
align 4
LABELV $848
skip 4
code
proc CG_DrawProxWarning 40 32
line 1485
;1478:
;1479:
;1480:/*
;1481:=================
;1482:CG_DrawProxWarning
;1483:=================
;1484:*/
;1485:static void CG_DrawProxWarning(void) {
line 1491
;1486:	char s[32];
;1487:	static int proxTime;
;1488:	static int proxCounter;
;1489:	static int proxTick;
;1490:
;1491:	if (!(cg.snap->ps.eFlags & EF_TICKING)) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $849
line 1492
;1492:		proxTime = 0;
ADDRGP4 $846
CNSTI4 0
ASGNI4
line 1493
;1493:		return;
ADDRGP4 $845
JUMPV
LABELV $849
line 1496
;1494:	}
;1495:
;1496:	if (proxTime == 0) {
ADDRGP4 $846
INDIRI4
CNSTI4 0
NEI4 $852
line 1497
;1497:		proxTime = cg.time + 5000;
ADDRGP4 $846
ADDRGP4 cg+107604
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 1498
;1498:		proxCounter = 5;
ADDRGP4 $847
CNSTI4 5
ASGNI4
line 1499
;1499:		proxTick = 0;
ADDRGP4 $848
CNSTI4 0
ASGNI4
line 1500
;1500:	}
LABELV $852
line 1502
;1501:
;1502:	if (cg.time > proxTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 $846
INDIRI4
LEI4 $855
line 1503
;1503:		proxTick = proxCounter--;
ADDRLP4 36
ADDRGP4 $847
ASGNP4
ADDRLP4 32
ADDRLP4 36
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 36
INDIRP4
ADDRLP4 32
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $848
ADDRLP4 32
INDIRI4
ASGNI4
line 1504
;1504:		proxTime = cg.time + 1000;
ADDRGP4 $846
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1505
;1505:	}
LABELV $855
line 1507
;1506:
;1507:	if (proxTick != 0) {
ADDRGP4 $848
INDIRI4
CNSTI4 0
EQI4 $859
line 1508
;1508:		Com_sprintf(s, sizeof(s), "INTERNAL COMBUSTION IN: %i", proxTick);
ADDRLP4 0
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $861
ARGP4
ADDRGP4 $848
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1509
;1509:	} else {
ADDRGP4 $860
JUMPV
LABELV $859
line 1510
;1510:		Com_sprintf(s, sizeof(s), "YOU HAVE BEEN MINED");
ADDRLP4 0
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $862
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1511
;1511:	}
LABELV $860
line 1513
;1512:
;1513:	CG_DrawString(HALFSCR_WIDTH, 64 + 64 + BIGCHAR_HEIGHT, s, g_color_table[ColorIndex(COLOR_RED)], BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_FORCE_COLOR | DS_CENTER);
CNSTF4 1134559232
ARGF4
CNSTF4 1125122048
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 g_color_table+16
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 11
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1514
;1514:}
LABELV $845
endproc CG_DrawProxWarning 40 32
proc CG_DrawWarmup 40 40
line 1522
;1515:
;1516:
;1517:/*
;1518:=================
;1519:CG_DrawWarmup
;1520:=================
;1521:*/
;1522:static void CG_DrawWarmup(void) {
line 1530
;1523:	int			w;
;1524:	int			i;
;1525:	float		scale;
;1526:	clientInfo_t *ci1, *ci2;
;1527:	int			cw;
;1528:	const char *s;
;1529:
;1530:	if (!cg.warmup) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
NEI4 $865
line 1531
;1531:		return;
ADDRGP4 $864
JUMPV
LABELV $865
line 1534
;1532:	}
;1533:
;1534:	if (cg.warmup < 0) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
GEI4 $868
line 1535
;1535:		CG_DrawString(HALFSCR_WIDTH, 24, "Waiting for players", colorWhite, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0,
CNSTF4 1134559232
ARGF4
CNSTF4 1103101952
ARGF4
ADDRGP4 $871
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1537
;1536:			DS_PROPORTIONAL | DS_CENTER | DS_SHADOW);
;1537:		return;
ADDRGP4 $864
JUMPV
LABELV $868
line 1540
;1538:	}
;1539:
;1540:	if (cgs.gametype == GT_DUEL) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 1
NEI4 $872
line 1542
;1541:		// find the two active players
;1542:		ci1 = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1543
;1543:		ci2 = NULL;
ADDRLP4 16
CNSTP4 0
ASGNP4
line 1544
;1544:		for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $878
JUMPV
LABELV $875
line 1545
;1545:			if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_FREE) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
EQI4 $880
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
CNSTI4 0
NEI4 $880
line 1546
;1546:				if (!ci1) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $885
line 1547
;1547:					ci1 = &cgs.clientinfo[i];
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 1548
;1548:				} else {
ADDRGP4 $886
JUMPV
LABELV $885
line 1549
;1549:					ci2 = &cgs.clientinfo[i];
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 1550
;1550:				}
LABELV $886
line 1551
;1551:			}
LABELV $880
line 1552
;1552:		}
LABELV $876
line 1544
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $878
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $875
line 1554
;1553:
;1554:		if (ci1 && ci2) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $873
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $873
line 1555
;1555:			s = va("%s vs %s", ci1->name, ci2->name);
ADDRGP4 $891
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
ASGNP4
line 1556
;1556:			w = CG_Text_Width(s, 0.6f, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 1058642330
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 32
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 32
INDIRF4
CVFI4 4
ASGNI4
line 1557
;1557:			CG_Text_Paint(HALFSCR_WIDTH - w / 2, 60, 0.6f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWEDMORE, 0, WIDESCREEN_STRETCH); //, mRect);
CNSTI4 320
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1114636288
ARGF4
CNSTF4 1058642330
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 6
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1558
;1558:		}
line 1559
;1559:	} else {
ADDRGP4 $873
JUMPV
LABELV $872
line 1560
;1560:		if (cgs.gametype == GT_FFA) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 0
NEI4 $892
line 1561
;1561:			s = "Free For All";
ADDRLP4 4
ADDRGP4 $895
ASGNP4
line 1562
;1562:		} else if (cgs.gametype == GT_TEAM) {
ADDRGP4 $893
JUMPV
LABELV $892
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
NEI4 $896
line 1563
;1563:			s = "Team Deathmatch";
ADDRLP4 4
ADDRGP4 $899
ASGNP4
line 1564
;1564:		} else if (cgs.gametype == GT_CA) {
ADDRGP4 $897
JUMPV
LABELV $896
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 4
NEI4 $900
line 1565
;1565:			s = "Clan Arena";
ADDRLP4 4
ADDRGP4 $903
ASGNP4
line 1566
;1566:		} else if (cgs.gametype == GT_CTF) {
ADDRGP4 $901
JUMPV
LABELV $900
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $904
line 1567
;1567:			s = "Capture the Flag";
ADDRLP4 4
ADDRGP4 $907
ASGNP4
line 1568
;1568:		} else if (cgs.gametype == GT_ONEFLAG) {
ADDRGP4 $905
JUMPV
LABELV $904
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $908
line 1569
;1569:			s = "One Flag";
ADDRLP4 4
ADDRGP4 $911
ASGNP4
line 1570
;1570:		} else if (cgs.gametype == GT_OBELISK) {
ADDRGP4 $909
JUMPV
LABELV $908
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 7
NEI4 $912
line 1571
;1571:			s = "Overload";
ADDRLP4 4
ADDRGP4 $915
ASGNP4
line 1572
;1572:		} else if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 $913
JUMPV
LABELV $912
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $916
line 1573
;1573:			s = "Harvester";
ADDRLP4 4
ADDRGP4 $919
ASGNP4
line 1574
;1574:		} else {
ADDRGP4 $917
JUMPV
LABELV $916
line 1575
;1575:			s = "";
ADDRLP4 4
ADDRGP4 $920
ASGNP4
line 1576
;1576:		}
LABELV $917
LABELV $913
LABELV $909
LABELV $905
LABELV $901
LABELV $897
LABELV $893
line 1578
;1577:
;1578:		w = CG_Text_Width(s, 0.6f, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 1058642330
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 28
INDIRF4
CVFI4 4
ASGNI4
line 1579
;1579:		CG_Text_Paint(HALFSCR_WIDTH - w / 2, 90, 0.6f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWEDMORE, 0, WIDESCREEN_STRETCH); //, mRect);
CNSTI4 320
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1058642330
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 6
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1580
;1580:	}
LABELV $873
line 1582
;1581:
;1582:	if (cg.warmupCount <= 0)
ADDRGP4 cg+125756
INDIRI4
CNSTI4 0
GTI4 $921
line 1583
;1583:		return;
ADDRGP4 $864
JUMPV
LABELV $921
line 1585
;1584:
;1585:	s = va("Starts in: %i", cg.warmupCount);
ADDRGP4 $924
ARGP4
ADDRGP4 cg+125756
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
ASGNP4
line 1587
;1586:
;1587:	switch (cg.warmupCount) {
ADDRLP4 32
ADDRGP4 cg+125756
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 1
EQI4 $929
ADDRLP4 32
INDIRI4
CNSTI4 2
EQI4 $930
ADDRLP4 32
INDIRI4
CNSTI4 3
EQI4 $931
ADDRGP4 $926
JUMPV
LABELV $929
line 1589
;1588:	case 1:
;1589:		cw = 28;
ADDRLP4 24
CNSTI4 28
ASGNI4
line 1590
;1590:		scale = 0.54f;
ADDRLP4 20
CNSTF4 1057635697
ASGNF4
line 1591
;1591:		break;
ADDRGP4 $927
JUMPV
LABELV $930
line 1593
;1592:	case 2:
;1593:		cw = 24;
ADDRLP4 24
CNSTI4 24
ASGNI4
line 1594
;1594:		scale = 0.51f;
ADDRLP4 20
CNSTF4 1057132380
ASGNF4
line 1595
;1595:		break;
ADDRGP4 $927
JUMPV
LABELV $931
line 1597
;1596:	case 3:
;1597:		cw = 20;
ADDRLP4 24
CNSTI4 20
ASGNI4
line 1598
;1598:		scale = 0.48f;
ADDRLP4 20
CNSTF4 1056293519
ASGNF4
line 1599
;1599:		break;
ADDRGP4 $927
JUMPV
LABELV $926
line 1601
;1600:	default:
;1601:		cw = 16;
ADDRLP4 24
CNSTI4 16
ASGNI4
line 1602
;1602:		scale = 0.45f;
ADDRLP4 20
CNSTF4 1055286886
ASGNF4
line 1603
;1603:		break;
LABELV $927
line 1606
;1604:	}
;1605:
;1606:	w = CG_Text_Width(s, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 36
INDIRF4
CVFI4 4
ASGNI4
line 1607
;1607:	CG_Text_Paint(HALFSCR_WIDTH - w / 2, 125, scale, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWEDMORE, 0, WIDESCREEN_STRETCH); //, mRect);
CNSTI4 320
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1123680256
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 6
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1608
;1608:}
LABELV $864
endproc CG_DrawWarmup 40 40
proc CG_Draw2D 24 36
line 1619
;1609:
;1610:
;1611://==================================================================================
;1612:
;1613:
;1614:/*
;1615:=================
;1616:CG_Draw2D
;1617:=================
;1618:*/
;1619:static void CG_Draw2D(stereoFrame_t stereoFrame) {
line 1621
;1620:	// if we are taking a levelshot for the menu, don't draw anything
;1621:	if (cg.levelShot) {
ADDRGP4 cg+12
INDIRI4
CNSTI4 0
EQI4 $933
line 1622
;1622:		return;
ADDRGP4 $932
JUMPV
LABELV $933
line 1625
;1623:	}
;1624:
;1625:	if (cg_draw2D.integer == 0) {
ADDRGP4 cg_draw2D+12
INDIRI4
CNSTI4 0
NEI4 $936
line 1626
;1626:		return;
ADDRGP4 $932
JUMPV
LABELV $936
line 1629
;1627:	}
;1628:
;1629:	if (cg.snap->ps.pm_type == PM_INTERMISSION) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 5
NEI4 $939
line 1630
;1630:		CG_DrawIntermission();
ADDRGP4 CG_DrawIntermission
CALLV
pop
line 1631
;1631:		return;
ADDRGP4 $932
JUMPV
LABELV $939
line 1634
;1632:	}
;1633:
;1634:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $942
line 1635
;1635:		CG_DrawSpectator();
ADDRGP4 CG_DrawSpectator
CALLV
pop
line 1636
;1636:		CG_DrawCrosshair();
ADDRGP4 CG_DrawCrosshair
CALLV
pop
line 1637
;1637:		CG_DrawCrosshairNames();
ADDRGP4 CG_DrawCrosshairNames
CALLV
pop
line 1638
;1638:	} else {
ADDRGP4 $943
JUMPV
LABELV $942
line 1640
;1639:		// don't draw any status if dead or the scoreboard is being explicitly shown
;1640:		if (!cg.showScores && cg.snap->ps.stats[STAT_HEALTH] > 0) {
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $945
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $945
line 1642
;1641:
;1642:			if (cg_drawStatus.integer) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
EQI4 $949
line 1643
;1643:				Menu_PaintAll();
ADDRGP4 Menu_PaintAll
CALLV
pop
line 1644
;1644:			}
LABELV $949
line 1646
;1645:
;1646:			CG_DrawAmmoWarning();
ADDRGP4 CG_DrawAmmoWarning
CALLV
pop
line 1648
;1647:
;1648:			CG_DrawProxWarning();
ADDRGP4 CG_DrawProxWarning
CALLV
pop
line 1649
;1649:			CG_DrawCrosshair();
ADDRGP4 CG_DrawCrosshair
CALLV
pop
line 1650
;1650:			CG_DrawCrosshairNames();
ADDRGP4 CG_DrawCrosshairNames
CALLV
pop
line 1651
;1651:			CG_DrawWeaponSelect();
ADDRGP4 CG_DrawWeaponSelect
CALLV
pop
line 1653
;1652:
;1653:			CG_DrawReward();
ADDRGP4 CG_DrawReward
CALLV
pop
line 1654
;1654:		}
LABELV $945
line 1655
;1655:	}
LABELV $943
line 1657
;1656:
;1657:	CG_DrawVote();
ADDRGP4 CG_DrawVote
CALLV
pop
line 1659
;1658:
;1659:	CG_DrawLagometer();
ADDRGP4 CG_DrawLagometer
CALLV
pop
line 1661
;1660:
;1661:	if (!cg_paused.integer) {
ADDRGP4 cg_paused+12
INDIRI4
CNSTI4 0
NEI4 $952
line 1662
;1662:		CG_DrawUpperRight(stereoFrame);
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawUpperRight
CALLV
pop
line 1663
;1663:	}
LABELV $952
line 1665
;1664:
;1665:	if (!CG_DrawFollow()) {
ADDRLP4 0
ADDRGP4 CG_DrawFollow
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $955
line 1666
;1666:		CG_DrawWarmup();
ADDRGP4 CG_DrawWarmup
CALLV
pop
line 1667
;1667:	}
LABELV $955
line 1670
;1668:
;1669:	// don't draw center string if scoreboard is up
;1670:	cg.scoreBoardShowing = CG_DrawScoreboard();
ADDRLP4 4
ADDRGP4 CG_DrawScoreboard
CALLI4
ASGNI4
ADDRGP4 cg+115360
ADDRLP4 4
INDIRI4
ASGNI4
line 1671
;1671:	if (!cg.scoreBoardShowing) {
ADDRGP4 cg+115360
INDIRI4
CNSTI4 0
NEI4 $958
line 1672
;1672:		CG_DrawCenterString();
ADDRGP4 CG_DrawCenterString
CALLV
pop
line 1673
;1673:	}
LABELV $958
line 1675
;1674:
;1675:	if (cgs.score_catched) {
ADDRGP4 cgs+148016
INDIRI4
CNSTI4 0
EQI4 $961
line 1677
;1676:		float x, y, w, h;
;1677:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1678
;1678:		x = cgs.cursorX - 12;
ADDRLP4 8
ADDRGP4 cgs+146612
INDIRI4
CNSTI4 12
SUBI4
CVIF4 4
ASGNF4
line 1679
;1679:		y = cgs.cursorY - 12;
ADDRLP4 12
ADDRGP4 cgs+146616
INDIRI4
CNSTI4 12
SUBI4
CVIF4 4
ASGNF4
line 1680
;1680:		w = 24;
ADDRLP4 16
CNSTF4 1103101952
ASGNF4
line 1681
;1681:		h = 24;
ADDRLP4 20
CNSTF4 1103101952
ASGNF4
line 1682
;1682:		CG_AdjustFrom640(&x, &y, &w, &h);
ADDRLP4 8
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 1683
;1683:		trap_R_DrawStretchPic(x, y, w, h, 0, 0, 1, 1, cgs.media.cursor);
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 cgs+146664+1272
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1684
;1684:	}
LABELV $961
line 1685
;1685:}
LABELV $932
endproc CG_Draw2D 24 36
proc CG_DrawTourneyScoreboard 0 0
line 1688
;1686:
;1687:
;1688:static void CG_DrawTourneyScoreboard(void) {
line 1690
;1689:
;1690:}
LABELV $968
endproc CG_DrawTourneyScoreboard 0 0
proc CG_CalculatePing 16 0
line 1693
;1691:
;1692:
;1693:static void CG_CalculatePing(void) {
line 1696
;1694:	int count, i, v;
;1695:
;1696:	cg.meanPing = 0;
ADDRGP4 cg+156996
CNSTI4 0
ASGNI4
line 1698
;1697:
;1698:	for (i = 0, count = 0; i < LAG_SAMPLES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $974
JUMPV
LABELV $971
line 1700
;1699:
;1700:		v = lagometer.snapshotSamples[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+1028
ADDP4
INDIRI4
ASGNI4
line 1701
;1701:		if (v >= 0) {
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $976
line 1702
;1702:			cg.meanPing += v;
ADDRLP4 12
ADDRGP4 cg+156996
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 1703
;1703:			count++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1704
;1704:		}
LABELV $976
line 1706
;1705:
;1706:	}
LABELV $972
line 1698
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $974
ADDRLP4 0
INDIRI4
CNSTI4 128
LTI4 $971
line 1708
;1707:
;1708:	if (count) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $979
line 1709
;1709:		cg.meanPing /= count;
ADDRLP4 12
ADDRGP4 cg+156996
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
DIVI4
ASGNI4
line 1710
;1710:	}
LABELV $979
line 1711
;1711:}
LABELV $969
endproc CG_CalculatePing 16 0
proc CG_WarmupEvents 8 12
line 1714
;1712:
;1713:
;1714:static void CG_WarmupEvents(void) {
line 1718
;1715:
;1716:	int	count;
;1717:
;1718:	if (!cg.warmup)
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
NEI4 $983
line 1719
;1719:		return;
ADDRGP4 $982
JUMPV
LABELV $983
line 1721
;1720:
;1721:	if (cg.warmup < 0) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
GEI4 $986
line 1722
;1722:		cg.warmupCount = -1;
ADDRGP4 cg+125756
CNSTI4 -1
ASGNI4
line 1723
;1723:		return;
ADDRGP4 $982
JUMPV
LABELV $986
line 1726
;1724:	}
;1725:
;1726:	if (cg.warmup < cg.time) {
ADDRGP4 cg+125752
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $990
line 1727
;1727:		cg.warmup = 0;
ADDRGP4 cg+125752
CNSTI4 0
ASGNI4
line 1728
;1728:		count = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1729
;1729:	} else {
ADDRGP4 $991
JUMPV
LABELV $990
line 1730
;1730:		count = (cg.warmup - cg.time + 999) / 1000;
ADDRLP4 0
ADDRGP4 cg+125752
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 999
ADDI4
CNSTI4 1000
DIVI4
ASGNI4
line 1731
;1731:	}
LABELV $991
line 1733
;1732:
;1733:	if (cg.warmupCount == -2 && cg.demoPlayback) {
ADDRGP4 cg+125756
INDIRI4
CNSTI4 -2
NEI4 $997
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $997
line 1734
;1734:		cg.warmupCount = 0;
ADDRGP4 cg+125756
CNSTI4 0
ASGNI4
line 1735
;1735:	}
LABELV $997
line 1737
;1736:
;1737:	if (cg.warmupCount == count) {
ADDRGP4 cg+125756
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1002
line 1738
;1738:		return;
ADDRGP4 $982
JUMPV
LABELV $1002
line 1741
;1739:	}
;1740:
;1741:	cg.warmupCount = count;
ADDRGP4 cg+125756
ADDRLP4 0
INDIRI4
ASGNI4
line 1742
;1742:	cg.timelimitWarnings = 0;
ADDRGP4 cg+107616
CNSTI4 0
ASGNI4
line 1744
;1743:
;1744:	switch (count) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $1008
ADDRLP4 0
INDIRI4
CNSTI4 3
GTI4 $1008
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1028
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1028
address $1009
address $1019
address $1022
address $1025
code
LABELV $1009
line 1746
;1745:	case 0:
;1746:		if (cg.warmupFightSound <= cg.time) {
ADDRGP4 cg+125760
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GTI4 $1010
line 1747
;1747:			trap_S_StartLocalSound(cgs.media.countFightSound, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1232
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1748
;1748:			cg.warmupFightSound = cg.time + 750;
ADDRGP4 cg+125760
ADDRGP4 cg+107604
INDIRI4
CNSTI4 750
ADDI4
ASGNI4
line 1749
;1749:		}
LABELV $1010
line 1750
;1750:		CG_CenterPrint("FIGHT!", 120, GIANTCHAR_WIDTH * 2);
ADDRGP4 $1018
ARGP4
CNSTI4 120
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1751
;1751:		break;
ADDRGP4 $1008
JUMPV
LABELV $1019
line 1754
;1752:
;1753:	case 1:
;1754:		trap_S_StartLocalSound(cgs.media.count1Sound, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1228
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1755
;1755:		break;
ADDRGP4 $1008
JUMPV
LABELV $1022
line 1758
;1756:
;1757:	case 2:
;1758:		trap_S_StartLocalSound(cgs.media.count2Sound, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1224
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1759
;1759:		break;
ADDRGP4 $1008
JUMPV
LABELV $1025
line 1762
;1760:
;1761:	case 3:
;1762:		trap_S_StartLocalSound(cgs.media.count3Sound, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1220
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1763
;1763:		break;
line 1766
;1764:
;1765:	default:
;1766:		break;
LABELV $1008
line 1768
;1767:	}
;1768:}
LABELV $982
endproc CG_WarmupEvents 8 12
export CG_WarmupEvent
proc CG_WarmupEvent 0 0
line 1773
;1769:
;1770:
;1771:
;1772:// will be called on warmup end and when client changed
;1773:void CG_WarmupEvent(void) {
line 1775
;1774:
;1775:	cg.attackerTime = 0;
ADDRGP4 cg+125524
CNSTI4 0
ASGNI4
line 1776
;1776:	cg.attackerName[0] = '\0';
ADDRGP4 cg+125488
CNSTI1 0
ASGNI1
line 1778
;1777:
;1778:	cg.itemPickupTime = 0;
ADDRGP4 cg+125772
CNSTI4 0
ASGNI4
line 1779
;1779:	cg.itemPickupBlendTime = 0;
ADDRGP4 cg+125776
CNSTI4 0
ASGNI4
line 1780
;1780:	cg.itemPickupCount = 0;
ADDRGP4 cg+125768
CNSTI4 0
ASGNI4
line 1782
;1781:
;1782:	cg.killerTime = 0;
ADDRGP4 cg+115432
CNSTI4 0
ASGNI4
line 1783
;1783:	cg.killerName[0] = '\0';
ADDRGP4 cg+115368
CNSTI1 0
ASGNI1
line 1785
;1784:
;1785:	cg.damageTime = 0;
ADDRGP4 cg+125792
CNSTI4 0
ASGNI4
line 1787
;1786:
;1787:	cg.rewardStack = 0;
ADDRGP4 cg+125528
CNSTI4 0
ASGNI4
line 1788
;1788:	cg.rewardTime = 0;
ADDRGP4 cg+125532
CNSTI4 0
ASGNI4
line 1790
;1789:
;1790:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125780
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1792
;1791:
;1792:	cg.lowAmmoWarning = 0;
ADDRGP4 cg+125464
CNSTI4 0
ASGNI4
line 1794
;1793:
;1794:	cg.followTime = 0;
ADDRGP4 cg+157008
CNSTI4 0
ASGNI4
line 1795
;1795:}
LABELV $1029
endproc CG_WarmupEvent 0 0
proc CG_ApplyClientChange 0 0
line 1799
;1796:
;1797:
;1798:// called each time client team changed
;1799:static void CG_ApplyClientChange(void) {
line 1800
;1800:	CG_WarmupEvent();
ADDRGP4 CG_WarmupEvent
CALLV
pop
line 1801
;1801:	CG_ForceModelChange();
ADDRGP4 CG_ForceModelChange
CALLV
pop
line 1802
;1802:}
LABELV $1044
endproc CG_ApplyClientChange 0 0
data
align 4
LABELV $1046
byte 4 -1
align 4
LABELV $1047
byte 4 -1
align 4
LABELV $1048
byte 4 -1
export CG_TrackClientTeamChange
code
proc CG_TrackClientTeamChange 8 4
line 1810
;1803:
;1804:
;1805:/*
;1806:=====================
;1807:CG_TrackClientTeamChange
;1808:=====================
;1809:*/
;1810:void CG_TrackClientTeamChange(void) {
line 1818
;1811:	static int spec_client = -1;
;1812:	static int spec_team = -1;
;1813:	static int curr_team = -1;
;1814:
;1815:	int		ti; // team from clientinfo 
;1816:	int		tp; // persistant team from snapshot
;1817:
;1818:	if (!cg.snap)
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1049
line 1819
;1819:		return;
ADDRGP4 $1045
JUMPV
LABELV $1049
line 1821
;1820:
;1821:	tp = cg.snap->ps.persistant[PERS_TEAM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ASGNI4
line 1822
;1822:	ti = cgs.clientinfo[cg.snap->ps.clientNum].team;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
ASGNI4
line 1824
;1823:
;1824:	if (!(cg.snap->ps.pm_flags & PMF_FOLLOW) && tp != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1056
ADDRLP4 0
INDIRI4
CNSTI4 3
EQI4 $1056
line 1825
;1825:		ti = tp; // use team from persistant info
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 1826
;1826:	}
LABELV $1056
line 1829
;1827:
;1828:	// team changed
;1829:	if (curr_team != ti) {
ADDRGP4 $1048
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1059
line 1830
;1830:		curr_team = ti;
ADDRGP4 $1048
ADDRLP4 4
INDIRI4
ASGNI4
line 1831
;1831:		spec_client = cg.snap->ps.clientNum;
ADDRGP4 $1046
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 1832
;1832:		spec_team = tp;
ADDRGP4 $1047
ADDRLP4 0
INDIRI4
ASGNI4
line 1834
;1833:
;1834:		if (spec_team == TEAM_SPECTATOR)
ADDRGP4 $1047
INDIRI4
CNSTI4 3
NEI4 $1062
line 1835
;1835:			spec_team = curr_team;
ADDRGP4 $1047
ADDRGP4 $1048
INDIRI4
ASGNI4
LABELV $1062
line 1837
;1836:
;1837:		CG_ApplyClientChange();
ADDRGP4 CG_ApplyClientChange
CALLV
pop
line 1838
;1838:		CG_ResetPlayerEntity(&cg.predictedPlayerEntity);
ADDRGP4 cg+108104
ARGP4
ADDRGP4 CG_ResetPlayerEntity
CALLV
pop
line 1839
;1839:		return;
ADDRGP4 $1045
JUMPV
LABELV $1059
line 1842
;1840:	}
;1841:
;1842:	if (curr_team == TEAM_SPECTATOR) {
ADDRGP4 $1048
INDIRI4
CNSTI4 3
NEI4 $1065
line 1843
;1843:		if (spec_team != tp) {
ADDRGP4 $1047
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1067
line 1844
;1844:			spec_team = tp;
ADDRGP4 $1047
ADDRLP4 0
INDIRI4
ASGNI4
line 1845
;1845:			spec_client = cg.snap->ps.clientNum;
ADDRGP4 $1046
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 1847
;1846:
;1847:			CG_ApplyClientChange();
ADDRGP4 CG_ApplyClientChange
CALLV
pop
line 1848
;1848:			CG_ResetPlayerEntity(&cg.predictedPlayerEntity);
ADDRGP4 cg+108104
ARGP4
ADDRGP4 CG_ResetPlayerEntity
CALLV
pop
line 1849
;1849:			return;
ADDRGP4 $1045
JUMPV
LABELV $1067
line 1852
;1850:		}
;1851:
;1852:		if (cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $1071
line 1853
;1853:			spec_client = cg.snap->ps.clientNum;
ADDRGP4 $1046
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 1854
;1854:			return;
ADDRGP4 $1045
JUMPV
LABELV $1071
line 1857
;1855:		}
;1856:		// pass through to spec client checks
;1857:	}
LABELV $1065
line 1859
;1858:
;1859:	if (spec_client != cg.snap->ps.clientNum) {
ADDRGP4 $1046
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
EQI4 $1075
line 1860
;1860:		spec_client = cg.snap->ps.clientNum;
ADDRGP4 $1046
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 1861
;1861:		spec_team = tp;
ADDRGP4 $1047
ADDRLP4 0
INDIRI4
ASGNI4
line 1863
;1862:
;1863:		if (spec_team == TEAM_SPECTATOR)
ADDRGP4 $1047
INDIRI4
CNSTI4 3
NEI4 $1079
line 1864
;1864:			spec_team = cgs.clientinfo[cg.snap->ps.clientNum].team;
ADDRGP4 $1047
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
ASGNI4
LABELV $1079
line 1866
;1865:
;1866:		CG_ApplyClientChange();
ADDRGP4 CG_ApplyClientChange
CALLV
pop
line 1867
;1867:		CG_ResetPlayerEntity(&cg.predictedPlayerEntity);
ADDRGP4 cg+108104
ARGP4
ADDRGP4 CG_ResetPlayerEntity
CALLV
pop
line 1868
;1868:	}
LABELV $1075
line 1869
;1869:}
LABELV $1045
endproc CG_TrackClientTeamChange 8 4
export CG_DrawActive
proc CG_DrawActive 0 4
line 1879
;1870:
;1871:
;1872:/*
;1873:=====================
;1874:CG_DrawActive
;1875:
;1876:Perform all drawing needed to completely fill the screen
;1877:=====================
;1878:*/
;1879:void CG_DrawActive(stereoFrame_t stereoView) {
line 1881
;1880:	// optionally draw the info screen instead
;1881:	if (!cg.snap) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1086
line 1882
;1882:		CG_DrawInformation();
ADDRGP4 CG_DrawInformation
CALLV
pop
line 1883
;1883:		return;
ADDRGP4 $1085
JUMPV
LABELV $1086
line 1886
;1884:	}
;1885:
;1886:	if (!cg.demoPlayback) {
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
NEI4 $1089
line 1887
;1887:		CG_CalculatePing();
ADDRGP4 CG_CalculatePing
CALLV
pop
line 1888
;1888:	}
LABELV $1089
line 1891
;1889:
;1890:	// optionally draw the tournement scoreboard instead
;1891:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR &&
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1092
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $1092
line 1892
;1892:		(cg.snap->ps.pm_flags & PMF_SCOREBOARD)) {
line 1893
;1893:		CG_DrawTourneyScoreboard();
ADDRGP4 CG_DrawTourneyScoreboard
CALLV
pop
line 1894
;1894:		return;
ADDRGP4 $1085
JUMPV
LABELV $1092
line 1898
;1895:	}
;1896:
;1897:	// clear around the rendered view if sized down
;1898:	CG_TileClear();
ADDRGP4 CG_TileClear
CALLV
pop
line 1901
;1899:
;1900:	// draw 3D view
;1901:	trap_R_RenderScene(&cg.refdef);
ADDRGP4 cg+109056
ARGP4
ADDRGP4 trap_R_RenderScene
CALLV
pop
line 1904
;1902:
;1903:	// play warmup sounds and display text
;1904:	CG_WarmupEvents();
ADDRGP4 CG_WarmupEvents
CALLV
pop
line 1907
;1905:
;1906:	// draw status bar and other floating elements
;1907:	CG_Draw2D(stereoView);
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Draw2D
CALLV
pop
line 1908
;1908:}
LABELV $1085
endproc CG_DrawActive 0 4
bss
export lagometer
align 4
LABELV lagometer
skip 1544
import cgDC
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseArmorTiered
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_OwnerDraw
export teamChat2
align 1
LABELV teamChat2
skip 256
export teamChat1
align 1
LABELV teamChat1
skip 256
export systemChat
align 1
LABELV systemChat
skip 256
import drawTeamOverlayModificationCount
export numSortedTeamPlayers
align 4
LABELV numSortedTeamPlayers
skip 4
export sortedTeamPlayers
align 4
LABELV sortedTeamPlayers
skip 128
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawStretchPic
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_armorTiered
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import gametypeString
import mRect
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import UI_SelectForKey
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_HandleCapture
import Menu_New
import Menu_Count
import Q_MathScript
import MenuVar_Get
import MenuVar_Set
import PC_Parenthesis_Parse
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Item_Init
import Menu_Init
import Init_Display
import String_Report
import String_Init
import String_Alloc
import DefaultWideScreenValue
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1018
byte 1 70
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 33
byte 1 0
align 1
LABELV $924
byte 1 83
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $920
byte 1 0
align 1
LABELV $919
byte 1 72
byte 1 97
byte 1 114
byte 1 118
byte 1 101
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $915
byte 1 79
byte 1 118
byte 1 101
byte 1 114
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $911
byte 1 79
byte 1 110
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $907
byte 1 67
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $903
byte 1 67
byte 1 108
byte 1 97
byte 1 110
byte 1 32
byte 1 65
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 0
align 1
LABELV $899
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 68
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 109
byte 1 97
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $895
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 65
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $891
byte 1 37
byte 1 115
byte 1 32
byte 1 118
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $871
byte 1 87
byte 1 97
byte 1 105
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 0
align 1
LABELV $862
byte 1 89
byte 1 79
byte 1 85
byte 1 32
byte 1 72
byte 1 65
byte 1 86
byte 1 69
byte 1 32
byte 1 66
byte 1 69
byte 1 69
byte 1 78
byte 1 32
byte 1 77
byte 1 73
byte 1 78
byte 1 69
byte 1 68
byte 1 0
align 1
LABELV $861
byte 1 73
byte 1 78
byte 1 84
byte 1 69
byte 1 82
byte 1 78
byte 1 65
byte 1 76
byte 1 32
byte 1 67
byte 1 79
byte 1 77
byte 1 66
byte 1 85
byte 1 83
byte 1 84
byte 1 73
byte 1 79
byte 1 78
byte 1 32
byte 1 73
byte 1 78
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $844
byte 1 76
byte 1 79
byte 1 87
byte 1 32
byte 1 65
byte 1 77
byte 1 77
byte 1 79
byte 1 32
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 0
align 1
LABELV $843
byte 1 79
byte 1 85
byte 1 84
byte 1 32
byte 1 79
byte 1 70
byte 1 32
byte 1 65
byte 1 77
byte 1 77
byte 1 79
byte 1 0
align 1
LABELV $828
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $811
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 95
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 0
align 1
LABELV $810
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 95
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 0
align 1
LABELV $777
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 69
byte 1 83
byte 1 67
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 86
byte 1 111
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $772
byte 1 86
byte 1 79
byte 1 84
byte 1 69
byte 1 40
byte 1 37
byte 1 105
byte 1 41
byte 1 58
byte 1 37
byte 1 115
byte 1 32
byte 1 121
byte 1 101
byte 1 115
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 110
byte 1 111
byte 1 58
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $757
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 69
byte 1 83
byte 1 67
byte 1 32
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 117
byte 1 115
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 74
byte 1 79
byte 1 73
byte 1 78
byte 1 32
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 0
align 1
LABELV $752
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 0
align 1
LABELV $747
byte 1 83
byte 1 80
byte 1 69
byte 1 67
byte 1 84
byte 1 65
byte 1 84
byte 1 79
byte 1 82
byte 1 0
align 1
LABELV $621
byte 1 37
byte 1 105
byte 1 109
byte 1 115
byte 1 0
align 1
LABELV $617
byte 1 115
byte 1 110
byte 1 99
byte 1 0
align 1
LABELV $549
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 110
byte 1 101
byte 1 116
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $542
byte 1 67
byte 1 111
byte 1 110
byte 1 110
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 73
byte 1 110
byte 1 116
byte 1 101
byte 1 114
byte 1 114
byte 1 117
byte 1 112
byte 1 116
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $511
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $437
byte 1 37
byte 1 51
byte 1 105
byte 1 32
byte 1 37
byte 1 51
byte 1 105
byte 1 0
align 1
LABELV $434
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $364
byte 1 37
byte 1 105
byte 1 58
byte 1 37
byte 1 48
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $359
byte 1 37
byte 1 105
byte 1 102
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $342
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 115
byte 1 110
byte 1 97
byte 1 112
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 99
byte 1 109
byte 1 100
byte 1 58
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $335
byte 1 37
byte 1 49
byte 1 46
byte 1 48
byte 1 102
byte 1 117
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $326
byte 1 110
byte 1 0
