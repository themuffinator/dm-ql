code
proc CG_ParseScores 208 12
file "..\..\..\..\code\cgame\cg_servercmds.c"
line 17
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;4:// these are processed at snapshot transition time, so there will definately
;5:// be a valid snapshot this frame
;6:
;7:#include "cg_local.h"
;8:
;9:#include "../../ui/menudef.h" // bk001205 - for Q3_ui as well
;10:
;11:/*
;12:=================
;13:CG_ParseScores
;14:
;15:=================
;16:*/
;17:static void CG_ParseScores(void) {
line 20
;18:	int		i, powerups;
;19:
;20:	cg.numScores = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110476
ADDRLP4 12
INDIRI4
ASGNI4
line 21
;21:	if (cg.numScores > MAX_CLIENTS) {
ADDRGP4 cg+110476
INDIRI4
CNSTI4 64
LEI4 $75
line 22
;22:		cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+110476
CNSTI4 64
ASGNI4
line 23
;23:	}
LABELV $75
line 25
;24:
;25:	cg.teamScores[0] = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110484
ADDRLP4 20
INDIRI4
ASGNI4
line 26
;26:	cg.teamScores[1] = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110484+4
ADDRLP4 28
INDIRI4
ASGNI4
line 28
;27:
;28:	memset(cg.scores, 0, sizeof(cg.scores));
ADDRGP4 cg+110492
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4864
ARGI4
ADDRGP4 memset
CALLP4
pop
line 29
;29:	for (i = 0; i < cg.numScores; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $87
JUMPV
LABELV $84
line 31
;30:		//
;31:		cg.scores[i].client = atoi(CG_Argv(i * 14 + 4));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 32
;32:		cg.scores[i].score = atoi(CG_Argv(i * 14 + 5));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+4
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 33
;33:		cg.scores[i].ping = atoi(CG_Argv(i * 14 + 6));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+8
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 34
;34:		cg.scores[i].time = atoi(CG_Argv(i * 14 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 72
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+12
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 35
;35:		cg.scores[i].scoreFlags = atoi(CG_Argv(i * 14 + 8));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+16
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 36
;36:		powerups = atoi(CG_Argv(i * 14 + 9));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 92
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 96
INDIRI4
ASGNI4
line 37
;37:		cg.scores[i].accuracy = atoi(CG_Argv(i * 14 + 10));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+24
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 38
;38:		cg.scores[i].impressiveCount = atoi(CG_Argv(i * 14 + 11));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 116
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+28
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 39
;39:		cg.scores[i].excellentCount = atoi(CG_Argv(i * 14 + 12));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+32
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 40
;40:		cg.scores[i].gauntletCount = atoi(CG_Argv(i * 14 + 13));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+36
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 41
;41:		cg.scores[i].defendCount = atoi(CG_Argv(i * 14 + 14));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 14
ADDI4
ARGI4
ADDRLP4 152
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+40
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 42
;42:		cg.scores[i].assistCount = atoi(CG_Argv(i * 14 + 15));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 164
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+44
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 43
;43:		cg.scores[i].perfect = atoi(CG_Argv(i * 14 + 16));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 16
ADDI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+52
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 44
;44:		cg.scores[i].captures = atoi(CG_Argv(i * 14 + 17));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 17
ADDI4
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+48
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 46
;45:
;46:		if (cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS) {
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 0
LTI4 $118
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 64
LTI4 $114
LABELV $118
line 47
;47:			cg.scores[i].client = 0;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
CNSTI4 0
ASGNI4
line 48
;48:		}
LABELV $114
line 49
;49:		cgs.clientinfo[cg.scores[i].client].score = cg.scores[i].score;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+68
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+4
ADDP4
INDIRI4
ASGNI4
line 50
;50:		cgs.clientinfo[cg.scores[i].client].powerups = powerups;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+108
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 52
;51:
;52:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+56
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
ASGNI4
line 53
;53:	}
LABELV $85
line 29
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $87
ADDRLP4 0
INDIRI4
ADDRGP4 cg+110476
INDIRI4
LTI4 $84
line 54
;54:	CG_SetScoreSelection(NULL);
CNSTP4 0
ARGP4
ADDRGP4 CG_SetScoreSelection
CALLV
pop
line 55
;55:}
LABELV $73
endproc CG_ParseScores 208 12
proc CG_ParseTeamInfo 64 4
line 63
;56:
;57:
;58:/*
;59:=================
;60:CG_ParseTeamInfo
;61:=================
;62:*/
;63:static void CG_ParseTeamInfo(void) {
line 67
;64:	int		i;
;65:	int		client;
;66:
;67:	numSortedTeamPlayers = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 68
;68:	if ((unsigned)numSortedTeamPlayers > TEAM_MAXOVERLAY)
ADDRGP4 numSortedTeamPlayers
INDIRI4
CVIU4 4
CNSTU4 32
LEU4 $134
line 69
;69:		numSortedTeamPlayers = TEAM_MAXOVERLAY;
ADDRGP4 numSortedTeamPlayers
CNSTI4 32
ASGNI4
LABELV $134
line 71
;70:
;71:	for (i = 0; i < numSortedTeamPlayers; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $139
JUMPV
LABELV $136
line 72
;72:		client = atoi(CG_Argv(i * 6 + 2));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 73
;73:		if ((unsigned)client >= MAX_CLIENTS)
ADDRLP4 4
INDIRI4
CVIU4 4
CNSTU4 64
LTU4 $140
line 74
;74:			continue;
ADDRGP4 $137
JUMPV
LABELV $140
line 76
;75:
;76:		sortedTeamPlayers[i] = client;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 78
;77:
;78:		cgs.clientinfo[client].location = atoi(CG_Argv(i * 6 + 3));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+72
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 79
;79:		cgs.clientinfo[client].health = atoi(CG_Argv(i * 6 + 4));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+76
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 80
;80:		cgs.clientinfo[client].armor = atoi(CG_Argv(i * 6 + 5));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+80
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 81
;81:		cgs.clientinfo[client].curWeapon = atoi(CG_Argv(i * 6 + 6));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+84
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 82
;82:		cgs.clientinfo[client].powerups = atoi(CG_Argv(i * 6 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+108
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 83
;83:	}
LABELV $137
line 71
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $139
ADDRLP4 0
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $136
line 84
;84:}
LABELV $133
endproc CG_ParseTeamInfo 64 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 84 16
line 95
;85:
;86:
;87:/*
;88:================
;89:CG_ParseServerinfo
;90:
;91:This is called explicitly when the gamestate is first received,
;92:and whenever the server updates any serverinfo flagged cvars
;93:================
;94:*/
;95:void CG_ParseServerinfo(void) {
line 99
;96:	const char *info;
;97:	char *mapname;
;98:
;99:	info = CG_ConfigString(CS_SERVERINFO);
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 100
;100:	cgs.gametype = atoi(Info_ValueForKey(info, "g_gametype"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $154
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31480
ADDRLP4 16
INDIRI4
ASGNI4
line 101
;101:	trap_Cvar_Set("ui_gametype", va("%i", cgs.gametype));
ADDRGP4 $156
ARGP4
ADDRGP4 cgs+31480
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $155
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 102
;102:	cgs.dmflags = atoi(Info_ValueForKey(info, "dmflags"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $159
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31484
ADDRLP4 28
INDIRI4
ASGNI4
line 103
;103:	cgs.teamflags = atoi(Info_ValueForKey(info, "teamflags"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $161
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31488
ADDRLP4 36
INDIRI4
ASGNI4
line 104
;104:	cgs.fraglimit = atoi(Info_ValueForKey(info, "fraglimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $163
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31492
ADDRLP4 44
INDIRI4
ASGNI4
line 105
;105:	cgs.capturelimit = atoi(Info_ValueForKey(info, "capturelimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $165
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31496
ADDRLP4 52
INDIRI4
ASGNI4
line 106
;106:	cgs.timelimit = atoi(Info_ValueForKey(info, "timelimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $167
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31500
ADDRLP4 60
INDIRI4
ASGNI4
line 107
;107:	cgs.maxclients = atoi(Info_ValueForKey(info, "sv_maxclients"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $169
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31504
ADDRLP4 68
INDIRI4
ASGNI4
line 108
;108:	mapname = Info_ValueForKey(info, "mapname");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $170
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 72
INDIRP4
ASGNP4
line 109
;109:	Com_sprintf(cgs.mapname, sizeof(cgs.mapname), "maps/%s.bsp", mapname);
ADDRGP4 cgs+31508
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $173
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 110
;110:	Q_strncpyz(cgs.redTeam, Info_ValueForKey(info, "g_redTeam"), sizeof(cgs.redTeam));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $175
ARGP4
ADDRLP4 76
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31572
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 111
;111:	Q_strncpyz(cgs.blueTeam, Info_ValueForKey(info, "g_blueTeam"), sizeof(cgs.blueTeam));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $178
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31636
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 112
;112:}
LABELV $152
endproc CG_ParseServerinfo 84 16
export CG_ParseSysteminfo
proc CG_ParseSysteminfo 40 8
line 115
;113:
;114:
;115:void CG_ParseSysteminfo(void) {
line 118
;116:	const char *info;
;117:
;118:	info = CG_ConfigString(CS_SYSTEMINFO);
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 120
;119:
;120:	cgs.pmove_fixed = (atoi(Info_ValueForKey(info, "pmove_fixed"))) ? qtrue : qfalse;
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $182
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $184
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $185
JUMPV
LABELV $184
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $185
ADDRGP4 cgs+147912
ADDRLP4 8
INDIRI4
ASGNI4
line 121
;121:	cgs.pmove_msec = atoi(Info_ValueForKey(info, "pmove_msec"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $187
ARGP4
ADDRLP4 20
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+147916
ADDRLP4 24
INDIRI4
ASGNI4
line 122
;122:	if (cgs.pmove_msec < 8) {
ADDRGP4 cgs+147916
INDIRI4
CNSTI4 8
GEI4 $188
line 123
;123:		cgs.pmove_msec = 8;
ADDRGP4 cgs+147916
CNSTI4 8
ASGNI4
line 124
;124:	} else if (cgs.pmove_msec > 33) {
ADDRGP4 $189
JUMPV
LABELV $188
ADDRGP4 cgs+147916
INDIRI4
CNSTI4 33
LEI4 $192
line 125
;125:		cgs.pmove_msec = 33;
ADDRGP4 cgs+147916
CNSTI4 33
ASGNI4
line 126
;126:	}
LABELV $192
LABELV $189
line 128
;127:
;128:	cgs.synchronousClients = (atoi(Info_ValueForKey(info, "g_synchronousClients"))) ? qtrue : qfalse;
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $197
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $199
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $200
JUMPV
LABELV $199
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $200
ADDRGP4 cgs+147920
ADDRLP4 28
INDIRI4
ASGNI4
line 129
;129:}
LABELV $180
endproc CG_ParseSysteminfo 40 8
export CG_ParseArmorTiered
proc CG_ParseArmorTiered 24 8
line 137
;130:
;131:
;132:/*
;133:================
;134:CG_ParseArmorTiered
;135:================
;136:*/
;137:void CG_ParseArmorTiered(void) {
line 138
;138:	const char *info = CG_ConfigString(CS_ARMOR_TIERED);
CNSTI4 683
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 139
;139:	cgs.armor_tiered = !!atoi(Info_ValueForKey(info, "armor_tiered"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $203
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $205
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $206
JUMPV
LABELV $205
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $206
ADDRGP4 cgs+147944
ADDRLP4 8
INDIRI4
ASGNI4
line 140
;140:	trap_Cvar_Set("cg_armorTiered", va("%i", cgs.armor_tiered));
ADDRGP4 $156
ARGP4
ADDRGP4 cgs+147944
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $207
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 141
;141:}
LABELV $201
endproc CG_ParseArmorTiered 24 8
proc CG_ParseWarmup 24 8
line 149
;142:
;143:
;144:/*
;145:==================
;146:CG_ParseWarmup
;147:==================
;148:*/
;149:static void CG_ParseWarmup(void) {
line 153
;150:	const char *info;
;151:	int			warmup;
;152:
;153:	info = CG_ConfigString(CS_WARMUP);
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 155
;154:
;155:	warmup = atoi(info);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 156
;156:	cg.warmupCount = -1;
ADDRGP4 cg+125756
CNSTI4 -1
ASGNI4
line 158
;157:
;158:	if (warmup) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $211
line 159
;159:		cg.timelimitWarnings |= 1 | 2 | 4;
ADDRLP4 16
ADDRGP4 cg+107616
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 7
BORI4
ASGNI4
line 160
;160:		cg.fraglimitWarnings |= 1 | 2 | 4;
ADDRLP4 20
ADDRGP4 cg+107620
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 7
BORI4
ASGNI4
line 161
;161:	}
LABELV $211
line 163
;162:
;163:	if (cg.clientFrame == 0) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $215
line 164
;164:		if (warmup == 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $217
line 165
;165:			if (cg.snap && (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR || cg.snap->ps.pm_flags & PMF_FOLLOW)) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $209
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $224
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $209
LABELV $224
line 167
;166:				// force sound playback in CG_WarmupEvents()
;167:				cg.warmup = cg.time;
ADDRGP4 cg+125752
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 168
;168:				cg.warmupCount = -2; // special value to silent FIGHT sound for demo playback
ADDRGP4 cg+125756
CNSTI4 -2
ASGNI4
line 169
;169:			}
line 170
;170:			return;
ADDRGP4 $209
JUMPV
LABELV $217
line 172
;171:		}
;172:	}
LABELV $215
line 174
;173:
;174:	if (warmup == 0 && cg.warmup) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $228
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
EQI4 $228
line 176
;175:
;176:	} else if (warmup > 0 && cg.warmup <= 0) {
ADDRGP4 $229
JUMPV
LABELV $228
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $231
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
GTI4 $231
line 177
;177:		if (cgs.gametype >= GT_CTF && cgs.gametype <= GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
LTI4 $234
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
GTI4 $234
line 178
;178:			trap_S_StartLocalSound(cgs.media.countPrepareTeamSound, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1172
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 179
;179:		} else {
ADDRGP4 $235
JUMPV
LABELV $234
line 180
;180:			if (cg.soundPlaying != cgs.media.countPrepareSound) {
ADDRGP4 cg+125748
INDIRI4
ADDRGP4 cgs+146664+1156
INDIRI4
EQI4 $240
line 181
;181:				CG_AddBufferedSound(-1);
CNSTI4 -1
ARGI4
ADDRGP4 CG_AddBufferedSound
CALLV
pop
line 182
;182:				CG_AddBufferedSound(cgs.media.countPrepareSound);
ADDRGP4 cgs+146664+1156
INDIRI4
ARGI4
ADDRGP4 CG_AddBufferedSound
CALLV
pop
line 183
;183:				cg.soundTime = cg.time + 1; // play in next frame
ADDRGP4 cg+125664
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 184
;184:			}
LABELV $240
line 185
;185:		}
LABELV $235
line 186
;186:	}
LABELV $231
LABELV $229
line 188
;187:
;188:	cg.warmup = warmup;
ADDRGP4 cg+125752
ADDRLP4 0
INDIRI4
ASGNI4
line 189
;189:}
LABELV $209
endproc CG_ParseWarmup 24 8
export CG_SetConfigValues
proc CG_SetConfigValues 32 4
line 199
;190:
;191:
;192:/*
;193:================
;194:CG_SetConfigValues
;195:
;196:Called on load to set the initial values from configure strings
;197:================
;198:*/
;199:void CG_SetConfigValues(void) {
line 202
;200:	const char *s;
;201:
;202:	cgs.scores1 = atoi(CG_ConfigString(CS_SCORES1));
CNSTI4 6
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32744
ADDRLP4 8
INDIRI4
ASGNI4
line 203
;203:	cgs.scores2 = atoi(CG_ConfigString(CS_SCORES2));
CNSTI4 7
ARGI4
ADDRLP4 12
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32748
ADDRLP4 16
INDIRI4
ASGNI4
line 204
;204:	cgs.levelStartTime = atoi(CG_ConfigString(CS_LEVEL_START_TIME));
CNSTI4 13
ARGI4
ADDRLP4 20
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32740
ADDRLP4 24
INDIRI4
ASGNI4
line 205
;205:	if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $254
line 206
;206:		s = CG_ConfigString(CS_FLAGSTATUS);
CNSTI4 658
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 207
;207:		cgs.redflag = s[0] - '0';
ADDRGP4 cgs+32752
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 208
;208:		cgs.blueflag = s[1] - '0';
ADDRGP4 cgs+32756
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 209
;209:	} else if (cgs.gametype == GT_1FCTF) {
ADDRGP4 $255
JUMPV
LABELV $254
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $259
line 210
;210:		s = CG_ConfigString(CS_FLAGSTATUS);
CNSTI4 658
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 211
;211:		cgs.flagStatus = s[0] - '0';
ADDRGP4 cgs+32760
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 212
;212:	}
LABELV $259
LABELV $255
line 213
;213:	CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 214
;214:}
LABELV $250
endproc CG_SetConfigValues 32 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 180 12
line 222
;215:
;216:
;217:/*
;218:=====================
;219:CG_ShaderStateChanged
;220:=====================
;221:*/
;222:void CG_ShaderStateChanged(void) {
line 229
;223:	char originalShader[MAX_QPATH];
;224:	char newShader[MAX_QPATH];
;225:	char timeOffset[16];
;226:	const char *o;
;227:	char *n, *t;
;228:
;229:	o = CG_ConfigString(CS_SHADERSTATE);
CNSTI4 665
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $265
JUMPV
LABELV $264
line 230
;230:	while (o && *o) {
line 231
;231:		n = strchr(o, '=');
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 61
ARGI4
ADDRLP4 160
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 232
;232:		if (n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $266
line 233
;233:			strncpy(originalShader, o, n - o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 234
;234:			originalShader[n - o] = '\0';
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 235
;235:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 236
;236:			t = strchr(n, ':');
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 58
ARGI4
ADDRLP4 168
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 168
INDIRP4
ASGNP4
line 237
;237:			if (t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $266
line 238
;238:				strncpy(newShader, n, t - n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 239
;239:				newShader[t - n] = '\0';
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 240
;240:			} else {
line 241
;241:				break;
LABELV $270
line 243
;242:			}
;243:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 244
;244:			o = strchr(t, '@');
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRLP4 172
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 172
INDIRP4
ASGNP4
line 245
;245:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $268
line 246
;246:				strncpy(timeOffset, t, o - t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 247
;247:				timeOffset[o - t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 248
;248:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 249
;249:				trap_R_RemapShader(originalShader, newShader, timeOffset);
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 250
;250:			}
line 251
;251:		} else {
line 252
;252:			break;
LABELV $268
line 254
;253:		}
;254:	}
LABELV $265
line 230
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $273
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $264
LABELV $273
LABELV $266
line 255
;255:}
LABELV $263
endproc CG_ShaderStateChanged 180 12
proc CG_ConfigStringModified 32 12
line 264
;256:
;257:
;258:/*
;259:================
;260:CG_ConfigStringModified
;261:
;262:================
;263:*/
;264:static void CG_ConfigStringModified(void) {
line 268
;265:	const char *str;
;266:	int		num;
;267:
;268:	num = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 272
;269:
;270:	// get the gamestate from the client system, which will have the
;271:	// new configstring already integrated
;272:	trap_GetGameState(&cgs.gameState);
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 275
;273:
;274:	// look up the individual string that was modified
;275:	str = CG_ConfigString(num);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 278
;276:
;277:	// do something with it if necessary
;278:	if (num == CS_MUSIC) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $275
line 279
;279:		CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 280
;280:	} else if (num == CS_SYSTEMINFO) {
ADDRGP4 $276
JUMPV
LABELV $275
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $277
line 281
;281:		CG_ParseSysteminfo();
ADDRGP4 CG_ParseSysteminfo
CALLV
pop
line 282
;282:	} else if (num == CS_SERVERINFO) {
ADDRGP4 $278
JUMPV
LABELV $277
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $279
line 283
;283:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 284
;284:	} else if (num == CS_WARMUP) {
ADDRGP4 $280
JUMPV
LABELV $279
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $281
line 285
;285:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 286
;286:	} else if (num == CS_SCORES1) {
ADDRGP4 $282
JUMPV
LABELV $281
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $283
line 287
;287:		cgs.scores1 = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32744
ADDRLP4 20
INDIRI4
ASGNI4
line 288
;288:	} else if (num == CS_SCORES2) {
ADDRGP4 $284
JUMPV
LABELV $283
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $286
line 289
;289:		cgs.scores2 = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32748
ADDRLP4 20
INDIRI4
ASGNI4
line 290
;290:	} else if (num == CS_LEVEL_START_TIME) {
ADDRGP4 $287
JUMPV
LABELV $286
ADDRLP4 0
INDIRI4
CNSTI4 13
NEI4 $289
line 291
;291:		cgs.levelStartTime = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32740
ADDRLP4 20
INDIRI4
ASGNI4
line 292
;292:	} else if (num == CS_VOTE_TIME) {
ADDRGP4 $290
JUMPV
LABELV $289
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $292
line 293
;293:		cgs.voteTime = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31700
ADDRLP4 20
INDIRI4
ASGNI4
line 294
;294:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 295
;295:	} else if (num == CS_VOTE_YES) {
ADDRGP4 $293
JUMPV
LABELV $292
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $296
line 296
;296:		cgs.voteYes = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31704
ADDRLP4 20
INDIRI4
ASGNI4
line 297
;297:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 298
;298:	} else if (num == CS_VOTE_NO) {
ADDRGP4 $297
JUMPV
LABELV $296
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $300
line 299
;299:		cgs.voteNo = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31708
ADDRLP4 20
INDIRI4
ASGNI4
line 300
;300:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 301
;301:	} else if (num == CS_VOTE_STRING) {
ADDRGP4 $301
JUMPV
LABELV $300
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $304
line 302
;302:		Q_strncpyz(cgs.voteString, str, sizeof(cgs.voteString));
ADDRGP4 cgs+31716
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 303
;303:		trap_S_StartLocalSound(cgs.media.voteNow, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1020
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 304
;304:	} else if (num == CS_INTERMISSION) {
ADDRGP4 $305
JUMPV
LABELV $304
ADDRLP4 0
INDIRI4
CNSTI4 14
NEI4 $310
line 305
;305:		cg.intermissionStarted = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 20
INDIRI4
ASGNI4
line 306
;306:	} else if (num >= CS_MODELS && num < CS_MODELS + MAX_MODELS) {
ADDRGP4 $311
JUMPV
LABELV $310
ADDRLP4 0
INDIRI4
CNSTI4 17
LTI4 $313
ADDRLP4 0
INDIRI4
CNSTI4 273
GEI4 $313
line 307
;307:		cgs.gameModels[num - CS_MODELS] = trap_R_RegisterModel(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32768-68
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 308
;308:	} else if (num >= CS_SOUNDS && num < CS_SOUNDS + MAX_SOUNDS) {
ADDRGP4 $314
JUMPV
LABELV $313
ADDRLP4 0
INDIRI4
CNSTI4 273
LTI4 $317
ADDRLP4 0
INDIRI4
CNSTI4 529
GEI4 $317
line 309
;309:		if (str[0] != '*') {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $318
line 310
;310:			cgs.gameSounds[num - CS_SOUNDS] = trap_S_RegisterSound(str, qfalse);
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33792-1092
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 311
;311:		}
line 312
;312:	} else if (num >= CS_PLAYERS && num < CS_PLAYERS + MAX_CLIENTS) {
ADDRGP4 $318
JUMPV
LABELV $317
ADDRLP4 0
INDIRI4
CNSTI4 529
LTI4 $323
ADDRLP4 0
INDIRI4
CNSTI4 593
GEI4 $323
line 313
;313:		CG_NewClientInfo(num - CS_PLAYERS);
ADDRLP4 0
INDIRI4
CNSTI4 529
SUBI4
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 314
;314:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 315
;315:	} else if (num == CS_FLAGSTATUS) {
ADDRGP4 $324
JUMPV
LABELV $323
ADDRLP4 0
INDIRI4
CNSTI4 658
NEI4 $325
line 316
;316:		if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $327
line 318
;317:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;318:			cgs.redflag = str[0] - '0';
ADDRGP4 cgs+32752
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 319
;319:			cgs.blueflag = str[1] - '0';
ADDRGP4 cgs+32756
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 320
;320:		} else if (cgs.gametype == GT_1FCTF) {
ADDRGP4 $326
JUMPV
LABELV $327
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $326
line 321
;321:			cgs.flagStatus = str[0] - '0';
ADDRGP4 cgs+32760
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 322
;322:		}
line 323
;323:	} else if (num == CS_SHADERSTATE) {
ADDRGP4 $326
JUMPV
LABELV $325
ADDRLP4 0
INDIRI4
CNSTI4 665
NEI4 $336
line 324
;324:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 325
;325:	} else if (num == CS_ARMOR_TIERED) {
ADDRGP4 $337
JUMPV
LABELV $336
ADDRLP4 0
INDIRI4
CNSTI4 683
NEI4 $338
line 326
;326:		CG_ParseArmorTiered();
ADDRGP4 CG_ParseArmorTiered
CALLV
pop
line 327
;327:	}
LABELV $338
LABELV $337
LABELV $326
LABELV $324
LABELV $318
LABELV $314
LABELV $311
LABELV $305
LABELV $301
LABELV $297
LABELV $293
LABELV $290
LABELV $287
LABELV $284
LABELV $282
LABELV $280
LABELV $278
LABELV $276
line 329
;328:
;329:}
LABELV $274
endproc CG_ConfigStringModified 32 12
proc CG_AddToTeamChat 40 0
line 338
;330:
;331:
;332:/*
;333:=======================
;334:CG_AddToTeamChat
;335:
;336:=======================
;337:*/
;338:static void CG_AddToTeamChat(const char *str) {
line 344
;339:	int len;
;340:	char *p, *ls;
;341:	int lastcolor;
;342:	int chatHeight;
;343:
;344:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $341
line 345
;345:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 346
;346:	} else {
ADDRGP4 $342
JUMPV
LABELV $341
line 347
;347:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 348
;348:	}
LABELV $342
line 350
;349:
;350:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $348
ADDRGP4 cg_teamChatTime+12
INDIRI4
CNSTI4 0
GTI4 $345
LABELV $348
line 352
;351:		// team chat disabled, dump into normal chat
;352:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 cgs+146608
ADDRLP4 20
INDIRI4
ASGNI4
ADDRGP4 cgs+146604
ADDRLP4 20
INDIRI4
ASGNI4
line 353
;353:		return;
ADDRGP4 $340
JUMPV
LABELV $345
line 356
;354:	}
;355:
;356:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 358
;357:
;358:	p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
ADDRGP4 cgs+146604
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 241
MULI4
ADDRGP4 cgs+144644
ADDP4
ASGNP4
line 359
;359:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 361
;360:
;361:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 363
;362:
;363:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $354
JUMPV
LABELV $353
line 364
;364:	while (*str) {
line 365
;365:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $356
line 366
;366:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $358
line 367
;367:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 368
;368:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 369
;369:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 370
;370:			}
LABELV $358
line 371
;371:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 373
;372:
;373:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+146604
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146572
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 375
;374:
;375:			cgs.teamChatPos++;
ADDRLP4 20
ADDRGP4 cgs+146604
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 376
;376:			p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
ADDRGP4 cgs+146604
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 241
MULI4
ADDRGP4 cgs+144644
ADDP4
ASGNP4
line 377
;377:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 378
;378:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI1 94
ASGNI1
line 379
;379:			*p++ = lastcolor;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 380
;380:			len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 381
;381:			ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 382
;382:		}
LABELV $356
line 384
;383:
;384:		if (Q_IsColorString(str)) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $366
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $366
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $366
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $366
line 385
;385:			*p++ = *str++;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI1
ASGNI1
line 386
;386:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 387
;387:			*p++ = *str++;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI1
ASGNI1
line 388
;388:			continue;
ADDRGP4 $354
JUMPV
LABELV $366
line 390
;389:		}
;390:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $368
line 391
;391:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 392
;392:		}
LABELV $368
line 393
;393:		*p++ = *str++;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI1
ASGNI1
line 394
;394:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 395
;395:	}
LABELV $354
line 364
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $353
line 396
;396:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 398
;397:
;398:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+146604
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146572
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 399
;399:	cgs.teamChatPos++;
ADDRLP4 20
ADDRGP4 cgs+146604
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 401
;400:
;401:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+146604
INDIRI4
ADDRGP4 cgs+146608
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $374
line 402
;402:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+146608
ADDRGP4 cgs+146604
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $374
line 403
;403:}
LABELV $340
endproc CG_AddToTeamChat 40 0
proc CG_MapRestart 0 8
line 416
;404:
;405:/*
;406:===============
;407:CG_MapRestart
;408:
;409:The server has issued a map_restart, so the next snapshot
;410:is completely new and should not be interpolated to.
;411:
;412:A tournement restart will clear everything, but doesn't
;413:require a reload of all the media
;414:===============
;415:*/
;416:static void CG_MapRestart(void) {
line 417
;417:	if (cg_showmiss.integer) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $381
line 418
;418:		CG_Printf("CG_MapRestart\n");
ADDRGP4 $384
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 419
;419:	}
LABELV $381
line 421
;420:
;421:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 422
;422:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 423
;423:	CG_ClearParticles();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 426
;424:
;425:	// make sure the "3 frags left" warnings play again
;426:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+107620
CNSTI4 0
ASGNI4
line 427
;427:	cg.timelimitWarnings = 0;
ADDRGP4 cg+107616
CNSTI4 0
ASGNI4
line 429
;428:
;429:	cg.rewardTime = 0;
ADDRGP4 cg+125532
CNSTI4 0
ASGNI4
line 430
;430:	cg.rewardStack = 0;
ADDRGP4 cg+125528
CNSTI4 0
ASGNI4
line 431
;431:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 432
;432:	cg.levelShot = qfalse;
ADDRGP4 cg+12
CNSTI4 0
ASGNI4
line 434
;433:
;434:	cgs.voteTime = 0;
ADDRGP4 cgs+31700
CNSTI4 0
ASGNI4
line 436
;435:
;436:	cg.mapRestart = qtrue;
ADDRGP4 cg+107624
CNSTI4 1
ASGNI4
line 438
;437:
;438:	CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 440
;439:
;440:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 442
;441:
;442:	cg.allowPickupPrediction = cg.time + PICKUP_PREDICTION_DELAY;
ADDRGP4 cg+157004
ADDRGP4 cg+107604
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 447
;443:
;444:	// we really should clear more parts of cg here and stop sounds
;445:
;446:	// play the "fight" sound if this is a restart without warmup
;447:	if (cg.warmup == 0 /* && cgs.gametype == GT_DUEL */) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
NEI4 $395
line 449
;448:		// force sound playback in CG_WarmupEvents()
;449:		cg.warmup = cg.time;
ADDRGP4 cg+125752
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 450
;450:		cg.warmupCount = -1;
ADDRGP4 cg+125756
CNSTI4 -1
ASGNI4
line 451
;451:	}
LABELV $395
line 453
;452:
;453:	trap_Cvar_Set("cg_thirdPerson", "0");
ADDRGP4 $401
ARGP4
ADDRGP4 $402
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 454
;454:}
LABELV $380
endproc CG_MapRestart 0 8
proc CG_RemoveChatEscapeChar 12 0
line 462
;455:
;456:
;457:/*
;458:=================
;459:CG_RemoveChatEscapeChar
;460:=================
;461:*/
;462:static void CG_RemoveChatEscapeChar(char *text) {
line 465
;463:	int i, l;
;464:
;465:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 466
;466:	for (i = 0; text[i]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $407
JUMPV
LABELV $404
line 467
;467:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $408
line 468
;468:			continue;
ADDRGP4 $405
JUMPV
LABELV $408
line 469
;469:		text[l] = text[i];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 470
;470:		l++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 471
;471:	}
LABELV $405
line 466
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $407
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $404
line 472
;472:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 473
;473:}
LABELV $403
endproc CG_RemoveChatEscapeChar 12 0
proc CG_ServerCommand 408 12
line 484
;474:
;475:
;476:/*
;477:=================
;478:CG_ServerCommand
;479:
;480:The string has been tokenized and can be retrieved with
;481:Cmd_Argc() / Cmd_Argv()
;482:=================
;483:*/
;484:static void CG_ServerCommand(void) {
line 488
;485:	const char *cmd, *id;
;486:	char		text[MAX_SAY_TEXT];
;487:
;488:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 160
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 160
INDIRP4
ASGNP4
line 490
;489:
;490:	if (!cmd[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $411
line 492
;491:		// server claimed the command
;492:		return;
ADDRGP4 $410
JUMPV
LABELV $411
line 495
;493:	}
;494:
;495:	if (!strcmp(cmd, "cp")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $415
ARGP4
ADDRLP4 164
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $413
line 496
;496:		CG_CenterPrint(CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH);
CNSTI4 1
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 497
;497:		return;
ADDRGP4 $410
JUMPV
LABELV $413
line 500
;498:	}
;499:
;500:	if (!strcmp(cmd, "cs")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $418
ARGP4
ADDRLP4 168
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
NEI4 $416
line 501
;501:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 502
;502:		return;
ADDRGP4 $410
JUMPV
LABELV $416
line 505
;503:	}
;504:
;505:	if (!strcmp(cmd, "print")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $421
ARGP4
ADDRLP4 172
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
NEI4 $419
line 506
;506:		CG_Printf("%s", CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $422
ARGP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 507
;507:		cmd = CG_Argv(1);			// yes, this is obviously a hack, but so is the way we hear about
CNSTI4 1
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 180
INDIRP4
ASGNP4
line 509
;508:		// votes passing or failing
;509:		if (!Q_stricmpn(cmd, "vote failed", 11) || !Q_stricmpn(cmd, "team vote failed", 16)) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $425
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 184
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $427
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $426
ARGP4
CNSTI4 16
ARGI4
ADDRLP4 188
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $423
LABELV $427
line 510
;510:			trap_S_StartLocalSound(cgs.media.voteFailed, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1028
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 511
;511:		} else if (!Q_stricmpn(cmd, "vote passed", 11) || !Q_stricmpn(cmd, "team vote passed", 16)) {
ADDRGP4 $410
JUMPV
LABELV $423
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $432
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 192
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
EQI4 $434
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $433
ARGP4
CNSTI4 16
ARGI4
ADDRLP4 196
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $410
LABELV $434
line 512
;512:			trap_S_StartLocalSound(cgs.media.votePassed, CHAN_ANNOUNCER);
ADDRGP4 cgs+146664+1024
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 513
;513:		}
line 514
;514:		return;
ADDRGP4 $410
JUMPV
LABELV $419
line 517
;515:	}
;516:
;517:	if (!strcmp(cmd, "chat")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $439
ARGP4
ADDRLP4 176
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $437
line 518
;518:		if (!cg_teamChatsOnly.integer) {
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $410
line 519
;519:			trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+146664+904
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 520
;520:			Q_strncpyz(text, CG_Argv(1), MAX_SAY_TEXT);
CNSTI4 1
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 180
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 521
;521:			CG_RemoveChatEscapeChar(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 522
;522:			id = CG_Argv(2);
CNSTI4 2
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 184
INDIRP4
ASGNP4
line 523
;523:			if (*id >= '0' && *id <= '9')
ADDRLP4 188
ADDRLP4 156
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 48
LTI4 $445
ADDRLP4 188
INDIRI4
CNSTI4 57
GTI4 $445
line 524
;524:				CG_Printf("(%i) %s\n", atoi(id), text);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 $447
ARGP4
ADDRLP4 192
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
ADDRGP4 $410
JUMPV
LABELV $445
line 526
;525:			else
;526:				CG_Printf("%s\n", text);
ADDRGP4 $448
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 527
;527:		}
line 528
;528:		return;
ADDRGP4 $410
JUMPV
LABELV $437
line 531
;529:	}
;530:
;531:	if (!strcmp(cmd, "tchat")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $451
ARGP4
ADDRLP4 180
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $449
line 532
;532:		trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+146664+904
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 533
;533:		Q_strncpyz(text, CG_Argv(1), MAX_SAY_TEXT);
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 184
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 534
;534:		CG_RemoveChatEscapeChar(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 535
;535:		CG_AddToTeamChat(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 536
;536:		id = CG_Argv(2);
CNSTI4 2
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 188
INDIRP4
ASGNP4
line 537
;537:		if (*id >= '0' && *id <= '9')
ADDRLP4 192
ADDRLP4 156
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 48
LTI4 $454
ADDRLP4 192
INDIRI4
CNSTI4 57
GTI4 $454
line 538
;538:			CG_Printf("(%i) %s\n", atoi(id), text);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 $447
ARGP4
ADDRLP4 196
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
ADDRGP4 $410
JUMPV
LABELV $454
line 540
;539:		else
;540:			CG_Printf("%s\n", text);
ADDRGP4 $448
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 541
;541:		return;
ADDRGP4 $410
JUMPV
LABELV $449
line 544
;542:	}
;543:
;544:	if (!strcmp(cmd, "scores")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $458
ARGP4
ADDRLP4 184
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $456
line 545
;545:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 546
;546:		return;
ADDRGP4 $410
JUMPV
LABELV $456
line 549
;547:	}
;548:
;549:	if (!strcmp(cmd, "tinfo")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $461
ARGP4
ADDRLP4 188
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $459
line 550
;550:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 551
;551:		return;
ADDRGP4 $410
JUMPV
LABELV $459
line 554
;552:	}
;553:
;554:	if (!strcmp(cmd, "map_restart")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $464
ARGP4
ADDRLP4 192
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
NEI4 $462
line 555
;555:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 556
;556:		return;
ADDRGP4 $410
JUMPV
LABELV $462
line 559
;557:	}
;558:
;559:	if (Q_stricmp(cmd, "remapShader") == 0) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $467
ARGP4
ADDRLP4 196
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $465
line 560
;560:		if (trap_Argc() == 4) {
ADDRLP4 200
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 4
NEI4 $410
line 565
;561:			char shader1[MAX_QPATH];
;562:			char shader2[MAX_QPATH];
;563:			char shader3[MAX_QPATH];
;564:
;565:			Q_strncpyz(shader1, CG_Argv(1), sizeof(shader1));
CNSTI4 1
ARGI4
ADDRLP4 396
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 204
ARGP4
ADDRLP4 396
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 566
;566:			Q_strncpyz(shader2, CG_Argv(2), sizeof(shader2));
CNSTI4 2
ARGI4
ADDRLP4 400
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 268
ARGP4
ADDRLP4 400
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 567
;567:			Q_strncpyz(shader3, CG_Argv(3), sizeof(shader3));
CNSTI4 3
ARGI4
ADDRLP4 404
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 332
ARGP4
ADDRLP4 404
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 569
;568:
;569:			trap_R_RemapShader(shader1, shader2, shader3);
ADDRLP4 204
ARGP4
ADDRLP4 268
ARGP4
ADDRLP4 332
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 570
;570:		}
line 572
;571:
;572:		return;
ADDRGP4 $410
JUMPV
LABELV $465
line 576
;573:	}
;574:
;575:	// loaddeferred can be both a servercmd and a consolecmd
;576:	if (!strcmp(cmd, "loaddeferred")) {	// FIXME: spelled wrong, but not changing for demo
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $472
ARGP4
ADDRLP4 200
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $470
line 577
;577:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 578
;578:		return;
ADDRGP4 $410
JUMPV
LABELV $470
line 583
;579:	}
;580:
;581:	// clientLevelShot is sent before taking a special screenshot for
;582:	// the menu system during development
;583:	if (!strcmp(cmd, "clientLevelShot")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $475
ARGP4
ADDRLP4 204
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $473
line 584
;584:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 585
;585:		return;
ADDRGP4 $410
JUMPV
LABELV $473
line 588
;586:	}
;587:
;588:	if (cgs.defrag && cg.demoPlayback) {
ADDRGP4 cgs+147928
INDIRI4
CNSTI4 0
EQI4 $477
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $477
line 589
;589:		if (!strcmp(cmd, "aswitch") || !strcmp(cmd, "stats")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $483
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
EQI4 $485
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $484
ARGP4
ADDRLP4 212
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $481
LABELV $485
line 590
;590:			return;
ADDRGP4 $410
JUMPV
LABELV $481
line 592
;591:		}
;592:	}
LABELV $477
line 594
;593:
;594:	CG_Printf("Unknown client game command: %s\n", cmd);
ADDRGP4 $486
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 595
;595:}
LABELV $410
endproc CG_ServerCommand 408 12
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 606
;596:
;597:
;598:/*
;599:====================
;600:CG_ExecuteNewServerCommands
;601:
;602:Execute all of the server commands that were received along
;603:with this this snapshot.
;604:====================
;605:*/
;606:void CG_ExecuteNewServerCommands(int latestSequence) {
ADDRGP4 $489
JUMPV
LABELV $488
line 607
;607:	while (cgs.serverCommandSequence < latestSequence) {
line 608
;608:		if (trap_GetServerCommand(++cgs.serverCommandSequence)) {
ADDRLP4 0
ADDRGP4 cgs+31468
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $492
line 609
;609:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 610
;610:		}
LABELV $492
line 611
;611:	}
LABELV $489
line 607
ADDRGP4 cgs+31468
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $488
line 612
;612:}
LABELV $487
endproc CG_ExecuteNewServerCommands 12 4
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_armorTiered
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $486
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $484
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $483
byte 1 97
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $475
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $472
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $467
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 112
byte 1 83
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $464
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $461
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 0
align 1
LABELV $458
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $451
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $448
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $447
byte 1 40
byte 1 37
byte 1 105
byte 1 41
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $439
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $433
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $432
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $426
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $425
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $422
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $421
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $418
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $415
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $402
byte 1 48
byte 1 0
align 1
LABELV $401
byte 1 99
byte 1 103
byte 1 95
byte 1 116
byte 1 104
byte 1 105
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $384
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 112
byte 1 82
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $207
byte 1 99
byte 1 103
byte 1 95
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 84
byte 1 105
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $203
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 95
byte 1 116
byte 1 105
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $197
byte 1 103
byte 1 95
byte 1 115
byte 1 121
byte 1 110
byte 1 99
byte 1 104
byte 1 114
byte 1 111
byte 1 110
byte 1 111
byte 1 117
byte 1 115
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $187
byte 1 112
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 95
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 0
align 1
LABELV $182
byte 1 112
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 95
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $178
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $175
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $173
byte 1 109
byte 1 97
byte 1 112
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 98
byte 1 115
byte 1 112
byte 1 0
align 1
LABELV $170
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $169
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 97
byte 1 120
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $167
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $165
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $163
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $161
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $159
byte 1 100
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $156
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $155
byte 1 117
byte 1 105
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $154
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
