code
proc CG_ParseScores 208 12
file "..\..\..\..\code\cgame\cg_servercmds.c"
line 17
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;4:// these are processed at snapshot transition time, so there will definately
;5:// be a valid snapshot this frame
;6:
;7:#include "cg_local.h"
;8:
;9:#include "../../ui/menudef.h" // bk001205 - for Q3_ui as well
;10:
;11:/*
;12:=================
;13:CG_ParseScores
;14:
;15:=================
;16:*/
;17:static void CG_ParseScores(void) {
line 20
;18:	int		i, powerups;
;19:
;20:	cg.numScores = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110476
ADDRLP4 12
INDIRI4
ASGNI4
line 21
;21:	if (cg.numScores > MAX_CLIENTS) {
ADDRGP4 cg+110476
INDIRI4
CNSTI4 64
LEI4 $74
line 22
;22:		cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+110476
CNSTI4 64
ASGNI4
line 23
;23:	}
LABELV $74
line 25
;24:
;25:	cg.teamScores[0] = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110484
ADDRLP4 20
INDIRI4
ASGNI4
line 26
;26:	cg.teamScores[1] = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110484+4
ADDRLP4 28
INDIRI4
ASGNI4
line 28
;27:
;28:	memset(cg.scores, 0, sizeof(cg.scores));
ADDRGP4 cg+110492
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4864
ARGI4
ADDRGP4 memset
CALLP4
pop
line 29
;29:	for (i = 0; i < cg.numScores; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $86
JUMPV
LABELV $83
line 31
;30:		//
;31:		cg.scores[i].client = atoi(CG_Argv(i * 14 + 4));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 32
;32:		cg.scores[i].score = atoi(CG_Argv(i * 14 + 5));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+4
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 33
;33:		cg.scores[i].ping = atoi(CG_Argv(i * 14 + 6));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+8
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 34
;34:		cg.scores[i].time = atoi(CG_Argv(i * 14 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 72
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+12
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 35
;35:		cg.scores[i].scoreFlags = atoi(CG_Argv(i * 14 + 8));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+16
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 36
;36:		powerups = atoi(CG_Argv(i * 14 + 9));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 92
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 96
INDIRI4
ASGNI4
line 37
;37:		cg.scores[i].accuracy = atoi(CG_Argv(i * 14 + 10));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+24
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 38
;38:		cg.scores[i].impressiveCount = atoi(CG_Argv(i * 14 + 11));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 116
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+28
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 39
;39:		cg.scores[i].excellentCount = atoi(CG_Argv(i * 14 + 12));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+32
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 40
;40:		cg.scores[i].gauntletCount = atoi(CG_Argv(i * 14 + 13));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+36
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 41
;41:		cg.scores[i].defendCount = atoi(CG_Argv(i * 14 + 14));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 14
ADDI4
ARGI4
ADDRLP4 152
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+40
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 42
;42:		cg.scores[i].assistCount = atoi(CG_Argv(i * 14 + 15));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 164
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+44
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 43
;43:		cg.scores[i].perfect = atoi(CG_Argv(i * 14 + 16));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 16
ADDI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+52
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 44
;44:		cg.scores[i].captures = atoi(CG_Argv(i * 14 + 17));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 17
ADDI4
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+48
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 46
;45:
;46:		if (cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS) {
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 0
LTI4 $117
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 64
LTI4 $113
LABELV $117
line 47
;47:			cg.scores[i].client = 0;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
CNSTI4 0
ASGNI4
line 48
;48:		}
LABELV $113
line 49
;49:		cgs.clientinfo[cg.scores[i].client].score = cg.scores[i].score;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+68
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+4
ADDP4
INDIRI4
ASGNI4
line 50
;50:		cgs.clientinfo[cg.scores[i].client].powerups = powerups;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 52
;51:
;52:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+56
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+36
ADDP4
INDIRI4
ASGNI4
line 53
;53:	}
LABELV $84
line 29
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $86
ADDRLP4 0
INDIRI4
ADDRGP4 cg+110476
INDIRI4
LTI4 $83
line 54
;54:	CG_SetScoreSelection(NULL);
CNSTP4 0
ARGP4
ADDRGP4 CG_SetScoreSelection
CALLV
pop
line 55
;55:}
LABELV $72
endproc CG_ParseScores 208 12
proc CG_ParseTeamInfo 64 4
line 63
;56:
;57:
;58:/*
;59:=================
;60:CG_ParseTeamInfo
;61:=================
;62:*/
;63:static void CG_ParseTeamInfo(void) {
line 67
;64:	int		i;
;65:	int		client;
;66:
;67:	numSortedTeamPlayers = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 68
;68:	if ((unsigned)numSortedTeamPlayers > TEAM_MAXOVERLAY)
ADDRGP4 numSortedTeamPlayers
INDIRI4
CVIU4 4
CNSTU4 32
LEU4 $133
line 69
;69:		numSortedTeamPlayers = TEAM_MAXOVERLAY;
ADDRGP4 numSortedTeamPlayers
CNSTI4 32
ASGNI4
LABELV $133
line 71
;70:
;71:	for (i = 0; i < numSortedTeamPlayers; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $138
JUMPV
LABELV $135
line 72
;72:		client = atoi(CG_Argv(i * 6 + 2));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 73
;73:		if ((unsigned)client >= MAX_CLIENTS)
ADDRLP4 4
INDIRI4
CVIU4 4
CNSTU4 64
LTU4 $139
line 74
;74:			continue;
ADDRGP4 $136
JUMPV
LABELV $139
line 76
;75:
;76:		sortedTeamPlayers[i] = client;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 78
;77:
;78:		cgs.clientinfo[client].location = atoi(CG_Argv(i * 6 + 3));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+72
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 79
;79:		cgs.clientinfo[client].health = atoi(CG_Argv(i * 6 + 4));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+76
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 80
;80:		cgs.clientinfo[client].armor = atoi(CG_Argv(i * 6 + 5));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+80
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 81
;81:		cgs.clientinfo[client].curWeapon = atoi(CG_Argv(i * 6 + 6));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+84
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 82
;82:		cgs.clientinfo[client].powerups = atoi(CG_Argv(i * 6 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 83
;83:	}
LABELV $136
line 71
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $138
ADDRLP4 0
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $135
line 84
;84:}
LABELV $132
endproc CG_ParseTeamInfo 64 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 84 16
line 95
;85:
;86:
;87:/*
;88:================
;89:CG_ParseServerinfo
;90:
;91:This is called explicitly when the gamestate is first received,
;92:and whenever the server updates any serverinfo flagged cvars
;93:================
;94:*/
;95:void CG_ParseServerinfo(void) {
line 99
;96:	const char *info;
;97:	char *mapname;
;98:
;99:	info = CG_ConfigString(CS_SERVERINFO);
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 100
;100:	cgs.gametype = atoi(Info_ValueForKey(info, "g_gametype"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $153
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31480
ADDRLP4 16
INDIRI4
ASGNI4
line 101
;101:	trap_Cvar_Set("ui_gametype", va("%i", cgs.gametype));
ADDRGP4 $155
ARGP4
ADDRGP4 cgs+31480
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $154
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 102
;102:	cgs.dmflags = atoi(Info_ValueForKey(info, "dmflags"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $158
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31484
ADDRLP4 28
INDIRI4
ASGNI4
line 103
;103:	cgs.teamflags = atoi(Info_ValueForKey(info, "teamflags"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $160
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31488
ADDRLP4 36
INDIRI4
ASGNI4
line 104
;104:	cgs.fraglimit = atoi(Info_ValueForKey(info, "fraglimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $162
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31492
ADDRLP4 44
INDIRI4
ASGNI4
line 105
;105:	cgs.capturelimit = atoi(Info_ValueForKey(info, "capturelimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $164
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31496
ADDRLP4 52
INDIRI4
ASGNI4
line 106
;106:	cgs.timelimit = atoi(Info_ValueForKey(info, "timelimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $166
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31500
ADDRLP4 60
INDIRI4
ASGNI4
line 107
;107:	cgs.maxclients = atoi(Info_ValueForKey(info, "sv_maxclients"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $168
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31504
ADDRLP4 68
INDIRI4
ASGNI4
line 108
;108:	mapname = Info_ValueForKey(info, "mapname");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $169
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 72
INDIRP4
ASGNP4
line 109
;109:	Com_sprintf(cgs.mapname, sizeof(cgs.mapname), "maps/%s.bsp", mapname);
ADDRGP4 cgs+31508
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $172
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 110
;110:	Q_strncpyz(cgs.redTeam, Info_ValueForKey(info, "g_redTeam"), sizeof(cgs.redTeam));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $174
ARGP4
ADDRLP4 76
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31572
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 111
;111:	Q_strncpyz(cgs.blueTeam, Info_ValueForKey(info, "g_blueTeam"), sizeof(cgs.blueTeam));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $177
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31636
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 112
;112:}
LABELV $151
endproc CG_ParseServerinfo 84 16
export CG_ParseSysteminfo
proc CG_ParseSysteminfo 40 8
line 115
;113:
;114:
;115:void CG_ParseSysteminfo(void) {
line 118
;116:	const char *info;
;117:
;118:	info = CG_ConfigString(CS_SYSTEMINFO);
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 120
;119:
;120:	cgs.pmove_fixed = (atoi(Info_ValueForKey(info, "pmove_fixed"))) ? qtrue : qfalse;
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $181
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $183
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $184
JUMPV
LABELV $183
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $184
ADDRGP4 cgs+149992
ADDRLP4 8
INDIRI4
ASGNI4
line 121
;121:	cgs.pmove_msec = atoi(Info_ValueForKey(info, "pmove_msec"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $186
ARGP4
ADDRLP4 20
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+149996
ADDRLP4 24
INDIRI4
ASGNI4
line 122
;122:	if (cgs.pmove_msec < 8) {
ADDRGP4 cgs+149996
INDIRI4
CNSTI4 8
GEI4 $187
line 123
;123:		cgs.pmove_msec = 8;
ADDRGP4 cgs+149996
CNSTI4 8
ASGNI4
line 124
;124:	} else if (cgs.pmove_msec > 33) {
ADDRGP4 $188
JUMPV
LABELV $187
ADDRGP4 cgs+149996
INDIRI4
CNSTI4 33
LEI4 $191
line 125
;125:		cgs.pmove_msec = 33;
ADDRGP4 cgs+149996
CNSTI4 33
ASGNI4
line 126
;126:	}
LABELV $191
LABELV $188
line 128
;127:
;128:	cgs.synchronousClients = (atoi(Info_ValueForKey(info, "g_synchronousClients"))) ? qtrue : qfalse;
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $196
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $198
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $199
JUMPV
LABELV $198
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $199
ADDRGP4 cgs+150000
ADDRLP4 28
INDIRI4
ASGNI4
line 129
;129:}
LABELV $179
endproc CG_ParseSysteminfo 40 8
proc CG_ParseWarmup 24 8
line 137
;130:
;131:
;132:/*
;133:==================
;134:CG_ParseWarmup
;135:==================
;136:*/
;137:static void CG_ParseWarmup(void) {
line 141
;138:	const char *info;
;139:	int			warmup;
;140:
;141:	info = CG_ConfigString(CS_WARMUP);
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 143
;142:
;143:	warmup = atoi(info);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 144
;144:	cg.warmupCount = -1;
ADDRGP4 cg+125756
CNSTI4 -1
ASGNI4
line 146
;145:
;146:	if (warmup) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $202
line 147
;147:		cg.timelimitWarnings |= 1 | 2 | 4;
ADDRLP4 16
ADDRGP4 cg+107616
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 7
BORI4
ASGNI4
line 148
;148:		cg.fraglimitWarnings |= 1 | 2 | 4;
ADDRLP4 20
ADDRGP4 cg+107620
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 7
BORI4
ASGNI4
line 149
;149:	}
LABELV $202
line 151
;150:
;151:	if (cg.clientFrame == 0) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $206
line 152
;152:		if (warmup == 0 && cgs.gametype != GT_SINGLE_PLAYER) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $208
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 2
EQI4 $208
line 153
;153:			if (cg.snap && (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR || cg.snap->ps.pm_flags & PMF_FOLLOW)) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $200
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $216
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $200
LABELV $216
line 155
;154:				// force sound playback in CG_WarmupEvents()
;155:				cg.warmup = cg.time;
ADDRGP4 cg+125752
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 156
;156:				cg.warmupCount = -2; // special value to silent FIGHT sound for demo playback
ADDRGP4 cg+125756
CNSTI4 -2
ASGNI4
line 157
;157:			}
line 158
;158:			return;
ADDRGP4 $200
JUMPV
LABELV $208
line 160
;159:		}
;160:	}
LABELV $206
line 162
;161:
;162:	if (warmup == 0 && cg.warmup) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $220
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
EQI4 $220
line 164
;163:
;164:	} else if (warmup > 0 && cg.warmup <= 0) {
ADDRGP4 $221
JUMPV
LABELV $220
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $223
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
GTI4 $223
line 165
;165:		if (cgs.gametype >= GT_CTF && cgs.gametype <= GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
LTI4 $226
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
GTI4 $226
line 166
;166:			trap_S_StartLocalSound(cgs.media.countPrepareTeamSound, CHAN_ANNOUNCER);
ADDRGP4 cgs+148744+1172
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 167
;167:		} else {
ADDRGP4 $227
JUMPV
LABELV $226
line 168
;168:			if (cg.soundPlaying != cgs.media.countPrepareSound) {
ADDRGP4 cg+125748
INDIRI4
ADDRGP4 cgs+148744+1156
INDIRI4
EQI4 $232
line 169
;169:				CG_AddBufferedSound(-1);
CNSTI4 -1
ARGI4
ADDRGP4 CG_AddBufferedSound
CALLV
pop
line 170
;170:				CG_AddBufferedSound(cgs.media.countPrepareSound);
ADDRGP4 cgs+148744+1156
INDIRI4
ARGI4
ADDRGP4 CG_AddBufferedSound
CALLV
pop
line 171
;171:				cg.soundTime = cg.time + 1; // play in next frame
ADDRGP4 cg+125664
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 172
;172:			}
LABELV $232
line 173
;173:		}
LABELV $227
line 174
;174:	}
LABELV $223
LABELV $221
line 176
;175:
;176:	cg.warmup = warmup;
ADDRGP4 cg+125752
ADDRLP4 0
INDIRI4
ASGNI4
line 177
;177:}
LABELV $200
endproc CG_ParseWarmup 24 8
export CG_SetConfigValues
proc CG_SetConfigValues 32 4
line 187
;178:
;179:
;180:/*
;181:================
;182:CG_SetConfigValues
;183:
;184:Called on load to set the initial values from configure strings
;185:================
;186:*/
;187:void CG_SetConfigValues(void) {
line 190
;188:	const char *s;
;189:
;190:	cgs.scores1 = atoi(CG_ConfigString(CS_SCORES1));
CNSTI4 6
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34824
ADDRLP4 8
INDIRI4
ASGNI4
line 191
;191:	cgs.scores2 = atoi(CG_ConfigString(CS_SCORES2));
CNSTI4 7
ARGI4
ADDRLP4 12
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34828
ADDRLP4 16
INDIRI4
ASGNI4
line 192
;192:	cgs.levelStartTime = atoi(CG_ConfigString(CS_LEVEL_START_TIME));
CNSTI4 21
ARGI4
ADDRLP4 20
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34820
ADDRLP4 24
INDIRI4
ASGNI4
line 193
;193:	if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $246
line 194
;194:		s = CG_ConfigString(CS_FLAGSTATUS);
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 195
;195:		cgs.redflag = s[0] - '0';
ADDRGP4 cgs+34832
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 196
;196:		cgs.blueflag = s[1] - '0';
ADDRGP4 cgs+34836
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 197
;197:	} else if (cgs.gametype == GT_1FCTF) {
ADDRGP4 $247
JUMPV
LABELV $246
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $251
line 198
;198:		s = CG_ConfigString(CS_FLAGSTATUS);
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 199
;199:		cgs.flagStatus = s[0] - '0';
ADDRGP4 cgs+34840
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 200
;200:	}
LABELV $251
LABELV $247
line 201
;201:	CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 202
;202:}
LABELV $242
endproc CG_SetConfigValues 32 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 180 12
line 210
;203:
;204:
;205:/*
;206:=====================
;207:CG_ShaderStateChanged
;208:=====================
;209:*/
;210:void CG_ShaderStateChanged(void) {
line 217
;211:	char originalShader[MAX_QPATH];
;212:	char newShader[MAX_QPATH];
;213:	char timeOffset[16];
;214:	const char *o;
;215:	char *n, *t;
;216:
;217:	o = CG_ConfigString(CS_SHADERSTATE);
CNSTI4 24
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $257
JUMPV
LABELV $256
line 218
;218:	while (o && *o) {
line 219
;219:		n = strchr(o, '=');
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 61
ARGI4
ADDRLP4 160
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 220
;220:		if (n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $258
line 221
;221:			strncpy(originalShader, o, n - o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 222
;222:			originalShader[n - o] = '\0';
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 223
;223:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 224
;224:			t = strchr(n, ':');
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 58
ARGI4
ADDRLP4 168
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 168
INDIRP4
ASGNP4
line 225
;225:			if (t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $258
line 226
;226:				strncpy(newShader, n, t - n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 227
;227:				newShader[t - n] = '\0';
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 228
;228:			} else {
line 229
;229:				break;
LABELV $262
line 231
;230:			}
;231:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 232
;232:			o = strchr(t, '@');
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRLP4 172
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 172
INDIRP4
ASGNP4
line 233
;233:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $260
line 234
;234:				strncpy(timeOffset, t, o - t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 235
;235:				timeOffset[o - t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 236
;236:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 237
;237:				trap_R_RemapShader(originalShader, newShader, timeOffset);
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 238
;238:			}
line 239
;239:		} else {
line 240
;240:			break;
LABELV $260
line 242
;241:		}
;242:	}
LABELV $257
line 218
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $265
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $256
LABELV $265
LABELV $258
line 243
;243:}
LABELV $255
endproc CG_ShaderStateChanged 180 12
proc CG_ConfigStringModified 48 12
line 252
;244:
;245:
;246:/*
;247:================
;248:CG_ConfigStringModified
;249:
;250:================
;251:*/
;252:static void CG_ConfigStringModified(void) {
line 256
;253:	const char *str;
;254:	int		num;
;255:
;256:	num = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 260
;257:
;258:	// get the gamestate from the client system, which will have the
;259:	// new configstring already integrated
;260:	trap_GetGameState(&cgs.gameState);
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 263
;261:
;262:	// look up the individual string that was modified
;263:	str = CG_ConfigString(num);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 266
;264:
;265:	// do something with it if necessary
;266:	if (num == CS_MUSIC) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $267
line 267
;267:		CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 268
;268:	} else if (num == CS_SYSTEMINFO) {
ADDRGP4 $268
JUMPV
LABELV $267
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $269
line 269
;269:		CG_ParseSysteminfo();
ADDRGP4 CG_ParseSysteminfo
CALLV
pop
line 270
;270:	} else if (num == CS_SERVERINFO) {
ADDRGP4 $270
JUMPV
LABELV $269
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $271
line 271
;271:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 272
;272:	} else if (num == CS_WARMUP) {
ADDRGP4 $272
JUMPV
LABELV $271
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $273
line 273
;273:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 274
;274:	} else if (num == CS_SCORES1) {
ADDRGP4 $274
JUMPV
LABELV $273
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $275
line 275
;275:		cgs.scores1 = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34824
ADDRLP4 20
INDIRI4
ASGNI4
line 276
;276:	} else if (num == CS_SCORES2) {
ADDRGP4 $276
JUMPV
LABELV $275
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $278
line 277
;277:		cgs.scores2 = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34828
ADDRLP4 20
INDIRI4
ASGNI4
line 278
;278:	} else if (num == CS_LEVEL_START_TIME) {
ADDRGP4 $279
JUMPV
LABELV $278
ADDRLP4 0
INDIRI4
CNSTI4 21
NEI4 $281
line 279
;279:		cgs.levelStartTime = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34820
ADDRLP4 20
INDIRI4
ASGNI4
line 280
;280:	} else if (num == CS_VOTE_TIME) {
ADDRGP4 $282
JUMPV
LABELV $281
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $284
line 281
;281:		cgs.voteTime = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31700
ADDRLP4 20
INDIRI4
ASGNI4
line 282
;282:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 283
;283:	} else if (num == CS_VOTE_YES) {
ADDRGP4 $285
JUMPV
LABELV $284
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $288
line 284
;284:		cgs.voteYes = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31704
ADDRLP4 20
INDIRI4
ASGNI4
line 285
;285:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 286
;286:	} else if (num == CS_VOTE_NO) {
ADDRGP4 $289
JUMPV
LABELV $288
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $292
line 287
;287:		cgs.voteNo = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31708
ADDRLP4 20
INDIRI4
ASGNI4
line 288
;288:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 289
;289:	} else if (num == CS_VOTE_STRING) {
ADDRGP4 $293
JUMPV
LABELV $292
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $296
line 290
;290:		Q_strncpyz(cgs.voteString, str, sizeof(cgs.voteString));
ADDRGP4 cgs+31716
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 291
;291:		trap_S_StartLocalSound(cgs.media.voteNow, CHAN_ANNOUNCER);
ADDRGP4 cgs+148744+1020
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 292
;292:	} else if (num >= CS_TEAMVOTE_TIME && num <= CS_TEAMVOTE_TIME + 1) {
ADDRGP4 $297
JUMPV
LABELV $296
ADDRLP4 0
INDIRI4
CNSTI4 12
LTI4 $302
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $302
line 293
;293:		cgs.teamVoteTime[num - CS_TEAMVOTE_TIME] = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32740-48
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 294
;294:		cgs.teamVoteModified[num - CS_TEAMVOTE_TIME] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32764-48
ADDP4
CNSTI4 1
ASGNI4
line 295
;295:	} else if (num >= CS_TEAMVOTE_YES && num <= CS_TEAMVOTE_YES + 1) {
ADDRGP4 $303
JUMPV
LABELV $302
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $308
ADDRLP4 0
INDIRI4
CNSTI4 17
GTI4 $308
line 296
;296:		cgs.teamVoteYes[num - CS_TEAMVOTE_YES] = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32748-64
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 297
;297:		cgs.teamVoteModified[num - CS_TEAMVOTE_YES] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32764-64
ADDP4
CNSTI4 1
ASGNI4
line 298
;298:	} else if (num >= CS_TEAMVOTE_NO && num <= CS_TEAMVOTE_NO + 1) {
ADDRGP4 $309
JUMPV
LABELV $308
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $314
ADDRLP4 0
INDIRI4
CNSTI4 19
GTI4 $314
line 299
;299:		cgs.teamVoteNo[num - CS_TEAMVOTE_NO] = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32756-72
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 300
;300:		cgs.teamVoteModified[num - CS_TEAMVOTE_NO] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32764-72
ADDP4
CNSTI4 1
ASGNI4
line 301
;301:	} else if (num >= CS_TEAMVOTE_STRING && num <= CS_TEAMVOTE_STRING + 1) {
ADDRGP4 $315
JUMPV
LABELV $314
ADDRLP4 0
INDIRI4
CNSTI4 14
LTI4 $320
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $320
line 302
;302:		Q_strncpyz(cgs.teamVoteString[num - CS_TEAMVOTE_STRING], str, sizeof(cgs.teamVoteString[0]));
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+32772-14336
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 303
;303:		trap_S_StartLocalSound(cgs.media.voteNow, CHAN_ANNOUNCER);
ADDRGP4 cgs+148744+1020
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 304
;304:	} else if (num == CS_INTERMISSION) {
ADDRGP4 $321
JUMPV
LABELV $320
ADDRLP4 0
INDIRI4
CNSTI4 22
NEI4 $327
line 305
;305:		cg.intermissionStarted = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 36
INDIRI4
ASGNI4
line 306
;306:	} else if (num >= CS_MODELS && num < CS_MODELS + MAX_MODELS) {
ADDRGP4 $328
JUMPV
LABELV $327
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $330
ADDRLP4 0
INDIRI4
CNSTI4 288
GEI4 $330
line 307
;307:		cgs.gameModels[num - CS_MODELS] = trap_R_RegisterModel(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34848-128
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 308
;308:	} else if (num >= CS_SOUNDS && num < CS_SOUNDS + MAX_SOUNDS) {
ADDRGP4 $331
JUMPV
LABELV $330
ADDRLP4 0
INDIRI4
CNSTI4 288
LTI4 $334
ADDRLP4 0
INDIRI4
CNSTI4 544
GEI4 $334
line 309
;309:		if (str[0] != '*') {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $335
line 310
;310:			cgs.gameSounds[num - CS_SOUNDS] = trap_S_RegisterSound(str, qfalse);
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+35872-1152
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 311
;311:		}
line 312
;312:	} else if (num >= CS_PLAYERS && num < CS_PLAYERS + MAX_CLIENTS) {
ADDRGP4 $335
JUMPV
LABELV $334
ADDRLP4 0
INDIRI4
CNSTI4 544
LTI4 $340
ADDRLP4 0
INDIRI4
CNSTI4 608
GEI4 $340
line 313
;313:		CG_NewClientInfo(num - CS_PLAYERS);
ADDRLP4 0
INDIRI4
CNSTI4 544
SUBI4
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 314
;314:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 315
;315:	} else if (num == CS_FLAGSTATUS) {
ADDRGP4 $341
JUMPV
LABELV $340
ADDRLP4 0
INDIRI4
CNSTI4 23
NEI4 $342
line 316
;316:		if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $344
line 318
;317:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;318:			cgs.redflag = str[0] - '0';
ADDRGP4 cgs+34832
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 319
;319:			cgs.blueflag = str[1] - '0';
ADDRGP4 cgs+34836
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 320
;320:		} else if (cgs.gametype == GT_1FCTF) {
ADDRGP4 $343
JUMPV
LABELV $344
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $343
line 321
;321:			cgs.flagStatus = str[0] - '0';
ADDRGP4 cgs+34840
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 322
;322:		}
line 323
;323:	} else if (num == CS_SHADERSTATE) {
ADDRGP4 $343
JUMPV
LABELV $342
ADDRLP4 0
INDIRI4
CNSTI4 24
NEI4 $353
line 324
;324:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 325
;325:	}
LABELV $353
LABELV $343
LABELV $341
LABELV $335
LABELV $331
LABELV $328
LABELV $321
LABELV $315
LABELV $309
LABELV $303
LABELV $297
LABELV $293
LABELV $289
LABELV $285
LABELV $282
LABELV $279
LABELV $276
LABELV $274
LABELV $272
LABELV $270
LABELV $268
line 327
;326:
;327:}
LABELV $266
endproc CG_ConfigStringModified 48 12
proc CG_AddToTeamChat 40 0
line 336
;328:
;329:
;330:/*
;331:=======================
;332:CG_AddToTeamChat
;333:
;334:=======================
;335:*/
;336:static void CG_AddToTeamChat(const char *str) {
line 342
;337:	int len;
;338:	char *p, *ls;
;339:	int lastcolor;
;340:	int chatHeight;
;341:
;342:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $356
line 343
;343:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 344
;344:	} else {
ADDRGP4 $357
JUMPV
LABELV $356
line 345
;345:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 346
;346:	}
LABELV $357
line 348
;347:
;348:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $363
ADDRGP4 cg_teamChatTime+12
INDIRI4
CNSTI4 0
GTI4 $360
LABELV $363
line 350
;349:		// team chat disabled, dump into normal chat
;350:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 cgs+148688
ADDRLP4 20
INDIRI4
ASGNI4
ADDRGP4 cgs+148684
ADDRLP4 20
INDIRI4
ASGNI4
line 351
;351:		return;
ADDRGP4 $355
JUMPV
LABELV $360
line 354
;352:	}
;353:
;354:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 356
;355:
;356:	p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 241
MULI4
ADDRGP4 cgs+146724
ADDP4
ASGNP4
line 357
;357:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 359
;358:
;359:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 361
;360:
;361:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $369
JUMPV
LABELV $368
line 362
;362:	while (*str) {
line 363
;363:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $371
line 364
;364:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $373
line 365
;365:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 366
;366:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 367
;367:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 368
;368:			}
LABELV $373
line 369
;369:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 371
;370:
;371:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148652
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 373
;372:
;373:			cgs.teamChatPos++;
ADDRLP4 20
ADDRGP4 cgs+148684
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 374
;374:			p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 241
MULI4
ADDRGP4 cgs+146724
ADDP4
ASGNP4
line 375
;375:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 376
;376:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI1 94
ASGNI1
line 377
;377:			*p++ = lastcolor;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 378
;378:			len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 379
;379:			ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 380
;380:		}
LABELV $371
line 382
;381:
;382:		if (Q_IsColorString(str)) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $381
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $381
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $381
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $381
line 383
;383:			*p++ = *str++;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI1
ASGNI1
line 384
;384:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 385
;385:			*p++ = *str++;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI1
ASGNI1
line 386
;386:			continue;
ADDRGP4 $369
JUMPV
LABELV $381
line 388
;387:		}
;388:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $383
line 389
;389:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 390
;390:		}
LABELV $383
line 391
;391:		*p++ = *str++;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI1
ASGNI1
line 392
;392:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 393
;393:	}
LABELV $369
line 362
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $368
line 394
;394:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 396
;395:
;396:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148652
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 397
;397:	cgs.teamChatPos++;
ADDRLP4 20
ADDRGP4 cgs+148684
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 399
;398:
;399:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+148684
INDIRI4
ADDRGP4 cgs+148688
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $389
line 400
;400:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+148688
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $389
line 401
;401:}
LABELV $355
endproc CG_AddToTeamChat 40 0
proc CG_MapRestart 0 8
line 414
;402:
;403:/*
;404:===============
;405:CG_MapRestart
;406:
;407:The server has issued a map_restart, so the next snapshot
;408:is completely new and should not be interpolated to.
;409:
;410:A tournement restart will clear everything, but doesn't
;411:require a reload of all the media
;412:===============
;413:*/
;414:static void CG_MapRestart(void) {
line 415
;415:	if (cg_showmiss.integer) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $396
line 416
;416:		CG_Printf("CG_MapRestart\n");
ADDRGP4 $399
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 417
;417:	}
LABELV $396
line 419
;418:
;419:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 420
;420:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 421
;421:	CG_ClearParticles();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 424
;422:
;423:	// make sure the "3 frags left" warnings play again
;424:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+107620
CNSTI4 0
ASGNI4
line 425
;425:	cg.timelimitWarnings = 0;
ADDRGP4 cg+107616
CNSTI4 0
ASGNI4
line 427
;426:
;427:	cg.rewardTime = 0;
ADDRGP4 cg+125532
CNSTI4 0
ASGNI4
line 428
;428:	cg.rewardStack = 0;
ADDRGP4 cg+125528
CNSTI4 0
ASGNI4
line 429
;429:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 430
;430:	cg.levelShot = qfalse;
ADDRGP4 cg+12
CNSTI4 0
ASGNI4
line 432
;431:
;432:	cgs.voteTime = 0;
ADDRGP4 cgs+31700
CNSTI4 0
ASGNI4
line 434
;433:
;434:	cg.mapRestart = qtrue;
ADDRGP4 cg+107624
CNSTI4 1
ASGNI4
line 436
;435:
;436:	CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 438
;437:
;438:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 440
;439:
;440:	cg.allowPickupPrediction = cg.time + PICKUP_PREDICTION_DELAY;
ADDRGP4 cg+157004
ADDRGP4 cg+107604
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 445
;441:
;442:	// we really should clear more parts of cg here and stop sounds
;443:
;444:	// play the "fight" sound if this is a restart without warmup
;445:	if (cg.warmup == 0 /* && cgs.gametype == GT_TOURNAMENT */) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
NEI4 $410
line 447
;446:		// force sound playback in CG_WarmupEvents()
;447:		cg.warmup = cg.time;
ADDRGP4 cg+125752
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 448
;448:		cg.warmupCount = -1;
ADDRGP4 cg+125756
CNSTI4 -1
ASGNI4
line 449
;449:	}
LABELV $410
line 451
;450:
;451:	trap_Cvar_Set("cg_thirdPerson", "0");
ADDRGP4 $416
ARGP4
ADDRGP4 $417
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 452
;452:}
LABELV $395
endproc CG_MapRestart 0 8
proc CG_RemoveChatEscapeChar 12 0
line 460
;453:
;454:
;455:/*
;456:=================
;457:CG_RemoveChatEscapeChar
;458:=================
;459:*/
;460:static void CG_RemoveChatEscapeChar(char *text) {
line 463
;461:	int i, l;
;462:
;463:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 464
;464:	for (i = 0; text[i]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $422
JUMPV
LABELV $419
line 465
;465:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $423
line 466
;466:			continue;
ADDRGP4 $420
JUMPV
LABELV $423
line 467
;467:		text[l] = text[i];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 468
;468:		l++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 469
;469:	}
LABELV $420
line 464
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $422
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $419
line 470
;470:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 471
;471:}
LABELV $418
endproc CG_RemoveChatEscapeChar 12 0
proc CG_ServerCommand 408 12
line 482
;472:
;473:
;474:/*
;475:=================
;476:CG_ServerCommand
;477:
;478:The string has been tokenized and can be retrieved with
;479:Cmd_Argc() / Cmd_Argv()
;480:=================
;481:*/
;482:static void CG_ServerCommand(void) {
line 486
;483:	const char *cmd, *id;
;484:	char		text[MAX_SAY_TEXT];
;485:
;486:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 160
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 160
INDIRP4
ASGNP4
line 488
;487:
;488:	if (!cmd[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $426
line 490
;489:		// server claimed the command
;490:		return;
ADDRGP4 $425
JUMPV
LABELV $426
line 493
;491:	}
;492:
;493:	if (!strcmp(cmd, "cp")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $430
ARGP4
ADDRLP4 164
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $428
line 494
;494:		CG_CenterPrint(CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH);
CNSTI4 1
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 495
;495:		return;
ADDRGP4 $425
JUMPV
LABELV $428
line 498
;496:	}
;497:
;498:	if (!strcmp(cmd, "cs")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $433
ARGP4
ADDRLP4 168
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
NEI4 $431
line 499
;499:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 500
;500:		return;
ADDRGP4 $425
JUMPV
LABELV $431
line 503
;501:	}
;502:
;503:	if (!strcmp(cmd, "print")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $436
ARGP4
ADDRLP4 172
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
NEI4 $434
line 504
;504:		CG_Printf("%s", CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $437
ARGP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 505
;505:		cmd = CG_Argv(1);			// yes, this is obviously a hack, but so is the way we hear about
CNSTI4 1
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 180
INDIRP4
ASGNP4
line 507
;506:		// votes passing or failing
;507:		if (!Q_stricmpn(cmd, "vote failed", 11) || !Q_stricmpn(cmd, "team vote failed", 16)) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $440
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 184
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $442
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $441
ARGP4
CNSTI4 16
ARGI4
ADDRLP4 188
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $438
LABELV $442
line 508
;508:			trap_S_StartLocalSound(cgs.media.voteFailed, CHAN_ANNOUNCER);
ADDRGP4 cgs+148744+1028
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 509
;509:		} else if (!Q_stricmpn(cmd, "vote passed", 11) || !Q_stricmpn(cmd, "team vote passed", 16)) {
ADDRGP4 $425
JUMPV
LABELV $438
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $447
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 192
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
EQI4 $449
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $448
ARGP4
CNSTI4 16
ARGI4
ADDRLP4 196
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $425
LABELV $449
line 510
;510:			trap_S_StartLocalSound(cgs.media.votePassed, CHAN_ANNOUNCER);
ADDRGP4 cgs+148744+1024
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 511
;511:		}
line 512
;512:		return;
ADDRGP4 $425
JUMPV
LABELV $434
line 515
;513:	}
;514:
;515:	if (!strcmp(cmd, "chat")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $454
ARGP4
ADDRLP4 176
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $452
line 516
;516:		if (!cg_teamChatsOnly.integer) {
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $425
line 517
;517:			trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+148744+904
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 518
;518:			Q_strncpyz(text, CG_Argv(1), MAX_SAY_TEXT);
CNSTI4 1
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 180
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 519
;519:			CG_RemoveChatEscapeChar(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 520
;520:			id = CG_Argv(2);
CNSTI4 2
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 184
INDIRP4
ASGNP4
line 521
;521:			if (*id >= '0' && *id <= '9')
ADDRLP4 188
ADDRLP4 156
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 48
LTI4 $460
ADDRLP4 188
INDIRI4
CNSTI4 57
GTI4 $460
line 522
;522:				CG_Printf("(%i) %s\n", atoi(id), text);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 $462
ARGP4
ADDRLP4 192
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
ADDRGP4 $425
JUMPV
LABELV $460
line 524
;523:			else
;524:				CG_Printf("%s\n", text);
ADDRGP4 $463
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 525
;525:		}
line 526
;526:		return;
ADDRGP4 $425
JUMPV
LABELV $452
line 529
;527:	}
;528:
;529:	if (!strcmp(cmd, "tchat")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $466
ARGP4
ADDRLP4 180
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $464
line 530
;530:		trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+148744+904
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 531
;531:		Q_strncpyz(text, CG_Argv(1), MAX_SAY_TEXT);
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 184
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 532
;532:		CG_RemoveChatEscapeChar(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 533
;533:		CG_AddToTeamChat(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 534
;534:		id = CG_Argv(2);
CNSTI4 2
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 188
INDIRP4
ASGNP4
line 535
;535:		if (*id >= '0' && *id <= '9')
ADDRLP4 192
ADDRLP4 156
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 48
LTI4 $469
ADDRLP4 192
INDIRI4
CNSTI4 57
GTI4 $469
line 536
;536:			CG_Printf("(%i) %s\n", atoi(id), text);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 $462
ARGP4
ADDRLP4 196
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
ADDRGP4 $425
JUMPV
LABELV $469
line 538
;537:		else
;538:			CG_Printf("%s\n", text);
ADDRGP4 $463
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 539
;539:		return;
ADDRGP4 $425
JUMPV
LABELV $464
line 542
;540:	}
;541:
;542:	if (!strcmp(cmd, "scores")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $473
ARGP4
ADDRLP4 184
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $471
line 543
;543:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 544
;544:		return;
ADDRGP4 $425
JUMPV
LABELV $471
line 547
;545:	}
;546:
;547:	if (!strcmp(cmd, "tinfo")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $476
ARGP4
ADDRLP4 188
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $474
line 548
;548:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 549
;549:		return;
ADDRGP4 $425
JUMPV
LABELV $474
line 552
;550:	}
;551:
;552:	if (!strcmp(cmd, "map_restart")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $479
ARGP4
ADDRLP4 192
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
NEI4 $477
line 553
;553:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 554
;554:		return;
ADDRGP4 $425
JUMPV
LABELV $477
line 557
;555:	}
;556:
;557:	if (Q_stricmp(cmd, "remapShader") == 0) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $482
ARGP4
ADDRLP4 196
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $480
line 558
;558:		if (trap_Argc() == 4) {
ADDRLP4 200
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 4
NEI4 $425
line 563
;559:			char shader1[MAX_QPATH];
;560:			char shader2[MAX_QPATH];
;561:			char shader3[MAX_QPATH];
;562:
;563:			Q_strncpyz(shader1, CG_Argv(1), sizeof(shader1));
CNSTI4 1
ARGI4
ADDRLP4 396
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 204
ARGP4
ADDRLP4 396
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 564
;564:			Q_strncpyz(shader2, CG_Argv(2), sizeof(shader2));
CNSTI4 2
ARGI4
ADDRLP4 400
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 268
ARGP4
ADDRLP4 400
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 565
;565:			Q_strncpyz(shader3, CG_Argv(3), sizeof(shader3));
CNSTI4 3
ARGI4
ADDRLP4 404
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 332
ARGP4
ADDRLP4 404
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 567
;566:
;567:			trap_R_RemapShader(shader1, shader2, shader3);
ADDRLP4 204
ARGP4
ADDRLP4 268
ARGP4
ADDRLP4 332
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 568
;568:		}
line 570
;569:
;570:		return;
ADDRGP4 $425
JUMPV
LABELV $480
line 574
;571:	}
;572:
;573:	// loaddeferred can be both a servercmd and a consolecmd
;574:	if (!strcmp(cmd, "loaddeferred")) {	// FIXME: spelled wrong, but not changing for demo
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $487
ARGP4
ADDRLP4 200
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $485
line 575
;575:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 576
;576:		return;
ADDRGP4 $425
JUMPV
LABELV $485
line 581
;577:	}
;578:
;579:	// clientLevelShot is sent before taking a special screenshot for
;580:	// the menu system during development
;581:	if (!strcmp(cmd, "clientLevelShot")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $490
ARGP4
ADDRLP4 204
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $488
line 582
;582:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 583
;583:		return;
ADDRGP4 $425
JUMPV
LABELV $488
line 586
;584:	}
;585:
;586:	if (cgs.defrag && cg.demoPlayback) {
ADDRGP4 cgs+150008
INDIRI4
CNSTI4 0
EQI4 $492
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $492
line 587
;587:		if (!strcmp(cmd, "aswitch") || !strcmp(cmd, "stats")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $498
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
EQI4 $500
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $499
ARGP4
ADDRLP4 212
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $496
LABELV $500
line 588
;588:			return;
ADDRGP4 $425
JUMPV
LABELV $496
line 590
;589:		}
;590:	}
LABELV $492
line 592
;591:
;592:	CG_Printf("Unknown client game command: %s\n", cmd);
ADDRGP4 $501
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 593
;593:}
LABELV $425
endproc CG_ServerCommand 408 12
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 604
;594:
;595:
;596:/*
;597:====================
;598:CG_ExecuteNewServerCommands
;599:
;600:Execute all of the server commands that were received along
;601:with this this snapshot.
;602:====================
;603:*/
;604:void CG_ExecuteNewServerCommands(int latestSequence) {
ADDRGP4 $504
JUMPV
LABELV $503
line 605
;605:	while (cgs.serverCommandSequence < latestSequence) {
line 606
;606:		if (trap_GetServerCommand(++cgs.serverCommandSequence)) {
ADDRLP4 0
ADDRGP4 cgs+31468
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $507
line 607
;607:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 608
;608:		}
LABELV $507
line 609
;609:	}
LABELV $504
line 605
ADDRGP4 cgs+31468
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $503
line 610
;610:}
LABELV $502
endproc CG_ExecuteNewServerCommands 12 4
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $501
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $499
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $498
byte 1 97
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $490
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $487
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $482
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 112
byte 1 83
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $479
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $476
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 0
align 1
LABELV $473
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $466
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $463
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $462
byte 1 40
byte 1 37
byte 1 105
byte 1 41
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $454
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $448
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $447
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $441
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $440
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $437
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $436
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $433
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $430
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $417
byte 1 48
byte 1 0
align 1
LABELV $416
byte 1 99
byte 1 103
byte 1 95
byte 1 116
byte 1 104
byte 1 105
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $399
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 112
byte 1 82
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $196
byte 1 103
byte 1 95
byte 1 115
byte 1 121
byte 1 110
byte 1 99
byte 1 104
byte 1 114
byte 1 111
byte 1 110
byte 1 111
byte 1 117
byte 1 115
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $186
byte 1 112
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 95
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 0
align 1
LABELV $181
byte 1 112
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 95
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $177
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $174
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $172
byte 1 109
byte 1 97
byte 1 112
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 98
byte 1 115
byte 1 112
byte 1 0
align 1
LABELV $169
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $168
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 97
byte 1 120
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $166
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $164
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $162
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $160
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $158
byte 1 100
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $155
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $154
byte 1 117
byte 1 105
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $153
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
