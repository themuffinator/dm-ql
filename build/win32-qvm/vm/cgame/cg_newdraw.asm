data
export drawTeamOverlayModificationCount
align 4
LABELV drawTeamOverlayModificationCount
byte 4 -1
code
proc CG_DrawPlayerArmorIcon 36 32
file "..\..\..\..\code\cgame\cg_newdraw.c"
line 7
;1:#include "cg_local.h"
;2:
;3:extern displayContextDef_t cgDC;
;4:
;5:int drawTeamOverlayModificationCount = -1;
;6:
;7:static void CG_DrawPlayerArmorIcon(rectDef_t *rect, qboolean draw2D) {
line 13
;8:	centity_t *cent;
;9:	playerState_t *ps;
;10:	vec3_t		angles;
;11:	vec3_t		origin;
;12:
;13:	if (cg_drawStatus.integer == 0) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
NEI4 $82
line 14
;14:		return;
ADDRGP4 $81
JUMPV
LABELV $82
line 17
;15:	}
;16:
;17:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 12
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 18
;18:	ps = &cg.snap->ps;
ADDRLP4 16
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 20
;19:
;20:	if (draw2D || (!cg_draw3dIcons.integer && cg_drawIcons.integer)) { // bk001206 - parentheses
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $91
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
NEI4 $87
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $87
LABELV $91
line 21
;21:		CG_DrawPic(rect->x, rect->y + rect->h / 2 + 1, rect->w, rect->h, cgs.media.armorIcon, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
CNSTF4 1065353216
ADDF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+146664+156
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 22
;22:	} else if (cg_draw3dIcons.integer) {
ADDRGP4 $88
JUMPV
LABELV $87
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $94
line 23
;23:		VectorClear(angles);
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0+4
CNSTF4 0
ASGNF4
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 24
;24:		origin[0] = 90;
ADDRLP4 20
CNSTF4 1119092736
ASGNF4
line 25
;25:		origin[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 26
;26:		origin[2] = -10;
ADDRLP4 20+8
CNSTF4 3240099840
ASGNF4
line 27
;27:		angles[YAW] = (cg.time & 2047) * 360 / 2048.0;
ADDRLP4 0+4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
CNSTI4 360
MULI4
CVIF4 4
CNSTF4 973078528
MULF4
ASGNF4
line 29
;28:
;29:		CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cgs.media.armorModel, 0, origin, angles);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+146664+152
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 30
;30:	}
LABELV $94
LABELV $88
line 32
;31:
;32:}
LABELV $81
endproc CG_DrawPlayerArmorIcon 36 32
proc CG_DrawPlayerArmorValue 36 40
line 34
;33:
;34:static void CG_DrawPlayerArmorValue(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 40
;35:	char	num[16];
;36:	int value;
;37:	centity_t *cent;
;38:	playerState_t *ps;
;39:
;40:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 24
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 41
;41:	ps = &cg.snap->ps;
ADDRLP4 20
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 43
;42:
;43:	value = ps->stats[STAT_ARMOR];
ADDRLP4 0
ADDRLP4 20
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 46
;44:
;45:
;46:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $108
line 47
;47:		trap_R_SetColor(color);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 48
;48:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 49
;49:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 50
;50:	} else {
ADDRGP4 $109
JUMPV
LABELV $108
line 51
;51:		Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 52
;52:		value = CG_Text_Width(num, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRF4
CVFI4 4
ASGNI4
line 53
;53:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 54
;54:	}
LABELV $109
line 55
;55:}
LABELV $105
endproc CG_DrawPlayerArmorValue 36 40
proc CG_DrawPlayerAmmoIcon 44 32
line 57
;56:
;57:static void CG_DrawPlayerAmmoIcon(rectDef_t *rect, qboolean draw2D) {
line 63
;58:	centity_t *cent;
;59:	playerState_t *ps;
;60:	vec3_t		angles;
;61:	vec3_t		origin;
;62:
;63:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 64
;64:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 66
;65:
;66:	if (draw2D || (!cg_draw3dIcons.integer && cg_drawIcons.integer)) { // bk001206 - parentheses
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $118
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
NEI4 $114
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $114
LABELV $118
line 68
;67:		qhandle_t	icon;
;68:		icon = cg_weapons[cg.predictedPlayerState.weapon].ammoIcon;
ADDRLP4 32
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+72
ADDP4
INDIRI4
ASGNI4
line 69
;69:		if (icon) {
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $115
line 70
;70:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, icon, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 71
;71:		}
line 72
;72:	} else if (cg_draw3dIcons.integer) {
ADDRGP4 $115
JUMPV
LABELV $114
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $124
line 73
;73:		if (cent->currentState.weapon && cg_weapons[cent->currentState.weapon].ammoModel) {
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $127
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+76
ADDP4
INDIRI4
CNSTI4 0
EQI4 $127
line 74
;74:			VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 75
;75:			origin[0] = 70;
ADDRLP4 20
CNSTF4 1116471296
ASGNF4
line 76
;76:			origin[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 77
;77:			origin[2] = 0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 78
;78:			angles[YAW] = 90 + 20 * sin(cg.time / 1000.0);
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 36
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 36
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 79
;79:			CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cg_weapons[cent->currentState.weapon].ammoModel, 0, origin, angles);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+76
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 80
;80:		}
LABELV $127
line 81
;81:	}
LABELV $124
LABELV $115
line 82
;82:}
LABELV $111
endproc CG_DrawPlayerAmmoIcon 44 32
proc CG_DrawPlayerAmmoValue 36 40
line 84
;83:
;84:static void CG_DrawPlayerAmmoValue(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 90
;85:	char	num[16];
;86:	int value;
;87:	centity_t *cent;
;88:	playerState_t *ps;
;89:
;90:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 91
;91:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 93
;92:
;93:	if (cent->currentState.weapon) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $140
line 94
;94:		value = ps->ammo[cent->currentState.weapon];
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
line 95
;95:		if (value > -1) {
ADDRLP4 8
INDIRI4
CNSTI4 -1
LEI4 $142
line 96
;96:			if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $144
line 97
;97:				trap_R_SetColor(color);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 98
;98:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 99
;99:				trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 100
;100:			} else {
ADDRGP4 $145
JUMPV
LABELV $144
line 101
;101:				Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 102
;102:				value = CG_Text_Width(num, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 28
INDIRF4
CVFI4 4
ASGNI4
line 103
;103:				CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 104
;104:			}
LABELV $145
line 105
;105:		}
LABELV $142
line 106
;106:	}
LABELV $140
line 108
;107:
;108:}
LABELV $137
endproc CG_DrawPlayerAmmoValue 36 40
proc CG_DrawPlayerHead 52 24
line 111
;109:
;110:
;111:static void CG_DrawPlayerHead(rectDef_t *rect, qboolean draw2D) {
line 115
;112:	vec3_t		angles;
;113:	float		size, stretch;
;114:	float		frac;
;115:	float		x = rect->x;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 117
;116:
;117:	VectorClear(angles);
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 4+4
CNSTF4 0
ASGNF4
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 119
;118:
;119:	if (cg.damageTime && cg.time - cg.damageTime < DAMAGE_TIME) {
ADDRGP4 cg+125792
INDIRI4
CNSTI4 0
EQI4 $149
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125792
INDIRI4
SUBI4
CNSTI4 500
GEI4 $149
line 120
;120:		frac = (float)(cg.time - cg.damageTime) / DAMAGE_TIME;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125792
INDIRI4
SUBI4
CVIF4 4
CNSTF4 990057071
MULF4
ASGNF4
line 121
;121:		size = rect->w * 1.25 * (1.5 - frac * 0.5);
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1067450368
MULF4
CNSTF4 1069547520
ADDRLP4 0
INDIRF4
CNSTF4 1056964608
MULF4
SUBF4
MULF4
ASGNF4
line 123
;122:
;123:		stretch = size - rect->w * 1.25;
ADDRLP4 24
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1067450368
MULF4
SUBF4
ASGNF4
line 125
;124:		// kick in the direction of damage
;125:		x -= stretch * 0.5 + cg.damageX * stretch * 0.5;
ADDRLP4 28
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1056964608
MULF4
ADDRGP4 cg+125796
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
CNSTF4 1056964608
MULF4
ADDF4
SUBF4
ASGNF4
line 127
;126:
;127:		cg.headStartYaw = 180 + cg.damageX * 45;
ADDRGP4 cg+125828
ADDRGP4 cg+125796
INDIRF4
CNSTF4 1110704128
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 129
;128:
;129:		cg.headEndYaw = 180 + 20 * cos(crandom() * M_PI);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 36
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125816
ADDRLP4 36
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 130
;130:		cg.headEndPitch = 5 * cos(crandom() * M_PI);
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 44
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125812
ADDRLP4 44
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 132
;131:
;132:		cg.headStartTime = cg.time;
ADDRGP4 cg+125832
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 133
;133:		cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+125820
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1031406068
MULF4
ADDF4
CVFI4 4
ASGNI4
line 134
;134:	} else {
ADDRGP4 $150
JUMPV
LABELV $149
line 135
;135:		if (cg.time >= cg.headEndTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125820
INDIRI4
LTI4 $165
line 137
;136:			// select a new head angle
;137:			cg.headStartYaw = cg.headEndYaw;
ADDRGP4 cg+125828
ADDRGP4 cg+125816
INDIRF4
ASGNF4
line 138
;138:			cg.headStartPitch = cg.headEndPitch;
ADDRGP4 cg+125824
ADDRGP4 cg+125812
INDIRF4
ASGNF4
line 139
;139:			cg.headStartTime = cg.headEndTime;
ADDRGP4 cg+125832
ADDRGP4 cg+125820
INDIRI4
ASGNI4
line 140
;140:			cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+125820
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1031406068
MULF4
ADDF4
CVFI4 4
ASGNI4
line 142
;141:
;142:			cg.headEndYaw = 180 + 20 * cos(crandom() * M_PI);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 36
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125816
ADDRLP4 36
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 143
;143:			cg.headEndPitch = 5 * cos(crandom() * M_PI);
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 44
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125812
ADDRLP4 44
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 144
;144:		}
LABELV $165
line 146
;145:
;146:		size = rect->w * 1.25;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1067450368
MULF4
ASGNF4
line 147
;147:	}
LABELV $150
line 150
;148:
;149:	// if the server was frozen for a while we may have a bad head start time
;150:	if (cg.headStartTime > cg.time) {
ADDRGP4 cg+125832
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $179
line 151
;151:		cg.headStartTime = cg.time;
ADDRGP4 cg+125832
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 152
;152:	}
LABELV $179
line 154
;153:
;154:	frac = (cg.time - cg.headStartTime) / (float)(cg.headEndTime - cg.headStartTime);
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125832
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+125820
INDIRI4
ADDRGP4 cg+125832
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 155
;155:	frac = frac * frac * (3 - 2 * frac);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1077936128
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
MULF4
SUBF4
MULF4
ASGNF4
line 156
;156:	angles[YAW] = cg.headStartYaw + (cg.headEndYaw - cg.headStartYaw) * frac;
ADDRLP4 4+4
ADDRGP4 cg+125828
INDIRF4
ADDRGP4 cg+125816
INDIRF4
ADDRGP4 cg+125828
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 157
;157:	angles[PITCH] = cg.headStartPitch + (cg.headEndPitch - cg.headStartPitch) * frac;
ADDRLP4 4
ADDRGP4 cg+125824
INDIRF4
ADDRGP4 cg+125812
INDIRF4
ADDRGP4 cg+125824
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 159
;158:
;159:	CG_DrawHead(x, rect->y, rect->w, rect->h, cg.snap->ps.clientNum, angles);
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 160
;160:}
LABELV $146
endproc CG_DrawPlayerHead 52 24
export CG_StatusHandle
proc CG_StatusHandle 0 0
line 162
;161:
;162:qhandle_t CG_StatusHandle(int task) { return qfalse; }
CNSTI4 0
RETI4
LABELV $197
endproc CG_StatusHandle 0 0
proc CG_DrawPlayerStatus 16 24
line 164
;163:
;164:static void CG_DrawPlayerStatus(rectDef_t *rect) {
line 165
;165:	clientInfo_t *ci = &cgs.clientinfo[cg.snap->ps.clientNum];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 166
;166:	if (ci) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $201
line 167
;167:		qhandle_t h = CG_StatusHandle(ci->teamTask);
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 168
;168:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, h, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 169
;169:	}
LABELV $201
line 170
;170:}
LABELV $198
endproc CG_DrawPlayerStatus 16 24
proc CG_DrawPlayerItem 32 32
line 173
;171:
;172:
;173:static void CG_DrawPlayerItem(rectDef_t *rect, float scale, qboolean draw2D) {
line 177
;174:	int		value;
;175:	vec3_t origin, angles;
;176:
;177:	value = cg.snap->ps.stats[STAT_HOLDABLE_ITEM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ASGNI4
line 178
;178:	if (value) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $205
line 179
;179:		CG_RegisterItemVisuals(value);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 181
;180:
;181:		if (qtrue) {
line 182
;182:			CG_RegisterItemVisuals(value);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 183
;183:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cg_items[value].icon, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 184
;184:		} else {
ADDRGP4 $208
JUMPV
LABELV $207
line 185
;185:			VectorClear(angles);
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 4+4
CNSTF4 0
ASGNF4
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 186
;186:			origin[0] = 90;
ADDRLP4 16
CNSTF4 1119092736
ASGNF4
line 187
;187:			origin[1] = 0;
ADDRLP4 16+4
CNSTF4 0
ASGNF4
line 188
;188:			origin[2] = -10;
ADDRLP4 16+8
CNSTF4 3240099840
ASGNF4
line 189
;189:			angles[YAW] = (cg.time & 2047) * 360 / 2048.0;
ADDRLP4 4+4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
CNSTI4 360
MULI4
CVIF4 4
CNSTF4 973078528
MULF4
ASGNF4
line 190
;190:			CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cg_items[value].models[0], 0, origin, angles);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+4
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 191
;191:		}
LABELV $208
line 192
;192:	}
LABELV $205
line 193
;193:}
LABELV $203
endproc CG_DrawPlayerItem 32 32
proc CG_DrawPlayerHealth 32 40
line 196
;194:
;195:
;196:static void CG_DrawPlayerHealth(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 201
;197:	playerState_t *ps;
;198:	int value;
;199:	char	num[16];
;200:
;201:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 203
;202:
;203:	value = ps->stats[STAT_HEALTH];
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 205
;204:
;205:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $219
line 206
;206:		trap_R_SetColor(color);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 207
;207:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 208
;208:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 209
;209:	} else {
ADDRGP4 $220
JUMPV
LABELV $219
line 210
;210:		Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 8
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 211
;211:		value = CG_Text_Width(num, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 8
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
CVFI4 4
ASGNI4
line 212
;212:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 213
;213:	}
LABELV $220
line 214
;214:}
LABELV $217
endproc CG_DrawPlayerHealth 32 40
proc CG_DrawRedScore 28 40
line 217
;215:
;216:
;217:static void CG_DrawRedScore(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 220
;218:	int value;
;219:	char num[16];
;220:	if (cgs.scores1 == SCORE_NOT_PRESENT) {
ADDRGP4 cgs+32744
INDIRI4
CNSTI4 -9999
NEI4 $222
line 221
;221:		Com_sprintf(num, sizeof(num), "-");
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $225
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 222
;222:	} else {
ADDRGP4 $223
JUMPV
LABELV $222
line 223
;223:		Com_sprintf(num, sizeof(num), "%i", cgs.scores1);
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRGP4 cgs+32744
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 224
;224:	}
LABELV $223
line 225
;225:	value = CG_Text_Width(num, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
ASGNI4
line 226
;226:	CG_Text_Paint(rect->x + rect->w - value, rect->y + rect->h, scale, color, num, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 227
;227:}
LABELV $221
endproc CG_DrawRedScore 28 40
proc CG_DrawBlueScore 28 40
line 229
;228:
;229:static void CG_DrawBlueScore(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 233
;230:	int value;
;231:	char num[16];
;232:
;233:	if (cgs.scores2 == SCORE_NOT_PRESENT) {
ADDRGP4 cgs+32748
INDIRI4
CNSTI4 -9999
NEI4 $228
line 234
;234:		Com_sprintf(num, sizeof(num), "-");
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $225
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 235
;235:	} else {
ADDRGP4 $229
JUMPV
LABELV $228
line 236
;236:		Com_sprintf(num, sizeof(num), "%i", cgs.scores2);
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRGP4 cgs+32748
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 237
;237:	}
LABELV $229
line 238
;238:	value = CG_Text_Width(num, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
ASGNI4
line 239
;239:	CG_Text_Paint(rect->x + rect->w - value, rect->y + rect->h, scale, color, num, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 240
;240:}
LABELV $227
endproc CG_DrawBlueScore 28 40
proc CG_DrawRedName 4 40
line 243
;241:
;242:// FIXME: team name support
;243:static void CG_DrawRedName(rectDef_t *rect, float scale, const vec4_t color, int textStyle) {
line 244
;244:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cg_redTeamName.string, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg_redTeamName+16
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 245
;245:}
LABELV $232
endproc CG_DrawRedName 4 40
proc CG_DrawBlueName 4 40
line 247
;246:
;247:static void CG_DrawBlueName(rectDef_t *rect, float scale, const vec4_t color, int textStyle) {
line 248
;248:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cg_blueTeamName.string, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg_blueTeamName+16
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 249
;249:}
LABELV $234
endproc CG_DrawBlueName 4 40
proc CG_DrawBlueFlagName 12 40
line 251
;250:
;251:static void CG_DrawBlueFlagName(rectDef_t *rect, float scale, const vec4_t color, int textStyle) {
line 253
;252:	int i;
;253:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $240
JUMPV
LABELV $237
line 254
;254:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_RED && cgs.clientinfo[i].powerups & (1 << PW_BLUEFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
EQI4 $242
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $242
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+108
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $242
line 255
;255:			CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cgs.clientinfo[i].name, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 256
;256:			return;
ADDRGP4 $236
JUMPV
LABELV $242
line 258
;257:		}
;258:	}
LABELV $238
line 253
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $240
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $237
line 259
;259:}
LABELV $236
endproc CG_DrawBlueFlagName 12 40
data
align 4
LABELV $259
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
align 4
LABELV $266
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
code
proc CG_DrawBlueFlagStatus 28 24
line 261
;260:
;261:static void CG_DrawBlueFlagStatus(rectDef_t *rect, qhandle_t shader) {
line 262
;262:	if (cgs.gametype != GT_CTF && cgs.gametype != GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $252
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
EQI4 $252
line 263
;263:		if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $251
line 264
;264:			vec4_t color = { 0, 0, 1, 1 };
ADDRLP4 0
ADDRGP4 $259
INDIRB
ASGNB 16
line 265
;265:			trap_R_SetColor(color);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 266
;266:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.blueSkullIcon, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+146664+32
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 267
;267:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 268
;268:		}
line 269
;269:		return;
ADDRGP4 $251
JUMPV
LABELV $252
line 271
;270:	}
;271:	if (shader) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $262
line 272
;272:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 273
;273:	} else {
ADDRGP4 $263
JUMPV
LABELV $262
line 274
;274:		gitem_t *item = BG_FindItemForPowerup(PW_BLUEFLAG);
CNSTI4 8
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 275
;275:		if (item) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $264
line 276
;276:			vec4_t color = { 0, 0, 1, 1 };
ADDRLP4 8
ADDRGP4 $266
INDIRB
ASGNB 16
line 277
;277:			trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 278
;278:			if (cgs.blueflag >= 0 && cgs.blueflag <= 2) {
ADDRGP4 cgs+32756
INDIRI4
CNSTI4 0
LTI4 $267
ADDRGP4 cgs+32756
INDIRI4
CNSTI4 2
GTI4 $267
line 279
;279:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[cgs.blueflag], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+32756
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146664+1240
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 280
;280:			} else {
ADDRGP4 $268
JUMPV
LABELV $267
line 281
;281:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[0], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+146664+1240
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 282
;282:			}
LABELV $268
line 283
;283:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 284
;284:		}
LABELV $264
line 285
;285:	}
LABELV $263
line 286
;286:}
LABELV $251
endproc CG_DrawBlueFlagStatus 28 24
proc CG_DrawBlueFlagHead 28 24
line 288
;287:
;288:static void CG_DrawBlueFlagHead(rectDef_t *rect) {
line 290
;289:	int i;
;290:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $280
JUMPV
LABELV $277
line 291
;291:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_RED && cgs.clientinfo[i].powerups & (1 << PW_BLUEFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
EQI4 $282
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $282
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+108
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $282
line 293
;292:			vec3_t angles;
;293:			VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 294
;294:			angles[YAW] = 180 + 20 * sin(cg.time / 650.0);;
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 986293812
MULF4
ARGF4
ADDRLP4 20
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 20
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 295
;295:			CG_DrawHead(rect->x, rect->y, rect->w, rect->h, 0, angles);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 296
;296:			return;
ADDRGP4 $276
JUMPV
LABELV $282
line 298
;297:		}
;298:	}
LABELV $278
line 290
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $280
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $277
line 299
;299:}
LABELV $276
endproc CG_DrawBlueFlagHead 28 24
proc CG_DrawRedFlagName 12 40
line 301
;300:
;301:static void CG_DrawRedFlagName(rectDef_t *rect, float scale, const vec4_t color, int textStyle) {
line 303
;302:	int i;
;303:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $297
JUMPV
LABELV $294
line 304
;304:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_BLUE && cgs.clientinfo[i].powerups & (1 << PW_REDFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
EQI4 $299
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $299
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+108
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $299
line 305
;305:			CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cgs.clientinfo[i].name, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 306
;306:			return;
ADDRGP4 $293
JUMPV
LABELV $299
line 308
;307:		}
;308:	}
LABELV $295
line 303
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $297
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $294
line 309
;309:}
LABELV $293
endproc CG_DrawRedFlagName 12 40
data
align 4
LABELV $316
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
align 4
LABELV $323
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
code
proc CG_DrawRedFlagStatus 28 24
line 311
;310:
;311:static void CG_DrawRedFlagStatus(rectDef_t *rect, qhandle_t shader) {
line 312
;312:	if (cgs.gametype != GT_CTF && cgs.gametype != GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $309
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
EQI4 $309
line 313
;313:		if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $308
line 314
;314:			vec4_t color = { 1, 0, 0, 1 };
ADDRLP4 0
ADDRGP4 $316
INDIRB
ASGNB 16
line 315
;315:			trap_R_SetColor(color);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 316
;316:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.redSkullIcon, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+146664+28
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 317
;317:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 318
;318:		}
line 319
;319:		return;
ADDRGP4 $308
JUMPV
LABELV $309
line 321
;320:	}
;321:	if (shader) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $319
line 322
;322:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 323
;323:	} else {
ADDRGP4 $320
JUMPV
LABELV $319
line 324
;324:		gitem_t *item = BG_FindItemForPowerup(PW_REDFLAG);
CNSTI4 7
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 325
;325:		if (item) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $321
line 326
;326:			vec4_t color = { 1, 0, 0, 1 };
ADDRLP4 8
ADDRGP4 $323
INDIRB
ASGNB 16
line 327
;327:			trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 328
;328:			if (cgs.redflag >= 0 && cgs.redflag <= 2) {
ADDRGP4 cgs+32752
INDIRI4
CNSTI4 0
LTI4 $324
ADDRGP4 cgs+32752
INDIRI4
CNSTI4 2
GTI4 $324
line 329
;329:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[cgs.redflag], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+32752
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146664+1240
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 330
;330:			} else {
ADDRGP4 $325
JUMPV
LABELV $324
line 331
;331:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[0], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+146664+1240
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 332
;332:			}
LABELV $325
line 333
;333:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 334
;334:		}
LABELV $321
line 335
;335:	}
LABELV $320
line 336
;336:}
LABELV $308
endproc CG_DrawRedFlagStatus 28 24
proc CG_DrawRedFlagHead 28 24
line 338
;337:
;338:static void CG_DrawRedFlagHead(rectDef_t *rect) {
line 340
;339:	int i;
;340:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $337
JUMPV
LABELV $334
line 341
;341:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_BLUE && cgs.clientinfo[i].powerups & (1 << PW_REDFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
EQI4 $339
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $339
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+108
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $339
line 343
;342:			vec3_t angles;
;343:			VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 344
;344:			angles[YAW] = 180 + 20 * sin(cg.time / 650.0);;
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 986293812
MULF4
ARGF4
ADDRLP4 20
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 20
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 345
;345:			CG_DrawHead(rect->x, rect->y, rect->w, rect->h, 0, angles);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 346
;346:			return;
ADDRGP4 $333
JUMPV
LABELV $339
line 348
;347:		}
;348:	}
LABELV $335
line 340
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $337
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $334
line 349
;349:}
LABELV $333
endproc CG_DrawRedFlagHead 28 24
proc CG_HarvesterSkulls 60 40
line 351
;350:
;351:static void CG_HarvesterSkulls(rectDef_t *rect, float scale, const vec4_t color, qboolean force2D, int textStyle) {
line 355
;352:	char num[16];
;353:	vec3_t origin, angles;
;354:	qhandle_t handle;
;355:	int value = cg.snap->ps.generic1;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
ASGNI4
line 357
;356:
;357:	if (cgs.gametype != GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
EQI4 $352
line 358
;358:		return;
ADDRGP4 $350
JUMPV
LABELV $352
line 361
;359:	}
;360:
;361:	if (value > 99) {
ADDRLP4 0
INDIRI4
CNSTI4 99
LEI4 $355
line 362
;362:		value = 99;
ADDRLP4 0
CNSTI4 99
ASGNI4
line 363
;363:	}
LABELV $355
line 365
;364:
;365:	Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 366
;366:	value = CG_Text_Width(num, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 48
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 48
INDIRF4
CVFI4 4
ASGNI4
line 367
;367:	CG_Text_Paint(rect->x + (rect->w - value), rect->y + rect->h, scale, color, num, 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
ADDF4
ARGF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 369
;368:
;369:	if (cg_drawIcons.integer) {
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $357
line 370
;370:		if (!force2D && cg_draw3dIcons.integer) {
ADDRFP4 12
INDIRI4
CNSTI4 0
NEI4 $360
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $360
line 371
;371:			VectorClear(angles);
ADDRLP4 20
CNSTF4 0
ASGNF4
ADDRLP4 20+4
CNSTF4 0
ASGNF4
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 372
;372:			origin[0] = 90;
ADDRLP4 32
CNSTF4 1119092736
ASGNF4
line 373
;373:			origin[1] = 0;
ADDRLP4 32+4
CNSTF4 0
ASGNF4
line 374
;374:			origin[2] = -10;
ADDRLP4 32+8
CNSTF4 3240099840
ASGNF4
line 375
;375:			angles[YAW] = (cg.time & 2047) * 360 / 2048.0;
ADDRLP4 20+4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
CNSTI4 360
MULI4
CVIF4 4
CNSTF4 973078528
MULF4
ASGNF4
line 376
;376:			if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $369
line 377
;377:				handle = cgs.media.redSkullModel;
ADDRLP4 44
ADDRGP4 cgs+146664+20
INDIRI4
ASGNI4
line 378
;378:			} else {
ADDRGP4 $370
JUMPV
LABELV $369
line 379
;379:				handle = cgs.media.blueSkullModel;
ADDRLP4 44
ADDRGP4 cgs+146664+24
INDIRI4
ASGNI4
line 380
;380:			}
LABELV $370
line 381
;381:			CG_Draw3DModel(rect->x, rect->y, 35, 35, handle, 0, origin, angles);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1108082688
ARGF4
CNSTF4 1108082688
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 382
;382:		} else {
ADDRGP4 $361
JUMPV
LABELV $360
line 383
;383:			if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $376
line 384
;384:				handle = cgs.media.redSkullIcon;
ADDRLP4 44
ADDRGP4 cgs+146664+28
INDIRI4
ASGNI4
line 385
;385:			} else {
ADDRGP4 $377
JUMPV
LABELV $376
line 386
;386:				handle = cgs.media.blueSkullIcon;
ADDRLP4 44
ADDRGP4 cgs+146664+32
INDIRI4
ASGNI4
line 387
;387:			}
LABELV $377
line 388
;388:			CG_DrawPic(rect->x + 3, rect->y + 16, 20, 20, handle, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
INDIRF4
CNSTF4 1077936128
ADDF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1098907648
ADDF4
ARGF4
CNSTF4 1101004800
ARGF4
CNSTF4 1101004800
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 389
;389:		}
LABELV $361
line 390
;390:	}
LABELV $357
line 391
;391:}
LABELV $350
endproc CG_HarvesterSkulls 60 40
data
align 4
LABELV $393
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
code
proc CG_OneFlagStatus 32 24
line 393
;392:
;393:static void CG_OneFlagStatus(rectDef_t *rect) {
line 394
;394:	if (cgs.gametype != GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
EQI4 $384
line 395
;395:		return;
ADDRGP4 $383
JUMPV
LABELV $384
line 396
;396:	} else {
line 397
;397:		gitem_t *item = BG_FindItemForPowerup(PW_NEUTRALFLAG);
CNSTI4 9
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 398
;398:		if (item) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $387
line 399
;399:			if (cgs.flagStatus >= 0 && cgs.flagStatus <= 4) {
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 0
LTI4 $389
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 4
GTI4 $389
line 400
;400:				vec4_t color = { 1, 1, 1, 1 };
ADDRLP4 8
ADDRGP4 $393
INDIRB
ASGNB 16
line 401
;401:				int index = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 402
;402:				if (cgs.flagStatus == FLAG_TAKEN_RED) {
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 2
NEI4 $394
line 403
;403:					color[1] = color[2] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 28
INDIRF4
ASGNF4
line 404
;404:					index = 1;
ADDRLP4 24
CNSTI4 1
ASGNI4
line 405
;405:				} else if (cgs.flagStatus == FLAG_TAKEN_BLUE) {
ADDRGP4 $395
JUMPV
LABELV $394
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 3
NEI4 $399
line 406
;406:					color[0] = color[1] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 8+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 28
INDIRF4
ASGNF4
line 407
;407:					index = 1;
ADDRLP4 24
CNSTI4 1
ASGNI4
line 408
;408:				} else if (cgs.flagStatus == FLAG_DROPPED) {
ADDRGP4 $400
JUMPV
LABELV $399
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 4
NEI4 $403
line 409
;409:					index = 2;
ADDRLP4 24
CNSTI4 2
ASGNI4
line 410
;410:				}
LABELV $403
LABELV $400
LABELV $395
line 411
;411:				trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 412
;412:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[index], WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146664+1240
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 413
;413:			}
LABELV $389
line 414
;414:		}
LABELV $387
line 415
;415:	}
line 416
;416:}
LABELV $383
endproc CG_OneFlagStatus 32 24
proc CG_DrawCTFPowerUp 8 24
line 419
;417:
;418:
;419:static void CG_DrawCTFPowerUp(rectDef_t *rect) {
line 422
;420:	int		value;
;421:
;422:	if (cgs.gametype < GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
GEI4 $409
line 423
;423:		return;
ADDRGP4 $408
JUMPV
LABELV $409
line 425
;424:	}
;425:	value = cg.snap->ps.stats[STAT_PERSISTANT_POWERUP];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 426
;426:	if (value) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $413
line 427
;427:		CG_RegisterItemVisuals(value);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 428
;428:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cg_items[value].icon, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 429
;429:	}
LABELV $413
line 430
;430:}
LABELV $408
endproc CG_DrawCTFPowerUp 8 24
proc CG_DrawTeamColor 4 24
line 433
;431:
;432:
;433:static void CG_DrawTeamColor(rectDef_t *rect, const vec4_t color) {
line 434
;434:	CG_DrawTeamBackground(rect->x, rect->y, rect->w, rect->h, color[3], cg.snap->ps.persistant[PERS_TEAM]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 435
;435:}
LABELV $416
endproc CG_DrawTeamColor 4 24
proc CG_DrawAreaPowerUp 228 40
line 437
;436:
;437:static void CG_DrawAreaPowerUp(rectDef_t *rect, int align, float special, float scale, const vec4_t color) {
line 449
;438:	char num[16];
;439:	int		sorted[MAX_POWERUPS];
;440:	int		sortedTime[MAX_POWERUPS];
;441:	int		i, j, k;
;442:	int		active;
;443:	playerState_t *ps;
;444:	int		t;
;445:	gitem_t *item;
;446:	float	f;
;447:	rectDef_t r2;
;448:	float *inc;
;449:	r2.x = rect->x;
ADDRLP4 148
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 450
;450:	r2.y = rect->y;
ADDRLP4 148+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 451
;451:	r2.w = rect->w;
ADDRLP4 148+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 452
;452:	r2.h = rect->h;
ADDRLP4 148+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 454
;453:
;454:	inc = (align == HUD_VERTICAL) ? &r2.y : &r2.x;
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $424
ADDRLP4 196
ADDRLP4 148+4
ASGNP4
ADDRGP4 $425
JUMPV
LABELV $424
ADDRLP4 196
ADDRLP4 148
ASGNP4
LABELV $425
ADDRLP4 192
ADDRLP4 196
INDIRP4
ASGNP4
line 456
;455:
;456:	ps = &cg.snap->ps;
ADDRLP4 164
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 458
;457:
;458:	if (ps->stats[STAT_HEALTH] <= 0) {
ADDRLP4 164
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $427
line 459
;459:		return;
ADDRGP4 $418
JUMPV
LABELV $427
line 463
;460:	}
;461:
;462:	// sort the list by time remaining
;463:	active = 0;
ADDRLP4 136
CNSTI4 0
ASGNI4
line 464
;464:	for (i = 0; i < MAX_POWERUPS; i++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $429
line 465
;465:		if (!ps->powerups[i]) {
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 164
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $433
line 466
;466:			continue;
ADDRGP4 $430
JUMPV
LABELV $433
line 468
;467:		}
;468:		t = ps->powerups[i] - cg.time;
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 164
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 471
;469:		// ZOID--don't draw if the power up has unlimited time (999 seconds)
;470:		// This is true of the CTF flags
;471:		if (t <= 0 || t >= 999000) {
ADDRLP4 140
INDIRI4
CNSTI4 0
LEI4 $438
ADDRLP4 140
INDIRI4
CNSTI4 999000
LTI4 $436
LABELV $438
line 472
;472:			continue;
ADDRGP4 $430
JUMPV
LABELV $436
line 476
;473:		}
;474:
;475:		// insert into the list
;476:		for (j = 0; j < active; j++) {
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRGP4 $442
JUMPV
LABELV $439
line 477
;477:			if (sortedTime[j] >= t) {
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
LTI4 $443
line 478
;478:				for (k = active - 1; k >= j; k--) {
ADDRLP4 0
ADDRLP4 136
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $448
JUMPV
LABELV $445
line 479
;479:					sorted[k + 1] = sorted[k];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ASGNI4
line 480
;480:					sortedTime[k + 1] = sortedTime[k];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
ASGNI4
line 481
;481:				}
LABELV $446
line 478
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $448
ADDRLP4 0
INDIRI4
ADDRLP4 132
INDIRI4
GEI4 $445
line 482
;482:				break;
ADDRGP4 $441
JUMPV
LABELV $443
line 484
;483:			}
;484:		}
LABELV $440
line 476
ADDRLP4 132
ADDRLP4 132
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $442
ADDRLP4 132
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $439
LABELV $441
line 485
;485:		sorted[j] = i;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 486
;486:		sortedTime[j] = t;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 487
;487:		active++;
ADDRLP4 136
ADDRLP4 136
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 488
;488:	}
LABELV $430
line 464
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 16
LTI4 $429
line 491
;489:
;490:	// draw the icons and timers
;491:	for (i = 0; i < active; i++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRGP4 $454
JUMPV
LABELV $451
line 492
;492:		item = BG_FindItemForPowerup(sorted[i]);
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 200
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 168
ADDRLP4 200
INDIRP4
ASGNP4
line 494
;493:
;494:		if (item) {
ADDRLP4 168
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $455
line 495
;495:			t = ps->powerups[sorted[i]];
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 164
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ASGNI4
line 496
;496:			if (t - cg.time >= POWERUP_BLINKS * POWERUP_BLINK_TIME) {
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 5000
LTI4 $457
line 497
;497:				trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 498
;498:			} else {
ADDRGP4 $458
JUMPV
LABELV $457
line 501
;499:				vec4_t	modulate;
;500:
;501:				f = (float)(t - cg.time) / POWERUP_BLINK_TIME;
ADDRLP4 188
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 502
;502:				f -= (int)f;
ADDRLP4 188
ADDRLP4 188
INDIRF4
ADDRLP4 188
INDIRF4
CVFI4 4
CVIF4 4
SUBF4
ASGNF4
line 503
;503:				modulate[0] = modulate[1] = modulate[2] = modulate[3] = f;
ADDRLP4 204+12
ADDRLP4 188
INDIRF4
ASGNF4
ADDRLP4 204+8
ADDRLP4 188
INDIRF4
ASGNF4
ADDRLP4 204+4
ADDRLP4 188
INDIRF4
ASGNF4
ADDRLP4 204
ADDRLP4 188
INDIRF4
ASGNF4
line 504
;504:				trap_R_SetColor(modulate);
ADDRLP4 204
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 505
;505:			}
LABELV $458
line 507
;506:
;507:			CG_DrawPic(r2.x, r2.y, r2.w * .75, r2.h, trap_R_RegisterShader(item->icon), WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 168
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148+4
INDIRF4
ARGF4
ADDRLP4 148+8
INDIRF4
CNSTF4 1061158912
MULF4
ARGF4
ADDRLP4 148+12
INDIRF4
ARGF4
ADDRLP4 204
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 509
;508:
;509:			Com_sprintf(num, sizeof(num), "%i", sortedTime[i] / 1000);
ADDRLP4 172
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 510
;510:			CG_Text_Paint(r2.x + (r2.w * .75) + 3, r2.y + r2.h, scale, color, num, 0, 0, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 148
INDIRF4
ADDRLP4 148+8
INDIRF4
CNSTF4 1061158912
MULF4
ADDF4
CNSTF4 1077936128
ADDF4
ARGF4
ADDRLP4 148+4
INDIRF4
ADDRLP4 148+12
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 172
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 511
;511:			*inc += r2.w + special;
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
ADDRLP4 148+8
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ADDF4
ASGNF4
line 512
;512:		}
LABELV $455
line 514
;513:
;514:	}
LABELV $452
line 491
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $454
ADDRLP4 144
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $451
line 515
;515:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 517
;516:
;517:}
LABELV $418
endproc CG_DrawAreaPowerUp 228 40
export CG_GetValue
proc CG_GetValue 20 0
line 519
;518:
;519:float CG_GetValue(int ownerDraw) {
line 523
;520:	centity_t *cent;
;521:	playerState_t *ps;
;522:
;523:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 524
;524:	ps = &cg.snap->ps;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 526
;525:
;526:	switch (ownerDraw) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 49
EQI4 $477
ADDRLP4 8
INDIRI4
CNSTI4 51
EQI4 $480
ADDRLP4 8
INDIRI4
CNSTI4 51
GTI4 $488
LABELV $487
ADDRLP4 12
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 40
EQI4 $476
ADDRLP4 12
INDIRI4
CNSTI4 40
LTI4 $475
LABELV $489
ADDRFP4 0
INDIRI4
CNSTI4 44
EQI4 $482
ADDRGP4 $475
JUMPV
LABELV $488
ADDRLP4 16
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 284
EQI4 $483
ADDRLP4 16
INDIRI4
CNSTI4 284
LTI4 $475
LABELV $490
ADDRFP4 0
INDIRI4
CNSTI4 312
EQI4 $485
ADDRGP4 $475
JUMPV
LABELV $476
line 528
;527:	case CG_PLAYER_ARMOR_VALUE:
;528:		return ps->stats[STAT_ARMOR];
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 529
;529:		break;
LABELV $477
line 531
;530:	case CG_PLAYER_AMMO_VALUE:
;531:		if (cent->currentState.weapon) {
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $475
line 532
;532:			return ps->ammo[cent->currentState.weapon];
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 534
;533:		}
;534:		break;
LABELV $480
line 536
;535:	case CG_PLAYER_SCORE:
;536:		return cg.snap->ps.persistant[PERS_SCORE];
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 537
;537:		break;
LABELV $482
line 539
;538:	case CG_PLAYER_HEALTH:
;539:		return ps->stats[STAT_HEALTH];
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 540
;540:		break;
LABELV $483
line 542
;541:	case CG_RED_SCORE:
;542:		return cgs.scores1;
ADDRGP4 cgs+32744
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 543
;543:		break;
LABELV $485
line 545
;544:	case CG_BLUE_SCORE:
;545:		return cgs.scores2;
ADDRGP4 cgs+32748
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 546
;546:		break;
line 548
;547:	default:
;548:		break;
LABELV $475
line 550
;549:	}
;550:	return -1;
CNSTF4 3212836864
RETF4
LABELV $471
endproc CG_GetValue 20 0
export CG_OtherTeamHasFlag
proc CG_OtherTeamHasFlag 4 0
line 553
;551:}
;552:
;553:qboolean CG_OtherTeamHasFlag() {
line 554
;554:	if (cgs.gametype == GT_CTF || cgs.gametype == GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $496
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $492
LABELV $496
line 555
;555:		int team = cg.snap->ps.persistant[PERS_TEAM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ASGNI4
line 556
;556:		if (cgs.gametype == GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $498
line 557
;557:			if (team == TEAM_RED && cgs.flagStatus == FLAG_TAKEN_BLUE) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $501
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 3
NEI4 $501
line 558
;558:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $491
JUMPV
LABELV $501
line 559
;559:			} else if (team == TEAM_BLUE && cgs.flagStatus == FLAG_TAKEN_RED) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $504
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 2
NEI4 $504
line 560
;560:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $491
JUMPV
LABELV $504
line 561
;561:			} else {
line 562
;562:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $491
JUMPV
LABELV $498
line 564
;563:			}
;564:		} else {
line 565
;565:			if (team == TEAM_RED && cgs.redflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $507
ADDRGP4 cgs+32752
INDIRI4
CNSTI4 1
NEI4 $507
line 566
;566:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $491
JUMPV
LABELV $507
line 567
;567:			} else if (team == TEAM_BLUE && cgs.blueflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $510
ADDRGP4 cgs+32756
INDIRI4
CNSTI4 1
NEI4 $510
line 568
;568:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $491
JUMPV
LABELV $510
line 569
;569:			} else {
line 570
;570:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $491
JUMPV
LABELV $492
line 574
;571:			}
;572:		}
;573:	}
;574:	return qfalse;
CNSTI4 0
RETI4
LABELV $491
endproc CG_OtherTeamHasFlag 4 0
export CG_YourTeamHasFlag
proc CG_YourTeamHasFlag 4 0
line 577
;575:}
;576:
;577:qboolean CG_YourTeamHasFlag() {
line 578
;578:	if (cgs.gametype == GT_CTF || cgs.gametype == GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $518
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $514
LABELV $518
line 579
;579:		int team = cg.snap->ps.persistant[PERS_TEAM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ASGNI4
line 580
;580:		if (cgs.gametype == GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $520
line 581
;581:			if (team == TEAM_RED && cgs.flagStatus == FLAG_TAKEN_RED) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $523
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 2
NEI4 $523
line 582
;582:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $513
JUMPV
LABELV $523
line 583
;583:			} else if (team == TEAM_BLUE && cgs.flagStatus == FLAG_TAKEN_BLUE) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $526
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 3
NEI4 $526
line 584
;584:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $513
JUMPV
LABELV $526
line 585
;585:			} else {
line 586
;586:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $513
JUMPV
LABELV $520
line 588
;587:			}
;588:		} else {
line 589
;589:			if (team == TEAM_RED && cgs.blueflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $529
ADDRGP4 cgs+32756
INDIRI4
CNSTI4 1
NEI4 $529
line 590
;590:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $513
JUMPV
LABELV $529
line 591
;591:			} else if (team == TEAM_BLUE && cgs.redflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $532
ADDRGP4 cgs+32752
INDIRI4
CNSTI4 1
NEI4 $532
line 592
;592:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $513
JUMPV
LABELV $532
line 593
;593:			} else {
line 594
;594:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $513
JUMPV
LABELV $514
line 598
;595:			}
;596:		}
;597:	}
;598:	return qfalse;
CNSTI4 0
RETI4
LABELV $513
endproc CG_YourTeamHasFlag 4 0
export CG_OwnerDrawVisible
proc CG_OwnerDrawVisible 4 0
line 603
;599:}
;600:
;601:// THINKABOUTME: should these be exclusive or inclusive.. 
;602:// 
;603:qboolean CG_OwnerDrawVisible(int flags, int flags2) {
line 605
;604:
;605:	if (flags & CG_SHOW_TEAMINFO) {
ADDRFP4 0
INDIRI4
CNSTI4 65536
BANDI4
CNSTI4 0
EQI4 $536
line 606
;606:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $536
line 609
;607:	}
;608:
;609:	if (flags & CG_SHOW_NOTEAMINFO) {
ADDRFP4 0
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $538
line 610
;610:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $538
line 613
;611:	}
;612:
;613:	if (flags & CG_SHOW_OTHERTEAMHASFLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 262144
BANDI4
CNSTI4 0
EQI4 $540
line 614
;614:		return CG_OtherTeamHasFlag();
ADDRLP4 0
ADDRGP4 CG_OtherTeamHasFlag
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $535
JUMPV
LABELV $540
line 617
;615:	}
;616:
;617:	if (flags & CG_SHOW_YOURTEAMHASENEMYFLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 524288
BANDI4
CNSTI4 0
EQI4 $542
line 618
;618:		return CG_YourTeamHasFlag();
ADDRLP4 0
ADDRGP4 CG_YourTeamHasFlag
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $535
JUMPV
LABELV $542
line 621
;619:	}
;620:
;621:	if (flags & (CG_SHOW_BLUE_TEAM_HAS_REDFLAG | CG_SHOW_RED_TEAM_HAS_BLUEFLAG)) {
ADDRFP4 0
INDIRI4
CNSTI4 3
BANDI4
CNSTI4 0
EQI4 $544
line 622
;622:		if (flags & CG_SHOW_BLUE_TEAM_HAS_REDFLAG && (cgs.redflag == FLAG_TAKEN || cgs.flagStatus == FLAG_TAKEN_RED)) {
ADDRFP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $546
ADDRGP4 cgs+32752
INDIRI4
CNSTI4 1
EQI4 $550
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 2
NEI4 $546
LABELV $550
line 623
;623:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $546
line 624
;624:		} else if (flags & CG_SHOW_RED_TEAM_HAS_BLUEFLAG && (cgs.blueflag == FLAG_TAKEN || cgs.flagStatus == FLAG_TAKEN_BLUE)) {
ADDRFP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $551
ADDRGP4 cgs+32756
INDIRI4
CNSTI4 1
EQI4 $555
ADDRGP4 cgs+32760
INDIRI4
CNSTI4 3
NEI4 $551
LABELV $555
line 625
;625:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $551
line 627
;626:		}
;627:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $544
line 630
;628:	}
;629:
;630:	if (flags & CG_SHOW_ANYTEAMGAME) {
ADDRFP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $556
line 631
;631:		if (cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $558
line 632
;632:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $558
line 634
;633:		}
;634:	}
LABELV $556
line 636
;635:
;636:	if (flags & CG_SHOW_ANYNONTEAMGAME) {
ADDRFP4 0
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $561
line 637
;637:		if (cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
GEI4 $563
line 638
;638:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $563
line 640
;639:		}
;640:	}
LABELV $561
line 642
;641:
;642:	if (flags & CG_SHOW_HARVESTER) {
ADDRFP4 0
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $566
line 643
;643:		if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $568
line 644
;644:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $568
line 645
;645:		} else {
line 646
;646:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $566
line 650
;647:		}
;648:	}
;649:
;650:	if (flags & CG_SHOW_ONEFLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $571
line 651
;651:		if (cgs.gametype == GT_ONEFLAG) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $573
line 652
;652:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $573
line 653
;653:		} else {
line 654
;654:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $571
line 658
;655:		}
;656:	}
;657:
;658:	if (flags & CG_SHOW_DOMINATION) {
ADDRFP4 0
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $576
line 659
;659:		if (cgs.gametype == GT_DOM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 10
NEI4 $578
line 660
;660:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $578
line 661
;661:		} else {
line 662
;662:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $576
line 666
;663:		}
;664:	}
;665:
;666:	if (flags & CG_SHOW_CLAN_ARENA) {
ADDRFP4 0
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $581
line 667
;667:		if (cgs.gametype == GT_CA) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 4
NEI4 $583
line 668
;668:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $583
line 669
;669:		} else {
line 670
;670:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $581
line 674
;671:		}
;672:	}
;673:
;674:	if (flags & CG_SHOW_CTF) {
ADDRFP4 0
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $586
line 675
;675:		if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $588
line 676
;676:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $588
line 678
;677:		}
;678:	}
LABELV $586
line 680
;679:
;680:	if (flags & CG_SHOW_OBELISK) {
ADDRFP4 0
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $591
line 681
;681:		if (cgs.gametype == GT_OBELISK) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 7
NEI4 $593
line 682
;682:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $593
line 683
;683:		} else {
line 684
;684:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $535
JUMPV
LABELV $591
line 688
;685:		}
;686:	}
;687:
;688:	if (flags & CG_SHOW_HEALTHCRITICAL) {
ADDRFP4 0
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $596
line 689
;689:		if (cg.snap->ps.stats[STAT_HEALTH] < 25) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 25
GEI4 $598
line 690
;690:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $598
line 692
;691:		}
;692:	}
LABELV $596
line 694
;693:
;694:	if (flags & CG_SHOW_DUEL) {
ADDRFP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $601
line 695
;695:		if (cgs.gametype == GT_DUEL) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 1
NEI4 $603
line 696
;696:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $603
line 698
;697:		}
;698:	}
LABELV $601
line 700
;699:
;700:	if (flags & CG_SHOW_INTERMISSION) {
ADDRFP4 0
INDIRI4
CNSTI4 1048576
BANDI4
CNSTI4 0
EQI4 $606
line 701
;701:		if (cg.intermissionStarted) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $608
line 702
;702:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $608
line 704
;703:		}
;704:	}
LABELV $606
line 706
;705:
;706:	if (flags & CG_SHOW_NOTINTERMISSION) {
ADDRFP4 0
INDIRI4
CNSTI4 2097152
BANDI4
CNSTI4 0
EQI4 $611
line 707
;707:		if (!cg.intermissionStarted) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
NEI4 $613
line 708
;708:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $613
line 710
;709:		}
;710:	}
LABELV $611
line 712
;711:	
;712:	if (flags & CG_SHOW_IF_PLAYER_HAS_FLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $616
line 713
;713:		if (cg.snap->ps.powerups[PW_REDFLAG] || cg.snap->ps.powerups[PW_BLUEFLAG] || cg.snap->ps.powerups[PW_NEUTRALFLAG]) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 384
ADDP4
INDIRI4
CNSTI4 0
NEI4 $624
ADDRGP4 cg+36
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
CNSTI4 0
NEI4 $624
ADDRGP4 cg+36
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
CNSTI4 0
EQI4 $618
LABELV $624
line 714
;714:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $535
JUMPV
LABELV $618
line 716
;715:		}
;716:	}
LABELV $616
line 717
;717:	return qfalse;
CNSTI4 0
RETI4
LABELV $535
endproc CG_OwnerDrawVisible 4 0
proc CG_DrawPlayerHasFlag 16 24
line 720
;718:}
;719:
;720:static void CG_DrawPlayerHasFlag(rectDef_t *rect, qboolean force2D) {
line 721
;721:	int adj = (force2D) ? 0 : 2;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $627
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $628
JUMPV
LABELV $627
ADDRLP4 4
CNSTI4 2
ASGNI4
LABELV $628
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 722
;722:	if (cg.predictedPlayerState.powerups[PW_REDFLAG]) {
ADDRGP4 cg+107636+312+28
INDIRI4
CNSTI4 0
EQI4 $629
line 723
;723:		CG_DrawFlagModel(rect->x + adj, rect->y + adj, rect->w - adj, rect->h - adj, TEAM_RED, force2D);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
CNSTI4 1
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 724
;724:	} else if (cg.predictedPlayerState.powerups[PW_BLUEFLAG]) {
ADDRGP4 $630
JUMPV
LABELV $629
ADDRGP4 cg+107636+312+32
INDIRI4
CNSTI4 0
EQI4 $634
line 725
;725:		CG_DrawFlagModel(rect->x + adj, rect->y + adj, rect->w - adj, rect->h - adj, TEAM_BLUE, force2D);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
CNSTI4 2
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 726
;726:	} else if (cg.predictedPlayerState.powerups[PW_NEUTRALFLAG]) {
ADDRGP4 $635
JUMPV
LABELV $634
ADDRGP4 cg+107636+312+36
INDIRI4
CNSTI4 0
EQI4 $639
line 727
;727:		CG_DrawFlagModel(rect->x + adj, rect->y + adj, rect->w - adj, rect->h - adj, TEAM_FREE, force2D);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 728
;728:	}
LABELV $639
LABELV $635
LABELV $630
line 729
;729:}
LABELV $625
endproc CG_DrawPlayerHasFlag 16 24
proc CG_DrawAreaSystemChat 4 40
line 731
;730:
;731:static void CG_DrawAreaSystemChat(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader) {
line 732
;732:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, systemChat, 0, 0, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 systemChat
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 733
;733:}
LABELV $644
endproc CG_DrawAreaSystemChat 4 40
proc CG_DrawAreaTeamChat 4 40
line 735
;734:
;735:static void CG_DrawAreaTeamChat(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader) {
line 736
;736:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, teamChat1, 0, 0, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 teamChat1
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 737
;737:}
LABELV $645
endproc CG_DrawAreaTeamChat 4 40
proc CG_DrawAreaChat 4 40
line 739
;738:
;739:static void CG_DrawAreaChat(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader) {
line 740
;740:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, teamChat2, 0, 0, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 teamChat2
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 741
;741:}
LABELV $646
endproc CG_DrawAreaChat 4 40
export CG_GetKillerText
proc CG_GetKillerText 8 8
line 743
;742:
;743:const char *CG_GetKillerText() {
line 744
;744:	const char *s = "";
ADDRLP4 0
ADDRGP4 $648
ASGNP4
line 745
;745:	if (cg.killerName[0]) {
ADDRGP4 cg+115368
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $649
line 746
;746:		s = va("Fragged by %s", cg.killerName);
ADDRGP4 $652
ARGP4
ADDRGP4 cg+115368
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 747
;747:	}
LABELV $649
line 748
;748:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $647
endproc CG_GetKillerText 8 8
proc CG_DrawKiller 24 40
line 751
;749:}
;750:
;751:static void CG_DrawKiller(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 753
;752:	// fragged by ... line
;753:	if (cg.killerName[0]) {
ADDRGP4 cg+115368
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $655
line 754
;754:		int x = rect->x + rect->w / 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
CVFI4 4
ASGNI4
line 755
;755:		CG_Text_Paint(x - CG_Text_Width(CG_GetKillerText(), scale, 0, 0, WIDESCREEN_STRETCH) / 2, rect->y + rect->h, scale, color, CG_GetKillerText(), 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 8
ADDRGP4 CG_GetKillerText
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 12
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 16
ADDRGP4 CG_GetKillerText
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
CNSTF4 1056964608
MULF4
SUBF4
ARGF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 756
;756:	}
LABELV $655
line 758
;757:
;758:}
LABELV $654
endproc CG_DrawKiller 24 40
proc CG_DrawCapFragLimit 16 40
line 760
;759:
;760:static void CG_DrawCapFragLimit(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 761
;761:	int limit = (cgs.gametype >= GT_CTF) ? cgs.capturelimit : cgs.fraglimit;
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
LTI4 $663
ADDRLP4 4
ADDRGP4 cgs+31496
INDIRI4
ASGNI4
ADDRGP4 $664
JUMPV
LABELV $663
ADDRLP4 4
ADDRGP4 cgs+31492
INDIRI4
ASGNI4
LABELV $664
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 762
;762:	CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", limit), 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRGP4 $665
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 763
;763:}
LABELV $658
endproc CG_DrawCapFragLimit 16 40
proc CG_Draw1stPlace 8 40
line 765
;764:
;765:static void CG_Draw1stPlace(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 766
;766:	if (cgs.scores1 != SCORE_NOT_PRESENT) {
ADDRGP4 cgs+32744
INDIRI4
CNSTI4 -9999
EQI4 $667
line 767
;767:		CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", cgs.scores1), 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRGP4 $665
ARGP4
ADDRGP4 cgs+32744
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 768
;768:	}
LABELV $667
line 769
;769:}
LABELV $666
endproc CG_Draw1stPlace 8 40
proc CG_Draw2ndPlace 8 40
line 771
;770:
;771:static void CG_Draw2ndPlace(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 772
;772:	if (cgs.scores2 != SCORE_NOT_PRESENT) {
ADDRGP4 cgs+32748
INDIRI4
CNSTI4 -9999
EQI4 $672
line 773
;773:		CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", cgs.scores2), 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRGP4 $665
ARGP4
ADDRGP4 cgs+32748
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 774
;774:	}
LABELV $672
line 775
;775:}
LABELV $671
endproc CG_Draw2ndPlace 8 40
export CG_GetGameStatusText
proc CG_GetGameStatusText 12 12
line 777
;776:
;777:const char *CG_GetGameStatusText() {
line 778
;778:	const char *s = "";
ADDRLP4 0
ADDRGP4 $648
ASGNP4
line 779
;779:	if (cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
GEI4 $677
line 780
;780:		if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $678
line 781
;781:			s = va("%s place with %i", CG_PlaceString(cg.snap->ps.persistant[PERS_RANK] + 1), cg.snap->ps.persistant[PERS_SCORE]);
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_PlaceString
CALLP4
ASGNP4
ADDRGP4 $683
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 782
;782:		}
line 783
;783:	} else {
ADDRGP4 $678
JUMPV
LABELV $677
line 784
;784:		if (cg.teamScores[0] == cg.teamScores[1]) {
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
NEI4 $686
line 785
;785:			s = va("Teams are tied at %i", cg.teamScores[0]);
ADDRGP4 $691
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 786
;786:		} else if (cg.teamScores[0] >= cg.teamScores[1]) {
ADDRGP4 $687
JUMPV
LABELV $686
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
LTI4 $693
line 787
;787:			s = va("Red leads Blue, %i to %i", cg.teamScores[0], cg.teamScores[1]);
ADDRGP4 $698
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 788
;788:		} else {
ADDRGP4 $694
JUMPV
LABELV $693
line 789
;789:			s = va("Blue leads Red, %i to %i", cg.teamScores[1], cg.teamScores[0]);
ADDRGP4 $702
ARGP4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 790
;790:		}
LABELV $694
LABELV $687
line 791
;791:	}
LABELV $678
line 792
;792:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $676
endproc CG_GetGameStatusText 12 12
proc CG_DrawGameStatus 8 40
line 795
;793:}
;794:
;795:static void CG_DrawGameStatus(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 796
;796:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, CG_GetGameStatusText(), 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRGP4 CG_GetGameStatusText
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 797
;797:}
LABELV $706
endproc CG_DrawGameStatus 8 40
proc CG_DrawGameType 4 40
line 799
;798:
;799:static void CG_DrawGameType(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader, int textStyle) {
line 800
;800:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, gametypeString[cgs.gametype], 0, 0, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 gametypeString
ADDP4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 801
;801:}
LABELV $707
endproc CG_DrawGameType 4 40
proc CG_Text_Paint_Limit 68 40
line 803
;802:
;803:static void CG_Text_Paint_Limit(float *maxX, float x, float y, float scale, const vec4_t color, const char *text, float adjust, int limit) {
line 807
;804:	int len, count;
;805:	vec4_t newColor;
;806:	glyphInfo_t *glyph;
;807:	if (text) {
ADDRFP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $710
line 810
;808:		// TTimo: FIXME
;809:		//    const unsigned char *s = text; // bk001206 - unsigned
;810:		const char *s = text;
ADDRLP4 28
ADDRFP4 20
INDIRP4
ASGNP4
line 811
;811:		float max = *maxX;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 813
;812:		float useScale;
;813:		fontInfo_t *font = &cgDC.Assets.textFont;
ADDRLP4 36
ADDRGP4 cgDC+236+12
ASGNP4
line 814
;814:		if (scale <= cg_smallFont.value) {
ADDRFP4 12
INDIRF4
ADDRGP4 cg_smallFont+8
INDIRF4
GTF4 $714
line 815
;815:			font = &cgDC.Assets.smallFont;
ADDRLP4 36
ADDRGP4 cgDC+236+20560
ASGNP4
line 816
;816:		} else if (scale > cg_bigFont.value) {
ADDRGP4 $715
JUMPV
LABELV $714
ADDRFP4 12
INDIRF4
ADDRGP4 cg_bigFont+8
INDIRF4
LEF4 $719
line 817
;817:			font = &cgDC.Assets.bigFont;
ADDRLP4 36
ADDRGP4 cgDC+236+41108
ASGNP4
line 818
;818:		}
LABELV $719
LABELV $715
line 819
;819:		useScale = scale * font->glyphScale;
ADDRLP4 32
ADDRFP4 12
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 20480
ADDP4
INDIRF4
MULF4
ASGNF4
line 820
;820:		trap_R_SetColor(color);
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 821
;821:		len = strlen(text);
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 44
INDIRI4
ASGNI4
line 822
;822:		if (limit > 0 && len > limit) {
ADDRLP4 48
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
LEI4 $724
ADDRLP4 24
INDIRI4
ADDRLP4 48
INDIRI4
LEI4 $724
line 823
;823:			len = limit;
ADDRLP4 24
ADDRFP4 28
INDIRI4
ASGNI4
line 824
;824:		}
LABELV $724
line 825
;825:		count = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $727
JUMPV
LABELV $726
line 826
;826:		while (s && *s && count < len) {
line 827
;827:			glyph = &font->glyphs[(int)*s]; // TTimo: FIXME: getting nasty warnings without the cast, hopefully this doesn't break the VM build
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 80
MULI4
ADDRLP4 36
INDIRP4
ADDP4
ASGNP4
line 828
;828:			if (Q_IsColorString(s)) {
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $729
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $729
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $729
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $729
line 829
;829:				memcpy(newColor, g_color_table[ColorIndex(*(s + 1))], sizeof(newColor));
ADDRLP4 4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CNSTI4 7
BANDI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 830
;830:				newColor[3] = color[3];
ADDRLP4 4+12
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 831
;831:				trap_R_SetColor(newColor);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 832
;832:				s += 2;
ADDRLP4 28
ADDRLP4 28
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 833
;833:				continue;
ADDRGP4 $727
JUMPV
LABELV $729
line 834
;834:			} else {
line 835
;835:				float yadj = useScale * glyph->top;
ADDRLP4 56
ADDRLP4 32
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 836
;836:				if (CG_Text_Width(s, useScale, 1, 0, WIDESCREEN_STRETCH) + x > max) { //, mRect) + x > max) {
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 60
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 60
INDIRF4
ADDRFP4 4
INDIRF4
ADDF4
ADDRLP4 40
INDIRF4
LEF4 $732
line 837
;837:					*maxX = 0;
ADDRFP4 0
INDIRP4
CNSTF4 0
ASGNF4
line 838
;838:					break;
ADDRGP4 $728
JUMPV
LABELV $732
line 840
;839:				}
;840:				CG_Text_PaintChar(x, y - yadj,
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ADDRLP4 56
INDIRF4
SUBF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Text_PaintChar
CALLV
pop
line 849
;841:					glyph->imageWidth,
;842:					glyph->imageHeight,
;843:					useScale,
;844:					glyph->s,
;845:					glyph->t,
;846:					glyph->s2,
;847:					glyph->t2,
;848:					glyph->glyph);
;849:				x += (glyph->xSkip * useScale) + adjust;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
MULF4
ADDRFP4 24
INDIRF4
ADDF4
ADDF4
ASGNF4
line 850
;850:				*maxX = x;
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRF4
ASGNF4
line 851
;851:				count++;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 852
;852:				s++;
ADDRLP4 28
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 853
;853:			}
line 854
;854:		}
LABELV $727
line 826
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $735
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $735
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $726
LABELV $735
LABELV $728
line 855
;855:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 856
;856:	}
LABELV $710
line 858
;857:
;858:}
LABELV $709
endproc CG_Text_Paint_Limit 68 40
export CG_DrawNewTeamInfo
proc CG_DrawNewTeamInfo 96 32
line 864
;859:
;860:
;861:
;862:#define PIC_WIDTH 12
;863:
;864:void CG_DrawNewTeamInfo(rectDef_t *rect, float text_x, float text_y, float scale, const vec4_t color, qhandle_t shader) {
line 876
;865:	int xx;
;866:	float y;
;867:	int i, j, len, count;
;868:	const char *p;
;869:	vec4_t		hcolor;
;870:	float pwidth, lwidth, maxx, leftOver;
;871:	clientInfo_t *ci;
;872:	gitem_t *item;
;873:	qhandle_t h;
;874:
;875:	// max player name width
;876:	pwidth = 0;
ADDRLP4 64
CNSTF4 0
ASGNF4
line 877
;877:	count = (numSortedTeamPlayers > 8) ? 8 : numSortedTeamPlayers;
ADDRGP4 numSortedTeamPlayers
INDIRI4
CNSTI4 8
LEI4 $738
ADDRLP4 72
CNSTI4 8
ASGNI4
ADDRGP4 $739
JUMPV
LABELV $738
ADDRLP4 72
ADDRGP4 numSortedTeamPlayers
INDIRI4
ASGNI4
LABELV $739
ADDRLP4 32
ADDRLP4 72
INDIRI4
ASGNI4
line 878
;878:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $743
JUMPV
LABELV $740
line 879
;879:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 880
;880:		if (ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $745
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $745
line 881
;881:			len = CG_Text_Width(ci->name, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 80
INDIRF4
CVFI4 4
ASGNI4
line 882
;882:			if (len > pwidth)
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 64
INDIRF4
LEF4 $748
line 883
;883:				pwidth = len;
ADDRLP4 64
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
LABELV $748
line 884
;884:		}
LABELV $745
line 885
;885:	}
LABELV $741
line 878
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $743
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $740
line 888
;886:
;887:	// max location name width
;888:	lwidth = 0;
ADDRLP4 68
CNSTF4 0
ASGNF4
line 889
;889:	for (i = 1; i < MAX_LOCATIONS; i++) {
ADDRLP4 8
CNSTI4 1
ASGNI4
LABELV $750
line 890
;890:		p = CG_ConfigString(CS_LOCATIONS + i);
ADDRLP4 8
INDIRI4
CNSTI4 593
ADDI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 76
INDIRP4
ASGNP4
line 891
;891:		if (p && *p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $754
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $754
line 892
;892:			len = CG_Text_Width(p, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 84
INDIRF4
CVFI4 4
ASGNI4
line 893
;893:			if (len > lwidth)
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 68
INDIRF4
LEF4 $756
line 894
;894:				lwidth = len;
ADDRLP4 68
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
LABELV $756
line 895
;895:		}
LABELV $754
line 896
;896:	}
LABELV $751
line 889
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $750
line 898
;897:
;898:	y = rect->y;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 900
;899:
;900:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $761
JUMPV
LABELV $758
line 901
;901:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 902
;902:		if (ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $763
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $763
line 904
;903:
;904:			xx = rect->x + 1;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 905
;905:			for (j = 0; j <= PW_NUM_POWERUPS; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $766
line 906
;906:				if (ci->powerups & (1 << j)) {
ADDRLP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $770
line 908
;907:
;908:					item = BG_FindItemForPowerup(j);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 910
;909:
;910:					if (item) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $772
line 911
;911:						CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, trap_R_RegisterShader(item->icon), WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
ADDRLP4 84
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 912
;912:						xx += PIC_WIDTH;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 12
ADDI4
ASGNI4
line 913
;913:					}
LABELV $772
line 914
;914:				}
LABELV $770
line 915
;915:			}
LABELV $767
line 905
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $766
line 918
;916:
;917:			// FIXME: max of 3 powerups shown properly
;918:			xx = rect->x + (PIC_WIDTH * 3) + 2;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1108344832
ADDF4
CNSTF4 1073741824
ADDF4
CVFI4 4
ASGNI4
line 920
;919:
;920:			CG_GetColorForHealth(ci->health, ci->armor, hcolor);
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 921
;921:			trap_R_SetColor(hcolor);
ADDRLP4 48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 922
;922:			CG_DrawPic(xx, y + 1, PIC_WIDTH - 2, PIC_WIDTH - 2, cgs.media.heartShader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
CNSTF4 1065353216
ADDF4
ARGF4
CNSTF4 1092616192
ARGF4
CNSTF4 1092616192
ARGF4
ADDRGP4 cgs+146664+652
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 928
;923:
;924:			//Com_sprintf (st, sizeof(st), "%3i %3i", ci->health,	ci->armor);
;925:			//CG_Text_Paint(xx, y + text_y, scale, hcolor, st, 0, 0, 0, WIDESCREEN_STRETCH); //, mRect); 
;926:
;927:			// draw weapon icon
;928:			xx += PIC_WIDTH + 1;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 13
ADDI4
ASGNI4
line 939
;929:
;930:			// weapon used is not that useful, use the space for task
;931:#if 0
;932:			if (cg_weapons[ci->curWeapon].weaponIcon) {
;933:				CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, cg_weapons[ci->curWeapon].weaponIcon, WIDESCREEN_STRETCH); //, mRect);
;934:			} else {
;935:				CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, cgs.media.deferShader, WIDESCREEN_STRETCH); //, mRect);
;936:			}
;937:#endif
;938:
;939:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 940
;940:			if (cgs.orderPending) {
ADDRGP4 cgs+146644
INDIRI4
CNSTI4 0
EQI4 $776
line 942
;941:				// blink the icon
;942:				if (cg.time > cgs.orderTime - 2500 && (cg.time >> 9) & 1) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+146648
INDIRI4
CNSTI4 2500
SUBI4
LEI4 $779
ADDRGP4 cg+107604
INDIRI4
CNSTI4 9
RSHI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $779
line 943
;943:					h = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 944
;944:				} else {
ADDRGP4 $777
JUMPV
LABELV $779
line 945
;945:					h = CG_StatusHandle(cgs.currentOrder);
ADDRGP4 cgs+146640
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 84
INDIRI4
ASGNI4
line 946
;946:				}
line 947
;947:			} else {
ADDRGP4 $777
JUMPV
LABELV $776
line 948
;948:				h = CG_StatusHandle(ci->teamTask);
ADDRLP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 84
INDIRI4
ASGNI4
line 949
;949:			}
LABELV $777
line 951
;950:
;951:			if (h) {
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $785
line 952
;952:				CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, h, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 953
;953:			}
LABELV $785
line 955
;954:
;955:			xx += PIC_WIDTH + 1;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 13
ADDI4
ASGNI4
line 957
;956:
;957:			leftOver = rect->w - xx;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRI4
CVIF4 4
SUBF4
ASGNF4
line 958
;958:			maxx = xx + leftOver / 3;
ADDRLP4 36
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
CNSTF4 1051372203
MULF4
ADDF4
ASGNF4
line 962
;959:
;960:
;961:
;962:			CG_Text_Paint_Limit(&maxx, xx, y + text_y, scale, color, ci->name, 0, 0);
ADDRLP4 36
ARGP4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 964
;963:
;964:			p = CG_ConfigString(CS_LOCATIONS + ci->location);
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 593
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 84
INDIRP4
ASGNP4
line 965
;965:			if (!p || !*p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $789
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $787
LABELV $789
line 966
;966:				p = "unknown";
ADDRLP4 20
ADDRGP4 $790
ASGNP4
line 967
;967:			}
LABELV $787
line 969
;968:
;969:			xx += leftOver / 3 + 2;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
CNSTF4 1051372203
MULF4
CNSTF4 1073741824
ADDF4
ADDF4
CVFI4 4
ASGNI4
line 970
;970:			maxx = rect->w - 4;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 972
;971:
;972:			CG_Text_Paint_Limit(&maxx, xx, y + text_y, scale, color, p, 0, 0);
ADDRLP4 36
ARGP4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 973
;973:			y += text_y + 2;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
line 974
;974:			if (y + text_y + 2 > rect->y + rect->h) {
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
CNSTF4 1073741824
ADDF4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
LEF4 $791
line 975
;975:				break;
ADDRGP4 $760
JUMPV
LABELV $791
line 978
;976:			}
;977:
;978:		}
LABELV $763
line 979
;979:	}
LABELV $759
line 900
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $761
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $758
LABELV $760
line 980
;980:}
LABELV $736
endproc CG_DrawNewTeamInfo 96 32
export CG_DrawTeamSpectators
proc CG_DrawTeamSpectators 24 32
line 983
;981:
;982:
;983:void CG_DrawTeamSpectators(rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader) {
line 984
;984:	if (cg.spectatorLen) {
ADDRGP4 cg+116460
INDIRI4
CNSTI4 0
EQI4 $794
line 987
;985:		float maxX;
;986:
;987:		if (cg.spectatorWidth == -1) {
ADDRGP4 cg+116464
INDIRF4
CNSTF4 3212836864
NEF4 $797
line 988
;988:			cg.spectatorWidth = 0;
ADDRGP4 cg+116464
CNSTF4 0
ASGNF4
line 989
;989:			cg.spectatorPaintX = rect->x + 1;
ADDRGP4 cg+116472
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 990
;990:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 991
;991:		}
LABELV $797
line 993
;992:
;993:		if (cg.spectatorOffset > cg.spectatorLen) {
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+116460
INDIRI4
LEI4 $803
line 994
;994:			cg.spectatorOffset = 0;
ADDRGP4 cg+116480
CNSTI4 0
ASGNI4
line 995
;995:			cg.spectatorPaintX = rect->x + 1;
ADDRGP4 cg+116472
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 996
;996:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 997
;997:		}
LABELV $803
line 999
;998:
;999:		if (cg.time > cg.spectatorTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+116468
INDIRI4
LEI4 $810
line 1000
;1000:			cg.spectatorTime = cg.time + 10;
ADDRGP4 cg+116468
ADDRGP4 cg+107604
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1001
;1001:			if (cg.spectatorPaintX <= rect->x + 2) {
ADDRGP4 cg+116472
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDF4
GTF4 $816
line 1002
;1002:				if (cg.spectatorOffset < cg.spectatorLen) {
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+116460
INDIRI4
GEI4 $819
line 1003
;1003:					cg.spectatorPaintX += CG_Text_Width(&cg.spectatorList[cg.spectatorOffset], scale, 1, 0, WIDESCREEN_STRETCH) - 1; //, mRect) - 1;
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+115436
ADDP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 8
ADDRGP4 cg+116472
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
CNSTF4 1065353216
SUBF4
ADDF4
CVFI4 4
ASGNI4
line 1004
;1004:					cg.spectatorOffset++;
ADDRLP4 12
ADDRGP4 cg+116480
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1005
;1005:				} else {
ADDRGP4 $817
JUMPV
LABELV $819
line 1006
;1006:					cg.spectatorOffset = 0;
ADDRGP4 cg+116480
CNSTI4 0
ASGNI4
line 1007
;1007:					if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 0
LTI4 $828
line 1008
;1008:						cg.spectatorPaintX = cg.spectatorPaintX2;
ADDRGP4 cg+116472
ADDRGP4 cg+116476
INDIRI4
ASGNI4
line 1009
;1009:					} else {
ADDRGP4 $829
JUMPV
LABELV $828
line 1010
;1010:						cg.spectatorPaintX = rect->x + rect->w - 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+116472
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 1011
;1011:					}
LABELV $829
line 1012
;1012:					cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 1013
;1013:				}
line 1014
;1014:			} else {
ADDRGP4 $817
JUMPV
LABELV $816
line 1015
;1015:				cg.spectatorPaintX--;
ADDRLP4 4
ADDRGP4 cg+116472
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1016
;1016:				if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 0
LTI4 $836
line 1017
;1017:					cg.spectatorPaintX2--;
ADDRLP4 8
ADDRGP4 cg+116476
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1018
;1018:				}
LABELV $836
line 1019
;1019:			}
LABELV $817
line 1020
;1020:		}
LABELV $810
line 1022
;1021:
;1022:		maxX = rect->x + rect->w - 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 1023
;1023:		CG_Text_Paint_Limit(&maxX, cg.spectatorPaintX, rect->y + rect->h - 3, scale, color, &cg.spectatorList[cg.spectatorOffset], 0, 0);
ADDRLP4 0
ARGP4
ADDRGP4 cg+116472
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1077936128
SUBF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+115436
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 1024
;1024:		if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 0
LTI4 $843
line 1025
;1025:			float maxX2 = rect->x + rect->w - 2;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 1026
;1026:			CG_Text_Paint_Limit(&maxX2, cg.spectatorPaintX2, rect->y + rect->h - 3, scale, color, cg.spectatorList, 0, cg.spectatorOffset);
ADDRLP4 12
ARGP4
ADDRGP4 cg+116476
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1077936128
SUBF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+115436
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 cg+116480
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 1027
;1027:		}
LABELV $843
line 1028
;1028:		if (cg.spectatorOffset && maxX > 0) {
ADDRGP4 cg+116480
INDIRI4
CNSTI4 0
EQI4 $849
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $849
line 1030
;1029:			// if we have an offset ( we are skipping the first part of the string ) and we fit the string
;1030:			if (cg.spectatorPaintX2 == -1) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 -1
NEI4 $850
line 1031
;1031:				cg.spectatorPaintX2 = rect->x + rect->w - 2;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+116476
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 1032
;1032:			}
line 1033
;1033:		} else {
ADDRGP4 $850
JUMPV
LABELV $849
line 1034
;1034:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 1035
;1035:		}
LABELV $850
line 1037
;1036:
;1037:	}
LABELV $794
line 1038
;1038:}
LABELV $793
endproc CG_DrawTeamSpectators 24 32
export CG_DrawMedal
proc CG_DrawMedal 48 40
line 1042
;1039:
;1040:
;1041:
;1042:void CG_DrawMedal(int ownerDraw, rectDef_t *rect, float scale, const vec4_t color, qhandle_t shader) {
line 1043
;1043:	score_t *score = &cg.scores[cg.selectedScore];
ADDRLP4 24
ADDRGP4 cg+110480
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ASGNP4
line 1044
;1044:	float value = 0;
ADDRLP4 16
CNSTF4 0
ASGNF4
line 1045
;1045:	char *text = NULL;
ADDRLP4 20
CNSTP4 0
ASGNP4
line 1047
;1046:	vec4_t	col;
;1047:	Vector4Copy(color, col);
ADDRLP4 28
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
ADDRLP4 0+12
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 1048
;1048:	col[3] = 0.25;
ADDRLP4 0+12
CNSTF4 1048576000
ASGNF4
line 1050
;1049:
;1050:	switch (ownerDraw) {
ADDRLP4 32
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 64
LTI4 $864
ADDRLP4 32
INDIRI4
CNSTI4 74
GTI4 $864
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $874-256
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $874
address $866
address $867
address $873
address $864
address $868
address $869
address $872
address $870
address $864
address $864
address $871
code
LABELV $866
line 1052
;1051:	case CG_ACCURACY:
;1052:		value = score->accuracy;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1053
;1053:		break;
ADDRGP4 $865
JUMPV
LABELV $867
line 1055
;1054:	case CG_ASSISTS:
;1055:		value = score->assistCount;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1056
;1056:		break;
ADDRGP4 $865
JUMPV
LABELV $868
line 1058
;1057:	case CG_DEFEND:
;1058:		value = score->defendCount;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1059
;1059:		break;
ADDRGP4 $865
JUMPV
LABELV $869
line 1061
;1060:	case CG_EXCELLENT:
;1061:		value = score->excellentCount;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1062
;1062:		break;
ADDRGP4 $865
JUMPV
LABELV $870
line 1064
;1063:	case CG_IMPRESSIVE:
;1064:		value = score->impressiveCount;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1065
;1065:		break;
ADDRGP4 $865
JUMPV
LABELV $871
line 1067
;1066:	case CG_PERFECT:
;1067:		value = score->perfect;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1068
;1068:		break;
ADDRGP4 $865
JUMPV
LABELV $872
line 1070
;1069:	case CG_GAUNTLET:
;1070:		value = score->gauntletCount;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1071
;1071:		break;
ADDRGP4 $865
JUMPV
LABELV $873
line 1073
;1072:	case CG_CAPTURES:
;1073:		value = score->captures;
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1074
;1074:		break;
LABELV $864
LABELV $865
line 1077
;1075:	}
;1076:
;1077:	if (value > 0) {
ADDRLP4 16
INDIRF4
CNSTF4 0
LEF4 $876
line 1078
;1078:		if (ownerDraw != CG_PERFECT) {
ADDRFP4 0
INDIRI4
CNSTI4 74
EQI4 $878
line 1079
;1079:			if (ownerDraw == CG_ACCURACY) {
ADDRFP4 0
INDIRI4
CNSTI4 64
NEI4 $880
line 1080
;1080:				text = va("%i%%", (int)value);
ADDRGP4 $882
ARGP4
ADDRLP4 16
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1081
;1081:				if (value > 50) {
ADDRLP4 16
INDIRF4
CNSTF4 1112014848
LEF4 $879
line 1082
;1082:					col[3] = 1.0;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1083
;1083:				}
line 1084
;1084:			} else {
ADDRGP4 $879
JUMPV
LABELV $880
line 1085
;1085:				text = va("%i", (int)value);
ADDRGP4 $110
ARGP4
ADDRLP4 16
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1086
;1086:				col[3] = 1.0;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1087
;1087:			}
line 1088
;1088:		} else {
ADDRGP4 $879
JUMPV
LABELV $878
line 1089
;1089:			if (value) {
ADDRLP4 16
INDIRF4
CNSTF4 0
EQF4 $887
line 1090
;1090:				col[3] = 1.0;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1091
;1091:			}
LABELV $887
line 1092
;1092:			text = "Wow";
ADDRLP4 20
ADDRGP4 $890
ASGNP4
line 1093
;1093:		}
LABELV $879
line 1094
;1094:	}
LABELV $876
line 1096
;1095:
;1096:	trap_R_SetColor(color);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1097
;1097:	CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1099
;1098:
;1099:	if (text) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $891
line 1100
;1100:		col[3] = 1.0;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1101
;1101:		value = CG_Text_Width(text, scale, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 8
INDIRF4
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 CG_Text_Width
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 40
INDIRF4
ASGNF4
line 1102
;1102:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h + 10, scale, color, text, 0, 0, 0, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1092616192
ADDF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1103
;1103:	}
LABELV $891
line 1104
;1104:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1106
;1105:
;1106:}
LABELV $857
endproc CG_DrawMedal 48 40
export CG_OwnerDraw
proc CG_OwnerDraw 36 40
line 1110
;1107:
;1108:
;1109://
;1110:void CG_OwnerDraw(float x, float y, float w, float h, float text_x, float text_y, int ownerDraw, int ownerDrawFlags, int ownerDrawFlags2, int align, float special, float scale, const vec4_t color, qhandle_t shader, int textStyle, int fontIndex, int menuWidescreen, int itemWidescreen) { //, rectDef_t menuRect) {
line 1113
;1111:	rectDef_t rect;
;1112:
;1113:	if (cg_drawStatus.integer == 0) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
NEI4 $895
line 1114
;1114:		return;
ADDRGP4 $894
JUMPV
LABELV $895
line 1121
;1115:	}
;1116:
;1117:	//if (ownerDrawFlags != 0 && !CG_OwnerDrawVisible(ownerDrawFlags)) {
;1118:	//	return;
;1119:	//}
;1120:
;1121:	rect.x = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 1122
;1122:	rect.y = y;
ADDRLP4 0+4
ADDRFP4 4
INDIRF4
ASGNF4
line 1123
;1123:	rect.w = w;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
ASGNF4
line 1124
;1124:	rect.h = h;
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
ASGNF4
line 1126
;1125:
;1126:	switch (ownerDraw) {
ADDRLP4 16
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 36
LTI4 $938
ADDRLP4 16
INDIRI4
CNSTI4 86
GTI4 $939
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $940-144
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $940
address $909
address $902
address $903
address $904
address $905
address $902
address $902
address $902
address $912
address $902
address $902
address $906
address $907
address $908
address $910
address $902
address $902
address $902
address $924
address $928
address $929
address $922
address $923
address $902
address $926
address $927
address $925
address $932
address $933
address $933
address $933
address $902
address $933
address $933
address $933
address $933
address $902
address $902
address $933
address $902
address $902
address $902
address $902
address $902
address $902
address $934
address $902
address $936
address $902
address $902
address $937
code
LABELV $938
ADDRLP4 20
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $930
ADDRLP4 20
INDIRI4
CNSTI4 7
EQI4 $931
ADDRLP4 20
INDIRI4
CNSTI4 4
LTI4 $902
LABELV $942
ADDRLP4 24
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 11
EQI4 $935
ADDRLP4 24
INDIRI4
CNSTI4 12
EQI4 $913
ADDRGP4 $902
JUMPV
LABELV $939
ADDRLP4 28
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 283
EQI4 $921
ADDRLP4 28
INDIRI4
CNSTI4 284
EQI4 $916
ADDRLP4 28
INDIRI4
CNSTI4 285
EQI4 $918
ADDRLP4 28
INDIRI4
CNSTI4 283
LTI4 $902
LABELV $943
ADDRLP4 32
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 310
EQI4 $920
ADDRLP4 32
INDIRI4
CNSTI4 311
EQI4 $919
ADDRLP4 32
INDIRI4
CNSTI4 312
EQI4 $917
ADDRGP4 $902
JUMPV
LABELV $903
line 1128
;1127:	case CG_PLAYER_ARMOR_ICON:
;1128:		CG_DrawPlayerArmorIcon(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerArmorIcon
CALLV
pop
line 1129
;1129:		break;
ADDRGP4 $902
JUMPV
LABELV $904
line 1131
;1130:	case CG_PLAYER_ARMOR_ICON2D:
;1131:		CG_DrawPlayerArmorIcon(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerArmorIcon
CALLV
pop
line 1132
;1132:		break;
ADDRGP4 $902
JUMPV
LABELV $905
line 1134
;1133:	case CG_PLAYER_ARMOR_VALUE:
;1134:		CG_DrawPlayerArmorValue(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerArmorValue
CALLV
pop
line 1135
;1135:		break;
ADDRGP4 $902
JUMPV
LABELV $906
line 1137
;1136:	case CG_PLAYER_AMMO_ICON:
;1137:		CG_DrawPlayerAmmoIcon(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerAmmoIcon
CALLV
pop
line 1138
;1138:		break;
ADDRGP4 $902
JUMPV
LABELV $907
line 1140
;1139:	case CG_PLAYER_AMMO_ICON2D:
;1140:		CG_DrawPlayerAmmoIcon(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerAmmoIcon
CALLV
pop
line 1141
;1141:		break;
ADDRGP4 $902
JUMPV
LABELV $908
line 1143
;1142:	case CG_PLAYER_AMMO_VALUE:
;1143:		CG_DrawPlayerAmmoValue(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerAmmoValue
CALLV
pop
line 1144
;1144:		break;
ADDRGP4 $902
JUMPV
LABELV $909
line 1146
;1145:	case CG_PLAYER_HEAD:
;1146:		CG_DrawPlayerHead(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerHead
CALLV
pop
line 1147
;1147:		break;
ADDRGP4 $902
JUMPV
LABELV $910
line 1149
;1148:	case CG_PLAYER_ITEM:
;1149:		CG_DrawPlayerItem(&rect, scale, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerItem
CALLV
pop
line 1150
;1150:		break;
ADDRGP4 $902
JUMPV
line 1152
;1151:	case CG_PLAYER_SCORE:
;1152:		break;
LABELV $912
line 1154
;1153:	case CG_PLAYER_HEALTH:
;1154:		CG_DrawPlayerHealth(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerHealth
CALLV
pop
line 1155
;1155:		break;
ADDRGP4 $902
JUMPV
LABELV $913
line 1157
;1156:	case CG_LEVELTIMER:					// 12
;1157:		CG_Text_Paint(rect.x, rect.y, scale, color, "00:00", 0, 8, textStyle, 0, WIDESCREEN_STRETCH); //, mRect);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 0+4
INDIRF4
ARGF4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRGP4 $915
ARGP4
CNSTF4 0
ARGF4
CNSTI4 8
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1158
;1158:		break;
ADDRGP4 $902
JUMPV
LABELV $916
line 1160
;1159:	case CG_RED_SCORE:
;1160:		CG_DrawRedScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedScore
CALLV
pop
line 1161
;1161:		break;
ADDRGP4 $902
JUMPV
LABELV $917
line 1163
;1162:	case CG_BLUE_SCORE:
;1163:		CG_DrawBlueScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueScore
CALLV
pop
line 1164
;1164:		break;
ADDRGP4 $902
JUMPV
LABELV $918
line 1166
;1165:	case CG_RED_NAME:
;1166:		CG_DrawRedName(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedName
CALLV
pop
line 1167
;1167:		break;
ADDRGP4 $902
JUMPV
LABELV $919
line 1169
;1168:	case CG_BLUE_NAME:
;1169:		CG_DrawBlueName(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueName
CALLV
pop
line 1170
;1170:		break;
ADDRGP4 $902
JUMPV
LABELV $920
line 1172
;1171:	case CG_BLUE_FLAGSTATUS:
;1172:		CG_DrawBlueFlagStatus(&rect, shader);
ADDRLP4 0
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueFlagStatus
CALLV
pop
line 1173
;1173:		break;
ADDRGP4 $902
JUMPV
LABELV $921
line 1175
;1174:	case CG_RED_FLAGSTATUS:
;1175:		CG_DrawRedFlagStatus(&rect, shader);
ADDRLP4 0
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedFlagStatus
CALLV
pop
line 1176
;1176:		break;
ADDRGP4 $902
JUMPV
LABELV $922
line 1178
;1177:	case CG_HARVESTER_SKULLS:
;1178:		CG_HarvesterSkulls(&rect, scale, color, qfalse, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_HarvesterSkulls
CALLV
pop
line 1179
;1179:		break;
ADDRGP4 $902
JUMPV
LABELV $923
line 1181
;1180:	case CG_HARVESTER_SKULLS2D:
;1181:		CG_HarvesterSkulls(&rect, scale, color, qtrue, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_HarvesterSkulls
CALLV
pop
line 1182
;1182:		break;
ADDRGP4 $902
JUMPV
LABELV $924
line 1184
;1183:	case CG_ONEFLAG_STATUS:
;1184:		CG_OneFlagStatus(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_OneFlagStatus
CALLV
pop
line 1185
;1185:		break;
ADDRGP4 $902
JUMPV
LABELV $925
line 1187
;1186:	case CG_TEAM_COLOR:
;1187:		CG_DrawTeamColor(&rect, color);
ADDRLP4 0
ARGP4
ADDRFP4 48
INDIRP4
ARGP4
ADDRGP4 CG_DrawTeamColor
CALLV
pop
line 1188
;1188:		break;
ADDRGP4 $902
JUMPV
LABELV $926
line 1190
;1189:	case CG_CTF_POWERUP:
;1190:		CG_DrawCTFPowerUp(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawCTFPowerUp
CALLV
pop
line 1191
;1191:		break;
ADDRGP4 $902
JUMPV
LABELV $927
line 1193
;1192:	case CG_AREA_POWERUP:
;1193:		CG_DrawAreaPowerUp(&rect, align, special, scale, color);
ADDRLP4 0
ARGP4
ADDRFP4 36
INDIRI4
ARGI4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRGP4 CG_DrawAreaPowerUp
CALLV
pop
line 1194
;1194:		break;
ADDRGP4 $902
JUMPV
LABELV $928
line 1196
;1195:	case CG_PLAYER_HASFLAG:
;1196:		CG_DrawPlayerHasFlag(&rect, qfalse);
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPlayerHasFlag
CALLV
pop
line 1197
;1197:		break;
ADDRGP4 $902
JUMPV
LABELV $929
line 1199
;1198:	case CG_PLAYER_HASFLAG2D:
;1199:		CG_DrawPlayerHasFlag(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerHasFlag
CALLV
pop
line 1200
;1200:		break;
ADDRGP4 $902
JUMPV
LABELV $930
line 1202
;1201:	case CG_GAME_TYPE:
;1202:		CG_DrawGameType(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawGameType
CALLV
pop
line 1203
;1203:		break;
ADDRGP4 $902
JUMPV
LABELV $931
line 1205
;1204:	case CG_GAME_STATUS:
;1205:		CG_DrawGameStatus(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawGameStatus
CALLV
pop
line 1206
;1206:		break;
ADDRGP4 $902
JUMPV
LABELV $932
line 1208
;1207:	case CG_KILLER:
;1208:		CG_DrawKiller(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawKiller
CALLV
pop
line 1209
;1209:		break;
ADDRGP4 $902
JUMPV
LABELV $933
line 1218
;1210:	case CG_ACCURACY:
;1211:	case CG_ASSISTS:
;1212:	case CG_DEFEND:
;1213:	case CG_EXCELLENT:
;1214:	case CG_IMPRESSIVE:
;1215:	case CG_PERFECT:
;1216:	case CG_GAUNTLET:
;1217:	case CG_CAPTURES:
;1218:		CG_DrawMedal(ownerDraw, &rect, scale, color, shader);
ADDRFP4 24
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawMedal
CALLV
pop
line 1219
;1219:		break;
ADDRGP4 $902
JUMPV
LABELV $934
line 1221
;1220:	case CG_SPECTATORS:
;1221:		CG_DrawTeamSpectators(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawTeamSpectators
CALLV
pop
line 1222
;1222:		break;
ADDRGP4 $902
JUMPV
LABELV $935
line 1224
;1223:	case CG_CAPFRAGLIMIT:
;1224:		CG_DrawCapFragLimit(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawCapFragLimit
CALLV
pop
line 1225
;1225:		break;
ADDRGP4 $902
JUMPV
LABELV $936
line 1227
;1226:	case CG_1STPLACE:
;1227:		CG_Draw1stPlace(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_Draw1stPlace
CALLV
pop
line 1228
;1228:		break;
ADDRGP4 $902
JUMPV
LABELV $937
line 1230
;1229:	case CG_2NDPLACE:
;1230:		CG_Draw2ndPlace(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRF4
ARGF4
ADDRFP4 48
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRFP4 56
INDIRI4
ARGI4
ADDRGP4 CG_Draw2ndPlace
CALLV
pop
line 1231
;1231:		break;
line 1233
;1232:	default:
;1233:		break;
LABELV $902
line 1235
;1234:	}
;1235:}
LABELV $894
endproc CG_OwnerDraw 36 40
export CG_MouseEvent
proc CG_MouseEvent 16 12
line 1237
;1236:
;1237:void CG_MouseEvent(int x, int y) {
line 1240
;1238:	int n;
;1239:
;1240:	if ((cg.predictedPlayerState.pm_type == PM_NORMAL || cg.predictedPlayerState.pm_type == PM_SPECTATOR) && cg.showScores == qfalse) {
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 0
EQI4 $952
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 2
NEI4 $945
LABELV $952
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $945
line 1241
;1241:		trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1242
;1242:		return;
ADDRGP4 $944
JUMPV
LABELV $945
line 1245
;1243:	}
;1244:
;1245:	cgs.cursorX += x;
ADDRLP4 4
ADDRGP4 cgs+146612
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRI4
ADDI4
ASGNI4
line 1246
;1246:	if (cgs.cursorX < 0)
ADDRGP4 cgs+146612
INDIRI4
CNSTI4 0
GEI4 $954
line 1247
;1247:		cgs.cursorX = 0;
ADDRGP4 cgs+146612
CNSTI4 0
ASGNI4
ADDRGP4 $955
JUMPV
LABELV $954
line 1248
;1248:	else if (cgs.cursorX > SCREEN_WIDTH)
ADDRGP4 cgs+146612
INDIRI4
CNSTI4 640
LEI4 $958
line 1249
;1249:		cgs.cursorX = SCREEN_WIDTH;
ADDRGP4 cgs+146612
CNSTI4 640
ASGNI4
LABELV $958
LABELV $955
line 1251
;1250:
;1251:	cgs.cursorY += y;
ADDRLP4 8
ADDRGP4 cgs+146616
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 1252
;1252:	if (cgs.cursorY < 0)
ADDRGP4 cgs+146616
INDIRI4
CNSTI4 0
GEI4 $963
line 1253
;1253:		cgs.cursorY = 0;
ADDRGP4 cgs+146616
CNSTI4 0
ASGNI4
ADDRGP4 $964
JUMPV
LABELV $963
line 1254
;1254:	else if (cgs.cursorY > SCREEN_HEIGHT)
ADDRGP4 cgs+146616
INDIRI4
CNSTI4 480
LEI4 $967
line 1255
;1255:		cgs.cursorY = SCREEN_HEIGHT;
ADDRGP4 cgs+146616
CNSTI4 480
ASGNI4
LABELV $967
LABELV $964
line 1257
;1256:
;1257:	n = Display_CursorType(cgs.cursorX, cgs.cursorY);
ADDRGP4 cgs+146612
INDIRI4
ARGI4
ADDRGP4 cgs+146616
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 Display_CursorType
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 1258
;1258:	cgs.activeCursor = 0;
ADDRGP4 cgs+146636
CNSTI4 0
ASGNI4
line 1259
;1259:	if (n == CURSOR_ARROW) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $974
line 1260
;1260:		cgs.activeCursor = cgs.media.selectCursor;
ADDRGP4 cgs+146636
ADDRGP4 cgs+146664+1276
INDIRI4
ASGNI4
line 1261
;1261:	} else if (n == CURSOR_SIZER) {
ADDRGP4 $975
JUMPV
LABELV $974
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $979
line 1262
;1262:		cgs.activeCursor = cgs.media.sizeCursor;
ADDRGP4 cgs+146636
ADDRGP4 cgs+146664+1280
INDIRI4
ASGNI4
line 1263
;1263:	}
LABELV $979
LABELV $975
line 1265
;1264:
;1265:	if (cgs.capturedItem) {
ADDRGP4 cgs+146632
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $984
line 1266
;1266:		Display_MouseMove(cgs.capturedItem, x, y);
ADDRGP4 cgs+146632
INDIRP4
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 Display_MouseMove
CALLI4
pop
line 1267
;1267:	} else {
ADDRGP4 $985
JUMPV
LABELV $984
line 1268
;1268:		Display_MouseMove(NULL, cgs.cursorX, cgs.cursorY);
CNSTP4 0
ARGP4
ADDRGP4 cgs+146612
INDIRI4
ARGI4
ADDRGP4 cgs+146616
INDIRI4
ARGI4
ADDRGP4 Display_MouseMove
CALLI4
pop
line 1269
;1269:	}
LABELV $985
line 1271
;1270:
;1271:}
LABELV $944
endproc CG_MouseEvent 16 12
export CG_HideTeamMenu
proc CG_HideTeamMenu 0 4
line 1279
;1272:
;1273:/*
;1274:==================
;1275:CG_HideTeamMenus
;1276:==================
;1277:
;1278:*/
;1279:void CG_HideTeamMenu() {
line 1280
;1280:	Menus_CloseByName("teamMenu");
ADDRGP4 $991
ARGP4
ADDRGP4 Menus_CloseByName
CALLV
pop
line 1281
;1281:	Menus_CloseByName("getMenu");
ADDRGP4 $992
ARGP4
ADDRGP4 Menus_CloseByName
CALLV
pop
line 1282
;1282:}
LABELV $990
endproc CG_HideTeamMenu 0 4
export CG_ShowTeamMenu
proc CG_ShowTeamMenu 0 4
line 1291
;1283:
;1284:
;1285:/*
;1286:==================
;1287:CG_ShowTeamMenus
;1288:==================
;1289:
;1290:*/
;1291:void CG_ShowTeamMenu() {
line 1292
;1292:	Menus_OpenByName("teamMenu");
ADDRGP4 $991
ARGP4
ADDRGP4 Menus_OpenByName
CALLV
pop
line 1293
;1293:}
LABELV $993
endproc CG_ShowTeamMenu 0 4
export CG_EventHandling
proc CG_EventHandling 0 0
line 1305
;1294:
;1295:
;1296:/*
;1297:==================
;1298:CG_EventHandling
;1299:==================
;1300: type 0 - no event handling
;1301:	  1 - team menu
;1302:	  2 - hud editor
;1303:
;1304:*/
;1305:void CG_EventHandling(cgame_event_t type) {
line 1306
;1306:	cgs.eventHandling = type;
ADDRGP4 cgs+146620
ADDRFP4 0
INDIRI4
ASGNI4
line 1307
;1307:	if (type == CGAME_EVENT_NONE) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $996
line 1308
;1308:		CG_HideTeamMenu();
ADDRGP4 CG_HideTeamMenu
CALLV
pop
line 1309
;1309:	}
LABELV $996
line 1311
;1310:
;1311:}
LABELV $994
endproc CG_EventHandling 0 0
export CG_SetScoreCatcher
proc CG_SetScoreCatcher 36 4
line 1314
;1312:
;1313:
;1314:void CG_SetScoreCatcher(qboolean enable) {
line 1318
;1315:	int	currentCatcher, newCatcher, old_state, new_state;
;1316:	qboolean spectator;
;1317:
;1318:	currentCatcher = trap_Key_GetCatcher();
ADDRLP4 20
ADDRGP4 trap_Key_GetCatcher
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 1320
;1319:
;1320:	if (currentCatcher & KEYCATCH_CONSOLE || !cg.snap)
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $1002
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $999
LABELV $1002
line 1321
;1321:		return;
ADDRGP4 $998
JUMPV
LABELV $999
line 1323
;1322:
;1323:	spectator = cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.demoPlayback || (cg.snap->ps.pm_flags & PMF_FOLLOW);
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1010
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
NEI4 $1010
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1007
LABELV $1010
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $1008
JUMPV
LABELV $1007
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $1008
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
line 1325
;1324:
;1325:	if (enable && spectator) {
ADDRFP4 0
INDIRI4
CNSTI4 0
EQI4 $1011
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1011
line 1326
;1326:		cgs.score_key = trap_Key_GetKey("+scores");
ADDRGP4 $1014
ARGP4
ADDRLP4 28
ADDRGP4 trap_Key_GetKey
CALLI4
ASGNI4
ADDRGP4 cgs+148020
ADDRLP4 28
INDIRI4
ASGNI4
line 1327
;1327:		cgs.score_catched = qtrue;
ADDRGP4 cgs+148016
CNSTI4 1
ASGNI4
line 1328
;1328:		newCatcher = currentCatcher | KEYCATCH_CGAME;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1329
;1329:	} else {
ADDRGP4 $1012
JUMPV
LABELV $1011
line 1330
;1330:		cgs.score_catched = qfalse;
ADDRGP4 cgs+148016
CNSTI4 0
ASGNI4
line 1331
;1331:		newCatcher = currentCatcher & ~KEYCATCH_CGAME;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 1332
;1332:	}
LABELV $1012
line 1334
;1333:
;1334:	if (newCatcher != currentCatcher) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1017
line 1335
;1335:		if (cgs.score_key) {
ADDRGP4 cgs+148020
INDIRI4
CNSTI4 0
EQI4 $1019
line 1338
;1336:			// keycatcher change may cause reset of all pressed buttons on new engines
;1337:			// so track state of scoreboard key and ignore first upcoming keyup event for it
;1338:			old_state = trap_Key_IsDown(cgs.score_key);
ADDRGP4 cgs+148020
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1339
;1339:			trap_Key_SetCatcher(newCatcher);
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1340
;1340:			new_state = trap_Key_IsDown(cgs.score_key);
ADDRGP4 cgs+148020
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 32
INDIRI4
ASGNI4
line 1341
;1341:			if (new_state != old_state) {
ADDRLP4 16
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $1020
line 1342
;1342:				cgs.filterKeyUpEvent = qtrue;
ADDRGP4 cgs+148012
CNSTI4 1
ASGNI4
line 1343
;1343:			}
line 1344
;1344:		} else {
ADDRGP4 $1020
JUMPV
LABELV $1019
line 1345
;1345:			trap_Key_SetCatcher(newCatcher);
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1346
;1346:		}
LABELV $1020
line 1347
;1347:	}
LABELV $1017
line 1348
;1348:}
LABELV $998
endproc CG_SetScoreCatcher 36 4
export CG_KeyEvent
proc CG_KeyEvent 4 16
line 1351
;1349:
;1350:
;1351:void CG_KeyEvent(int key, qboolean down) {
line 1353
;1352:
;1353:	if (!down) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1028
line 1354
;1354:		return;
ADDRGP4 $1027
JUMPV
LABELV $1028
line 1357
;1355:	}
;1356:
;1357:	if (cg.predictedPlayerState.pm_type == PM_NORMAL || (cg.predictedPlayerState.pm_type == PM_SPECTATOR && cg.showScores == qfalse)) {
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 0
EQI4 $1037
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 2
NEI4 $1030
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $1030
LABELV $1037
line 1358
;1358:		CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 1359
;1359:		trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1360
;1360:		return;
ADDRGP4 $1027
JUMPV
LABELV $1030
line 1363
;1361:	}
;1362:
;1363:	Display_HandleKey(key, down, cgs.cursorX, cgs.cursorY);
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 cgs+146612
INDIRI4
ARGI4
ADDRGP4 cgs+146616
INDIRI4
ARGI4
ADDRGP4 Display_HandleKey
CALLV
pop
line 1365
;1364:
;1365:	if (cgs.capturedItem) {
ADDRGP4 cgs+146632
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1040
line 1366
;1366:		cgs.capturedItem = NULL;
ADDRGP4 cgs+146632
CNSTP4 0
ASGNP4
line 1367
;1367:	} else {
ADDRGP4 $1041
JUMPV
LABELV $1040
line 1368
;1368:		if (key == K_MOUSE2 && down) {
ADDRFP4 0
INDIRI4
CNSTI4 179
NEI4 $1044
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1044
line 1369
;1369:			cgs.capturedItem = Display_CaptureItem(cgs.cursorX, cgs.cursorY);
ADDRGP4 cgs+146612
INDIRI4
ARGI4
ADDRGP4 cgs+146616
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 Display_CaptureItem
CALLP4
ASGNP4
ADDRGP4 cgs+146632
ADDRLP4 0
INDIRP4
ASGNP4
line 1370
;1370:		}
LABELV $1044
line 1371
;1371:	}
LABELV $1041
line 1372
;1372:}
LABELV $1027
endproc CG_KeyEvent 4 16
export CG_ClientNumFromName
proc CG_ClientNumFromName 12 8
line 1375
;1373:
;1374:
;1375:int CG_ClientNumFromName(const char *p) {
line 1377
;1376:	int i;
;1377:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1053
JUMPV
LABELV $1050
line 1378
;1378:		if (cgs.clientinfo[i].infoValid && Q_stricmp(cgs.clientinfo[i].name, p) == 0) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1055
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1055
line 1379
;1379:			return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $1049
JUMPV
LABELV $1055
line 1381
;1380:		}
;1381:	}
LABELV $1051
line 1377
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1053
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $1050
line 1382
;1382:	return -1;
CNSTI4 -1
RETI4
LABELV $1049
endproc CG_ClientNumFromName 12 8
export CG_RunMenuScript
proc CG_RunMenuScript 0 0
line 1386
;1383:}
;1384:
;1385:
;1386:void CG_RunMenuScript(char **args) {}
LABELV $1060
endproc CG_RunMenuScript 0 0
export CG_GetTeamColor
proc CG_GetTeamColor 8 0
line 1389
;1387:
;1388:
;1389:void CG_GetTeamColor(vec4_t *color) {
line 1390
;1390:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_RED) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1062
line 1391
;1391:		(*color)[0] = 1.0f;
ADDRFP4 0
INDIRP4
CNSTF4 1065353216
ASGNF4
line 1392
;1392:		(*color)[3] = 0.25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1393
;1393:		(*color)[1] = (*color)[2] = 0.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1394
;1394:	} else if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 $1063
JUMPV
LABELV $1062
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1065
line 1395
;1395:		(*color)[0] = (*color)[1] = 0.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1396
;1396:		(*color)[2] = 1.0f;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 1397
;1397:		(*color)[3] = 0.25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1398
;1398:	} else {
ADDRGP4 $1066
JUMPV
LABELV $1065
line 1399
;1399:		(*color)[0] = (*color)[2] = 0.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1400
;1400:		(*color)[1] = 0.17f;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1043207291
ASGNF4
line 1401
;1401:		(*color)[3] = 0.25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1402
;1402:	}
LABELV $1066
LABELV $1063
line 1403
;1403:}
LABELV $1061
endproc CG_GetTeamColor 8 0
import cgDC
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseArmorTiered
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawStretchPic
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_armorTiered
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import gametypeString
import mRect
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import UI_SelectForKey
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_HandleCapture
import Menu_New
import Menu_Count
import Q_MathScript
import MenuVar_Get
import MenuVar_Set
import PC_Parenthesis_Parse
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Item_Init
import Menu_Init
import Init_Display
import String_Report
import String_Init
import String_Alloc
import DefaultWideScreenValue
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1014
byte 1 43
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $992
byte 1 103
byte 1 101
byte 1 116
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 0
align 1
LABELV $991
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 0
align 1
LABELV $915
byte 1 48
byte 1 48
byte 1 58
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $890
byte 1 87
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $882
byte 1 37
byte 1 105
byte 1 37
byte 1 37
byte 1 0
align 1
LABELV $790
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $702
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 82
byte 1 101
byte 1 100
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $698
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $691
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $683
byte 1 37
byte 1 115
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 99
byte 1 101
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $665
byte 1 37
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $652
byte 1 70
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $648
byte 1 0
align 1
LABELV $225
byte 1 45
byte 1 0
align 1
LABELV $110
byte 1 37
byte 1 105
byte 1 0
