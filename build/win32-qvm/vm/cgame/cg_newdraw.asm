data
export drawTeamOverlayModificationCount
align 4
LABELV drawTeamOverlayModificationCount
byte 4 -1
code
proc CG_DrawPlayerArmorIcon 36 32
file "..\..\..\..\code\cgame\cg_newdraw.c"
line 8
;1:#include "cg_local.h"
;2:#include "../ui/ui_shared.h"
;3:
;4:extern displayContextDef_t cgDC;
;5:
;6:int drawTeamOverlayModificationCount = -1;
;7:
;8:static void CG_DrawPlayerArmorIcon(rectDef_t *rect, qboolean draw2D) {
line 14
;9:	centity_t *cent;
;10:	playerState_t *ps;
;11:	vec3_t		angles;
;12:	vec3_t		origin;
;13:
;14:	if (cg_drawStatus.integer == 0) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
NEI4 $82
line 15
;15:		return;
ADDRGP4 $81
JUMPV
LABELV $82
line 18
;16:	}
;17:
;18:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 12
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 19
;19:	ps = &cg.snap->ps;
ADDRLP4 16
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 21
;20:
;21:	if (draw2D || (!cg_draw3dIcons.integer && cg_drawIcons.integer)) { // bk001206 - parentheses
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $91
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
NEI4 $87
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $87
LABELV $91
line 22
;22:		CG_DrawPic(rect->x, rect->y + rect->h / 2 + 1, rect->w, rect->h, cgs.media.armorIcon);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
CNSTF4 1065353216
ADDF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+148744+156
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 23
;23:	} else if (cg_draw3dIcons.integer) {
ADDRGP4 $88
JUMPV
LABELV $87
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $94
line 24
;24:		VectorClear(angles);
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0+4
CNSTF4 0
ASGNF4
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 25
;25:		origin[0] = 90;
ADDRLP4 20
CNSTF4 1119092736
ASGNF4
line 26
;26:		origin[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 27
;27:		origin[2] = -10;
ADDRLP4 20+8
CNSTF4 3240099840
ASGNF4
line 28
;28:		angles[YAW] = (cg.time & 2047) * 360 / 2048.0;
ADDRLP4 0+4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
CNSTI4 360
MULI4
CVIF4 4
CNSTF4 973078528
MULF4
ASGNF4
line 30
;29:
;30:		CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cgs.media.armorModel, 0, origin, angles);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+148744+152
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 31
;31:	}
LABELV $94
LABELV $88
line 33
;32:
;33:}
LABELV $81
endproc CG_DrawPlayerArmorIcon 36 32
proc CG_DrawPlayerArmorValue 36 32
line 35
;34:
;35:static void CG_DrawPlayerArmorValue(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 41
;36:	char	num[16];
;37:	int value;
;38:	centity_t *cent;
;39:	playerState_t *ps;
;40:
;41:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 24
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 42
;42:	ps = &cg.snap->ps;
ADDRLP4 20
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 44
;43:
;44:	value = ps->stats[STAT_ARMOR];
ADDRLP4 0
ADDRLP4 20
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 47
;45:
;46:
;47:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $108
line 48
;48:		trap_R_SetColor(color);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 49
;49:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 50
;50:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 51
;51:	} else {
ADDRGP4 $109
JUMPV
LABELV $108
line 52
;52:		Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 53
;53:		value = CG_Text_Width(num, scale, 0);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
line 54
;54:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 55
;55:	}
LABELV $109
line 56
;56:}
LABELV $105
endproc CG_DrawPlayerArmorValue 36 32
proc CG_DrawPlayerAmmoIcon 44 32
line 58
;57:
;58:static void CG_DrawPlayerAmmoIcon(rectDef_t *rect, qboolean draw2D) {
line 64
;59:	centity_t *cent;
;60:	playerState_t *ps;
;61:	vec3_t		angles;
;62:	vec3_t		origin;
;63:
;64:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 65
;65:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 67
;66:
;67:	if (draw2D || (!cg_draw3dIcons.integer && cg_drawIcons.integer)) { // bk001206 - parentheses
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $118
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
NEI4 $114
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $114
LABELV $118
line 69
;68:		qhandle_t	icon;
;69:		icon = cg_weapons[cg.predictedPlayerState.weapon].ammoIcon;
ADDRLP4 32
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+72
ADDP4
INDIRI4
ASGNI4
line 70
;70:		if (icon) {
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $115
line 71
;71:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, icon);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 72
;72:		}
line 73
;73:	} else if (cg_draw3dIcons.integer) {
ADDRGP4 $115
JUMPV
LABELV $114
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $124
line 74
;74:		if (cent->currentState.weapon && cg_weapons[cent->currentState.weapon].ammoModel) {
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $127
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+76
ADDP4
INDIRI4
CNSTI4 0
EQI4 $127
line 75
;75:			VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 76
;76:			origin[0] = 70;
ADDRLP4 20
CNSTF4 1116471296
ASGNF4
line 77
;77:			origin[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 78
;78:			origin[2] = 0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 79
;79:			angles[YAW] = 90 + 20 * sin(cg.time / 1000.0);
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 36
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 36
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 80
;80:			CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cg_weapons[cent->currentState.weapon].ammoModel, 0, origin, angles);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+76
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 81
;81:		}
LABELV $127
line 82
;82:	}
LABELV $124
LABELV $115
line 83
;83:}
LABELV $111
endproc CG_DrawPlayerAmmoIcon 44 32
proc CG_DrawPlayerAmmoValue 36 32
line 85
;84:
;85:static void CG_DrawPlayerAmmoValue(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 91
;86:	char	num[16];
;87:	int value;
;88:	centity_t *cent;
;89:	playerState_t *ps;
;90:
;91:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 92
;92:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 94
;93:
;94:	if (cent->currentState.weapon) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $140
line 95
;95:		value = ps->ammo[cent->currentState.weapon];
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
line 96
;96:		if (value > -1) {
ADDRLP4 8
INDIRI4
CNSTI4 -1
LEI4 $142
line 97
;97:			if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $144
line 98
;98:				trap_R_SetColor(color);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 99
;99:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 100
;100:				trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 101
;101:			} else {
ADDRGP4 $145
JUMPV
LABELV $144
line 102
;102:				Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 103
;103:				value = CG_Text_Width(num, scale, 0);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
line 104
;104:				CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 105
;105:			}
LABELV $145
line 106
;106:		}
LABELV $142
line 107
;107:	}
LABELV $140
line 109
;108:
;109:}
LABELV $137
endproc CG_DrawPlayerAmmoValue 36 32
proc CG_DrawPlayerHead 52 24
line 112
;110:
;111:
;112:static void CG_DrawPlayerHead(rectDef_t *rect, qboolean draw2D) {
line 116
;113:	vec3_t		angles;
;114:	float		size, stretch;
;115:	float		frac;
;116:	float		x = rect->x;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 118
;117:
;118:	VectorClear(angles);
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 4+4
CNSTF4 0
ASGNF4
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 120
;119:
;120:	if (cg.damageTime && cg.time - cg.damageTime < DAMAGE_TIME) {
ADDRGP4 cg+125792
INDIRI4
CNSTI4 0
EQI4 $149
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125792
INDIRI4
SUBI4
CNSTI4 500
GEI4 $149
line 121
;121:		frac = (float)(cg.time - cg.damageTime) / DAMAGE_TIME;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125792
INDIRI4
SUBI4
CVIF4 4
CNSTF4 990057071
MULF4
ASGNF4
line 122
;122:		size = rect->w * 1.25 * (1.5 - frac * 0.5);
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1067450368
MULF4
CNSTF4 1069547520
ADDRLP4 0
INDIRF4
CNSTF4 1056964608
MULF4
SUBF4
MULF4
ASGNF4
line 124
;123:
;124:		stretch = size - rect->w * 1.25;
ADDRLP4 24
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1067450368
MULF4
SUBF4
ASGNF4
line 126
;125:		// kick in the direction of damage
;126:		x -= stretch * 0.5 + cg.damageX * stretch * 0.5;
ADDRLP4 28
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1056964608
MULF4
ADDRGP4 cg+125796
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
CNSTF4 1056964608
MULF4
ADDF4
SUBF4
ASGNF4
line 128
;127:
;128:		cg.headStartYaw = 180 + cg.damageX * 45;
ADDRGP4 cg+125828
ADDRGP4 cg+125796
INDIRF4
CNSTF4 1110704128
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 130
;129:
;130:		cg.headEndYaw = 180 + 20 * cos(crandom() * M_PI);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 36
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125816
ADDRLP4 36
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 131
;131:		cg.headEndPitch = 5 * cos(crandom() * M_PI);
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 44
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125812
ADDRLP4 44
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 133
;132:
;133:		cg.headStartTime = cg.time;
ADDRGP4 cg+125832
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 134
;134:		cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+125820
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1031406068
MULF4
ADDF4
CVFI4 4
ASGNI4
line 135
;135:	} else {
ADDRGP4 $150
JUMPV
LABELV $149
line 136
;136:		if (cg.time >= cg.headEndTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125820
INDIRI4
LTI4 $165
line 138
;137:			// select a new head angle
;138:			cg.headStartYaw = cg.headEndYaw;
ADDRGP4 cg+125828
ADDRGP4 cg+125816
INDIRF4
ASGNF4
line 139
;139:			cg.headStartPitch = cg.headEndPitch;
ADDRGP4 cg+125824
ADDRGP4 cg+125812
INDIRF4
ASGNF4
line 140
;140:			cg.headStartTime = cg.headEndTime;
ADDRGP4 cg+125832
ADDRGP4 cg+125820
INDIRI4
ASGNI4
line 141
;141:			cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+125820
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1031406068
MULF4
ADDF4
CVFI4 4
ASGNI4
line 143
;142:
;143:			cg.headEndYaw = 180 + 20 * cos(crandom() * M_PI);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 36
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125816
ADDRLP4 36
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 144
;144:			cg.headEndPitch = 5 * cos(crandom() * M_PI);
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 44
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+125812
ADDRLP4 44
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 145
;145:		}
LABELV $165
line 147
;146:
;147:		size = rect->w * 1.25;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1067450368
MULF4
ASGNF4
line 148
;148:	}
LABELV $150
line 151
;149:
;150:	// if the server was frozen for a while we may have a bad head start time
;151:	if (cg.headStartTime > cg.time) {
ADDRGP4 cg+125832
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $179
line 152
;152:		cg.headStartTime = cg.time;
ADDRGP4 cg+125832
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 153
;153:	}
LABELV $179
line 155
;154:
;155:	frac = (cg.time - cg.headStartTime) / (float)(cg.headEndTime - cg.headStartTime);
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+125832
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+125820
INDIRI4
ADDRGP4 cg+125832
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 156
;156:	frac = frac * frac * (3 - 2 * frac);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1077936128
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
MULF4
SUBF4
MULF4
ASGNF4
line 157
;157:	angles[YAW] = cg.headStartYaw + (cg.headEndYaw - cg.headStartYaw) * frac;
ADDRLP4 4+4
ADDRGP4 cg+125828
INDIRF4
ADDRGP4 cg+125816
INDIRF4
ADDRGP4 cg+125828
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 158
;158:	angles[PITCH] = cg.headStartPitch + (cg.headEndPitch - cg.headStartPitch) * frac;
ADDRLP4 4
ADDRGP4 cg+125824
INDIRF4
ADDRGP4 cg+125812
INDIRF4
ADDRGP4 cg+125824
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 160
;159:
;160:	CG_DrawHead(x, rect->y, rect->w, rect->h, cg.snap->ps.clientNum, angles);
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 161
;161:}
LABELV $146
endproc CG_DrawPlayerHead 52 24
export CG_StatusHandle
proc CG_StatusHandle 0 0
line 163
;162:
;163:qhandle_t CG_StatusHandle(int task) { return qfalse; }
CNSTI4 0
RETI4
LABELV $197
endproc CG_StatusHandle 0 0
proc CG_DrawPlayerStatus 16 20
line 165
;164:
;165:static void CG_DrawPlayerStatus(rectDef_t *rect) {
line 166
;166:	clientInfo_t *ci = &cgs.clientinfo[cg.snap->ps.clientNum];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 167
;167:	if (ci) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $201
line 168
;168:		qhandle_t h = CG_StatusHandle(ci->teamTask);
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 169
;169:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, h);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 170
;170:	}
LABELV $201
line 171
;171:}
LABELV $198
endproc CG_DrawPlayerStatus 16 20
proc CG_DrawPlayerItem 32 32
line 174
;172:
;173:
;174:static void CG_DrawPlayerItem(rectDef_t *rect, float scale, qboolean draw2D) {
line 178
;175:	int		value;
;176:	vec3_t origin, angles;
;177:
;178:	value = cg.snap->ps.stats[STAT_HOLDABLE_ITEM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ASGNI4
line 179
;179:	if (value) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $205
line 180
;180:		CG_RegisterItemVisuals(value);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 182
;181:
;182:		if (qtrue) {
line 183
;183:			CG_RegisterItemVisuals(value);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 184
;184:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cg_items[value].icon);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 185
;185:		} else {
ADDRGP4 $208
JUMPV
LABELV $207
line 186
;186:			VectorClear(angles);
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 4+4
CNSTF4 0
ASGNF4
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 187
;187:			origin[0] = 90;
ADDRLP4 16
CNSTF4 1119092736
ASGNF4
line 188
;188:			origin[1] = 0;
ADDRLP4 16+4
CNSTF4 0
ASGNF4
line 189
;189:			origin[2] = -10;
ADDRLP4 16+8
CNSTF4 3240099840
ASGNF4
line 190
;190:			angles[YAW] = (cg.time & 2047) * 360 / 2048.0;
ADDRLP4 4+4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
CNSTI4 360
MULI4
CVIF4 4
CNSTF4 973078528
MULF4
ASGNF4
line 191
;191:			CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cg_items[value].models[0], 0, origin, angles);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+4
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 192
;192:		}
LABELV $208
line 193
;193:	}
LABELV $205
line 194
;194:}
LABELV $203
endproc CG_DrawPlayerItem 32 32
proc CG_DrawPlayerHealth 32 32
line 197
;195:
;196:
;197:static void CG_DrawPlayerHealth(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 202
;198:	playerState_t *ps;
;199:	int value;
;200:	char	num[16];
;201:
;202:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 204
;203:
;204:	value = ps->stats[STAT_HEALTH];
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 206
;205:
;206:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $219
line 207
;207:		trap_R_SetColor(color);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 208
;208:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 209
;209:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 210
;210:	} else {
ADDRGP4 $220
JUMPV
LABELV $219
line 211
;211:		Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 8
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 212
;212:		value = CG_Text_Width(num, scale, 0);
ADDRLP4 8
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 213
;213:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 214
;214:	}
LABELV $220
line 215
;215:}
LABELV $217
endproc CG_DrawPlayerHealth 32 32
proc CG_DrawRedScore 28 32
line 218
;216:
;217:
;218:static void CG_DrawRedScore(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 221
;219:	int value;
;220:	char num[16];
;221:	if (cgs.scores1 == SCORE_NOT_PRESENT) {
ADDRGP4 cgs+34824
INDIRI4
CNSTI4 -9999
NEI4 $222
line 222
;222:		Com_sprintf(num, sizeof(num), "-");
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $225
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 223
;223:	} else {
ADDRGP4 $223
JUMPV
LABELV $222
line 224
;224:		Com_sprintf(num, sizeof(num), "%i", cgs.scores1);
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRGP4 cgs+34824
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 225
;225:	}
LABELV $223
line 226
;226:	value = CG_Text_Width(num, scale, 0);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 227
;227:	CG_Text_Paint(rect->x + rect->w - value, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 228
;228:}
LABELV $221
endproc CG_DrawRedScore 28 32
proc CG_DrawBlueScore 28 32
line 230
;229:
;230:static void CG_DrawBlueScore(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 234
;231:	int value;
;232:	char num[16];
;233:
;234:	if (cgs.scores2 == SCORE_NOT_PRESENT) {
ADDRGP4 cgs+34828
INDIRI4
CNSTI4 -9999
NEI4 $228
line 235
;235:		Com_sprintf(num, sizeof(num), "-");
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $225
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 236
;236:	} else {
ADDRGP4 $229
JUMPV
LABELV $228
line 237
;237:		Com_sprintf(num, sizeof(num), "%i", cgs.scores2);
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRGP4 cgs+34828
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 238
;238:	}
LABELV $229
line 239
;239:	value = CG_Text_Width(num, scale, 0);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 240
;240:	CG_Text_Paint(rect->x + rect->w - value, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 241
;241:}
LABELV $227
endproc CG_DrawBlueScore 28 32
proc CG_DrawRedName 4 32
line 244
;242:
;243:// FIXME: team name support
;244:static void CG_DrawRedName(rectDef_t *rect, float scale, vec4_t color, int textStyle) {
line 245
;245:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cg_redTeamName.string, 0, 0, textStyle);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg_redTeamName+16
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 246
;246:}
LABELV $232
endproc CG_DrawRedName 4 32
proc CG_DrawBlueName 4 32
line 248
;247:
;248:static void CG_DrawBlueName(rectDef_t *rect, float scale, vec4_t color, int textStyle) {
line 249
;249:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cg_blueTeamName.string, 0, 0, textStyle);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg_blueTeamName+16
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 250
;250:}
LABELV $234
endproc CG_DrawBlueName 4 32
proc CG_DrawBlueFlagName 12 32
line 252
;251:
;252:static void CG_DrawBlueFlagName(rectDef_t *rect, float scale, vec4_t color, int textStyle) {
line 254
;253:	int i;
;254:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $240
JUMPV
LABELV $237
line 255
;255:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_RED && cgs.clientinfo[i].powerups & (1 << PW_BLUEFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
INDIRI4
CNSTI4 0
EQI4 $242
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $242
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $242
line 256
;256:			CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cgs.clientinfo[i].name, 0, 0, textStyle);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 257
;257:			return;
ADDRGP4 $236
JUMPV
LABELV $242
line 259
;258:		}
;259:	}
LABELV $238
line 254
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $240
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $237
line 260
;260:}
LABELV $236
endproc CG_DrawBlueFlagName 12 32
data
align 4
LABELV $259
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
align 4
LABELV $266
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
code
proc CG_DrawBlueFlagStatus 28 20
line 262
;261:
;262:static void CG_DrawBlueFlagStatus(rectDef_t *rect, qhandle_t shader) {
line 263
;263:	if (cgs.gametype != GT_CTF && cgs.gametype != GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $252
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
EQI4 $252
line 264
;264:		if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $251
line 265
;265:			vec4_t color = { 0, 0, 1, 1 };
ADDRLP4 0
ADDRGP4 $259
INDIRB
ASGNB 16
line 266
;266:			trap_R_SetColor(color);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 267
;267:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.blueCubeIcon);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+148744+32
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 268
;268:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 269
;269:		}
line 270
;270:		return;
ADDRGP4 $251
JUMPV
LABELV $252
line 272
;271:	}
;272:	if (shader) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $262
line 273
;273:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 274
;274:	} else {
ADDRGP4 $263
JUMPV
LABELV $262
line 275
;275:		gitem_t *item = BG_FindItemForPowerup(PW_BLUEFLAG);
CNSTI4 8
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 276
;276:		if (item) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $264
line 277
;277:			vec4_t color = { 0, 0, 1, 1 };
ADDRLP4 8
ADDRGP4 $266
INDIRB
ASGNB 16
line 278
;278:			trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 279
;279:			if (cgs.blueflag >= 0 && cgs.blueflag <= 2) {
ADDRGP4 cgs+34836
INDIRI4
CNSTI4 0
LTI4 $267
ADDRGP4 cgs+34836
INDIRI4
CNSTI4 2
GTI4 $267
line 280
;280:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[cgs.blueflag]);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+34836
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148744+1160
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 281
;281:			} else {
ADDRGP4 $268
JUMPV
LABELV $267
line 282
;282:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[0]);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+148744+1160
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 283
;283:			}
LABELV $268
line 284
;284:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 285
;285:		}
LABELV $264
line 286
;286:	}
LABELV $263
line 287
;287:}
LABELV $251
endproc CG_DrawBlueFlagStatus 28 20
proc CG_DrawBlueFlagHead 28 24
line 289
;288:
;289:static void CG_DrawBlueFlagHead(rectDef_t *rect) {
line 291
;290:	int i;
;291:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $280
JUMPV
LABELV $277
line 292
;292:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_RED && cgs.clientinfo[i].powerups & (1 << PW_BLUEFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
INDIRI4
CNSTI4 0
EQI4 $282
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $282
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $282
line 294
;293:			vec3_t angles;
;294:			VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 295
;295:			angles[YAW] = 180 + 20 * sin(cg.time / 650.0);;
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 986293812
MULF4
ARGF4
ADDRLP4 20
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 20
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 296
;296:			CG_DrawHead(rect->x, rect->y, rect->w, rect->h, 0, angles);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 297
;297:			return;
ADDRGP4 $276
JUMPV
LABELV $282
line 299
;298:		}
;299:	}
LABELV $278
line 291
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $280
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $277
line 300
;300:}
LABELV $276
endproc CG_DrawBlueFlagHead 28 24
proc CG_DrawRedFlagName 12 32
line 302
;301:
;302:static void CG_DrawRedFlagName(rectDef_t *rect, float scale, vec4_t color, int textStyle) {
line 304
;303:	int i;
;304:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $297
JUMPV
LABELV $294
line 305
;305:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_BLUE && cgs.clientinfo[i].powerups & (1 << PW_REDFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
INDIRI4
CNSTI4 0
EQI4 $299
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $299
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $299
line 306
;306:			CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, cgs.clientinfo[i].name, 0, 0, textStyle);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 307
;307:			return;
ADDRGP4 $293
JUMPV
LABELV $299
line 309
;308:		}
;309:	}
LABELV $295
line 304
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $297
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $294
line 310
;310:}
LABELV $293
endproc CG_DrawRedFlagName 12 32
data
align 4
LABELV $316
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
align 4
LABELV $323
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
code
proc CG_DrawRedFlagStatus 28 20
line 312
;311:
;312:static void CG_DrawRedFlagStatus(rectDef_t *rect, qhandle_t shader) {
line 313
;313:	if (cgs.gametype != GT_CTF && cgs.gametype != GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $309
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
EQI4 $309
line 314
;314:		if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $308
line 315
;315:			vec4_t color = { 1, 0, 0, 1 };
ADDRLP4 0
ADDRGP4 $316
INDIRB
ASGNB 16
line 316
;316:			trap_R_SetColor(color);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 317
;317:			CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.redCubeIcon);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+148744+28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 318
;318:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 319
;319:		}
line 320
;320:		return;
ADDRGP4 $308
JUMPV
LABELV $309
line 322
;321:	}
;322:	if (shader) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $319
line 323
;323:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 324
;324:	} else {
ADDRGP4 $320
JUMPV
LABELV $319
line 325
;325:		gitem_t *item = BG_FindItemForPowerup(PW_REDFLAG);
CNSTI4 7
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 326
;326:		if (item) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $321
line 327
;327:			vec4_t color = { 1, 0, 0, 1 };
ADDRLP4 8
ADDRGP4 $323
INDIRB
ASGNB 16
line 328
;328:			trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 329
;329:			if (cgs.redflag >= 0 && cgs.redflag <= 2) {
ADDRGP4 cgs+34832
INDIRI4
CNSTI4 0
LTI4 $324
ADDRGP4 cgs+34832
INDIRI4
CNSTI4 2
GTI4 $324
line 330
;330:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[cgs.redflag]);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+34832
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148744+1160
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 331
;331:			} else {
ADDRGP4 $325
JUMPV
LABELV $324
line 332
;332:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[0]);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+148744+1160
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 333
;333:			}
LABELV $325
line 334
;334:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 335
;335:		}
LABELV $321
line 336
;336:	}
LABELV $320
line 337
;337:}
LABELV $308
endproc CG_DrawRedFlagStatus 28 20
proc CG_DrawRedFlagHead 28 24
line 339
;338:
;339:static void CG_DrawRedFlagHead(rectDef_t *rect) {
line 341
;340:	int i;
;341:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $337
JUMPV
LABELV $334
line 342
;342:		if (cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_BLUE && cgs.clientinfo[i].powerups & (1 << PW_REDFLAG)) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
INDIRI4
CNSTI4 0
EQI4 $339
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $339
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $339
line 344
;343:			vec3_t angles;
;344:			VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 345
;345:			angles[YAW] = 180 + 20 * sin(cg.time / 650.0);;
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 986293812
MULF4
ARGF4
ADDRLP4 20
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 20
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 346
;346:			CG_DrawHead(rect->x, rect->y, rect->w, rect->h, 0, angles);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 347
;347:			return;
ADDRGP4 $333
JUMPV
LABELV $339
line 349
;348:		}
;349:	}
LABELV $335
line 341
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $337
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $334
line 350
;350:}
LABELV $333
endproc CG_DrawRedFlagHead 28 24
proc CG_HarvesterSkulls 60 32
line 352
;351:
;352:static void CG_HarvesterSkulls(rectDef_t *rect, float scale, vec4_t color, qboolean force2D, int textStyle) {
line 356
;353:	char num[16];
;354:	vec3_t origin, angles;
;355:	qhandle_t handle;
;356:	int value = cg.snap->ps.generic1;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
ASGNI4
line 358
;357:
;358:	if (cgs.gametype != GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
EQI4 $352
line 359
;359:		return;
ADDRGP4 $350
JUMPV
LABELV $352
line 362
;360:	}
;361:
;362:	if (value > 99) {
ADDRLP4 0
INDIRI4
CNSTI4 99
LEI4 $355
line 363
;363:		value = 99;
ADDRLP4 0
CNSTI4 99
ASGNI4
line 364
;364:	}
LABELV $355
line 366
;365:
;366:	Com_sprintf(num, sizeof(num), "%i", value);
ADDRLP4 4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 367
;367:	value = CG_Text_Width(num, scale, 0);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 48
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
ASGNI4
line 368
;368:	CG_Text_Paint(rect->x + (rect->w - value), rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
ADDF4
ARGF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 370
;369:
;370:	if (cg_drawIcons.integer) {
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $357
line 371
;371:		if (!force2D && cg_draw3dIcons.integer) {
ADDRFP4 12
INDIRI4
CNSTI4 0
NEI4 $360
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $360
line 372
;372:			VectorClear(angles);
ADDRLP4 20
CNSTF4 0
ASGNF4
ADDRLP4 20+4
CNSTF4 0
ASGNF4
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 373
;373:			origin[0] = 90;
ADDRLP4 32
CNSTF4 1119092736
ASGNF4
line 374
;374:			origin[1] = 0;
ADDRLP4 32+4
CNSTF4 0
ASGNF4
line 375
;375:			origin[2] = -10;
ADDRLP4 32+8
CNSTF4 3240099840
ASGNF4
line 376
;376:			angles[YAW] = (cg.time & 2047) * 360 / 2048.0;
ADDRLP4 20+4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
CNSTI4 360
MULI4
CVIF4 4
CNSTF4 973078528
MULF4
ASGNF4
line 377
;377:			if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $369
line 378
;378:				handle = cgs.media.redCubeModel;
ADDRLP4 44
ADDRGP4 cgs+148744+20
INDIRI4
ASGNI4
line 379
;379:			} else {
ADDRGP4 $370
JUMPV
LABELV $369
line 380
;380:				handle = cgs.media.blueCubeModel;
ADDRLP4 44
ADDRGP4 cgs+148744+24
INDIRI4
ASGNI4
line 381
;381:			}
LABELV $370
line 382
;382:			CG_Draw3DModel(rect->x, rect->y, 35, 35, handle, 0, origin, angles);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1108082688
ARGF4
CNSTF4 1108082688
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 383
;383:		} else {
ADDRGP4 $361
JUMPV
LABELV $360
line 384
;384:			if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $376
line 385
;385:				handle = cgs.media.redCubeIcon;
ADDRLP4 44
ADDRGP4 cgs+148744+28
INDIRI4
ASGNI4
line 386
;386:			} else {
ADDRGP4 $377
JUMPV
LABELV $376
line 387
;387:				handle = cgs.media.blueCubeIcon;
ADDRLP4 44
ADDRGP4 cgs+148744+32
INDIRI4
ASGNI4
line 388
;388:			}
LABELV $377
line 389
;389:			CG_DrawPic(rect->x + 3, rect->y + 16, 20, 20, handle);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
INDIRF4
CNSTF4 1077936128
ADDF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1098907648
ADDF4
ARGF4
CNSTF4 1101004800
ARGF4
CNSTF4 1101004800
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 390
;390:		}
LABELV $361
line 391
;391:	}
LABELV $357
line 392
;392:}
LABELV $350
endproc CG_HarvesterSkulls 60 32
data
align 4
LABELV $393
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
code
proc CG_OneFlagStatus 32 20
line 394
;393:
;394:static void CG_OneFlagStatus(rectDef_t *rect) {
line 395
;395:	if (cgs.gametype != GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
EQI4 $384
line 396
;396:		return;
ADDRGP4 $383
JUMPV
LABELV $384
line 397
;397:	} else {
line 398
;398:		gitem_t *item = BG_FindItemForPowerup(PW_NEUTRALFLAG);
CNSTI4 9
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 399
;399:		if (item) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $387
line 400
;400:			if (cgs.flagStatus >= 0 && cgs.flagStatus <= 4) {
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 0
LTI4 $389
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 4
GTI4 $389
line 401
;401:				vec4_t color = { 1, 1, 1, 1 };
ADDRLP4 8
ADDRGP4 $393
INDIRB
ASGNB 16
line 402
;402:				int index = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 403
;403:				if (cgs.flagStatus == FLAG_TAKEN_RED) {
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 2
NEI4 $394
line 404
;404:					color[1] = color[2] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 28
INDIRF4
ASGNF4
line 405
;405:					index = 1;
ADDRLP4 24
CNSTI4 1
ASGNI4
line 406
;406:				} else if (cgs.flagStatus == FLAG_TAKEN_BLUE) {
ADDRGP4 $395
JUMPV
LABELV $394
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 3
NEI4 $399
line 407
;407:					color[0] = color[1] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 8+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 28
INDIRF4
ASGNF4
line 408
;408:					index = 1;
ADDRLP4 24
CNSTI4 1
ASGNI4
line 409
;409:				} else if (cgs.flagStatus == FLAG_DROPPED) {
ADDRGP4 $400
JUMPV
LABELV $399
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 4
NEI4 $403
line 410
;410:					index = 2;
ADDRLP4 24
CNSTI4 2
ASGNI4
line 411
;411:				}
LABELV $403
LABELV $400
LABELV $395
line 412
;412:				trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 413
;413:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cgs.media.flagShaders[index]);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148744+1160
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 414
;414:			}
LABELV $389
line 415
;415:		}
LABELV $387
line 416
;416:	}
line 417
;417:}
LABELV $383
endproc CG_OneFlagStatus 32 20
proc CG_DrawCTFPowerUp 8 20
line 420
;418:
;419:
;420:static void CG_DrawCTFPowerUp(rectDef_t *rect) {
line 423
;421:	int		value;
;422:
;423:	if (cgs.gametype < GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
GEI4 $409
line 424
;424:		return;
ADDRGP4 $408
JUMPV
LABELV $409
line 426
;425:	}
;426:	value = cg.snap->ps.stats[STAT_PERSISTANT_POWERUP];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 427
;427:	if (value) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $413
line 428
;428:		CG_RegisterItemVisuals(value);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 429
;429:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, cg_items[value].icon);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 430
;430:	}
LABELV $413
line 431
;431:}
LABELV $408
endproc CG_DrawCTFPowerUp 8 20
proc CG_DrawTeamColor 4 24
line 434
;432:
;433:
;434:static void CG_DrawTeamColor(rectDef_t *rect, vec4_t color) {
line 435
;435:	CG_DrawTeamBackground(rect->x, rect->y, rect->w, rect->h, color[3], cg.snap->ps.persistant[PERS_TEAM]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 436
;436:}
LABELV $416
endproc CG_DrawTeamColor 4 24
proc CG_DrawAreaPowerUp 228 32
line 438
;437:
;438:static void CG_DrawAreaPowerUp(rectDef_t *rect, int align, float special, float scale, vec4_t color) {
line 450
;439:	char num[16];
;440:	int		sorted[MAX_POWERUPS];
;441:	int		sortedTime[MAX_POWERUPS];
;442:	int		i, j, k;
;443:	int		active;
;444:	playerState_t *ps;
;445:	int		t;
;446:	gitem_t *item;
;447:	float	f;
;448:	rectDef_t r2;
;449:	float *inc;
;450:	r2.x = rect->x;
ADDRLP4 148
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 451
;451:	r2.y = rect->y;
ADDRLP4 148+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 452
;452:	r2.w = rect->w;
ADDRLP4 148+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 453
;453:	r2.h = rect->h;
ADDRLP4 148+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 455
;454:
;455:	inc = (align == HUD_VERTICAL) ? &r2.y : &r2.x;
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $424
ADDRLP4 196
ADDRLP4 148+4
ASGNP4
ADDRGP4 $425
JUMPV
LABELV $424
ADDRLP4 196
ADDRLP4 148
ASGNP4
LABELV $425
ADDRLP4 192
ADDRLP4 196
INDIRP4
ASGNP4
line 457
;456:
;457:	ps = &cg.snap->ps;
ADDRLP4 164
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 459
;458:
;459:	if (ps->stats[STAT_HEALTH] <= 0) {
ADDRLP4 164
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $427
line 460
;460:		return;
ADDRGP4 $418
JUMPV
LABELV $427
line 464
;461:	}
;462:
;463:	// sort the list by time remaining
;464:	active = 0;
ADDRLP4 136
CNSTI4 0
ASGNI4
line 465
;465:	for (i = 0; i < MAX_POWERUPS; i++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $429
line 466
;466:		if (!ps->powerups[i]) {
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 164
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $433
line 467
;467:			continue;
ADDRGP4 $430
JUMPV
LABELV $433
line 469
;468:		}
;469:		t = ps->powerups[i] - cg.time;
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 164
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 472
;470:		// ZOID--don't draw if the power up has unlimited time (999 seconds)
;471:		// This is true of the CTF flags
;472:		if (t <= 0 || t >= 999000) {
ADDRLP4 140
INDIRI4
CNSTI4 0
LEI4 $438
ADDRLP4 140
INDIRI4
CNSTI4 999000
LTI4 $436
LABELV $438
line 473
;473:			continue;
ADDRGP4 $430
JUMPV
LABELV $436
line 477
;474:		}
;475:
;476:		// insert into the list
;477:		for (j = 0; j < active; j++) {
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRGP4 $442
JUMPV
LABELV $439
line 478
;478:			if (sortedTime[j] >= t) {
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
LTI4 $443
line 479
;479:				for (k = active - 1; k >= j; k--) {
ADDRLP4 0
ADDRLP4 136
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $448
JUMPV
LABELV $445
line 480
;480:					sorted[k + 1] = sorted[k];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ASGNI4
line 481
;481:					sortedTime[k + 1] = sortedTime[k];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
ASGNI4
line 482
;482:				}
LABELV $446
line 479
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $448
ADDRLP4 0
INDIRI4
ADDRLP4 132
INDIRI4
GEI4 $445
line 483
;483:				break;
ADDRGP4 $441
JUMPV
LABELV $443
line 485
;484:			}
;485:		}
LABELV $440
line 477
ADDRLP4 132
ADDRLP4 132
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $442
ADDRLP4 132
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $439
LABELV $441
line 486
;486:		sorted[j] = i;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 487
;487:		sortedTime[j] = t;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 488
;488:		active++;
ADDRLP4 136
ADDRLP4 136
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 489
;489:	}
LABELV $430
line 465
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 16
LTI4 $429
line 492
;490:
;491:	// draw the icons and timers
;492:	for (i = 0; i < active; i++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRGP4 $454
JUMPV
LABELV $451
line 493
;493:		item = BG_FindItemForPowerup(sorted[i]);
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 200
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 168
ADDRLP4 200
INDIRP4
ASGNP4
line 495
;494:
;495:		if (item) {
ADDRLP4 168
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $455
line 496
;496:			t = ps->powerups[sorted[i]];
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 164
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ASGNI4
line 497
;497:			if (t - cg.time >= POWERUP_BLINKS * POWERUP_BLINK_TIME) {
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 5000
LTI4 $457
line 498
;498:				trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 499
;499:			} else {
ADDRGP4 $458
JUMPV
LABELV $457
line 502
;500:				vec4_t	modulate;
;501:
;502:				f = (float)(t - cg.time) / POWERUP_BLINK_TIME;
ADDRLP4 188
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 503
;503:				f -= (int)f;
ADDRLP4 188
ADDRLP4 188
INDIRF4
ADDRLP4 188
INDIRF4
CVFI4 4
CVIF4 4
SUBF4
ASGNF4
line 504
;504:				modulate[0] = modulate[1] = modulate[2] = modulate[3] = f;
ADDRLP4 204+12
ADDRLP4 188
INDIRF4
ASGNF4
ADDRLP4 204+8
ADDRLP4 188
INDIRF4
ASGNF4
ADDRLP4 204+4
ADDRLP4 188
INDIRF4
ASGNF4
ADDRLP4 204
ADDRLP4 188
INDIRF4
ASGNF4
line 505
;505:				trap_R_SetColor(modulate);
ADDRLP4 204
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 506
;506:			}
LABELV $458
line 508
;507:
;508:			CG_DrawPic(r2.x, r2.y, r2.w * .75, r2.h, trap_R_RegisterShader(item->icon));
ADDRLP4 168
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148+4
INDIRF4
ARGF4
ADDRLP4 148+8
INDIRF4
CNSTF4 1061158912
MULF4
ARGF4
ADDRLP4 148+12
INDIRF4
ARGF4
ADDRLP4 204
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 510
;509:
;510:			Com_sprintf(num, sizeof(num), "%i", sortedTime[i] / 1000);
ADDRLP4 172
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $110
ARGP4
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRGP4 Com_sprintf
CALLI4
pop
line 511
;511:			CG_Text_Paint(r2.x + (r2.w * .75) + 3, r2.y + r2.h, scale, color, num, 0, 0, 0);
ADDRLP4 148
INDIRF4
ADDRLP4 148+8
INDIRF4
CNSTF4 1061158912
MULF4
ADDF4
CNSTF4 1077936128
ADDF4
ARGF4
ADDRLP4 148+4
INDIRF4
ADDRLP4 148+12
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 172
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 512
;512:			*inc += r2.w + special;
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
ADDRLP4 148+8
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ADDF4
ASGNF4
line 513
;513:		}
LABELV $455
line 515
;514:
;515:	}
LABELV $452
line 492
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $454
ADDRLP4 144
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $451
line 516
;516:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 518
;517:
;518:}
LABELV $418
endproc CG_DrawAreaPowerUp 228 32
export CG_GetValue
proc CG_GetValue 24 0
line 520
;519:
;520:float CG_GetValue(int ownerDraw) {
line 524
;521:	centity_t *cent;
;522:	playerState_t *ps;
;523:
;524:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 525
;525:	ps = &cg.snap->ps;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 527
;526:
;527:	switch (ownerDraw) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 20
EQI4 $482
ADDRLP4 8
INDIRI4
CNSTI4 20
GTI4 $490
LABELV $489
ADDRLP4 12
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $478
ADDRLP4 12
INDIRI4
CNSTI4 4
EQI4 $484
ADDRLP4 12
INDIRI4
CNSTI4 6
EQI4 $479
ADDRGP4 $475
JUMPV
LABELV $490
ADDRLP4 16
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 27
EQI4 $487
ADDRLP4 16
INDIRI4
CNSTI4 28
EQI4 $485
ADDRLP4 16
INDIRI4
CNSTI4 27
LTI4 $475
LABELV $491
ADDRLP4 20
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 40
EQI4 $476
ADDRLP4 20
INDIRI4
CNSTI4 41
EQI4 $477
ADDRGP4 $475
JUMPV
LABELV $476
line 529
;528:	case CG_SELECTEDPLAYER_ARMOR:
;529:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $471
JUMPV
line 530
;530:		break;
LABELV $477
line 532
;531:	case CG_SELECTEDPLAYER_HEALTH:
;532:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $471
JUMPV
line 533
;533:		break;
LABELV $478
line 535
;534:	case CG_PLAYER_ARMOR_VALUE:
;535:		return ps->stats[STAT_ARMOR];
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 536
;536:		break;
LABELV $479
line 538
;537:	case CG_PLAYER_AMMO_VALUE:
;538:		if (cent->currentState.weapon) {
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $475
line 539
;539:			return ps->ammo[cent->currentState.weapon];
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 541
;540:		}
;541:		break;
LABELV $482
line 543
;542:	case CG_PLAYER_SCORE:
;543:		return cg.snap->ps.persistant[PERS_SCORE];
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 544
;544:		break;
LABELV $484
line 546
;545:	case CG_PLAYER_HEALTH:
;546:		return ps->stats[STAT_HEALTH];
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 547
;547:		break;
LABELV $485
line 549
;548:	case CG_RED_SCORE:
;549:		return cgs.scores1;
ADDRGP4 cgs+34824
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 550
;550:		break;
LABELV $487
line 552
;551:	case CG_BLUE_SCORE:
;552:		return cgs.scores2;
ADDRGP4 cgs+34828
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $471
JUMPV
line 553
;553:		break;
line 555
;554:	default:
;555:		break;
LABELV $475
line 557
;556:	}
;557:	return -1;
CNSTF4 3212836864
RETF4
LABELV $471
endproc CG_GetValue 24 0
export CG_OtherTeamHasFlag
proc CG_OtherTeamHasFlag 4 0
line 560
;558:}
;559:
;560:qboolean CG_OtherTeamHasFlag() {
line 561
;561:	if (cgs.gametype == GT_CTF || cgs.gametype == GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $497
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $493
LABELV $497
line 562
;562:		int team = cg.snap->ps.persistant[PERS_TEAM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ASGNI4
line 563
;563:		if (cgs.gametype == GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $499
line 564
;564:			if (team == TEAM_RED && cgs.flagStatus == FLAG_TAKEN_BLUE) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $502
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 3
NEI4 $502
line 565
;565:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $492
JUMPV
LABELV $502
line 566
;566:			} else if (team == TEAM_BLUE && cgs.flagStatus == FLAG_TAKEN_RED) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $505
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 2
NEI4 $505
line 567
;567:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $492
JUMPV
LABELV $505
line 568
;568:			} else {
line 569
;569:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $492
JUMPV
LABELV $499
line 571
;570:			}
;571:		} else {
line 572
;572:			if (team == TEAM_RED && cgs.redflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $508
ADDRGP4 cgs+34832
INDIRI4
CNSTI4 1
NEI4 $508
line 573
;573:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $492
JUMPV
LABELV $508
line 574
;574:			} else if (team == TEAM_BLUE && cgs.blueflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $511
ADDRGP4 cgs+34836
INDIRI4
CNSTI4 1
NEI4 $511
line 575
;575:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $492
JUMPV
LABELV $511
line 576
;576:			} else {
line 577
;577:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $492
JUMPV
LABELV $493
line 581
;578:			}
;579:		}
;580:	}
;581:	return qfalse;
CNSTI4 0
RETI4
LABELV $492
endproc CG_OtherTeamHasFlag 4 0
export CG_YourTeamHasFlag
proc CG_YourTeamHasFlag 4 0
line 584
;582:}
;583:
;584:qboolean CG_YourTeamHasFlag() {
line 585
;585:	if (cgs.gametype == GT_CTF || cgs.gametype == GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
EQI4 $519
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $515
LABELV $519
line 586
;586:		int team = cg.snap->ps.persistant[PERS_TEAM];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ASGNI4
line 587
;587:		if (cgs.gametype == GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $521
line 588
;588:			if (team == TEAM_RED && cgs.flagStatus == FLAG_TAKEN_RED) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $524
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 2
NEI4 $524
line 589
;589:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $514
JUMPV
LABELV $524
line 590
;590:			} else if (team == TEAM_BLUE && cgs.flagStatus == FLAG_TAKEN_BLUE) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $527
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 3
NEI4 $527
line 591
;591:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $514
JUMPV
LABELV $527
line 592
;592:			} else {
line 593
;593:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $514
JUMPV
LABELV $521
line 595
;594:			}
;595:		} else {
line 596
;596:			if (team == TEAM_RED && cgs.blueflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $530
ADDRGP4 cgs+34836
INDIRI4
CNSTI4 1
NEI4 $530
line 597
;597:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $514
JUMPV
LABELV $530
line 598
;598:			} else if (team == TEAM_BLUE && cgs.redflag == FLAG_TAKEN) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $533
ADDRGP4 cgs+34832
INDIRI4
CNSTI4 1
NEI4 $533
line 599
;599:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $514
JUMPV
LABELV $533
line 600
;600:			} else {
line 601
;601:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $514
JUMPV
LABELV $515
line 605
;602:			}
;603:		}
;604:	}
;605:	return qfalse;
CNSTI4 0
RETI4
LABELV $514
endproc CG_YourTeamHasFlag 4 0
export CG_OwnerDrawVisible
proc CG_OwnerDrawVisible 4 0
line 610
;606:}
;607:
;608:// THINKABOUTME: should these be exclusive or inclusive.. 
;609:// 
;610:qboolean CG_OwnerDrawVisible(int flags) {
line 612
;611:
;612:	if (flags & CG_SHOW_TEAMINFO) {
ADDRFP4 0
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $537
line 613
;613:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $536
JUMPV
LABELV $537
line 616
;614:	}
;615:
;616:	if (flags & CG_SHOW_NOTEAMINFO) {
ADDRFP4 0
INDIRI4
CNSTI4 65536
BANDI4
CNSTI4 0
EQI4 $539
line 617
;617:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $539
line 620
;618:	}
;619:
;620:	if (flags & CG_SHOW_OTHERTEAMHASFLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $541
line 621
;621:		return CG_OtherTeamHasFlag();
ADDRLP4 0
ADDRGP4 CG_OtherTeamHasFlag
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $536
JUMPV
LABELV $541
line 624
;622:	}
;623:
;624:	if (flags & CG_SHOW_YOURTEAMHASENEMYFLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 262144
BANDI4
CNSTI4 0
EQI4 $543
line 625
;625:		return CG_YourTeamHasFlag();
ADDRLP4 0
ADDRGP4 CG_YourTeamHasFlag
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $536
JUMPV
LABELV $543
line 628
;626:	}
;627:
;628:	if (flags & (CG_SHOW_BLUE_TEAM_HAS_REDFLAG | CG_SHOW_RED_TEAM_HAS_BLUEFLAG)) {
ADDRFP4 0
INDIRI4
CNSTI4 3
BANDI4
CNSTI4 0
EQI4 $545
line 629
;629:		if (flags & CG_SHOW_BLUE_TEAM_HAS_REDFLAG && (cgs.redflag == FLAG_TAKEN || cgs.flagStatus == FLAG_TAKEN_RED)) {
ADDRFP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $547
ADDRGP4 cgs+34832
INDIRI4
CNSTI4 1
EQI4 $551
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 2
NEI4 $547
LABELV $551
line 630
;630:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $547
line 631
;631:		} else if (flags & CG_SHOW_RED_TEAM_HAS_BLUEFLAG && (cgs.blueflag == FLAG_TAKEN || cgs.flagStatus == FLAG_TAKEN_BLUE)) {
ADDRFP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $552
ADDRGP4 cgs+34836
INDIRI4
CNSTI4 1
EQI4 $556
ADDRGP4 cgs+34840
INDIRI4
CNSTI4 3
NEI4 $552
LABELV $556
line 632
;632:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $552
line 634
;633:		}
;634:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $536
JUMPV
LABELV $545
line 637
;635:	}
;636:
;637:	if (flags & CG_SHOW_ANYTEAMGAME) {
ADDRFP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $557
line 638
;638:		if (cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $559
line 639
;639:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $559
line 641
;640:		}
;641:	}
LABELV $557
line 643
;642:
;643:	if (flags & CG_SHOW_ANYNONTEAMGAME) {
ADDRFP4 0
INDIRI4
CNSTI4 524288
BANDI4
CNSTI4 0
EQI4 $562
line 644
;644:		if (cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
GEI4 $564
line 645
;645:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $564
line 647
;646:		}
;647:	}
LABELV $562
line 649
;648:
;649:	if (flags & CG_SHOW_HARVESTER) {
ADDRFP4 0
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $567
line 650
;650:		if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $569
line 651
;651:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $569
line 652
;652:		} else {
line 653
;653:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $536
JUMPV
LABELV $567
line 657
;654:		}
;655:	}
;656:
;657:	if (flags & CG_SHOW_ONEFLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $572
line 658
;658:		if (cgs.gametype == GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $574
line 659
;659:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $574
line 660
;660:		} else {
line 661
;661:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $536
JUMPV
LABELV $572
line 665
;662:		}
;663:	}
;664:
;665:	if (flags & CG_SHOW_CTF) {
ADDRFP4 0
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $577
line 666
;666:		if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $579
line 667
;667:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $579
line 669
;668:		}
;669:	}
LABELV $577
line 671
;670:
;671:	if (flags & CG_SHOW_OBELISK) {
ADDRFP4 0
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $582
line 672
;672:		if (cgs.gametype == GT_OBELISK) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 7
NEI4 $584
line 673
;673:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $584
line 674
;674:		} else {
line 675
;675:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $536
JUMPV
LABELV $582
line 679
;676:		}
;677:	}
;678:
;679:	if (flags & CG_SHOW_HEALTHCRITICAL) {
ADDRFP4 0
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $587
line 680
;680:		if (cg.snap->ps.stats[STAT_HEALTH] < 25) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 25
GEI4 $589
line 681
;681:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $589
line 683
;682:		}
;683:	}
LABELV $587
line 685
;684:
;685:	if (flags & CG_SHOW_HEALTHOK) {
ADDRFP4 0
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $592
line 686
;686:		if (cg.snap->ps.stats[STAT_HEALTH] >= 25) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 25
LTI4 $594
line 687
;687:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $594
line 689
;688:		}
;689:	}
LABELV $592
line 691
;690:
;691:	if (flags & CG_SHOW_SINGLEPLAYER) {
ADDRFP4 0
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $597
line 692
;692:		if (cgs.gametype == GT_SINGLE_PLAYER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 2
NEI4 $599
line 693
;693:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $599
line 695
;694:		}
;695:	}
LABELV $597
line 697
;696:
;697:	if (flags & CG_SHOW_TOURNAMENT) {
ADDRFP4 0
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $602
line 698
;698:		if (cgs.gametype == GT_TOURNAMENT) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 1
NEI4 $604
line 699
;699:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $604
line 701
;700:		}
;701:	}
LABELV $602
line 703
;702:
;703:	if (flags & CG_SHOW_DURINGINCOMINGVOICE) {
ADDRFP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $607
line 704
;704:	}
LABELV $607
line 706
;705:
;706:	if (flags & CG_SHOW_IF_PLAYER_HAS_FLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $609
line 707
;707:		if (cg.snap->ps.powerups[PW_REDFLAG] || cg.snap->ps.powerups[PW_BLUEFLAG] || cg.snap->ps.powerups[PW_NEUTRALFLAG]) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 384
ADDP4
INDIRI4
CNSTI4 0
NEI4 $617
ADDRGP4 cg+36
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
CNSTI4 0
NEI4 $617
ADDRGP4 cg+36
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
CNSTI4 0
EQI4 $611
LABELV $617
line 708
;708:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $536
JUMPV
LABELV $611
line 710
;709:		}
;710:	}
LABELV $609
line 711
;711:	return qfalse;
CNSTI4 0
RETI4
LABELV $536
endproc CG_OwnerDrawVisible 4 0
proc CG_DrawPlayerHasFlag 16 24
line 716
;712:}
;713:
;714:
;715:
;716:static void CG_DrawPlayerHasFlag(rectDef_t *rect, qboolean force2D) {
line 717
;717:	int adj = (force2D) ? 0 : 2;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $620
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $621
JUMPV
LABELV $620
ADDRLP4 4
CNSTI4 2
ASGNI4
LABELV $621
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 718
;718:	if (cg.predictedPlayerState.powerups[PW_REDFLAG]) {
ADDRGP4 cg+107636+312+28
INDIRI4
CNSTI4 0
EQI4 $622
line 719
;719:		CG_DrawFlagModel(rect->x + adj, rect->y + adj, rect->w - adj, rect->h - adj, TEAM_RED, force2D);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
CNSTI4 1
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 720
;720:	} else if (cg.predictedPlayerState.powerups[PW_BLUEFLAG]) {
ADDRGP4 $623
JUMPV
LABELV $622
ADDRGP4 cg+107636+312+32
INDIRI4
CNSTI4 0
EQI4 $627
line 721
;721:		CG_DrawFlagModel(rect->x + adj, rect->y + adj, rect->w - adj, rect->h - adj, TEAM_BLUE, force2D);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
CNSTI4 2
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 722
;722:	} else if (cg.predictedPlayerState.powerups[PW_NEUTRALFLAG]) {
ADDRGP4 $628
JUMPV
LABELV $627
ADDRGP4 cg+107636+312+36
INDIRI4
CNSTI4 0
EQI4 $632
line 723
;723:		CG_DrawFlagModel(rect->x + adj, rect->y + adj, rect->w - adj, rect->h - adj, TEAM_FREE, force2D);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 724
;724:	}
LABELV $632
LABELV $628
LABELV $623
line 725
;725:}
LABELV $618
endproc CG_DrawPlayerHasFlag 16 24
proc CG_DrawAreaSystemChat 4 32
line 727
;726:
;727:static void CG_DrawAreaSystemChat(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 728
;728:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, systemChat, 0, 0, 0);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 systemChat
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 729
;729:}
LABELV $637
endproc CG_DrawAreaSystemChat 4 32
proc CG_DrawAreaTeamChat 4 32
line 731
;730:
;731:static void CG_DrawAreaTeamChat(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 732
;732:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, teamChat1, 0, 0, 0);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 teamChat1
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 733
;733:}
LABELV $638
endproc CG_DrawAreaTeamChat 4 32
proc CG_DrawAreaChat 4 32
line 735
;734:
;735:static void CG_DrawAreaChat(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 736
;736:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, teamChat2, 0, 0, 0);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 teamChat2
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 737
;737:}
LABELV $639
endproc CG_DrawAreaChat 4 32
export CG_GetKillerText
proc CG_GetKillerText 8 8
line 739
;738:
;739:const char *CG_GetKillerText() {
line 740
;740:	const char *s = "";
ADDRLP4 0
ADDRGP4 $641
ASGNP4
line 741
;741:	if (cg.killerName[0]) {
ADDRGP4 cg+115368
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $642
line 742
;742:		s = va("Fragged by %s", cg.killerName);
ADDRGP4 $645
ARGP4
ADDRGP4 cg+115368
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 743
;743:	}
LABELV $642
line 744
;744:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $640
endproc CG_GetKillerText 8 8
proc CG_DrawKiller 24 32
line 748
;745:}
;746:
;747:
;748:static void CG_DrawKiller(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 750
;749:	// fragged by ... line
;750:	if (cg.killerName[0]) {
ADDRGP4 cg+115368
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $648
line 751
;751:		int x = rect->x + rect->w / 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
CVFI4 4
ASGNI4
line 752
;752:		CG_Text_Paint(x - CG_Text_Width(CG_GetKillerText(), scale, 0) / 2, rect->y + rect->h, scale, color, CG_GetKillerText(), 0, 0, textStyle);
ADDRLP4 8
ADDRGP4 CG_GetKillerText
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 12
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 16
ADDRGP4 CG_GetKillerText
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 753
;753:	}
LABELV $648
line 755
;754:
;755:}
LABELV $647
endproc CG_DrawKiller 24 32
proc CG_DrawCapFragLimit 16 32
line 758
;756:
;757:
;758:static void CG_DrawCapFragLimit(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 759
;759:	int limit = (cgs.gametype >= GT_CTF) ? cgs.capturelimit : cgs.fraglimit;
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
LTI4 $656
ADDRLP4 4
ADDRGP4 cgs+31496
INDIRI4
ASGNI4
ADDRGP4 $657
JUMPV
LABELV $656
ADDRLP4 4
ADDRGP4 cgs+31492
INDIRI4
ASGNI4
LABELV $657
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 760
;760:	CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", limit), 0, 0, textStyle);
ADDRGP4 $658
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 761
;761:}
LABELV $651
endproc CG_DrawCapFragLimit 16 32
proc CG_Draw1stPlace 8 32
line 763
;762:
;763:static void CG_Draw1stPlace(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 764
;764:	if (cgs.scores1 != SCORE_NOT_PRESENT) {
ADDRGP4 cgs+34824
INDIRI4
CNSTI4 -9999
EQI4 $660
line 765
;765:		CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", cgs.scores1), 0, 0, textStyle);
ADDRGP4 $658
ARGP4
ADDRGP4 cgs+34824
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 766
;766:	}
LABELV $660
line 767
;767:}
LABELV $659
endproc CG_Draw1stPlace 8 32
proc CG_Draw2ndPlace 8 32
line 769
;768:
;769:static void CG_Draw2ndPlace(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 770
;770:	if (cgs.scores2 != SCORE_NOT_PRESENT) {
ADDRGP4 cgs+34828
INDIRI4
CNSTI4 -9999
EQI4 $665
line 771
;771:		CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", cgs.scores2), 0, 0, textStyle);
ADDRGP4 $658
ARGP4
ADDRGP4 cgs+34828
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 772
;772:	}
LABELV $665
line 773
;773:}
LABELV $664
endproc CG_Draw2ndPlace 8 32
export CG_GetGameStatusText
proc CG_GetGameStatusText 12 12
line 775
;774:
;775:const char *CG_GetGameStatusText() {
line 776
;776:	const char *s = "";
ADDRLP4 0
ADDRGP4 $641
ASGNP4
line 777
;777:	if (cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
GEI4 $670
line 778
;778:		if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $671
line 779
;779:			s = va("%s place with %i", CG_PlaceString(cg.snap->ps.persistant[PERS_RANK] + 1), cg.snap->ps.persistant[PERS_SCORE]);
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_PlaceString
CALLP4
ASGNP4
ADDRGP4 $676
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 780
;780:		}
line 781
;781:	} else {
ADDRGP4 $671
JUMPV
LABELV $670
line 782
;782:		if (cg.teamScores[0] == cg.teamScores[1]) {
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
NEI4 $679
line 783
;783:			s = va("Teams are tied at %i", cg.teamScores[0]);
ADDRGP4 $684
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 784
;784:		} else if (cg.teamScores[0] >= cg.teamScores[1]) {
ADDRGP4 $680
JUMPV
LABELV $679
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
LTI4 $686
line 785
;785:			s = va("Red leads Blue, %i to %i", cg.teamScores[0], cg.teamScores[1]);
ADDRGP4 $691
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 786
;786:		} else {
ADDRGP4 $687
JUMPV
LABELV $686
line 787
;787:			s = va("Blue leads Red, %i to %i", cg.teamScores[1], cg.teamScores[0]);
ADDRGP4 $695
ARGP4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 788
;788:		}
LABELV $687
LABELV $680
line 789
;789:	}
LABELV $671
line 790
;790:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $669
endproc CG_GetGameStatusText 12 12
proc CG_DrawGameStatus 8 32
line 793
;791:}
;792:
;793:static void CG_DrawGameStatus(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 794
;794:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, CG_GetGameStatusText(), 0, 0, textStyle);
ADDRLP4 0
ADDRGP4 CG_GetGameStatusText
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 795
;795:}
LABELV $699
endproc CG_DrawGameStatus 8 32
export CG_GameTypeString
proc CG_GameTypeString 0 0
line 797
;796:
;797:const char *CG_GameTypeString() {
line 798
;798:	if (cgs.gametype == GT_FFA) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 0
NEI4 $701
line 799
;799:		return "Free For All";
ADDRGP4 $704
RETP4
ADDRGP4 $700
JUMPV
LABELV $701
line 800
;800:	} else if (cgs.gametype == GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
NEI4 $705
line 801
;801:		return "Team Deathmatch";
ADDRGP4 $708
RETP4
ADDRGP4 $700
JUMPV
LABELV $705
line 802
;802:	} else if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 5
NEI4 $709
line 803
;803:		return "Capture the Flag";
ADDRGP4 $712
RETP4
ADDRGP4 $700
JUMPV
LABELV $709
line 804
;804:	} else if (cgs.gametype == GT_1FCTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 6
NEI4 $713
line 805
;805:		return "One Flag CTF";
ADDRGP4 $716
RETP4
ADDRGP4 $700
JUMPV
LABELV $713
line 806
;806:	} else if (cgs.gametype == GT_OBELISK) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 7
NEI4 $717
line 807
;807:		return "Overload";
ADDRGP4 $720
RETP4
ADDRGP4 $700
JUMPV
LABELV $717
line 808
;808:	} else if (cgs.gametype == GT_HARVESTER) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 8
NEI4 $721
line 809
;809:		return "Harvester";
ADDRGP4 $724
RETP4
ADDRGP4 $700
JUMPV
LABELV $721
line 811
;810:	}
;811:	return "";
ADDRGP4 $641
RETP4
LABELV $700
endproc CG_GameTypeString 0 0
proc CG_DrawGameType 8 32
line 813
;812:}
;813:static void CG_DrawGameType(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 814
;814:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, CG_GameTypeString(), 0, 0, textStyle);
ADDRLP4 0
ADDRGP4 CG_GameTypeString
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 815
;815:}
LABELV $725
endproc CG_DrawGameType 8 32
proc CG_Text_Paint_Limit 68 40
line 817
;816:
;817:static void CG_Text_Paint_Limit(float *maxX, float x, float y, float scale, vec4_t color, const char *text, float adjust, int limit) {
line 821
;818:	int len, count;
;819:	vec4_t newColor;
;820:	glyphInfo_t *glyph;
;821:	if (text) {
ADDRFP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $727
line 824
;822:		// TTimo: FIXME
;823:		//    const unsigned char *s = text; // bk001206 - unsigned
;824:		const char *s = text;
ADDRLP4 28
ADDRFP4 20
INDIRP4
ASGNP4
line 825
;825:		float max = *maxX;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 827
;826:		float useScale;
;827:		fontInfo_t *font = &cgDC.Assets.textFont;
ADDRLP4 36
ADDRGP4 cgDC+228+12
ASGNP4
line 828
;828:		if (scale <= cg_smallFont.value) {
ADDRFP4 12
INDIRF4
ADDRGP4 cg_smallFont+8
INDIRF4
GTF4 $731
line 829
;829:			font = &cgDC.Assets.smallFont;
ADDRLP4 36
ADDRGP4 cgDC+228+20560
ASGNP4
line 830
;830:		} else if (scale > cg_bigFont.value) {
ADDRGP4 $732
JUMPV
LABELV $731
ADDRFP4 12
INDIRF4
ADDRGP4 cg_bigFont+8
INDIRF4
LEF4 $736
line 831
;831:			font = &cgDC.Assets.bigFont;
ADDRLP4 36
ADDRGP4 cgDC+228+41108
ASGNP4
line 832
;832:		}
LABELV $736
LABELV $732
line 833
;833:		useScale = scale * font->glyphScale;
ADDRLP4 32
ADDRFP4 12
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 20480
ADDP4
INDIRF4
MULF4
ASGNF4
line 834
;834:		trap_R_SetColor(color);
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 835
;835:		len = strlen(text);
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 44
INDIRI4
ASGNI4
line 836
;836:		if (limit > 0 && len > limit) {
ADDRLP4 48
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
LEI4 $741
ADDRLP4 24
INDIRI4
ADDRLP4 48
INDIRI4
LEI4 $741
line 837
;837:			len = limit;
ADDRLP4 24
ADDRFP4 28
INDIRI4
ASGNI4
line 838
;838:		}
LABELV $741
line 839
;839:		count = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $744
JUMPV
LABELV $743
line 840
;840:		while (s && *s && count < len) {
line 841
;841:			glyph = &font->glyphs[(int)*s]; // TTimo: FIXME: getting nasty warnings without the cast, hopefully this doesn't break the VM build
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 80
MULI4
ADDRLP4 36
INDIRP4
ADDP4
ASGNP4
line 842
;842:			if (Q_IsColorString(s)) {
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $746
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $746
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $746
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $746
line 843
;843:				memcpy(newColor, g_color_table[ColorIndex(*(s + 1))], sizeof(newColor));
ADDRLP4 4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CNSTI4 7
BANDI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 844
;844:				newColor[3] = color[3];
ADDRLP4 4+12
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 845
;845:				trap_R_SetColor(newColor);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 846
;846:				s += 2;
ADDRLP4 28
ADDRLP4 28
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 847
;847:				continue;
ADDRGP4 $744
JUMPV
LABELV $746
line 848
;848:			} else {
line 849
;849:				float yadj = useScale * glyph->top;
ADDRLP4 56
ADDRLP4 32
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 850
;850:				if (CG_Text_Width(s, useScale, 1) + x > max) {
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 60
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRF4
ADDF4
ADDRLP4 40
INDIRF4
LEF4 $749
line 851
;851:					*maxX = 0;
ADDRFP4 0
INDIRP4
CNSTF4 0
ASGNF4
line 852
;852:					break;
ADDRGP4 $745
JUMPV
LABELV $749
line 854
;853:				}
;854:				CG_Text_PaintChar(x, y - yadj,
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ADDRLP4 56
INDIRF4
SUBF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Text_PaintChar
CALLV
pop
line 863
;855:					glyph->imageWidth,
;856:					glyph->imageHeight,
;857:					useScale,
;858:					glyph->s,
;859:					glyph->t,
;860:					glyph->s2,
;861:					glyph->t2,
;862:					glyph->glyph);
;863:				x += (glyph->xSkip * useScale) + adjust;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
MULF4
ADDRFP4 24
INDIRF4
ADDF4
ADDF4
ASGNF4
line 864
;864:				*maxX = x;
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRF4
ASGNF4
line 865
;865:				count++;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 866
;866:				s++;
ADDRLP4 28
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 867
;867:			}
line 868
;868:		}
LABELV $744
line 840
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $752
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $752
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $743
LABELV $752
LABELV $745
line 869
;869:		trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 870
;870:	}
LABELV $727
line 872
;871:
;872:}
LABELV $726
endproc CG_Text_Paint_Limit 68 40
export CG_DrawNewTeamInfo
proc CG_DrawNewTeamInfo 96 32
line 878
;873:
;874:
;875:
;876:#define PIC_WIDTH 12
;877:
;878:void CG_DrawNewTeamInfo(rectDef_t *rect, float text_x, float text_y, float scale, vec4_t color, qhandle_t shader) {
line 890
;879:	int xx;
;880:	float y;
;881:	int i, j, len, count;
;882:	const char *p;
;883:	vec4_t		hcolor;
;884:	float pwidth, lwidth, maxx, leftOver;
;885:	clientInfo_t *ci;
;886:	gitem_t *item;
;887:	qhandle_t h;
;888:
;889:	// max player name width
;890:	pwidth = 0;
ADDRLP4 64
CNSTF4 0
ASGNF4
line 891
;891:	count = (numSortedTeamPlayers > 8) ? 8 : numSortedTeamPlayers;
ADDRGP4 numSortedTeamPlayers
INDIRI4
CNSTI4 8
LEI4 $755
ADDRLP4 72
CNSTI4 8
ASGNI4
ADDRGP4 $756
JUMPV
LABELV $755
ADDRLP4 72
ADDRGP4 numSortedTeamPlayers
INDIRI4
ASGNI4
LABELV $756
ADDRLP4 32
ADDRLP4 72
INDIRI4
ASGNI4
line 892
;892:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $760
JUMPV
LABELV $757
line 893
;893:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 894
;894:		if (ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $762
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $762
line 895
;895:			len = CG_Text_Width(ci->name, scale, 0);
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 80
INDIRI4
ASGNI4
line 896
;896:			if (len > pwidth)
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 64
INDIRF4
LEF4 $765
line 897
;897:				pwidth = len;
ADDRLP4 64
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
LABELV $765
line 898
;898:		}
LABELV $762
line 899
;899:	}
LABELV $758
line 892
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $760
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $757
line 902
;900:
;901:	// max location name width
;902:	lwidth = 0;
ADDRLP4 68
CNSTF4 0
ASGNF4
line 903
;903:	for (i = 1; i < MAX_LOCATIONS; i++) {
ADDRLP4 8
CNSTI4 1
ASGNI4
LABELV $767
line 904
;904:		p = CG_ConfigString(CS_LOCATIONS + i);
ADDRLP4 8
INDIRI4
CNSTI4 608
ADDI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 76
INDIRP4
ASGNP4
line 905
;905:		if (p && *p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $771
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $771
line 906
;906:			len = CG_Text_Width(p, scale, 0);
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 84
INDIRI4
ASGNI4
line 907
;907:			if (len > lwidth)
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 68
INDIRF4
LEF4 $773
line 908
;908:				lwidth = len;
ADDRLP4 68
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
LABELV $773
line 909
;909:		}
LABELV $771
line 910
;910:	}
LABELV $768
line 903
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $767
line 912
;911:
;912:	y = rect->y;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 914
;913:
;914:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $778
JUMPV
LABELV $775
line 915
;915:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 916
;916:		if (ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $780
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $780
line 918
;917:
;918:			xx = rect->x + 1;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 919
;919:			for (j = 0; j <= PW_NUM_POWERUPS; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $783
line 920
;920:				if (ci->powerups & (1 << j)) {
ADDRLP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $787
line 922
;921:
;922:					item = BG_FindItemForPowerup(j);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 924
;923:
;924:					if (item) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $789
line 925
;925:						CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, trap_R_RegisterShader(item->icon));
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 926
;926:						xx += PIC_WIDTH;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 12
ADDI4
ASGNI4
line 927
;927:					}
LABELV $789
line 928
;928:				}
LABELV $787
line 929
;929:			}
LABELV $784
line 919
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $783
line 932
;930:
;931:			// FIXME: max of 3 powerups shown properly
;932:			xx = rect->x + (PIC_WIDTH * 3) + 2;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1108344832
ADDF4
CNSTF4 1073741824
ADDF4
CVFI4 4
ASGNI4
line 934
;933:
;934:			CG_GetColorForHealth(ci->health, ci->armor, hcolor);
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 935
;935:			trap_R_SetColor(hcolor);
ADDRLP4 48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 936
;936:			CG_DrawPic(xx, y + 1, PIC_WIDTH - 2, PIC_WIDTH - 2, cgs.media.heartShader);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
CNSTF4 1065353216
ADDF4
ARGF4
CNSTF4 1092616192
ARGF4
CNSTF4 1092616192
ARGF4
ADDRGP4 cgs+148744+572
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 942
;937:
;938:			//Com_sprintf (st, sizeof(st), "%3i %3i", ci->health,	ci->armor);
;939:			//CG_Text_Paint(xx, y + text_y, scale, hcolor, st, 0, 0); 
;940:
;941:			// draw weapon icon
;942:			xx += PIC_WIDTH + 1;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 13
ADDI4
ASGNI4
line 953
;943:
;944:			// weapon used is not that useful, use the space for task
;945:#if 0
;946:			if (cg_weapons[ci->curWeapon].weaponIcon) {
;947:				CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, cg_weapons[ci->curWeapon].weaponIcon);
;948:			} else {
;949:				CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, cgs.media.deferShader);
;950:			}
;951:#endif
;952:
;953:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 954
;954:			if (cgs.orderPending) {
ADDRGP4 cgs+148724
INDIRI4
CNSTI4 0
EQI4 $793
line 956
;955:				// blink the icon
;956:				if (cg.time > cgs.orderTime - 2500 && (cg.time >> 9) & 1) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+148728
INDIRI4
CNSTI4 2500
SUBI4
LEI4 $796
ADDRGP4 cg+107604
INDIRI4
CNSTI4 9
RSHI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $796
line 957
;957:					h = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 958
;958:				} else {
ADDRGP4 $794
JUMPV
LABELV $796
line 959
;959:					h = CG_StatusHandle(cgs.currentOrder);
ADDRGP4 cgs+148720
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 84
INDIRI4
ASGNI4
line 960
;960:				}
line 961
;961:			} else {
ADDRGP4 $794
JUMPV
LABELV $793
line 962
;962:				h = CG_StatusHandle(ci->teamTask);
ADDRLP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 84
INDIRI4
ASGNI4
line 963
;963:			}
LABELV $794
line 965
;964:
;965:			if (h) {
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $802
line 966
;966:				CG_DrawPic(xx, y, PIC_WIDTH, PIC_WIDTH, h);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 967
;967:			}
LABELV $802
line 969
;968:
;969:			xx += PIC_WIDTH + 1;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 13
ADDI4
ASGNI4
line 971
;970:
;971:			leftOver = rect->w - xx;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRI4
CVIF4 4
SUBF4
ASGNF4
line 972
;972:			maxx = xx + leftOver / 3;
ADDRLP4 36
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
CNSTF4 1051372203
MULF4
ADDF4
ASGNF4
line 976
;973:
;974:
;975:
;976:			CG_Text_Paint_Limit(&maxx, xx, y + text_y, scale, color, ci->name, 0, 0);
ADDRLP4 36
ARGP4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 978
;977:
;978:			p = CG_ConfigString(CS_LOCATIONS + ci->location);
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 608
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 84
INDIRP4
ASGNP4
line 979
;979:			if (!p || !*p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $806
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $804
LABELV $806
line 980
;980:				p = "unknown";
ADDRLP4 20
ADDRGP4 $807
ASGNP4
line 981
;981:			}
LABELV $804
line 983
;982:
;983:			xx += leftOver / 3 + 2;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
CNSTF4 1051372203
MULF4
CNSTF4 1073741824
ADDF4
ADDF4
CVFI4 4
ASGNI4
line 984
;984:			maxx = rect->w - 4;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 986
;985:
;986:			CG_Text_Paint_Limit(&maxx, xx, y + text_y, scale, color, p, 0, 0);
ADDRLP4 36
ARGP4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 987
;987:			y += text_y + 2;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
line 988
;988:			if (y + text_y + 2 > rect->y + rect->h) {
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
CNSTF4 1073741824
ADDF4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
LEF4 $808
line 989
;989:				break;
ADDRGP4 $777
JUMPV
LABELV $808
line 992
;990:			}
;991:
;992:		}
LABELV $780
line 993
;993:	}
LABELV $776
line 914
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $778
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $775
LABELV $777
line 994
;994:}
LABELV $753
endproc CG_DrawNewTeamInfo 96 32
export CG_DrawTeamSpectators
proc CG_DrawTeamSpectators 24 32
line 997
;995:
;996:
;997:void CG_DrawTeamSpectators(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 998
;998:	if (cg.spectatorLen) {
ADDRGP4 cg+116460
INDIRI4
CNSTI4 0
EQI4 $811
line 1001
;999:		float maxX;
;1000:
;1001:		if (cg.spectatorWidth == -1) {
ADDRGP4 cg+116464
INDIRF4
CNSTF4 3212836864
NEF4 $814
line 1002
;1002:			cg.spectatorWidth = 0;
ADDRGP4 cg+116464
CNSTF4 0
ASGNF4
line 1003
;1003:			cg.spectatorPaintX = rect->x + 1;
ADDRGP4 cg+116472
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 1004
;1004:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 1005
;1005:		}
LABELV $814
line 1007
;1006:
;1007:		if (cg.spectatorOffset > cg.spectatorLen) {
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+116460
INDIRI4
LEI4 $820
line 1008
;1008:			cg.spectatorOffset = 0;
ADDRGP4 cg+116480
CNSTI4 0
ASGNI4
line 1009
;1009:			cg.spectatorPaintX = rect->x + 1;
ADDRGP4 cg+116472
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 1010
;1010:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 1011
;1011:		}
LABELV $820
line 1013
;1012:
;1013:		if (cg.time > cg.spectatorTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+116468
INDIRI4
LEI4 $827
line 1014
;1014:			cg.spectatorTime = cg.time + 10;
ADDRGP4 cg+116468
ADDRGP4 cg+107604
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1015
;1015:			if (cg.spectatorPaintX <= rect->x + 2) {
ADDRGP4 cg+116472
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDF4
GTF4 $833
line 1016
;1016:				if (cg.spectatorOffset < cg.spectatorLen) {
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+116460
INDIRI4
GEI4 $836
line 1017
;1017:					cg.spectatorPaintX += CG_Text_Width(&cg.spectatorList[cg.spectatorOffset], scale, 1) - 1;
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+115436
ADDP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 8
ADDRGP4 cg+116472
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ADDI4
ASGNI4
line 1018
;1018:					cg.spectatorOffset++;
ADDRLP4 12
ADDRGP4 cg+116480
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1019
;1019:				} else {
ADDRGP4 $834
JUMPV
LABELV $836
line 1020
;1020:					cg.spectatorOffset = 0;
ADDRGP4 cg+116480
CNSTI4 0
ASGNI4
line 1021
;1021:					if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 0
LTI4 $845
line 1022
;1022:						cg.spectatorPaintX = cg.spectatorPaintX2;
ADDRGP4 cg+116472
ADDRGP4 cg+116476
INDIRI4
ASGNI4
line 1023
;1023:					} else {
ADDRGP4 $846
JUMPV
LABELV $845
line 1024
;1024:						cg.spectatorPaintX = rect->x + rect->w - 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+116472
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 1025
;1025:					}
LABELV $846
line 1026
;1026:					cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 1027
;1027:				}
line 1028
;1028:			} else {
ADDRGP4 $834
JUMPV
LABELV $833
line 1029
;1029:				cg.spectatorPaintX--;
ADDRLP4 4
ADDRGP4 cg+116472
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1030
;1030:				if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 0
LTI4 $853
line 1031
;1031:					cg.spectatorPaintX2--;
ADDRLP4 8
ADDRGP4 cg+116476
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1032
;1032:				}
LABELV $853
line 1033
;1033:			}
LABELV $834
line 1034
;1034:		}
LABELV $827
line 1036
;1035:
;1036:		maxX = rect->x + rect->w - 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 1037
;1037:		CG_Text_Paint_Limit(&maxX, cg.spectatorPaintX, rect->y + rect->h - 3, scale, color, &cg.spectatorList[cg.spectatorOffset], 0, 0);
ADDRLP4 0
ARGP4
ADDRGP4 cg+116472
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1077936128
SUBF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+116480
INDIRI4
ADDRGP4 cg+115436
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 1038
;1038:		if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 0
LTI4 $860
line 1039
;1039:			float maxX2 = rect->x + rect->w - 2;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 1040
;1040:			CG_Text_Paint_Limit(&maxX2, cg.spectatorPaintX2, rect->y + rect->h - 3, scale, color, cg.spectatorList, 0, cg.spectatorOffset);
ADDRLP4 12
ARGP4
ADDRGP4 cg+116476
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1077936128
SUBF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+115436
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 cg+116480
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 1041
;1041:		}
LABELV $860
line 1042
;1042:		if (cg.spectatorOffset && maxX > 0) {
ADDRGP4 cg+116480
INDIRI4
CNSTI4 0
EQI4 $866
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $866
line 1044
;1043:			// if we have an offset ( we are skipping the first part of the string ) and we fit the string
;1044:			if (cg.spectatorPaintX2 == -1) {
ADDRGP4 cg+116476
INDIRI4
CNSTI4 -1
NEI4 $867
line 1045
;1045:				cg.spectatorPaintX2 = rect->x + rect->w - 2;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+116476
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 1046
;1046:			}
line 1047
;1047:		} else {
ADDRGP4 $867
JUMPV
LABELV $866
line 1048
;1048:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+116476
CNSTI4 -1
ASGNI4
line 1049
;1049:		}
LABELV $867
line 1051
;1050:
;1051:	}
LABELV $811
line 1052
;1052:}
LABELV $810
endproc CG_DrawTeamSpectators 24 32
export CG_DrawMedal
proc CG_DrawMedal 28 32
line 1056
;1053:
;1054:
;1055:
;1056:void CG_DrawMedal(int ownerDraw, rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 1057
;1057:	score_t *score = &cg.scores[cg.selectedScore];
ADDRLP4 8
ADDRGP4 cg+110480
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ASGNP4
line 1058
;1058:	float value = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 1059
;1059:	char *text = NULL;
ADDRLP4 4
CNSTP4 0
ASGNP4
line 1060
;1060:	color[3] = 0.25;
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1062
;1061:
;1062:	switch (ownerDraw) {
ADDRLP4 12
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 53
LTI4 $877
ADDRLP4 12
INDIRI4
CNSTI4 59
GTI4 $887
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $888-212
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $888
address $879
address $880
address $881
address $882
address $883
address $884
address $885
code
LABELV $887
ADDRFP4 0
INDIRI4
CNSTI4 69
EQI4 $886
ADDRGP4 $877
JUMPV
LABELV $879
line 1064
;1063:	case CG_ACCURACY:
;1064:		value = score->accuracy;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1065
;1065:		break;
ADDRGP4 $878
JUMPV
LABELV $880
line 1067
;1066:	case CG_ASSISTS:
;1067:		value = score->assistCount;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1068
;1068:		break;
ADDRGP4 $878
JUMPV
LABELV $881
line 1070
;1069:	case CG_DEFEND:
;1070:		value = score->defendCount;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1071
;1071:		break;
ADDRGP4 $878
JUMPV
LABELV $882
line 1073
;1072:	case CG_EXCELLENT:
;1073:		value = score->excellentCount;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1074
;1074:		break;
ADDRGP4 $878
JUMPV
LABELV $883
line 1076
;1075:	case CG_IMPRESSIVE:
;1076:		value = score->impressiveCount;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1077
;1077:		break;
ADDRGP4 $878
JUMPV
LABELV $884
line 1079
;1078:	case CG_PERFECT:
;1079:		value = score->perfect;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1080
;1080:		break;
ADDRGP4 $878
JUMPV
LABELV $885
line 1082
;1081:	case CG_GAUNTLET:
;1082:		value = score->gauntletCount;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1083
;1083:		break;
ADDRGP4 $878
JUMPV
LABELV $886
line 1085
;1084:	case CG_CAPTURES:
;1085:		value = score->captures;
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1086
;1086:		break;
LABELV $877
LABELV $878
line 1089
;1087:	}
;1088:
;1089:	if (value > 0) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $890
line 1090
;1090:		if (ownerDraw != CG_PERFECT) {
ADDRFP4 0
INDIRI4
CNSTI4 58
EQI4 $892
line 1091
;1091:			if (ownerDraw == CG_ACCURACY) {
ADDRFP4 0
INDIRI4
CNSTI4 53
NEI4 $894
line 1092
;1092:				text = va("%i%%", (int)value);
ADDRGP4 $896
ARGP4
ADDRLP4 0
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 1093
;1093:				if (value > 50) {
ADDRLP4 0
INDIRF4
CNSTF4 1112014848
LEF4 $893
line 1094
;1094:					color[3] = 1.0;
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1065353216
ASGNF4
line 1095
;1095:				}
line 1096
;1096:			} else {
ADDRGP4 $893
JUMPV
LABELV $894
line 1097
;1097:				text = va("%i", (int)value);
ADDRGP4 $110
ARGP4
ADDRLP4 0
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 1098
;1098:				color[3] = 1.0;
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1065353216
ASGNF4
line 1099
;1099:			}
line 1100
;1100:		} else {
ADDRGP4 $893
JUMPV
LABELV $892
line 1101
;1101:			if (value) {
ADDRLP4 0
INDIRF4
CNSTF4 0
EQF4 $899
line 1102
;1102:				color[3] = 1.0;
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1065353216
ASGNF4
line 1103
;1103:			}
LABELV $899
line 1104
;1104:			text = "Wow";
ADDRLP4 4
ADDRGP4 $901
ASGNP4
line 1105
;1105:		}
LABELV $893
line 1106
;1106:	}
LABELV $890
line 1108
;1107:
;1108:	trap_R_SetColor(color);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1109
;1109:	CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1111
;1110:
;1111:	if (text) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $902
line 1112
;1112:		color[3] = 1.0;
ADDRFP4 12
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1065353216
ASGNF4
line 1113
;1113:		value = CG_Text_Width(text, scale, 0);
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
CVIF4 4
ASGNF4
line 1114
;1114:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h + 10, scale, color, text, 0, 0, 0);
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1092616192
ADDF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1115
;1115:	}
LABELV $902
line 1116
;1116:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1118
;1117:
;1118:}
LABELV $874
endproc CG_DrawMedal 28 32
export CG_OwnerDraw
proc CG_OwnerDraw 20 20
line 1122
;1119:
;1120:
;1121://
;1122:void CG_OwnerDraw(float x, float y, float w, float h, float text_x, float text_y, int ownerDraw, int ownerDrawFlags, int align, float special, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 1125
;1123:	rectDef_t rect;
;1124:
;1125:	if (cg_drawStatus.integer == 0) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
NEI4 $905
line 1126
;1126:		return;
ADDRGP4 $904
JUMPV
LABELV $905
line 1133
;1127:	}
;1128:
;1129:	//if (ownerDrawFlags != 0 && !CG_OwnerDrawVisible(ownerDrawFlags)) {
;1130:	//	return;
;1131:	//}
;1132:
;1133:	rect.x = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 1134
;1134:	rect.y = y;
ADDRLP4 0+4
ADDRFP4 4
INDIRF4
ASGNF4
line 1135
;1135:	rect.w = w;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
ASGNF4
line 1136
;1136:	rect.h = h;
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
ASGNF4
line 1138
;1137:
;1138:	switch (ownerDraw) {
ADDRLP4 16
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 1
LTI4 $912
ADDRLP4 16
INDIRI4
CNSTI4 69
GTI4 $912
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $965-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $965
address $913
address $915
address $929
address $932
address $916
address $918
address $912
address $912
address $912
address $912
address $912
address $912
address $912
address $912
address $912
address $912
address $912
address $912
address $930
address $912
address $937
address $938
address $939
address $940
address $941
address $942
address $934
address $933
address $935
address $936
address $943
address $945
address $912
address $947
address $948
address $949
address $912
address $951
address $956
address $912
address $912
address $950
address $912
address $912
address $912
address $953
address $954
address $955
address $957
address $958
address $914
address $917
address $959
address $959
address $959
address $959
address $959
address $959
address $959
address $960
address $912
address $912
address $912
address $952
address $944
address $962
address $963
address $964
address $959
code
LABELV $913
line 1140
;1139:	case CG_PLAYER_ARMOR_ICON:
;1140:		CG_DrawPlayerArmorIcon(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerArmorIcon
CALLV
pop
line 1141
;1141:		break;
ADDRGP4 $912
JUMPV
LABELV $914
line 1143
;1142:	case CG_PLAYER_ARMOR_ICON2D:
;1143:		CG_DrawPlayerArmorIcon(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerArmorIcon
CALLV
pop
line 1144
;1144:		break;
ADDRGP4 $912
JUMPV
LABELV $915
line 1146
;1145:	case CG_PLAYER_ARMOR_VALUE:
;1146:		CG_DrawPlayerArmorValue(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerArmorValue
CALLV
pop
line 1147
;1147:		break;
ADDRGP4 $912
JUMPV
LABELV $916
line 1149
;1148:	case CG_PLAYER_AMMO_ICON:
;1149:		CG_DrawPlayerAmmoIcon(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerAmmoIcon
CALLV
pop
line 1150
;1150:		break;
ADDRGP4 $912
JUMPV
LABELV $917
line 1152
;1151:	case CG_PLAYER_AMMO_ICON2D:
;1152:		CG_DrawPlayerAmmoIcon(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerAmmoIcon
CALLV
pop
line 1153
;1153:		break;
ADDRGP4 $912
JUMPV
LABELV $918
line 1155
;1154:	case CG_PLAYER_AMMO_VALUE:
;1155:		CG_DrawPlayerAmmoValue(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerAmmoValue
CALLV
pop
line 1156
;1156:		break;
ADDRGP4 $912
JUMPV
line 1158
;1157:	case CG_SELECTEDPLAYER_HEAD:
;1158:		break;
line 1160
;1159:	case CG_VOICE_HEAD:
;1160:		break;
line 1162
;1161:	case CG_VOICE_NAME:
;1162:		break;
line 1164
;1163:	case CG_SELECTEDPLAYER_STATUS:
;1164:		break;
line 1166
;1165:	case CG_SELECTEDPLAYER_ARMOR:
;1166:		break;
line 1168
;1167:	case CG_SELECTEDPLAYER_HEALTH:
;1168:		break;
line 1170
;1169:	case CG_SELECTEDPLAYER_NAME:
;1170:		break;
line 1172
;1171:	case CG_SELECTEDPLAYER_LOCATION:
;1172:		break;
line 1174
;1173:	case CG_SELECTEDPLAYER_WEAPON:
;1174:		break;
line 1176
;1175:	case CG_SELECTEDPLAYER_POWERUP:
;1176:		break;
LABELV $929
line 1178
;1177:	case CG_PLAYER_HEAD:
;1178:		CG_DrawPlayerHead(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerHead
CALLV
pop
line 1179
;1179:		break;
ADDRGP4 $912
JUMPV
LABELV $930
line 1181
;1180:	case CG_PLAYER_ITEM:
;1181:		CG_DrawPlayerItem(&rect, scale, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerItem
CALLV
pop
line 1182
;1182:		break;
ADDRGP4 $912
JUMPV
line 1184
;1183:	case CG_PLAYER_SCORE:
;1184:		break;
LABELV $932
line 1186
;1185:	case CG_PLAYER_HEALTH:
;1186:		CG_DrawPlayerHealth(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerHealth
CALLV
pop
line 1187
;1187:		break;
ADDRGP4 $912
JUMPV
LABELV $933
line 1189
;1188:	case CG_RED_SCORE:
;1189:		CG_DrawRedScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedScore
CALLV
pop
line 1190
;1190:		break;
ADDRGP4 $912
JUMPV
LABELV $934
line 1192
;1191:	case CG_BLUE_SCORE:
;1192:		CG_DrawBlueScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueScore
CALLV
pop
line 1193
;1193:		break;
ADDRGP4 $912
JUMPV
LABELV $935
line 1195
;1194:	case CG_RED_NAME:
;1195:		CG_DrawRedName(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedName
CALLV
pop
line 1196
;1196:		break;
ADDRGP4 $912
JUMPV
LABELV $936
line 1198
;1197:	case CG_BLUE_NAME:
;1198:		CG_DrawBlueName(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueName
CALLV
pop
line 1199
;1199:		break;
ADDRGP4 $912
JUMPV
LABELV $937
line 1201
;1200:	case CG_BLUE_FLAGHEAD:
;1201:		CG_DrawBlueFlagHead(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawBlueFlagHead
CALLV
pop
line 1202
;1202:		break;
ADDRGP4 $912
JUMPV
LABELV $938
line 1204
;1203:	case CG_BLUE_FLAGSTATUS:
;1204:		CG_DrawBlueFlagStatus(&rect, shader);
ADDRLP4 0
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueFlagStatus
CALLV
pop
line 1205
;1205:		break;
ADDRGP4 $912
JUMPV
LABELV $939
line 1207
;1206:	case CG_BLUE_FLAGNAME:
;1207:		CG_DrawBlueFlagName(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueFlagName
CALLV
pop
line 1208
;1208:		break;
ADDRGP4 $912
JUMPV
LABELV $940
line 1210
;1209:	case CG_RED_FLAGHEAD:
;1210:		CG_DrawRedFlagHead(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawRedFlagHead
CALLV
pop
line 1211
;1211:		break;
ADDRGP4 $912
JUMPV
LABELV $941
line 1213
;1212:	case CG_RED_FLAGSTATUS:
;1213:		CG_DrawRedFlagStatus(&rect, shader);
ADDRLP4 0
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedFlagStatus
CALLV
pop
line 1214
;1214:		break;
ADDRGP4 $912
JUMPV
LABELV $942
line 1216
;1215:	case CG_RED_FLAGNAME:
;1216:		CG_DrawRedFlagName(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedFlagName
CALLV
pop
line 1217
;1217:		break;
ADDRGP4 $912
JUMPV
LABELV $943
line 1219
;1218:	case CG_HARVESTER_SKULLS:
;1219:		CG_HarvesterSkulls(&rect, scale, color, qfalse, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_HarvesterSkulls
CALLV
pop
line 1220
;1220:		break;
ADDRGP4 $912
JUMPV
LABELV $944
line 1222
;1221:	case CG_HARVESTER_SKULLS2D:
;1222:		CG_HarvesterSkulls(&rect, scale, color, qtrue, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_HarvesterSkulls
CALLV
pop
line 1223
;1223:		break;
ADDRGP4 $912
JUMPV
LABELV $945
line 1225
;1224:	case CG_ONEFLAG_STATUS:
;1225:		CG_OneFlagStatus(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_OneFlagStatus
CALLV
pop
line 1226
;1226:		break;
ADDRGP4 $912
JUMPV
line 1228
;1227:	case CG_PLAYER_LOCATION:
;1228:		break;
LABELV $947
line 1230
;1229:	case CG_TEAM_COLOR:
;1230:		CG_DrawTeamColor(&rect, color);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRP4
ARGP4
ADDRGP4 CG_DrawTeamColor
CALLV
pop
line 1231
;1231:		break;
ADDRGP4 $912
JUMPV
LABELV $948
line 1233
;1232:	case CG_CTF_POWERUP:
;1233:		CG_DrawCTFPowerUp(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawCTFPowerUp
CALLV
pop
line 1234
;1234:		break;
ADDRGP4 $912
JUMPV
LABELV $949
line 1236
;1235:	case CG_AREA_POWERUP:
;1236:		CG_DrawAreaPowerUp(&rect, align, special, scale, color);
ADDRLP4 0
ARGP4
ADDRFP4 32
INDIRI4
ARGI4
ADDRFP4 36
INDIRF4
ARGF4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRGP4 CG_DrawAreaPowerUp
CALLV
pop
line 1237
;1237:		break;
ADDRGP4 $912
JUMPV
LABELV $950
line 1239
;1238:	case CG_PLAYER_STATUS:
;1239:		CG_DrawPlayerStatus(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawPlayerStatus
CALLV
pop
line 1240
;1240:		break;
ADDRGP4 $912
JUMPV
LABELV $951
line 1242
;1241:	case CG_PLAYER_HASFLAG:
;1242:		CG_DrawPlayerHasFlag(&rect, qfalse);
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawPlayerHasFlag
CALLV
pop
line 1243
;1243:		break;
ADDRGP4 $912
JUMPV
LABELV $952
line 1245
;1244:	case CG_PLAYER_HASFLAG2D:
;1245:		CG_DrawPlayerHasFlag(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerHasFlag
CALLV
pop
line 1246
;1246:		break;
ADDRGP4 $912
JUMPV
LABELV $953
line 1248
;1247:	case CG_AREA_SYSTEMCHAT:
;1248:		CG_DrawAreaSystemChat(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAreaSystemChat
CALLV
pop
line 1249
;1249:		break;
ADDRGP4 $912
JUMPV
LABELV $954
line 1251
;1250:	case CG_AREA_TEAMCHAT:
;1251:		CG_DrawAreaTeamChat(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAreaTeamChat
CALLV
pop
line 1252
;1252:		break;
ADDRGP4 $912
JUMPV
LABELV $955
line 1254
;1253:	case CG_AREA_CHAT:
;1254:		CG_DrawAreaChat(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAreaChat
CALLV
pop
line 1255
;1255:		break;
ADDRGP4 $912
JUMPV
LABELV $956
line 1257
;1256:	case CG_GAME_TYPE:
;1257:		CG_DrawGameType(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawGameType
CALLV
pop
line 1258
;1258:		break;
ADDRGP4 $912
JUMPV
LABELV $957
line 1260
;1259:	case CG_GAME_STATUS:
;1260:		CG_DrawGameStatus(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawGameStatus
CALLV
pop
line 1261
;1261:		break;
ADDRGP4 $912
JUMPV
LABELV $958
line 1263
;1262:	case CG_KILLER:
;1263:		CG_DrawKiller(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawKiller
CALLV
pop
line 1264
;1264:		break;
ADDRGP4 $912
JUMPV
LABELV $959
line 1273
;1265:	case CG_ACCURACY:
;1266:	case CG_ASSISTS:
;1267:	case CG_DEFEND:
;1268:	case CG_EXCELLENT:
;1269:	case CG_IMPRESSIVE:
;1270:	case CG_PERFECT:
;1271:	case CG_GAUNTLET:
;1272:	case CG_CAPTURES:
;1273:		CG_DrawMedal(ownerDraw, &rect, scale, color, shader);
ADDRFP4 24
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawMedal
CALLV
pop
line 1274
;1274:		break;
ADDRGP4 $912
JUMPV
LABELV $960
line 1276
;1275:	case CG_SPECTATORS:
;1276:		CG_DrawTeamSpectators(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawTeamSpectators
CALLV
pop
line 1277
;1277:		break;
ADDRGP4 $912
JUMPV
line 1279
;1278:	case CG_TEAMINFO:
;1279:		break;
LABELV $962
line 1281
;1280:	case CG_CAPFRAGLIMIT:
;1281:		CG_DrawCapFragLimit(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawCapFragLimit
CALLV
pop
line 1282
;1282:		break;
ADDRGP4 $912
JUMPV
LABELV $963
line 1284
;1283:	case CG_1STPLACE:
;1284:		CG_Draw1stPlace(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_Draw1stPlace
CALLV
pop
line 1285
;1285:		break;
ADDRGP4 $912
JUMPV
LABELV $964
line 1287
;1286:	case CG_2NDPLACE:
;1287:		CG_Draw2ndPlace(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_Draw2ndPlace
CALLV
pop
line 1288
;1288:		break;
line 1290
;1289:	default:
;1290:		break;
LABELV $912
line 1292
;1291:	}
;1292:}
LABELV $904
endproc CG_OwnerDraw 20 20
export CG_MouseEvent
proc CG_MouseEvent 16 12
line 1294
;1293:
;1294:void CG_MouseEvent(int x, int y) {
line 1297
;1295:	int n;
;1296:
;1297:	if ((cg.predictedPlayerState.pm_type == PM_NORMAL || cg.predictedPlayerState.pm_type == PM_SPECTATOR) && cg.showScores == qfalse) {
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 0
EQI4 $975
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 2
NEI4 $968
LABELV $975
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $968
line 1298
;1298:		trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1299
;1299:		return;
ADDRGP4 $967
JUMPV
LABELV $968
line 1302
;1300:	}
;1301:
;1302:	cgs.cursorX += x;
ADDRLP4 4
ADDRGP4 cgs+148692
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRI4
ADDI4
ASGNI4
line 1303
;1303:	if (cgs.cursorX < 0)
ADDRGP4 cgs+148692
INDIRI4
CNSTI4 0
GEI4 $977
line 1304
;1304:		cgs.cursorX = 0;
ADDRGP4 cgs+148692
CNSTI4 0
ASGNI4
ADDRGP4 $978
JUMPV
LABELV $977
line 1305
;1305:	else if (cgs.cursorX > 640)
ADDRGP4 cgs+148692
INDIRI4
CNSTI4 640
LEI4 $981
line 1306
;1306:		cgs.cursorX = 640;
ADDRGP4 cgs+148692
CNSTI4 640
ASGNI4
LABELV $981
LABELV $978
line 1308
;1307:
;1308:	cgs.cursorY += y;
ADDRLP4 8
ADDRGP4 cgs+148696
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 1309
;1309:	if (cgs.cursorY < 0)
ADDRGP4 cgs+148696
INDIRI4
CNSTI4 0
GEI4 $986
line 1310
;1310:		cgs.cursorY = 0;
ADDRGP4 cgs+148696
CNSTI4 0
ASGNI4
ADDRGP4 $987
JUMPV
LABELV $986
line 1311
;1311:	else if (cgs.cursorY > 480)
ADDRGP4 cgs+148696
INDIRI4
CNSTI4 480
LEI4 $990
line 1312
;1312:		cgs.cursorY = 480;
ADDRGP4 cgs+148696
CNSTI4 480
ASGNI4
LABELV $990
LABELV $987
line 1314
;1313:
;1314:	n = Display_CursorType(cgs.cursorX, cgs.cursorY);
ADDRGP4 cgs+148692
INDIRI4
ARGI4
ADDRGP4 cgs+148696
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 Display_CursorType
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 1315
;1315:	cgs.activeCursor = 0;
ADDRGP4 cgs+148716
CNSTI4 0
ASGNI4
line 1316
;1316:	if (n == CURSOR_ARROW) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $997
line 1317
;1317:		cgs.activeCursor = cgs.media.selectCursor;
ADDRGP4 cgs+148716
ADDRGP4 cgs+148744+1196
INDIRI4
ASGNI4
line 1318
;1318:	} else if (n == CURSOR_SIZER) {
ADDRGP4 $998
JUMPV
LABELV $997
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $1002
line 1319
;1319:		cgs.activeCursor = cgs.media.sizeCursor;
ADDRGP4 cgs+148716
ADDRGP4 cgs+148744+1200
INDIRI4
ASGNI4
line 1320
;1320:	}
LABELV $1002
LABELV $998
line 1322
;1321:
;1322:	if (cgs.capturedItem) {
ADDRGP4 cgs+148712
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1007
line 1323
;1323:		Display_MouseMove(cgs.capturedItem, x, y);
ADDRGP4 cgs+148712
INDIRP4
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 Display_MouseMove
CALLI4
pop
line 1324
;1324:	} else {
ADDRGP4 $1008
JUMPV
LABELV $1007
line 1325
;1325:		Display_MouseMove(NULL, cgs.cursorX, cgs.cursorY);
CNSTP4 0
ARGP4
ADDRGP4 cgs+148692
INDIRI4
ARGI4
ADDRGP4 cgs+148696
INDIRI4
ARGI4
ADDRGP4 Display_MouseMove
CALLI4
pop
line 1326
;1326:	}
LABELV $1008
line 1328
;1327:
;1328:}
LABELV $967
endproc CG_MouseEvent 16 12
export CG_HideTeamMenu
proc CG_HideTeamMenu 0 4
line 1336
;1329:
;1330:/*
;1331:==================
;1332:CG_HideTeamMenus
;1333:==================
;1334:
;1335:*/
;1336:void CG_HideTeamMenu() {
line 1337
;1337:	Menus_CloseByName("teamMenu");
ADDRGP4 $1014
ARGP4
ADDRGP4 Menus_CloseByName
CALLV
pop
line 1338
;1338:	Menus_CloseByName("getMenu");
ADDRGP4 $1015
ARGP4
ADDRGP4 Menus_CloseByName
CALLV
pop
line 1339
;1339:}
LABELV $1013
endproc CG_HideTeamMenu 0 4
export CG_ShowTeamMenu
proc CG_ShowTeamMenu 0 4
line 1348
;1340:
;1341:
;1342:/*
;1343:==================
;1344:CG_ShowTeamMenus
;1345:==================
;1346:
;1347:*/
;1348:void CG_ShowTeamMenu() {
line 1349
;1349:	Menus_OpenByName("teamMenu");
ADDRGP4 $1014
ARGP4
ADDRGP4 Menus_OpenByName
CALLV
pop
line 1350
;1350:}
LABELV $1016
endproc CG_ShowTeamMenu 0 4
export CG_EventHandling
proc CG_EventHandling 0 0
line 1362
;1351:
;1352:
;1353:/*
;1354:==================
;1355:CG_EventHandling
;1356:==================
;1357: type 0 - no event handling
;1358:	  1 - team menu
;1359:	  2 - hud editor
;1360:
;1361:*/
;1362:void CG_EventHandling(cgame_event_t type) {
line 1363
;1363:	cgs.eventHandling = type;
ADDRGP4 cgs+148700
ADDRFP4 0
INDIRI4
ASGNI4
line 1364
;1364:	if (type == CGAME_EVENT_NONE) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1019
line 1365
;1365:		CG_HideTeamMenu();
ADDRGP4 CG_HideTeamMenu
CALLV
pop
line 1366
;1366:	}
LABELV $1019
line 1368
;1367:
;1368:}
LABELV $1017
endproc CG_EventHandling 0 0
export CG_SetScoreCatcher
proc CG_SetScoreCatcher 36 4
line 1371
;1369:
;1370:
;1371:void CG_SetScoreCatcher(qboolean enable) {
line 1375
;1372:	int	currentCatcher, newCatcher, old_state, new_state;
;1373:	qboolean spectator;
;1374:
;1375:	currentCatcher = trap_Key_GetCatcher();
ADDRLP4 20
ADDRGP4 trap_Key_GetCatcher
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 1377
;1376:
;1377:	if (currentCatcher & KEYCATCH_CONSOLE || !cg.snap)
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $1025
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1022
LABELV $1025
line 1378
;1378:		return;
ADDRGP4 $1021
JUMPV
LABELV $1022
line 1380
;1379:
;1380:	spectator = cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.demoPlayback || (cg.snap->ps.pm_flags & PMF_FOLLOW);
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1033
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
NEI4 $1033
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1030
LABELV $1033
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $1031
JUMPV
LABELV $1030
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $1031
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
line 1382
;1381:
;1382:	if (enable && spectator) {
ADDRFP4 0
INDIRI4
CNSTI4 0
EQI4 $1034
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1034
line 1383
;1383:		cgs.score_key = trap_Key_GetKey("+scores");
ADDRGP4 $1037
ARGP4
ADDRLP4 28
ADDRGP4 trap_Key_GetKey
CALLI4
ASGNI4
ADDRGP4 cgs+150020
ADDRLP4 28
INDIRI4
ASGNI4
line 1384
;1384:		cgs.score_catched = qtrue;
ADDRGP4 cgs+150016
CNSTI4 1
ASGNI4
line 1385
;1385:		newCatcher = currentCatcher | KEYCATCH_CGAME;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1386
;1386:	} else {
ADDRGP4 $1035
JUMPV
LABELV $1034
line 1387
;1387:		cgs.score_catched = qfalse;
ADDRGP4 cgs+150016
CNSTI4 0
ASGNI4
line 1388
;1388:		newCatcher = currentCatcher & ~KEYCATCH_CGAME;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 1389
;1389:	}
LABELV $1035
line 1391
;1390:
;1391:	if (newCatcher != currentCatcher) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1040
line 1392
;1392:		if (cgs.score_key) {
ADDRGP4 cgs+150020
INDIRI4
CNSTI4 0
EQI4 $1042
line 1395
;1393:			// keycatcher change may cause reset of all pressed buttons on new engines
;1394:			// so track state of scoreboard key and ignore first upcoming keyup event for it
;1395:			old_state = trap_Key_IsDown(cgs.score_key);
ADDRGP4 cgs+150020
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1396
;1396:			trap_Key_SetCatcher(newCatcher);
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1397
;1397:			new_state = trap_Key_IsDown(cgs.score_key);
ADDRGP4 cgs+150020
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 32
INDIRI4
ASGNI4
line 1398
;1398:			if (new_state != old_state) {
ADDRLP4 16
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $1043
line 1399
;1399:				cgs.filterKeyUpEvent = qtrue;
ADDRGP4 cgs+150012
CNSTI4 1
ASGNI4
line 1400
;1400:			}
line 1401
;1401:		} else {
ADDRGP4 $1043
JUMPV
LABELV $1042
line 1402
;1402:			trap_Key_SetCatcher(newCatcher);
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1403
;1403:		}
LABELV $1043
line 1404
;1404:	}
LABELV $1040
line 1405
;1405:}
LABELV $1021
endproc CG_SetScoreCatcher 36 4
export CG_KeyEvent
proc CG_KeyEvent 4 16
line 1408
;1406:
;1407:
;1408:void CG_KeyEvent(int key, qboolean down) {
line 1410
;1409:
;1410:	if (!down) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1051
line 1411
;1411:		return;
ADDRGP4 $1050
JUMPV
LABELV $1051
line 1414
;1412:	}
;1413:
;1414:	if (cg.predictedPlayerState.pm_type == PM_NORMAL || (cg.predictedPlayerState.pm_type == PM_SPECTATOR && cg.showScores == qfalse)) {
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 0
EQI4 $1060
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 2
NEI4 $1053
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $1053
LABELV $1060
line 1415
;1415:		CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 1416
;1416:		trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 1417
;1417:		return;
ADDRGP4 $1050
JUMPV
LABELV $1053
line 1420
;1418:	}
;1419:
;1420:	Display_HandleKey(key, down, cgs.cursorX, cgs.cursorY);
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 cgs+148692
INDIRI4
ARGI4
ADDRGP4 cgs+148696
INDIRI4
ARGI4
ADDRGP4 Display_HandleKey
CALLV
pop
line 1422
;1421:
;1422:	if (cgs.capturedItem) {
ADDRGP4 cgs+148712
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1063
line 1423
;1423:		cgs.capturedItem = NULL;
ADDRGP4 cgs+148712
CNSTP4 0
ASGNP4
line 1424
;1424:	} else {
ADDRGP4 $1064
JUMPV
LABELV $1063
line 1425
;1425:		if (key == K_MOUSE2 && down) {
ADDRFP4 0
INDIRI4
CNSTI4 179
NEI4 $1067
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1067
line 1426
;1426:			cgs.capturedItem = Display_CaptureItem(cgs.cursorX, cgs.cursorY);
ADDRGP4 cgs+148692
INDIRI4
ARGI4
ADDRGP4 cgs+148696
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 Display_CaptureItem
CALLP4
ASGNP4
ADDRGP4 cgs+148712
ADDRLP4 0
INDIRP4
ASGNP4
line 1427
;1427:		}
LABELV $1067
line 1428
;1428:	}
LABELV $1064
line 1429
;1429:}
LABELV $1050
endproc CG_KeyEvent 4 16
export CG_ClientNumFromName
proc CG_ClientNumFromName 12 8
line 1432
;1430:
;1431:
;1432:int CG_ClientNumFromName(const char *p) {
line 1434
;1433:	int i;
;1434:	for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1076
JUMPV
LABELV $1073
line 1435
;1435:		if (cgs.clientinfo[i].infoValid && Q_stricmp(cgs.clientinfo[i].name, p) == 0) {
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1078
ADDRLP4 0
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1078
line 1436
;1436:			return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $1072
JUMPV
LABELV $1078
line 1438
;1437:		}
;1438:	}
LABELV $1074
line 1434
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1076
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $1073
line 1439
;1439:	return -1;
CNSTI4 -1
RETI4
LABELV $1072
endproc CG_ClientNumFromName 12 8
export CG_RunMenuScript
proc CG_RunMenuScript 0 0
line 1443
;1440:}
;1441:
;1442:
;1443:void CG_RunMenuScript(char **args) {}
LABELV $1083
endproc CG_RunMenuScript 0 0
export CG_GetTeamColor
proc CG_GetTeamColor 8 0
line 1446
;1444:
;1445:
;1446:void CG_GetTeamColor(vec4_t *color) {
line 1447
;1447:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_RED) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1085
line 1448
;1448:		(*color)[0] = 1.0f;
ADDRFP4 0
INDIRP4
CNSTF4 1065353216
ASGNF4
line 1449
;1449:		(*color)[3] = 0.25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1450
;1450:		(*color)[1] = (*color)[2] = 0.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1451
;1451:	} else if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 $1086
JUMPV
LABELV $1085
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1088
line 1452
;1452:		(*color)[0] = (*color)[1] = 0.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1453
;1453:		(*color)[2] = 1.0f;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 1454
;1454:		(*color)[3] = 0.25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1455
;1455:	} else {
ADDRGP4 $1089
JUMPV
LABELV $1088
line 1456
;1456:		(*color)[0] = (*color)[2] = 0.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1457
;1457:		(*color)[1] = 0.17f;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1043207291
ASGNF4
line 1458
;1458:		(*color)[3] = 0.25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 1459
;1459:	}
LABELV $1089
LABELV $1086
line 1460
;1460:}
LABELV $1084
endproc CG_GetTeamColor 8 0
import cgDC
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_New
import Menu_Count
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Menu_PostParse
import Item_Init
import Menu_Init
import Init_Display
import String_Report
import String_Init
import String_Alloc
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_ShowResponseHead
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1037
byte 1 43
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $1015
byte 1 103
byte 1 101
byte 1 116
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 0
align 1
LABELV $1014
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 0
align 1
LABELV $901
byte 1 87
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $896
byte 1 37
byte 1 105
byte 1 37
byte 1 37
byte 1 0
align 1
LABELV $807
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $724
byte 1 72
byte 1 97
byte 1 114
byte 1 118
byte 1 101
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $720
byte 1 79
byte 1 118
byte 1 101
byte 1 114
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $716
byte 1 79
byte 1 110
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 67
byte 1 84
byte 1 70
byte 1 0
align 1
LABELV $712
byte 1 67
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $708
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 68
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 109
byte 1 97
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $704
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 65
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $695
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 82
byte 1 101
byte 1 100
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $691
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $684
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $676
byte 1 37
byte 1 115
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 99
byte 1 101
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $658
byte 1 37
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $645
byte 1 70
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $641
byte 1 0
align 1
LABELV $225
byte 1 45
byte 1 0
align 1
LABELV $110
byte 1 37
byte 1 105
byte 1 0
