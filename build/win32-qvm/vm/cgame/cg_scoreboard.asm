code
proc CG_DrawClientScore 128 32
file "..\..\..\..\code\cgame\cg_scoreboard.c"
line 61
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_scoreboard -- draw the scoreboard on top of the game screen
;4:#include "cg_local.h"
;5:
;6:
;7:#define	SCOREBOARD_X		(0)
;8:
;9:#define SB_HEADER			86
;10:#define SB_TOP				(SB_HEADER+32)
;11:
;12:// Where the status bar starts, so we don't overwrite it
;13:#define SB_STATUSBAR		420
;14:
;15:#define SB_NORMAL_HEIGHT	40
;16:#define SB_INTER_HEIGHT		16 // interleaved height
;17:
;18:#define SB_MAXCLIENTS_NORMAL  ((SB_STATUSBAR - SB_TOP) / SB_NORMAL_HEIGHT)
;19:#define SB_MAXCLIENTS_INTER   ((SB_STATUSBAR - SB_TOP) / SB_INTER_HEIGHT - 1)
;20:
;21:// Used when interleaved
;22:
;23:
;24:
;25:#define SB_LEFT_BOTICON_X	(SCOREBOARD_X+0)
;26:#define SB_LEFT_HEAD_X		(SCOREBOARD_X+32)
;27:#define SB_RIGHT_BOTICON_X	(SCOREBOARD_X+64)
;28:#define SB_RIGHT_HEAD_X		(SCOREBOARD_X+96)
;29:// Normal
;30:#define SB_BOTICON_X		(SCOREBOARD_X+32)
;31:#define SB_HEAD_X			(SCOREBOARD_X+64)
;32:
;33:#define SB_SCORELINE_X		112
;34:
;35:#define SB_RATING_WIDTH	    (6 * BIGCHAR_WIDTH) // width 6
;36:#define SB_SCORE_X			(SB_SCORELINE_X + BIGCHAR_WIDTH) // width 6
;37:#define SB_RATING_X			(SB_SCORELINE_X + 6 * BIGCHAR_WIDTH) // width 6
;38:#define SB_PING_X			(SB_SCORELINE_X + 12 * BIGCHAR_WIDTH + 8) // width 5
;39:#define SB_TIME_X			(SB_SCORELINE_X + 17 * BIGCHAR_WIDTH + 8) // width 5
;40:#define SB_NAME_X			(SB_SCORELINE_X + 22 * BIGCHAR_WIDTH) // width 15
;41:
;42:// The new and improved score board
;43://
;44:// In cases where the number of clients is high, the score board heads are interleaved
;45:// here's the layout
;46:
;47://
;48://	0   32   80  112  144   240  320  400   <-- pixel position
;49://  bot head bot head score ping time name
;50://  
;51://  wins/losses are drawn on bot icon now
;52:
;53:static qboolean localClient; // true if local client has been displayed
;54:
;55:
;56:/*
;57:=================
;58:CG_DrawScoreboard
;59:=================
;60:*/
;61:static void CG_DrawClientScore(int y, score_t *score, float *color, float fade, qboolean largeFormat) {
line 68
;62:	char	string[64];
;63:	vec3_t	headAngles;
;64:	clientInfo_t *ci;
;65:	int iconx, headx;
;66:	vec4_t c;
;67:
;68:	if (score->client < 0 || score->client >= cgs.maxclients) {
ADDRLP4 104
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
LTI4 $76
ADDRLP4 104
INDIRI4
ADDRGP4 cgs+31504
INDIRI4
LTI4 $73
LABELV $76
line 69
;69:		Com_Printf("Bad score->client: %i\n", score->client);
ADDRGP4 $77
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 70
;70:		return;
ADDRGP4 $72
JUMPV
LABELV $73
line 73
;71:	}
;72:
;73:	ci = &cgs.clientinfo[score->client];
ADDRLP4 16
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 74
;74:	if (!ci->infoValid)
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $79
line 75
;75:		return;
ADDRGP4 $72
JUMPV
LABELV $79
line 77
;76:
;77:	iconx = SB_BOTICON_X + (SB_RATING_WIDTH / 2);
ADDRLP4 32
CNSTI4 80
ASGNI4
line 78
;78:	headx = SB_HEAD_X + (SB_RATING_WIDTH / 2);
ADDRLP4 100
CNSTI4 112
ASGNI4
line 80
;79:
;80:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 83
;81:
;82:	// draw the handicap or bot skill marker (unless player has flag)
;83:	if (ci->powerups & (1 << PW_NEUTRALFLAG)) {
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $81
line 84
;84:		if (largeFormat) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $83
line 85
;85:			CG_DrawFlagModel(iconx, y - (32 - BIGCHAR_HEIGHT) / 2, 32, 32, TEAM_FREE, qfalse);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 86
;86:		} else {
ADDRGP4 $82
JUMPV
LABELV $83
line 87
;87:			CG_DrawFlagModel(iconx, y, 16, 16, TEAM_FREE, qfalse);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 88
;88:		}
line 89
;89:	} else if (ci->powerups & (1 << PW_REDFLAG)) {
ADDRGP4 $82
JUMPV
LABELV $81
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $85
line 90
;90:		if (largeFormat) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $87
line 91
;91:			CG_DrawFlagModel(iconx, y - (32 - BIGCHAR_HEIGHT) / 2, 32, 32, TEAM_RED, qfalse);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 92
;92:		} else {
ADDRGP4 $86
JUMPV
LABELV $87
line 93
;93:			CG_DrawFlagModel(iconx, y, 16, 16, TEAM_RED, qfalse);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 94
;94:		}
line 95
;95:	} else if (ci->powerups & (1 << PW_BLUEFLAG)) {
ADDRGP4 $86
JUMPV
LABELV $85
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $89
line 96
;96:		if (largeFormat) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $91
line 97
;97:			CG_DrawFlagModel(iconx, y - (32 - BIGCHAR_HEIGHT) / 2, 32, 32, TEAM_BLUE, qfalse);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 98
;98:		} else {
ADDRGP4 $90
JUMPV
LABELV $91
line 99
;99:			CG_DrawFlagModel(iconx, y, 16, 16, TEAM_BLUE, qfalse);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 100
;100:		}
line 101
;101:	} else {
ADDRGP4 $90
JUMPV
LABELV $89
line 102
;102:		if (ci->botSkill > 0 && ci->botSkill <= 5) {
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
LEI4 $93
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 5
GTI4 $93
line 103
;103:			if (cg_drawIcons.integer) {
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $94
line 104
;104:				if (largeFormat) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $98
line 105
;105:					CG_DrawPic(iconx, y - (32 - BIGCHAR_HEIGHT) / 2, 32, 32, cgs.media.botSkillShaders[ci->botSkill - 1]);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146664+388-4
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 106
;106:				} else {
ADDRGP4 $94
JUMPV
LABELV $98
line 107
;107:					CG_DrawPic(iconx, y, 16, 16, cgs.media.botSkillShaders[ci->botSkill - 1]);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+146664+388-4
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 108
;108:				}
line 109
;109:			}
line 110
;110:		} else if (ci->handicap < 100) {
ADDRGP4 $94
JUMPV
LABELV $93
ADDRLP4 16
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 100
GEI4 $106
line 111
;111:			BG_sprintf(string, "%i", ci->handicap);
ADDRLP4 36
ARGP4
ADDRGP4 $108
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 112
;112:			if (cgs.gametype == GT_TOURNAMENT)
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 1
NEI4 $109
line 113
;113:				CG_DrawString(iconx, y - SMALLCHAR_HEIGHT / 2, string, color, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_FORCE_COLOR);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
ADDRGP4 $110
JUMPV
LABELV $109
line 115
;114:			else
;115:				CG_DrawString(iconx, y, string, color, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_FORCE_COLOR);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
LABELV $110
line 116
;116:		}
LABELV $106
LABELV $94
line 119
;117:
;118:		// draw the wins / losses
;119:		if (cgs.gametype == GT_TOURNAMENT) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 1
NEI4 $112
line 120
;120:			BG_sprintf(string, "%i/%i", ci->wins, ci->losses);
ADDRLP4 36
ARGP4
ADDRGP4 $115
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 121
;121:			if (ci->handicap < 100 && !ci->botSkill) {
ADDRLP4 16
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 100
GEI4 $116
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
NEI4 $116
line 122
;122:				CG_DrawString(iconx, y + SMALLCHAR_HEIGHT / 2, string, color, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_FORCE_COLOR);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
ADDI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 123
;123:			} else {
ADDRGP4 $117
JUMPV
LABELV $116
line 124
;124:				CG_DrawString(iconx, y, string, color, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, DS_FORCE_COLOR);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 125
;125:			}
LABELV $117
line 126
;126:		}
LABELV $112
line 127
;127:	}
LABELV $90
LABELV $86
LABELV $82
line 130
;128:
;129:	// draw the face
;130:	VectorClear(headAngles);
ADDRLP4 20
CNSTF4 0
ASGNF4
ADDRLP4 20+4
CNSTF4 0
ASGNF4
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 131
;131:	headAngles[YAW] = 180;
ADDRLP4 20+4
CNSTF4 1127481344
ASGNF4
line 132
;132:	if (largeFormat) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $121
line 133
;133:		CG_DrawHead(headx, y - (ICON_SIZE - BIGCHAR_HEIGHT) / 2, ICON_SIZE, ICON_SIZE,
ADDRLP4 100
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 16
SUBI4
CVIF4 4
ARGF4
CNSTF4 1111490560
ARGF4
CNSTF4 1111490560
ARGF4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 20
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 135
;134:			score->client, headAngles);
;135:	} else {
ADDRGP4 $122
JUMPV
LABELV $121
line 136
;136:		CG_DrawHead(headx, y, 16, 16, score->client, headAngles);
ADDRLP4 100
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 20
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 137
;137:	}
LABELV $122
line 140
;138:
;139:	// draw the score line
;140:	if (score->ping == -1) {
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 -1
NEI4 $123
line 141
;141:		BG_sprintf(string, " connecting");
ADDRLP4 36
ARGP4
ADDRGP4 $125
ARGP4
ADDRGP4 BG_sprintf
CALLI4
pop
line 142
;142:	} else if (ci->team == TEAM_SPECTATOR) {
ADDRGP4 $124
JUMPV
LABELV $123
ADDRLP4 16
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
NEI4 $126
line 143
;143:		BG_sprintf(string, " SPECT %3i %4i", score->ping, score->time);
ADDRLP4 36
ARGP4
ADDRGP4 $128
ARGP4
ADDRLP4 108
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 144
;144:	} else {
ADDRGP4 $127
JUMPV
LABELV $126
line 145
;145:		BG_sprintf(string, "%5i %4i %4i", score->score, score->ping, score->time);
ADDRLP4 36
ARGP4
ADDRGP4 $129
ARGP4
ADDRLP4 108
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 146
;146:	}
LABELV $127
LABELV $124
line 149
;147:
;148:	// highlight your position
;149:	if (score->client == cg.snap->ps.clientNum) {
ADDRFP4 4
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $130
line 153
;150:		float	hcolor[4];
;151:		int		rank;
;152:
;153:		localClient = qtrue;
ADDRGP4 localClient
CNSTI4 1
ASGNI4
line 155
;154:
;155:		if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $137
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $133
LABELV $137
line 156
;156:			|| cgs.gametype >= GT_TEAM) {
line 157
;157:			rank = -1;
ADDRLP4 124
CNSTI4 -1
ASGNI4
line 158
;158:		} else {
ADDRGP4 $134
JUMPV
LABELV $133
line 159
;159:			rank = cg.snap->ps.persistant[PERS_RANK] & ~RANK_TIED_FLAG;
ADDRLP4 124
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 160
;160:		}
LABELV $134
line 161
;161:		if (rank == 0) {
ADDRLP4 124
INDIRI4
CNSTI4 0
NEI4 $139
line 162
;162:			hcolor[0] = 0;
ADDRLP4 108
CNSTF4 0
ASGNF4
line 163
;163:			hcolor[1] = 0;
ADDRLP4 108+4
CNSTF4 0
ASGNF4
line 164
;164:			hcolor[2] = 0.7f;
ADDRLP4 108+8
CNSTF4 1060320051
ASGNF4
line 165
;165:		} else if (rank == 1) {
ADDRGP4 $140
JUMPV
LABELV $139
ADDRLP4 124
INDIRI4
CNSTI4 1
NEI4 $143
line 166
;166:			hcolor[0] = 0.7f;
ADDRLP4 108
CNSTF4 1060320051
ASGNF4
line 167
;167:			hcolor[1] = 0;
ADDRLP4 108+4
CNSTF4 0
ASGNF4
line 168
;168:			hcolor[2] = 0;
ADDRLP4 108+8
CNSTF4 0
ASGNF4
line 169
;169:		} else if (rank == 2) {
ADDRGP4 $144
JUMPV
LABELV $143
ADDRLP4 124
INDIRI4
CNSTI4 2
NEI4 $147
line 170
;170:			hcolor[0] = 0.7f;
ADDRLP4 108
CNSTF4 1060320051
ASGNF4
line 171
;171:			hcolor[1] = 0.7f;
ADDRLP4 108+4
CNSTF4 1060320051
ASGNF4
line 172
;172:			hcolor[2] = 0;
ADDRLP4 108+8
CNSTF4 0
ASGNF4
line 173
;173:		} else {
ADDRGP4 $148
JUMPV
LABELV $147
line 174
;174:			hcolor[0] = 0.7f;
ADDRLP4 108
CNSTF4 1060320051
ASGNF4
line 175
;175:			hcolor[1] = 0.7f;
ADDRLP4 108+4
CNSTF4 1060320051
ASGNF4
line 176
;176:			hcolor[2] = 0.7f;
ADDRLP4 108+8
CNSTF4 1060320051
ASGNF4
line 177
;177:		}
LABELV $148
LABELV $144
LABELV $140
line 179
;178:
;179:		hcolor[3] = fade * 0.7;
ADDRLP4 108+12
ADDRFP4 12
INDIRF4
CNSTF4 1060320051
MULF4
ASGNF4
line 180
;180:		CG_FillRect(SB_SCORELINE_X + BIGCHAR_WIDTH + (SB_RATING_WIDTH / 2), y,
CNSTF4 1127219200
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1139277824
ARGF4
CNSTF4 1099431936
ARGF4
ADDRLP4 108
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 183
;181:			640 - SB_SCORELINE_X - BIGCHAR_WIDTH - (SB_RATING_WIDTH / 2),
;182:			BIGCHAR_HEIGHT + 1, hcolor);
;183:	}
LABELV $130
line 185
;184:
;185:	VectorSet(c, 1, 1, 1); c[3] = fade;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
ASGNF4
line 187
;186:	// score
;187:	CG_DrawString(SB_SCORELINE_X + (SB_RATING_WIDTH / 2), y, string, c, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW);
CNSTF4 1126170624
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 189
;188:	// name
;189:	CG_DrawString(SB_SCORELINE_X + (SB_RATING_WIDTH / 2) + BIGCHAR_WIDTH * 16, y, ci->name, c, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_PROPORTIONAL);
CNSTF4 1137704960
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 192
;190:
;191:	// add the "ready" marker for intermission exiting
;192:	if (cg.snap->ps.stats[STAT_CLIENTS_READY] & (1 << score->client)) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 252
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRP4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $157
line 193
;193:		CG_DrawString(iconx, y, "READY", color, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_FORCE_COLOR);
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 $160
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 194
;194:	}
LABELV $157
line 197
;195:
;196:	// set bounds for scoreboard clicks
;197:	score->minx = SB_SCORELINE_X;
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 112
ASGNI4
line 198
;198:	score->maxx = SCREEN_WIDTH - 8;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 632
ASGNI4
line 199
;199:	score->miny = y;
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 200
;200:	score->maxy = y + BIGCHAR_HEIGHT;
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 201
;201:	if (largeFormat) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $161
line 202
;202:		score->miny -= (ICON_SIZE - BIGCHAR_HEIGHT) / 2;
ADDRLP4 108
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 16
SUBI4
ASGNI4
line 203
;203:		score->maxy += (ICON_SIZE - BIGCHAR_HEIGHT) / 2;
ADDRLP4 112
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 204
;204:	}
LABELV $161
line 205
;205:}
LABELV $72
endproc CG_DrawClientScore 128 32
export CG_ScoreboardClick
proc CG_ScoreboardClick 20 8
line 213
;206:
;207:
;208:/*
;209:=================
;210:CG_ScoreboardClick
;211:=================
;212:*/
;213:void CG_ScoreboardClick(void) {
line 217
;214:	score_t *score;
;215:	int i;
;216:
;217:	if (cg.intermissionStarted)
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $164
line 218
;218:		return;
ADDRGP4 $163
JUMPV
LABELV $164
line 220
;219:
;220:	if (!cg.snap || cg.snap->ps.pm_type == PM_INTERMISSION)
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $171
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 5
NEI4 $167
LABELV $171
line 221
;221:		return;
ADDRGP4 $163
JUMPV
LABELV $167
line 223
;222:
;223:	score = cg.scores;
ADDRLP4 0
ADDRGP4 cg+110492
ASGNP4
line 224
;224:	for (i = 0; i < cg.numScores; i++, score++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $176
JUMPV
LABELV $173
line 225
;225:		if (score->team >= TEAM_SPECTATOR) {
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 3
LTI4 $178
line 226
;226:			continue;
ADDRGP4 $174
JUMPV
LABELV $178
line 228
;227:		}
;228:		if (cgs.cursorX < score->minx || cgs.cursorX > score->maxx)
ADDRGP4 cgs+146612
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
LTI4 $184
ADDRGP4 cgs+146612
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
LEI4 $180
LABELV $184
line 229
;229:			continue;
ADDRGP4 $174
JUMPV
LABELV $180
line 230
;230:		if (cgs.cursorY < score->miny || cgs.cursorY > score->maxy)
ADDRGP4 cgs+146616
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
LTI4 $189
ADDRGP4 cgs+146616
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
LEI4 $185
LABELV $189
line 231
;231:			continue;
ADDRGP4 $174
JUMPV
LABELV $185
line 232
;232:		if (!cgs.clientinfo[score->client].infoValid) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
INDIRI4
CNSTI4 0
NEI4 $190
line 233
;233:			continue;
ADDRGP4 $174
JUMPV
LABELV $190
line 236
;234:		}
;235:
;236:		if (!cg.demoPlayback) {
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
NEI4 $193
line 237
;237:			trap_SendClientCommand(va("follow %i", score->client));
ADDRGP4 $196
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 238
;238:		}
LABELV $193
line 239
;239:	}
LABELV $174
line 224
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
LABELV $176
ADDRLP4 4
INDIRI4
ADDRGP4 cg+110476
INDIRI4
LTI4 $173
line 240
;240:}
LABELV $163
endproc CG_ScoreboardClick 20 8
proc CG_TeamScoreboard 48 20
line 248
;241:
;242:
;243:/*
;244:=================
;245:CG_TeamScoreboard
;246:=================
;247:*/
;248:static int CG_TeamScoreboard(int y, team_t team, float fade, int maxClients, int lineHeight) {
line 255
;249:	int		i;
;250:	score_t *score;
;251:	float	color[4];
;252:	int		count;
;253:	clientInfo_t *ci;
;254:
;255:	color[0] = color[1] = color[2] = 1.0;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
ADDRLP4 16+8
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 32
INDIRF4
ASGNF4
line 256
;256:	color[3] = fade;
ADDRLP4 16+12
ADDRFP4 8
INDIRF4
ASGNF4
line 258
;257:
;258:	count = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 259
;259:	for (i = 0; i < cg.numScores && count < maxClients; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $204
JUMPV
LABELV $201
line 260
;260:		score = &cg.scores[i];
ADDRLP4 8
ADDRLP4 4
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ASGNP4
line 261
;261:		ci = &cgs.clientinfo[score->client];
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 263
;262:
;263:		if (team != ci->team || !ci->infoValid) {
ADDRFP4 4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $210
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $208
LABELV $210
line 264
;264:			continue;
ADDRGP4 $202
JUMPV
LABELV $208
line 267
;265:		}
;266:
;267:		CG_DrawClientScore(y + lineHeight * count, score, color, fade, lineHeight == SB_NORMAL_HEIGHT);
ADDRLP4 44
ADDRFP4 16
INDIRI4
ASGNI4
ADDRFP4 0
INDIRI4
ADDRLP4 44
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRFP4 8
INDIRF4
ARGF4
ADDRLP4 44
INDIRI4
CNSTI4 40
NEI4 $212
ADDRLP4 40
CNSTI4 1
ASGNI4
ADDRGP4 $213
JUMPV
LABELV $212
ADDRLP4 40
CNSTI4 0
ASGNI4
LABELV $213
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 CG_DrawClientScore
CALLV
pop
line 269
;268:
;269:		count++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 270
;270:	}
LABELV $202
line 259
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $204
ADDRLP4 4
INDIRI4
ADDRGP4 cg+110476
INDIRI4
GEI4 $214
ADDRLP4 0
INDIRI4
ADDRFP4 12
INDIRI4
LTI4 $201
LABELV $214
line 272
;271:
;272:	return count;
ADDRLP4 0
INDIRI4
RETI4
LABELV $197
endproc CG_TeamScoreboard 48 20
export CG_DrawOldScoreboard
proc CG_DrawOldScoreboard 52 32
line 282
;273:}
;274:
;275:/*
;276:=================
;277:CG_DrawScoreboard
;278:
;279:Draw the normal in-game scoreboard
;280:=================
;281:*/
;282:qboolean CG_DrawOldScoreboard(void) {
line 292
;283:	int		y, i, n1, n2;
;284:	float	fade;
;285:	float *fadeColor;
;286:	char *s;
;287:	int maxClients;
;288:	int lineHeight;
;289:	int topBorderSize, bottomBorderSize;
;290:
;291:	// don't draw anything if the menu or console is up
;292:	if (cg_paused.integer) {
ADDRGP4 cg_paused+12
INDIRI4
CNSTI4 0
EQI4 $216
line 293
;293:		cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 294
;294:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $215
JUMPV
LABELV $216
line 297
;295:	}
;296:
;297:	if (cgs.gametype == GT_SINGLE_PLAYER && cg.predictedPlayerState.pm_type == PM_INTERMISSION) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 2
NEI4 $220
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 5
NEI4 $220
line 298
;298:		cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 299
;299:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $215
JUMPV
LABELV $220
line 303
;300:	}
;301:
;302:	// don't draw scoreboard during death while warmup up
;303:	if (cg.warmup && !cg.showScores) {
ADDRGP4 cg+125752
INDIRI4
CNSTI4 0
EQI4 $226
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $226
line 304
;304:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $215
JUMPV
LABELV $226
line 307
;305:	}
;306:
;307:	if (cg.showScores || cg.predictedPlayerState.pm_type == PM_DEAD ||
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $238
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 3
EQI4 $238
ADDRGP4 cg+107636+4
INDIRI4
CNSTI4 5
NEI4 $230
LABELV $238
line 308
;308:		cg.predictedPlayerState.pm_type == PM_INTERMISSION) {
line 309
;309:		fade = 1.0;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 310
;310:		fadeColor = colorWhite;
ADDRLP4 16
ADDRGP4 colorWhite
ASGNP4
line 311
;311:	} else {
ADDRGP4 $231
JUMPV
LABELV $230
line 312
;312:		fadeColor = CG_FadeColor(cg.scoreFadeTime, FADE_TIME);
ADDRGP4 cg+115364
INDIRI4
ARGI4
CNSTI4 200
ARGI4
ADDRLP4 44
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 44
INDIRP4
ASGNP4
line 314
;313:
;314:		if (!fadeColor) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $240
line 316
;315:			// next time scoreboard comes up, don't print killer
;316:			cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 317
;317:			cg.killerName[0] = 0;
ADDRGP4 cg+115368
CNSTI1 0
ASGNI1
line 318
;318:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $215
JUMPV
LABELV $240
line 320
;319:		}
;320:		fade = fadeColor[3];
ADDRLP4 12
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 321
;321:	}
LABELV $231
line 324
;322:
;323:	// fragged by ... line
;324:	if (cg.killerName[0]) {
ADDRGP4 cg+115368
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $244
line 325
;325:		s = va("Fragged by %s", cg.killerName);
ADDRGP4 $247
ARGP4
ADDRGP4 cg+115368
ARGP4
ADDRLP4 44
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 44
INDIRP4
ASGNP4
line 326
;326:		CG_DrawString(320, 40, s, fadeColor, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
CNSTF4 1109393408
ARGF4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 327
;327:	}
LABELV $244
line 330
;328:
;329:	// current rank
;330:	if (cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
GEI4 $249
line 331
;331:		if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $250
line 332
;332:			s = va("%s place with %i",
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_PlaceString
CALLP4
ASGNP4
ADDRGP4 $255
ARGP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 48
INDIRP4
ASGNP4
line 336
;333:				CG_PlaceString(cg.snap->ps.persistant[PERS_RANK] + 1),
;334:				cg.snap->ps.persistant[PERS_SCORE]);
;335:
;336:			CG_DrawString(320, 60, s, fadeColor, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
CNSTF4 1114636288
ARGF4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 337
;337:		}
line 338
;338:	} else {
ADDRGP4 $250
JUMPV
LABELV $249
line 339
;339:		if (cg.teamScores[0] == cg.teamScores[1]) {
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
NEI4 $258
line 340
;340:			s = va("Teams are tied at %i", cg.teamScores[0]);
ADDRGP4 $263
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 44
INDIRP4
ASGNP4
line 341
;341:		} else if (cg.teamScores[0] >= cg.teamScores[1]) {
ADDRGP4 $259
JUMPV
LABELV $258
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
LTI4 $265
line 342
;342:			s = va("Red leads %i to %i", cg.teamScores[0], cg.teamScores[1]);
ADDRGP4 $270
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 44
INDIRP4
ASGNP4
line 343
;343:		} else {
ADDRGP4 $266
JUMPV
LABELV $265
line 344
;344:			s = va("Blue leads %i to %i", cg.teamScores[1], cg.teamScores[0]);
ADDRGP4 $274
ARGP4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 44
INDIRP4
ASGNP4
line 345
;345:		}
LABELV $266
LABELV $259
line 347
;346:
;347:		CG_DrawString(320, 60, s, fadeColor, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
CNSTF4 1114636288
ARGF4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 348
;348:	}
LABELV $250
line 351
;349:
;350:	// scoreboard
;351:	y = SB_HEADER;
ADDRLP4 4
CNSTI4 86
ASGNI4
line 353
;352:
;353:	CG_DrawPic(SB_SCORE_X + (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardScore);
CNSTF4 1127219200
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+146664+588
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 354
;354:	CG_DrawPic(SB_PING_X - (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardPing);
CNSTF4 1132724224
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+146664+584
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 355
;355:	CG_DrawPic(SB_TIME_X - (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardTime);
CNSTF4 1135345664
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+146664+592
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 356
;356:	CG_DrawPic(SB_NAME_X - (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardName);
CNSTF4 1137704960
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+146664+580
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 358
;357:
;358:	y = SB_TOP;
ADDRLP4 4
CNSTI4 118
ASGNI4
line 361
;359:
;360:	// If there are more than SB_MAXCLIENTS_NORMAL, use the interleaved scores
;361:	if (cg.numScores > SB_MAXCLIENTS_NORMAL) {
ADDRGP4 cg+110476
INDIRI4
CNSTI4 7
LEI4 $286
line 362
;362:		maxClients = SB_MAXCLIENTS_INTER;
ADDRLP4 24
CNSTI4 17
ASGNI4
line 363
;363:		lineHeight = SB_INTER_HEIGHT;
ADDRLP4 8
CNSTI4 16
ASGNI4
line 364
;364:		topBorderSize = 8;
ADDRLP4 36
CNSTI4 8
ASGNI4
line 365
;365:		bottomBorderSize = 16;
ADDRLP4 40
CNSTI4 16
ASGNI4
line 366
;366:	} else {
ADDRGP4 $287
JUMPV
LABELV $286
line 367
;367:		maxClients = SB_MAXCLIENTS_NORMAL;
ADDRLP4 24
CNSTI4 7
ASGNI4
line 368
;368:		lineHeight = SB_NORMAL_HEIGHT;
ADDRLP4 8
CNSTI4 40
ASGNI4
line 369
;369:		topBorderSize = 16;
ADDRLP4 36
CNSTI4 16
ASGNI4
line 370
;370:		bottomBorderSize = 16;
ADDRLP4 40
CNSTI4 16
ASGNI4
line 371
;371:	}
LABELV $287
line 373
;372:
;373:	localClient = qfalse;
ADDRGP4 localClient
CNSTI4 0
ASGNI4
line 375
;374:
;375:	if (cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $289
line 379
;376:		//
;377:		// teamplay scoreboard
;378:		//
;379:		y += lineHeight / 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
ASGNI4
line 381
;380:
;381:		if (cg.teamScores[0] >= cg.teamScores[1]) {
ADDRGP4 cg+110484
INDIRI4
ADDRGP4 cg+110484+4
INDIRI4
LTI4 $292
line 382
;382:			n1 = CG_TeamScoreboard(y, TEAM_RED, fade, maxClients, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 44
INDIRI4
ASGNI4
line 383
;383:			CG_DrawTeamBackground(0, y - topBorderSize, 640, n1 * lineHeight + bottomBorderSize, 0.33f, TEAM_RED);
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 20
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 40
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 384
;384:			y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 385
;385:			maxClients -= n1;
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 386
;386:			n2 = CG_TeamScoreboard(y, TEAM_BLUE, fade, maxClients, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 387
;387:			CG_DrawTeamBackground(0, y - topBorderSize, 640, n2 * lineHeight + bottomBorderSize, 0.33f, TEAM_BLUE);
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 40
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 388
;388:			y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 389
;389:			maxClients -= n2;
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 390
;390:		} else {
ADDRGP4 $293
JUMPV
LABELV $292
line 391
;391:			n1 = CG_TeamScoreboard(y, TEAM_BLUE, fade, maxClients, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 44
INDIRI4
ASGNI4
line 392
;392:			CG_DrawTeamBackground(0, y - topBorderSize, 640, n1 * lineHeight + bottomBorderSize, 0.33f, TEAM_BLUE);
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 20
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 40
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 393
;393:			y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 394
;394:			maxClients -= n1;
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 395
;395:			n2 = CG_TeamScoreboard(y, TEAM_RED, fade, maxClients, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 396
;396:			CG_DrawTeamBackground(0, y - topBorderSize, 640, n2 * lineHeight + bottomBorderSize, 0.33f, TEAM_RED);
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 40
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 397
;397:			y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 398
;398:			maxClients -= n2;
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 399
;399:		}
LABELV $293
line 400
;400:		n1 = CG_TeamScoreboard(y, TEAM_SPECTATOR, fade, maxClients, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 44
INDIRI4
ASGNI4
line 401
;401:		y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 403
;402:
;403:	} else {
ADDRGP4 $290
JUMPV
LABELV $289
line 407
;404:		//
;405:		// free for all scoreboard
;406:		//
;407:		n1 = CG_TeamScoreboard(y, TEAM_FREE, fade, maxClients, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 44
INDIRI4
ASGNI4
line 408
;408:		y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 409
;409:		n2 = CG_TeamScoreboard(y, TEAM_SPECTATOR, fade, maxClients - n1, lineHeight);
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 410
;410:		y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 411
;411:	}
LABELV $290
line 413
;412:
;413:	if (!localClient) {
ADDRGP4 localClient
INDIRI4
CNSTI4 0
NEI4 $297
line 415
;414:		// draw local client at the bottom
;415:		for (i = 0; i < cg.numScores; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $302
JUMPV
LABELV $299
line 416
;416:			if (cg.scores[i].client == cg.snap->ps.clientNum) {
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $304
line 417
;417:				CG_DrawClientScore(y, &cg.scores[i], fadeColor, fade, lineHeight == SB_NORMAL_HEIGHT);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 40
NEI4 $310
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRGP4 $311
JUMPV
LABELV $310
ADDRLP4 44
CNSTI4 0
ASGNI4
LABELV $311
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_DrawClientScore
CALLV
pop
line 418
;418:				break;
ADDRGP4 $301
JUMPV
LABELV $304
line 420
;419:			}
;420:		}
LABELV $300
line 415
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $302
ADDRLP4 0
INDIRI4
ADDRGP4 cg+110476
INDIRI4
LTI4 $299
LABELV $301
line 421
;421:	}
LABELV $297
line 424
;422:
;423:	// load any models that have been deferred
;424:	if (++cg.deferredPlayerLoading > 10) {
ADDRLP4 44
ADDRGP4 cg+16
ASGNP4
ADDRLP4 48
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRP4
ADDRLP4 48
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 10
LEI4 $312
line 425
;425:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 426
;426:	}
LABELV $312
line 428
;427:
;428:	return qtrue;
CNSTI4 1
RETI4
LABELV $215
endproc CG_DrawOldScoreboard 52 32
export CG_DrawOldTourneyScoreboard
proc CG_DrawOldTourneyScoreboard 60 32
line 441
;429:}
;430:
;431://================================================================================
;432:
;433:
;434:/*
;435:=================
;436:CG_DrawTourneyScoreboard
;437:
;438:Draw the oversize scoreboard for tournements
;439:=================
;440:*/
;441:void CG_DrawOldTourneyScoreboard(void) {
line 450
;442:	const char *s;
;443:	vec4_t			color;
;444:	int				min, sec;
;445:	clientInfo_t *ci;
;446:	int				y;
;447:	int				i;
;448:
;449:	// request more scores regularly
;450:	if (cg.scoresRequestTime + 2000 < cg.time) {
ADDRGP4 cg+110472
INDIRI4
CNSTI4 2000
ADDI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $316
line 451
;451:		cg.scoresRequestTime = cg.time;
ADDRGP4 cg+110472
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 452
;452:		trap_SendClientCommand("score");
ADDRGP4 $322
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 453
;453:	}
LABELV $316
line 456
;454:
;455:	// draw the dialog background
;456:	color[0] = color[1] = color[2] = 0.2f;
ADDRLP4 40
CNSTF4 1045220557
ASGNF4
ADDRLP4 16+8
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 40
INDIRF4
ASGNF4
line 457
;457:	color[3] = 1;
ADDRLP4 16+12
CNSTF4 1065353216
ASGNF4
line 458
;458:	CG_FillScreen(color);
ADDRLP4 16
ARGP4
ADDRGP4 CG_FillScreen
CALLV
pop
line 461
;459:
;460:	// print the mesage of the day
;461:	s = CG_ConfigString(CS_MOTD);
CNSTI4 4
ARGI4
ADDRLP4 44
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 44
INDIRP4
ASGNP4
line 462
;462:	if (!s[0]) {
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $326
line 463
;463:		s = "Scoreboard";
ADDRLP4 8
ADDRGP4 $328
ASGNP4
line 464
;464:	}
LABELV $326
line 467
;465:
;466:	// print optional title
;467:	CG_DrawString(320, 8, s, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW | DS_FORCE_COLOR | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
CNSTF4 1090519040
ARGF4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 15
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 470
;468:
;469:	// print server time
;470:	sec = cg.time / 1000;
ADDRLP4 32
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 471
;471:	min = sec / 60;
ADDRLP4 36
ADDRLP4 32
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 472
;472:	sec %= 60;
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 60
MODI4
ASGNI4
line 474
;473:
;474:	s = va("%i:%02i", min, sec);
ADDRGP4 $330
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 48
INDIRP4
ASGNP4
line 476
;475:
;476:	CG_DrawString(320, 64, s, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW | DS_FORCE_COLOR | DS_CENTER | DS_PROPORTIONAL);
CNSTF4 1134559232
ARGF4
CNSTF4 1115684864
ARGF4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 15
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 480
;477:
;478:	// print the two scores
;479:
;480:	y = 160;
ADDRLP4 4
CNSTI4 160
ASGNI4
line 481
;481:	if (cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 3
LTI4 $331
line 485
;482:		//
;483:		// teamplay scoreboard
;484:		//
;485:		CG_DrawString(8, y, "Red Team", colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW);
CNSTF4 1090519040
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 $334
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 486
;486:		s = va("%i", cg.teamScores[0]);
ADDRGP4 $108
ARGP4
ADDRGP4 cg+110484
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 487
;487:		CG_DrawString(632, y, s, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW | DS_RIGHT);
CNSTF4 1142816768
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 17
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 489
;488:
;489:		y += 64;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 64
ADDI4
ASGNI4
line 491
;490:
;491:		CG_DrawString(8, y, "Blue Team", colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW);
CNSTF4 1090519040
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 $336
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 492
;492:		s = va("%i", cg.teamScores[1]);
ADDRGP4 $108
ARGP4
ADDRGP4 cg+110484+4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
ASGNP4
line 493
;493:		CG_DrawString(632, y, s, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW | DS_RIGHT);
CNSTF4 1142816768
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 17
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 495
;494:
;495:	} else {
ADDRGP4 $332
JUMPV
LABELV $331
line 499
;496:		//
;497:		// free for all scoreboard
;498:		//
;499:		for (i = 0; i < MAX_CLIENTS; i++) {
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $339
line 500
;500:			ci = &cgs.clientinfo[i];
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 501
;501:			if (!ci->infoValid) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $344
line 502
;502:				continue;
ADDRGP4 $340
JUMPV
LABELV $344
line 504
;503:			}
;504:			if (ci->team != TEAM_FREE) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $346
line 505
;505:				continue;
ADDRGP4 $340
JUMPV
LABELV $346
line 508
;506:			}
;507:
;508:			CG_DrawString(8, y, ci->name, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW | DS_FORCE_COLOR | DS_PROPORTIONAL);
CNSTF4 1090519040
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 509
;509:			s = va("%i", ci->score);
ADDRGP4 $108
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 510
;510:			CG_DrawString(632, y, s, colorWhite, GIANT_WIDTH, GIANT_HEIGHT, 0, DS_SHADOW | DS_RIGHT);
CNSTF4 1142816768
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1111490560
ARGF4
CNSTI4 0
ARGI4
CNSTI4 17
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 511
;511:			y += 64;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 64
ADDI4
ASGNI4
line 512
;512:		}
LABELV $340
line 499
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 64
LTI4 $339
line 513
;513:	}
LABELV $332
line 514
;514:}
LABELV $315
endproc CG_DrawOldTourneyScoreboard 60 32
bss
align 4
LABELV localClient
skip 4
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $336
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $334
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $330
byte 1 37
byte 1 105
byte 1 58
byte 1 37
byte 1 48
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $328
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 98
byte 1 111
byte 1 97
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $322
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $274
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $270
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $263
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $255
byte 1 37
byte 1 115
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 99
byte 1 101
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $247
byte 1 70
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $196
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $160
byte 1 82
byte 1 69
byte 1 65
byte 1 68
byte 1 89
byte 1 0
align 1
LABELV $129
byte 1 37
byte 1 53
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 0
align 1
LABELV $128
byte 1 32
byte 1 83
byte 1 80
byte 1 69
byte 1 67
byte 1 84
byte 1 32
byte 1 37
byte 1 51
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 0
align 1
LABELV $125
byte 1 32
byte 1 99
byte 1 111
byte 1 110
byte 1 110
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $115
byte 1 37
byte 1 105
byte 1 47
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $108
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $77
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 45
byte 1 62
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
