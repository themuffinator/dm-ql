code
proc CG_MachineGunEjectBrass 136 8
file "..\..\..\..\code\cgame\cg_weapons.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_weapons.c -- events and effects dealing with weapons
;4:#include "cg_local.h"
;5:
;6:/*
;7:==========================
;8:CG_MachineGunEjectBrass
;9:==========================
;10:*/
;11:static void CG_MachineGunEjectBrass(centity_t *cent) {
line 16
;12:	localEntity_t *le;
;13:	refEntity_t *re;
;14:	vec3_t			velocity, xvelocity;
;15:	vec3_t			offset, xoffset;
;16:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 19
;17:	vec3_t			v[3];
;18:
;19:	if (cg_brassTime.integer <= 0) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $73
line 20
;20:		return;
ADDRGP4 $72
JUMPV
LABELV $73
line 23
;21:	}
;22:
;23:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 24
;24:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 26
;25:
;26:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 27
;27:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1109393408
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 28
;28:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 30
;29:
;30:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 31
;31:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 32
;32:	le->endTime = le->startTime + cg_brassTime.integer + (cg_brassTime.integer / 4) * random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 34
;33:
;34:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 35
;35:	le->pos.trTime = cg.time - (rand() & 15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 37
;36:
;37:	AnglesToAxis(cent->lerpAngles, v);
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 39
;38:
;39:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 40
;40:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 41
;41:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 43
;42:
;43:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 44
;44:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 45
;45:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 46
;46:	VectorAdd(cent->lerpOrigin, xoffset, re->origin);
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 48
;47:
;48:	VectorCopy(re->origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 50
;49:
;50:	if (CG_PointContents(re->origin, -1) & CONTENTS_WATER) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $106
line 51
;51:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 52
;52:	}
LABELV $106
line 54
;53:
;54:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 55
;55:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 56
;56:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 57
;57:	VectorScale(xvelocity, waterScale, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 59
;58:
;59:	AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 60
;60:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+146664+212
INDIRI4
ASGNI4
line 62
;61:
;62:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRLP4 92
INDIRF4
CNSTF4 1053609165
MULF4
ASGNF4
line 64
;63:
;64:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 65
;65:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 66
;66:	le->angles.trBase[0] = rand() & 31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 67
;67:	le->angles.trBase[1] = rand() & 31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 68
;68:	le->angles.trBase[2] = rand() & 31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 69
;69:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 70
;70:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 71
;71:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 73
;72:
;73:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 74
;74:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 75
;75:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 76
;76:}
LABELV $72
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 83
;77:
;78:/*
;79:==========================
;80:CG_ShotgunEjectBrass
;81:==========================
;82:*/
;83:static void CG_ShotgunEjectBrass(centity_t *cent) {
line 91
;84:	localEntity_t *le;
;85:	refEntity_t *re;
;86:	vec3_t			velocity, xvelocity;
;87:	vec3_t			offset, xoffset;
;88:	vec3_t			v[3];
;89:	int				i;
;90:
;91:	if (cg_brassTime.integer <= 0) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $134
line 92
;92:		return;
ADDRGP4 $133
JUMPV
LABELV $134
line 95
;93:	}
;94:
;95:	for (i = 0; i < 2; i++) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $137
line 96
;96:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 98
;97:
;98:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 99
;99:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 101
;100:
;101:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1114636288
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 102
;102:		if (i == 0) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $141
line 103
;103:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 104
;104:		} else {
ADDRGP4 $142
JUMPV
LABELV $141
line 105
;105:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 106
;106:		}
LABELV $142
line 107
;107:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 109
;108:
;109:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 110
;110:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 111
;111:		le->endTime = le->startTime + cg_brassTime.integer * 3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 3
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 113
;112:
;113:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 114
;114:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 116
;115:
;116:		AnglesToAxis(cent->lerpAngles, v);
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 118
;117:
;118:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 119
;119:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 120
;120:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 122
;121:
;122:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 123
;123:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 124
;124:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 125
;125:		VectorAdd(cent->lerpOrigin, xoffset, re->origin);
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 126
;126:		VectorCopy(re->origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 127
;127:		if (CG_PointContents(re->origin, -1) & CONTENTS_WATER) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $174
line 128
;128:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 129
;129:		}
LABELV $174
line 131
;130:
;131:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 132
;132:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 133
;133:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 134
;134:		VectorScale(xvelocity, waterScale, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 136
;135:
;136:		AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 137
;137:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+146664+216
INDIRI4
ASGNI4
line 138
;138:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 140
;139:
;140:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 141
;141:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 142
;142:		le->angles.trBase[0] = rand() & 31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 143
;143:		le->angles.trBase[1] = rand() & 31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 144
;144:		le->angles.trBase[2] = rand() & 31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 145
;145:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 146
;146:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 147
;147:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 149
;148:
;149:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 150
;150:		le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 151
;151:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 152
;152:	}
LABELV $138
line 95
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $137
line 153
;153:}
LABELV $133
endproc CG_ShotgunEjectBrass 136 8
proc CG_NailgunEjectBrass 96 48
line 161
;154:
;155:
;156:/*
;157:==========================
;158:CG_NailgunEjectBrass
;159:==========================
;160:*/
;161:static void CG_NailgunEjectBrass(centity_t *cent) {
line 169
;162:	localEntity_t *smoke;
;163:	vec3_t			origin;
;164:	vec3_t			v[3];
;165:	vec3_t			offset;
;166:	vec3_t			xoffset;
;167:	vec3_t			up;
;168:
;169:	AnglesToAxis(cent->lerpAngles, v);
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 171
;170:
;171:	offset[0] = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 172
;172:	offset[1] = -12;
ADDRLP4 0+4
CNSTF4 3242196992
ASGNF4
line 173
;173:	offset[2] = 24;
ADDRLP4 0+8
CNSTF4 1103101952
ASGNF4
line 175
;174:
;175:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 48
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 176
;176:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 48+4
ADDRLP4 0
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 177
;177:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 48+8
ADDRLP4 0
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 178
;178:	VectorAdd(cent->lerpOrigin, xoffset, origin);
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
ADDRLP4 88
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+4
ADDRLP4 88
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 48+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+8
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 48+8
INDIRF4
ADDF4
ASGNF4
line 180
;179:
;180:	VectorSet(up, 0, 0, 64);
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 72+4
CNSTF4 0
ASGNF4
ADDRLP4 72+8
CNSTF4 1115684864
ASGNF4
line 182
;181:
;182:	smoke = CG_SmokePuff(origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader);
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1143930880
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+146664+308
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 92
INDIRP4
ASGNP4
line 184
;183:	// use the optimized local entity add
;184:	smoke->leType = LE_SCALE_FADE;
ADDRLP4 84
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 185
;185:}
LABELV $201
endproc CG_NailgunEjectBrass 96 48
export CG_RailTrail
proc CG_RailTrail 608 16
line 193
;186:
;187:
;188:/*
;189:==========================
;190:CG_RailTrail
;191:==========================
;192:*/
;193:void CG_RailTrail(const clientInfo_t *ci, const vec3_t start, const vec3_t end) {
line 205
;194:	vec3_t axis[36], move, move2, vec, temp;
;195:	float  len;
;196:	int    i, j, skip;
;197:
;198:	localEntity_t *le;
;199:	refEntity_t *re;
;200:
;201:#define RADIUS   4
;202:#define ROTATION 1
;203:#define SPACING  5
;204:
;205:	le = CG_AllocLocalEntity();
ADDRLP4 504
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 504
INDIRP4
ASGNP4
line 206
;206:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 208
;207:
;208:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 209
;209:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 210
;210:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 211
;211:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 213
;212:
;213:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $237
line 214
;214:		re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $238
JUMPV
LABELV $237
line 216
;215:	else
;216:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $238
line 218
;217:
;218:	re->reType = RT_RAIL_CORE;
ADDRLP4 24
INDIRP4
CNSTI4 4
ASGNI4
line 219
;219:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+146664+224
INDIRI4
ASGNI4
line 221
;220:
;221:	VectorCopy(start, re->origin);
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 222
;222:	VectorCopy(end, re->oldorigin);
ADDRLP4 24
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 224
;223:
;224:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 516
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 520
CNSTF4 1325400064
ASGNF4
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
LTF4 $244
ADDRLP4 512
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $245
JUMPV
LABELV $244
ADDRLP4 512
ADDRLP4 516
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $245
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 512
INDIRU4
CVUU1 4
ASGNU1
line 225
;225:	re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 528
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 532
CNSTF4 1325400064
ASGNF4
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
LTF4 $247
ADDRLP4 524
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $248
JUMPV
LABELV $247
ADDRLP4 524
ADDRLP4 528
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $248
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 524
INDIRU4
CVUU1 4
ASGNU1
line 226
;226:	re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 540
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 544
CNSTF4 1325400064
ASGNF4
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
LTF4 $250
ADDRLP4 536
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $251
JUMPV
LABELV $250
ADDRLP4 536
ADDRLP4 540
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $251
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 536
INDIRU4
CVUU1 4
ASGNU1
line 227
;227:	re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 229
;228:
;229:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 230
;230:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 231
;231:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 232
;232:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 234
;233:
;234:	AxisClear(re->axis);
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 236
;235:
;236:	if (cg_oldRail.integer != 0) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $252
line 240
;237:		// nudge down a bit so it isn't exactly in center
;238:		//re->origin[2] -= 8;
;239:		//re->oldorigin[2] -= 8;
;240:		return;
ADDRGP4 $233
JUMPV
LABELV $252
line 244
;241:	}
;242:
;243:	//start[2] -= 4;
;244:	VectorCopy(start, move);
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 245
;245:	VectorSubtract(end, start, vec);
ADDRLP4 548
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 552
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 548
INDIRP4
INDIRF4
ADDRLP4 552
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 548
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 552
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 246
;246:	len = VectorNormalize(vec);
ADDRLP4 28
ARGP4
ADDRLP4 556
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 556
INDIRF4
ASGNF4
line 247
;247:	PerpendicularVector(temp, vec);
ADDRLP4 488
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 249
;248:
;249:	for (i = 0; i < 36; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $257
line 250
;250:		RotatePointAroundVector(axis[i], vec, temp, i * 10); //banshee 2.4 was 10
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 488
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 251
;251:	}
LABELV $258
line 249
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $257
line 253
;252:
;253:	VectorMA(move, 20, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
line 254
;254:	VectorScale(vec, SPACING, vec);
ADDRLP4 28
ADDRLP4 28
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 256
;255:
;256:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 258
;257:
;258:	j = 18;
ADDRLP4 20
CNSTI4 18
ASGNI4
line 259
;259:	for (i = 0; i < len; i += SPACING) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $274
JUMPV
LABELV $271
line 260
;260:		if (i != skip) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $275
line 261
;261:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 262
;262:			le = CG_AllocLocalEntity();
ADDRLP4 560
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 560
INDIRP4
ASGNP4
line 263
;263:			re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 264
;264:			le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 265
;265:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 266
;266:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 267
;267:			le->endTime = cg.time + (i >> 1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 268
;268:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 270
;269:
;270:			if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $279
line 271
;271:				re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $280
JUMPV
LABELV $279
line 273
;272:			else
;273:				re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $280
line 275
;274:
;275:			re->reType = RT_SPRITE;
ADDRLP4 24
INDIRP4
CNSTI4 2
ASGNI4
line 276
;276:			re->radius = 1.1f;
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 277
;277:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+146664+220
INDIRI4
ASGNI4
line 279
;278:
;279:			re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 572
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 576
CNSTF4 1325400064
ASGNF4
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
LTF4 $286
ADDRLP4 568
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $287
JUMPV
LABELV $286
ADDRLP4 568
ADDRLP4 572
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $287
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 568
INDIRU4
CVUU1 4
ASGNU1
line 280
;280:			re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 584
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 588
CNSTF4 1325400064
ASGNF4
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
LTF4 $289
ADDRLP4 580
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $290
JUMPV
LABELV $289
ADDRLP4 580
ADDRLP4 584
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $290
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 580
INDIRU4
CVUU1 4
ASGNU1
line 281
;281:			re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 596
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 600
CNSTF4 1325400064
ASGNF4
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
LTF4 $292
ADDRLP4 592
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $293
JUMPV
LABELV $292
ADDRLP4 592
ADDRLP4 596
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $293
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 592
INDIRU4
CVUU1 4
ASGNU1
line 282
;282:			re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 284
;283:
;284:			le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 285
;285:			le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 286
;286:			le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 287
;287:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 289
;288:
;289:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 290
;290:			le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 292
;291:
;292:			VectorCopy(move, move2);
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 293
;293:			VectorMA(move2, RADIUS, axis[j], move2);
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
line 294
;294:			VectorCopy(move2, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 296
;295:
;296:			le->pos.trDelta[0] = axis[j][0] * 6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 297
;297:			le->pos.trDelta[1] = axis[j][1] * 6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 298
;298:			le->pos.trDelta[2] = axis[j][2] * 6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 299
;299:		}
LABELV $275
line 301
;300:
;301:		VectorAdd(move, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
ASGNF4
line 303
;302:
;303:		j = j + ROTATION < 36 ? j + ROTATION : (j + ROTATION) % 36;
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
GEI4 $310
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $311
JUMPV
LABELV $310
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
LABELV $311
ADDRLP4 20
ADDRLP4 560
INDIRI4
ASGNI4
line 304
;304:	}
LABELV $272
line 259
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $274
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $271
line 305
;305:}
LABELV $233
endproc CG_RailTrail 608 16
proc CG_RocketTrail 84 48
line 313
;306:
;307:
;308:/*
;309:==========================
;310:CG_RocketTrail
;311:==========================
;312:*/
;313:static void CG_RocketTrail(centity_t *ent, const weaponInfo_t *wi) {
line 323
;314:	int		step;
;315:	vec3_t	origin, lastPos;
;316:	int		t;
;317:	int		startTime, contents;
;318:	int		lastContents;
;319:	entityState_t *es;
;320:	vec3_t	up;
;321:	localEntity_t *smoke;
;322:
;323:	if (cg_noProjectileTrail.integer) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $313
line 324
;324:		return;
ADDRGP4 $312
JUMPV
LABELV $313
line 327
;325:	}
;326:
;327:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 328
;328:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 329
;329:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 331
;330:
;331:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 333
;332:
;333:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 334
;334:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 335
;335:	t = step * ((startTime + step) / step);
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 337
;336:
;337:	BG_EvaluateTrajectory(&es->pos, cg.time, origin);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 338
;338:	contents = CG_PointContents(origin, -1);
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 341
;339:
;340:	// if object (e.g. grenade) is stationary, don't toss up smoke
;341:	if (es->pos.trType == TR_STATIONARY) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $319
line 342
;342:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 343
;343:		return;
ADDRGP4 $312
JUMPV
LABELV $319
line 346
;344:	}
;345:
;346:	BG_EvaluateTrajectory(&es->pos, ent->trailTime, lastPos);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 347
;347:	lastContents = CG_PointContents(lastPos, -1);
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 349
;348:
;349:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 351
;350:
;351:	if (contents & (CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA)) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $330
line 352
;352:		if (contents & lastContents & CONTENTS_WATER) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $312
line 353
;353:			CG_BubbleTrail(lastPos, origin, 8);
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 354
;354:		}
line 355
;355:		return;
ADDRGP4 $312
JUMPV
line 358
;356:	}
;357:
;358:	for (; t <= ent->trailTime; t += step) {
LABELV $327
line 359
;359:		BG_EvaluateTrajectory(&es->pos, t, lastPos);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 361
;360:
;361:		smoke = CG_SmokePuff(lastPos, up,
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+146664+308
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 370
;362:			wi->trailRadius,
;363:			1.0f, 1.0f, 1.0f, 0.33f,
;364:			wi->wiTrailTime,
;365:			t,
;366:			0,
;367:			0,
;368:			cgs.media.smokePuffShader);
;369:		// use the optimized local entity add
;370:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 371
;371:	}
LABELV $328
line 358
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $330
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $327
line 373
;372:
;373:}
LABELV $312
endproc CG_RocketTrail 84 48
proc CG_NailTrail 84 48
line 381
;374:
;375:
;376:/*
;377:==========================
;378:CG_NailTrail
;379:==========================
;380:*/
;381:static void CG_NailTrail(centity_t *ent, const weaponInfo_t *wi) {
line 391
;382:	int		step;
;383:	vec3_t	origin, lastPos;
;384:	int		t;
;385:	int		startTime, contents;
;386:	int		lastContents;
;387:	entityState_t *es;
;388:	vec3_t	up;
;389:	localEntity_t *smoke;
;390:
;391:	if (cg_noProjectileTrail.integer) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $334
line 392
;392:		return;
ADDRGP4 $333
JUMPV
LABELV $334
line 395
;393:	}
;394:
;395:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 396
;396:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 397
;397:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 399
;398:
;399:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 401
;400:
;401:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 402
;402:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 403
;403:	t = step * ((startTime + step) / step);
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 405
;404:
;405:	BG_EvaluateTrajectory(&es->pos, cg.time, origin);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 406
;406:	contents = CG_PointContents(origin, -1);
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 409
;407:
;408:	// if object (e.g. grenade) is stationary, don't toss up smoke
;409:	if (es->pos.trType == TR_STATIONARY) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $340
line 410
;410:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 411
;411:		return;
ADDRGP4 $333
JUMPV
LABELV $340
line 414
;412:	}
;413:
;414:	BG_EvaluateTrajectory(&es->pos, ent->trailTime, lastPos);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 415
;415:	lastContents = CG_PointContents(lastPos, -1);
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 417
;416:
;417:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 419
;418:
;419:	if (contents & (CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA)) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $351
line 420
;420:		if (contents & lastContents & CONTENTS_WATER) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $333
line 421
;421:			CG_BubbleTrail(lastPos, origin, 8);
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 422
;422:		}
line 423
;423:		return;
ADDRGP4 $333
JUMPV
line 426
;424:	}
;425:
;426:	for (; t <= ent->trailTime; t += step) {
LABELV $348
line 427
;427:		BG_EvaluateTrajectory(&es->pos, t, lastPos);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 429
;428:
;429:		smoke = CG_SmokePuff(lastPos, up,
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+146664+332
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 438
;430:			wi->trailRadius,
;431:			1, 1, 1, 0.33f,
;432:			wi->wiTrailTime,
;433:			t,
;434:			0,
;435:			0,
;436:			cgs.media.nailPuffShader);
;437:		// use the optimized local entity add
;438:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 439
;439:	}
LABELV $349
line 426
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $351
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $348
line 441
;440:
;441:}
LABELV $333
endproc CG_NailTrail 84 48
proc CG_PlasmaTrail 184 12
line 449
;442:
;443:
;444:/*
;445:==========================
;446:CG_PlasmaTrail
;447:==========================
;448:*/
;449:static void CG_PlasmaTrail(centity_t *cent, const weaponInfo_t *wi) {
line 457
;450:	localEntity_t *le;
;451:	refEntity_t *re;
;452:	entityState_t *es;
;453:	vec3_t			velocity, xvelocity, origin;
;454:	vec3_t			offset, xoffset;
;455:	vec3_t			v[3];
;456:
;457:	float	waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 459
;458:
;459:	if (cg_noProjectileTrail.integer || cg_oldPlasma.integer) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
NEI4 $359
ADDRGP4 cg_oldPlasma+12
INDIRI4
CNSTI4 0
EQI4 $355
LABELV $359
line 460
;460:		return;
ADDRGP4 $354
JUMPV
LABELV $355
line 463
;461:	}
;462:
;463:	es = &cent->currentState;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
line 465
;464:
;465:	BG_EvaluateTrajectory(&es->pos, cg.time, origin);
ADDRLP4 108
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 467
;466:
;467:	le = CG_AllocLocalEntity();
ADDRLP4 112
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 468
;468:	re = &le->refEntity;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 470
;469:
;470:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1114636288
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1123024896
MULF4
SUBF4
ASGNF4
line 471
;471:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
CNSTF4 1109393408
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1117782016
MULF4
SUBF4
ASGNF4
line 472
;472:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
CNSTF4 1120403456
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1128792064
MULF4
SUBF4
ASGNF4
line 474
;473:
;474:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 475
;475:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 476
;476:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 477
;477:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 479
;478:
;479:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 480
;480:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 482
;481:
;482:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 483
;483:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 485
;484:
;485:	AnglesToAxis(cent->lerpAngles, v);
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 487
;486:
;487:	offset[0] = 2;
ADDRLP4 56
CNSTF4 1073741824
ASGNF4
line 488
;488:	offset[1] = 2;
ADDRLP4 56+4
CNSTF4 1073741824
ASGNF4
line 489
;489:	offset[2] = 2;
ADDRLP4 56+8
CNSTF4 1073741824
ASGNF4
line 491
;490:
;491:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 56
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 492
;492:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 56
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 493
;493:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 56
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 495
;494:
;495:	VectorAdd(origin, xoffset, re->origin);
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 96
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 96+4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 96+8
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 496
;496:	VectorCopy(re->origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 498
;497:
;498:	if (CG_PointContents(re->origin, -1) & CONTENTS_WATER) {
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 132
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $391
line 499
;499:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 500
;500:	}
LABELV $391
line 502
;501:
;502:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 44
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 503
;503:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 44
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 504
;504:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 44
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 505
;505:	VectorScale(xvelocity, waterScale, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 507
;506:
;507:	AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 509
;508:
;509:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $415
line 510
;510:		re->u.intShaderTime = cg.time;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $416
JUMPV
LABELV $415
line 512
;511:	else
;512:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $416
line 514
;513:
;514:	re->reType = RT_SPRITE;
ADDRLP4 40
INDIRP4
CNSTI4 2
ASGNI4
line 515
;515:	re->radius = 0.25f;
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 516
;516:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 40
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+146664+220
INDIRI4
ASGNI4
line 517
;517:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 519
;518:
;519:	re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 140
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 144
CNSTF4 1325400064
ASGNF4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
LTF4 $422
ADDRLP4 136
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $423
JUMPV
LABELV $422
ADDRLP4 136
ADDRLP4 140
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $423
ADDRLP4 40
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU4
CVUU1 4
ASGNU1
line 520
;520:	re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $425
ADDRLP4 148
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $426
JUMPV
LABELV $425
ADDRLP4 148
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $426
ADDRLP4 40
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 148
INDIRU4
CVUU1 4
ASGNU1
line 521
;521:	re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 164
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 168
CNSTF4 1325400064
ASGNF4
ADDRLP4 164
INDIRF4
ADDRLP4 168
INDIRF4
LTF4 $428
ADDRLP4 160
ADDRLP4 164
INDIRF4
ADDRLP4 168
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $429
JUMPV
LABELV $428
ADDRLP4 160
ADDRLP4 164
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $429
ADDRLP4 40
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 160
INDIRU4
CVUU1 4
ASGNU1
line 522
;522:	re->shaderRGBA[3] = 63;
ADDRLP4 40
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 524
;523:
;524:	le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 525
;525:	le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 526
;526:	le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 527
;527:	le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 529
;528:
;529:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 530
;530:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 531
;531:	le->angles.trBase[0] = rand() & 31;
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 172
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 532
;532:	le->angles.trBase[1] = rand() & 31;
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 176
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 533
;533:	le->angles.trBase[2] = rand() & 31;
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 180
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 534
;534:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 535
;535:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 536
;536:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 537
;537:}
LABELV $354
endproc CG_PlasmaTrail 184 12
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 545
;538:
;539:
;540:/*
;541:==========================
;542:CG_GrappleTrail
;543:==========================
;544:*/
;545:void CG_GrappleTrail(centity_t *ent, const weaponInfo_t *wi) {
line 551
;546:	vec3_t	origin;
;547:	entityState_t *es;
;548:	vec3_t			forward, up;
;549:	refEntity_t		beam;
;550:
;551:	es = &ent->currentState;
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
line 553
;552:
;553:	BG_EvaluateTrajectory(&es->pos, cg.time, origin);
ADDRLP4 164
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 152
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 554
;554:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 556
;555:
;556:	memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 558
;557:	//FIXME adjust for muzzle position
;558:	VectorCopy(cg_entities[ent->currentState.otherEntityNum].lerpOrigin, beam.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+716
ADDP4
INDIRB
ASGNB 12
line 559
;559:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 560
;560:	AngleVectors(cg_entities[ent->currentState.otherEntityNum].lerpAngles, forward, NULL, up);
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+728
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 561
;561:	VectorMA(beam.origin, -6, up, beam.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 140
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 140+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 140+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
line 562
;562:	VectorCopy(origin, beam.oldorigin);
ADDRLP4 0+84
ADDRLP4 152
INDIRB
ASGNB 12
line 564
;563:
;564:	if (Distance(beam.origin, beam.oldorigin) < 64)
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $452
line 565
;565:		return; // Don't draw if close
ADDRGP4 $431
JUMPV
LABELV $452
line 567
;566:
;567:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 568
;568:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+146664+228
INDIRI4
ASGNI4
line 570
;569:
;570:	AxisClear(beam.axis);
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 571
;571:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 572
;572:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 573
;573:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 574
;574:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 575
;575:	trap_R_AddRefEntityToScene(&beam);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 576
;576:}
LABELV $431
endproc CG_GrappleTrail 184 16
proc CG_GrenadeTrail 0 8
line 583
;577:
;578:/*
;579:==========================
;580:CG_GrenadeTrail
;581:==========================
;582:*/
;583:static void CG_GrenadeTrail(centity_t *ent, const weaponInfo_t *wi) {
line 584
;584:	CG_RocketTrail(ent, wi);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 585
;585:}
LABELV $467
endproc CG_GrenadeTrail 0 8
export CG_RegisterWeapon
proc CG_RegisterWeapon 344 12
line 595
;586:
;587:
;588:/*
;589:=================
;590:CG_RegisterWeapon
;591:
;592:The server says this item is used on this level
;593:=================
;594:*/
;595:void CG_RegisterWeapon(int weaponNum) {
line 602
;596:	weaponInfo_t *weaponInfo;
;597:	gitem_t *item, *ammo;
;598:	char			path[MAX_QPATH];
;599:	vec3_t			mins, maxs;
;600:	int				i;
;601:
;602:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 604
;603:
;604:	if (weaponNum == 0) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $469
line 605
;605:		return;
ADDRGP4 $468
JUMPV
LABELV $469
line 608
;606:	}
;607:
;608:	if (weaponInfo->registered) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $471
line 609
;609:		return;
ADDRGP4 $468
JUMPV
LABELV $471
line 612
;610:	}
;611:
;612:	memset(weaponInfo, 0, sizeof(*weaponInfo));
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 136
ARGI4
ADDRGP4 memset
CALLP4
pop
line 613
;613:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 615
;614:
;615:	for (item = bg_itemlist + 1; item->classname; item++) {
ADDRLP4 4
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $476
JUMPV
LABELV $473
line 616
;616:		if (item->giType == IT_WEAPON && item->giTag == weaponNum) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $478
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $478
line 617
;617:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 618
;618:			break;
ADDRGP4 $475
JUMPV
LABELV $478
line 620
;619:		}
;620:	}
LABELV $474
line 615
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $476
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $473
LABELV $475
line 621
;621:	if (!item->classname) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $480
line 622
;622:		CG_Error("Couldn't find weapon %i", weaponNum);
ADDRGP4 $482
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 623
;623:	}
LABELV $480
line 624
;624:	CG_RegisterItemVisuals(item - bg_itemlist);
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 627
;625:
;626:	// load cmodel before model so filecache works
;627:	weaponInfo->weaponModel = trap_R_RegisterModel(item->world_model[0]);
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 630
;628:
;629:	// calc midpoint for rotation
;630:	trap_R_ModelBounds(weaponInfo->weaponModel, mins, maxs);
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 631
;631:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $483
line 632
;632:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * (maxs[i] - mins[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 633
;633:	}
LABELV $484
line 631
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $483
line 635
;634:
;635:	weaponInfo->weaponIcon = trap_R_RegisterShader(item->icon);
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 636
;636:	weaponInfo->ammoIcon = trap_R_RegisterShader(item->icon);
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 638
;637:
;638:	for (ammo = bg_itemlist + 1; ammo->classname; ammo++) {
ADDRLP4 8
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $490
JUMPV
LABELV $487
line 639
;639:		if (ammo->giType == IT_AMMO && ammo->giTag == weaponNum) {
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $492
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $492
line 640
;640:			break;
ADDRGP4 $489
JUMPV
LABELV $492
line 642
;641:		}
;642:	}
LABELV $488
line 638
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $490
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $487
LABELV $489
line 643
;643:	if (ammo->classname && ammo->world_model[0]) {
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $494
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $494
line 644
;644:		weaponInfo->ammoModel = trap_R_RegisterModel(ammo->world_model[0]);
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 645
;645:	}
LABELV $494
line 647
;646:
;647:	COM_StripExtension(item->world_model[0], path, sizeof(path));
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 648
;648:	Q_strcat(path, sizeof(path), "_flash.md3");
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $496
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 649
;649:	weaponInfo->flashModel = trap_R_RegisterModel(path);
ADDRLP4 28
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 651
;650:
;651:	COM_StripExtension(item->world_model[0], path, sizeof(path));
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 652
;652:	Q_strcat(path, sizeof(path), "_barrel.md3");
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $497
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 653
;653:	weaponInfo->barrelModel = trap_R_RegisterModel(path);
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 655
;654:
;655:	COM_StripExtension(item->world_model[0], path, sizeof(path));
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 656
;656:	Q_strcat(path, sizeof(path), "_hand.md3");
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $498
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 657
;657:	weaponInfo->handsModel = trap_R_RegisterModel(path);
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 659
;658:
;659:	if (!weaponInfo->handsModel) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $499
line 660
;660:		weaponInfo->handsModel = trap_R_RegisterModel("models/weapons2/shotgun/shotgun_hand.md3");
ADDRGP4 $501
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 661
;661:	}
LABELV $499
line 663
;662:
;663:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 665
;664:
;665:	switch (weaponNum) {
ADDRLP4 132
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 1
LTI4 $502
ADDRLP4 132
INDIRI4
CNSTI4 13
GTI4 $502
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $593-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $593
address $504
address $537
address $544
address $558
address $546
address $507
address $575
address $566
address $586
address $526
address $563
address $552
address $528
code
LABELV $504
line 667
;666:	case WP_GAUNTLET:
;667:		MAKERGB(weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 668
;668:		weaponInfo->firingSound = trap_S_RegisterSound("sound/weapons/melee/fstrun.wav", qfalse);
ADDRGP4 $505
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 136
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 669
;669:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/melee/fstatck.wav", qfalse);
ADDRGP4 $506
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 670
;670:		break;
ADDRGP4 $503
JUMPV
LABELV $507
line 673
;671:
;672:	case WP_LIGHTNING:
;673:		MAKERGB(weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 674
;674:		weaponInfo->readySound = trap_S_RegisterSound("sound/weapons/melee/fsthum.wav", qfalse);
ADDRGP4 $508
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 675
;675:		weaponInfo->firingSound = trap_S_RegisterSound("sound/weapons/lightning/lg_hum.wav", qfalse);
ADDRGP4 $509
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 677
;676:
;677:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/lightning/lg_fire.wav", qfalse);
ADDRGP4 $510
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 678
;678:		cgs.media.lightningShader = trap_R_RegisterShader("lightningBoltNew");
ADDRGP4 $513
ARGP4
ADDRLP4 156
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+228
ADDRLP4 156
INDIRI4
ASGNI4
line 679
;679:		cgs.media.lightningExplosionModel = trap_R_RegisterModel("models/weaphits/crackle.md3");
ADDRGP4 $516
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRGP4 cgs+146664+484
ADDRLP4 160
INDIRI4
ASGNI4
line 680
;680:		cgs.media.sfx_lghit1 = trap_S_RegisterSound("sound/weapons/lightning/lg_hit.wav", qfalse);
ADDRGP4 $519
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 164
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+146664+752
ADDRLP4 164
INDIRI4
ASGNI4
line 681
;681:		cgs.media.sfx_lghit2 = trap_S_RegisterSound("sound/weapons/lightning/lg_hit2.wav", qfalse);
ADDRGP4 $522
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+146664+756
ADDRLP4 168
INDIRI4
ASGNI4
line 682
;682:		cgs.media.sfx_lghit3 = trap_S_RegisterSound("sound/weapons/lightning/lg_hit3.wav", qfalse);
ADDRGP4 $525
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+146664+760
ADDRLP4 172
INDIRI4
ASGNI4
line 684
;683:
;684:		break;
ADDRGP4 $503
JUMPV
LABELV $526
line 687
;685:
;686:	case WP_GRAPPLING_HOOK:
;687:		MAKERGB(weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 688
;688:		weaponInfo->missileModel = trap_R_RegisterModel("models/ammo/rocket/rocket.md3");
ADDRGP4 $527
ARGP4
ADDRLP4 176
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 689
;689:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 690
;690:		weaponInfo->missileDlight = HOOK_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 691
;691:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 692
;692:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 693
;693:		MAKERGB(weaponInfo->missileDlightColor, 1, 0.75f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 694
;694:		weaponInfo->readySound = trap_S_RegisterSound("sound/weapons/melee/fsthum.wav", qfalse);
ADDRGP4 $508
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 695
;695:		weaponInfo->firingSound = trap_S_RegisterSound("sound/weapons/melee/fstrun.wav", qfalse);
ADDRGP4 $505
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 696
;696:		break;
ADDRGP4 $503
JUMPV
LABELV $528
line 699
;697:
;698:	case WP_CHAINGUN:
;699:		weaponInfo->firingSound = trap_S_RegisterSound("sound/weapons/vulcan/wvulfire.wav", qfalse);
ADDRGP4 $529
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 700
;700:		weaponInfo->loopFireSound = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 1
ASGNI4
line 701
;701:		MAKERGB(weaponInfo->flashDlightColor, 1, 1, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 702
;702:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/vulcan/vulcanf1b.wav", qfalse);
ADDRGP4 $530
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 192
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 703
;703:		weaponInfo->flashSound[1] = trap_S_RegisterSound("sound/weapons/vulcan/vulcanf2b.wav", qfalse);
ADDRGP4 $531
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 704
;704:		weaponInfo->flashSound[2] = trap_S_RegisterSound("sound/weapons/vulcan/vulcanf3b.wav", qfalse);
ADDRGP4 $532
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 705
;705:		weaponInfo->flashSound[3] = trap_S_RegisterSound("sound/weapons/vulcan/vulcanf4b.wav", qfalse);
ADDRGP4 $533
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 706
;706:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 707
;707:		cgs.media.bulletExplosionShader = trap_R_RegisterShader("bulletExplosion");
ADDRGP4 $536
ARGP4
ADDRLP4 208
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+496
ADDRLP4 208
INDIRI4
ASGNI4
line 708
;708:		break;
ADDRGP4 $503
JUMPV
LABELV $537
line 711
;709:
;710:	case WP_MACHINEGUN:
;711:		MAKERGB(weaponInfo->flashDlightColor, 1, 1, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 712
;712:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/machinegun/machgf1b.wav", qfalse);
ADDRGP4 $538
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 713
;713:		weaponInfo->flashSound[1] = trap_S_RegisterSound("sound/weapons/machinegun/machgf2b.wav", qfalse);
ADDRGP4 $539
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 216
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 714
;714:		weaponInfo->flashSound[2] = trap_S_RegisterSound("sound/weapons/machinegun/machgf3b.wav", qfalse);
ADDRGP4 $540
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 715
;715:		weaponInfo->flashSound[3] = trap_S_RegisterSound("sound/weapons/machinegun/machgf4b.wav", qfalse);
ADDRGP4 $541
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 716
;716:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 717
;717:		cgs.media.bulletExplosionShader = trap_R_RegisterShader("bulletExplosion");
ADDRGP4 $536
ARGP4
ADDRLP4 228
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+496
ADDRLP4 228
INDIRI4
ASGNI4
line 718
;718:		break;
ADDRGP4 $503
JUMPV
LABELV $544
line 721
;719:
;720:	case WP_SHOTGUN:
;721:		MAKERGB(weaponInfo->flashDlightColor, 1, 1, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 722
;722:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/shotgun/sshotf1b.wav", qfalse);
ADDRGP4 $545
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 723
;723:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 724
;724:		break;
ADDRGP4 $503
JUMPV
LABELV $546
line 727
;725:
;726:	case WP_ROCKET_LAUNCHER:
;727:		weaponInfo->missileModel = trap_R_RegisterModel("models/ammo/rocket/rocket.md3");
ADDRGP4 $527
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 728
;728:		weaponInfo->missileSound = trap_S_RegisterSound("sound/weapons/rocket/rockfly.wav", qfalse);
ADDRGP4 $547
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 729
;729:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 730
;730:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 731
;731:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 732
;732:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 734
;733:
;734:		MAKERGB(weaponInfo->missileDlightColor, 1, 0.75f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 735
;735:		MAKERGB(weaponInfo->flashDlightColor, 1, 0.75f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 737
;736:
;737:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/rocket/rocklf1a.wav", qfalse);
ADDRGP4 $548
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 738
;738:		cgs.media.rocketExplosionShader = trap_R_RegisterShader("rocketExplosion");
ADDRGP4 $551
ARGP4
ADDRLP4 248
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+500
ADDRLP4 248
INDIRI4
ASGNI4
line 739
;739:		break;
ADDRGP4 $503
JUMPV
LABELV $552
line 742
;740:
;741:	case WP_PROX_LAUNCHER:
;742:		weaponInfo->missileModel = trap_R_RegisterModel("models/weaphits/proxmine.md3");
ADDRGP4 $553
ARGP4
ADDRLP4 252
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 743
;743:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 744
;744:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 745
;745:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 746
;746:		MAKERGB(weaponInfo->flashDlightColor, 1, 0.70f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 747
;747:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/proxmine/wstbfire.wav", qfalse);
ADDRGP4 $554
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 748
;748:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader("grenadeExplosion");
ADDRGP4 $557
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+504
ADDRLP4 260
INDIRI4
ASGNI4
line 749
;749:		break;
ADDRGP4 $503
JUMPV
LABELV $558
line 752
;750:
;751:	case WP_GRENADE_LAUNCHER:
;752:		weaponInfo->missileModel = trap_R_RegisterModel("models/ammo/grenade1.md3");
ADDRGP4 $559
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 753
;753:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 754
;754:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 755
;755:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 756
;756:		MAKERGB(weaponInfo->flashDlightColor, 1, 0.70f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 757
;757:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/grenade/grenlf1a.wav", qfalse);
ADDRGP4 $560
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 758
;758:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader("grenadeExplosion");
ADDRGP4 $557
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+504
ADDRLP4 272
INDIRI4
ASGNI4
line 759
;759:		break;
ADDRGP4 $503
JUMPV
LABELV $563
line 762
;760:
;761:	case WP_NAILGUN:
;762:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_NailgunEjectBrass
ASGNP4
line 763
;763:		weaponInfo->missileTrailFunc = CG_NailTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_NailTrail
ASGNP4
line 765
;764:		//		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;765:		weaponInfo->trailRadius = 16;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1098907648
ASGNF4
line 766
;766:		weaponInfo->wiTrailTime = 250;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1132068864
ASGNF4
line 767
;767:		weaponInfo->missileModel = trap_R_RegisterModel("models/weaphits/nail.md3");
ADDRGP4 $564
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 768
;768:		MAKERGB(weaponInfo->flashDlightColor, 1, 0.75f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 769
;769:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/nailgun/wnalfire.wav", qfalse);
ADDRGP4 $565
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 280
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 280
INDIRI4
ASGNI4
line 770
;770:		break;
ADDRGP4 $503
JUMPV
LABELV $566
line 773
;771:
;772:	case WP_PLASMAGUN:
;773:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 774
;774:		weaponInfo->missileSound = trap_S_RegisterSound("sound/weapons/plasma/lasfly.wav", qfalse);
ADDRGP4 $567
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 284
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 777
;775:
;776:		// plasmagun dlight
;777:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 778
;778:		MAKERGB(weaponInfo->missileDlightColor, 0.2f, 0.2f, 1.0f);
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1065353216
ASGNF4
line 780
;779:
;780:		MAKERGB(weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 781
;781:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/plasma/hyprbf1a.wav", qfalse);
ADDRGP4 $568
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 782
;782:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader("plasmaExplosion");
ADDRGP4 $571
ARGP4
ADDRLP4 292
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+492
ADDRLP4 292
INDIRI4
ASGNI4
line 783
;783:		cgs.media.railRingsShader = trap_R_RegisterShader("railDisc");
ADDRGP4 $574
ARGP4
ADDRLP4 296
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+220
ADDRLP4 296
INDIRI4
ASGNI4
line 784
;784:		break;
ADDRGP4 $503
JUMPV
LABELV $575
line 787
;785:
;786:	case WP_RAILGUN:
;787:		weaponInfo->readySound = trap_S_RegisterSound("sound/weapons/railgun/rg_hum.wav", qfalse);
ADDRGP4 $576
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 300
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 788
;788:		MAKERGB(weaponInfo->flashDlightColor, 1, 0.5f, 0);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 789
;789:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/railgun/railgf1a.wav", qfalse);
ADDRGP4 $577
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 304
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 304
INDIRI4
ASGNI4
line 790
;790:		cgs.media.railExplosionShader = trap_R_RegisterShader("railExplosion");
ADDRGP4 $580
ARGP4
ADDRLP4 308
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+488
ADDRLP4 308
INDIRI4
ASGNI4
line 791
;791:		cgs.media.railRingsShader = trap_R_RegisterShader("railDisc");
ADDRGP4 $574
ARGP4
ADDRLP4 312
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+220
ADDRLP4 312
INDIRI4
ASGNI4
line 792
;792:		cgs.media.railCoreShader = trap_R_RegisterShader("railCore");
ADDRGP4 $585
ARGP4
ADDRLP4 316
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+224
ADDRLP4 316
INDIRI4
ASGNI4
line 793
;793:		break;
ADDRGP4 $503
JUMPV
LABELV $586
line 796
;794:
;795:	case WP_BFG:
;796:		weaponInfo->readySound = trap_S_RegisterSound("sound/weapons/bfg/bfg_hum.wav", qfalse);
ADDRGP4 $587
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 320
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 320
INDIRI4
ASGNI4
line 799
;797:
;798:		// bfg dlight
;799:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 800
;800:		MAKERGB(weaponInfo->missileDlightColor, 0.2f, 1.0f, 0.2f);
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1045220557
ASGNF4
line 802
;801:
;802:		MAKERGB(weaponInfo->flashDlightColor, 1.0f, 0.7f, 1.0f);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 803
;803:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/bfg/bfg_fire.wav", qfalse);
ADDRGP4 $588
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 324
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 324
INDIRI4
ASGNI4
line 804
;804:		cgs.media.bfgExplosionShader = trap_R_RegisterShader("bfgExplosion");
ADDRGP4 $591
ARGP4
ADDRLP4 328
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+146664+508
ADDRLP4 328
INDIRI4
ASGNI4
line 805
;805:		weaponInfo->missileModel = trap_R_RegisterModel("models/weaphits/bfg.md3");
ADDRGP4 $592
ARGP4
ADDRLP4 332
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 332
INDIRI4
ASGNI4
line 806
;806:		weaponInfo->missileSound = trap_S_RegisterSound("sound/weapons/rocket/rockfly.wav", qfalse);
ADDRGP4 $547
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 336
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 336
INDIRI4
ASGNI4
line 807
;807:		break;
ADDRGP4 $503
JUMPV
LABELV $502
line 810
;808:
;809:	default:
;810:		MAKERGB(weaponInfo->flashDlightColor, 1, 1, 1);
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 811
;811:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/rocket/rocklf1a.wav", qfalse);
ADDRGP4 $548
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 340
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 340
INDIRI4
ASGNI4
line 812
;812:		break;
LABELV $503
line 814
;813:	}
;814:}
LABELV $468
endproc CG_RegisterWeapon 344 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 823
;815:
;816:/*
;817:=================
;818:CG_RegisterItemVisuals
;819:
;820:The server says this item is used on this level
;821:=================
;822:*/
;823:void CG_RegisterItemVisuals(int itemNum) {
line 827
;824:	itemInfo_t *itemInfo;
;825:	gitem_t *item;
;826:
;827:	if (itemNum < 0 || itemNum >= bg_numItems) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $598
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $596
LABELV $598
line 828
;828:		CG_Error("CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems - 1);
ADDRGP4 $599
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 829
;829:	}
LABELV $596
line 831
;830:
;831:	itemInfo = &cg_items[itemNum];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 832
;832:	if (itemInfo->registered) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $600
line 833
;833:		return;
ADDRGP4 $595
JUMPV
LABELV $600
line 836
;834:	}
;835:
;836:	item = &bg_itemlist[itemNum];
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 838
;837:
;838:	memset(itemInfo, 0, sizeof(*itemInfo));
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 28
ARGI4
ADDRGP4 memset
CALLP4
pop
line 839
;839:	itemInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 841
;840:
;841:	itemInfo->models[0] = trap_R_RegisterModel(item->world_model[0]);
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 843
;842:
;843:	itemInfo->icon = trap_R_RegisterShader(item->icon);
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 846
;844:
;845:	// try to register depth-fragment shaders
;846:	if (cg.clientFrame == 0 && cg.skipDFshaders) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $602
ADDRGP4 cg+157016
INDIRI4
CNSTI4 0
EQI4 $602
line 847
;847:		itemInfo->icon_df = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 848
;848:	} else {
ADDRGP4 $603
JUMPV
LABELV $602
line 849
;849:		itemInfo->icon_df = trap_R_RegisterShader(va("%s_df", item->icon));
ADDRGP4 $605
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 850
;850:	}
LABELV $603
line 852
;851:
;852:	if (!itemInfo->icon_df) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
NEI4 $606
line 853
;853:		itemInfo->icon_df = itemInfo->icon;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 854
;854:		if (cg.clientFrame == 0) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $608
line 855
;855:			cg.skipDFshaders = qtrue; // skip all further tries to avoid shader debug mesages in 1.32c during map loading
ADDRGP4 cg+157016
CNSTI4 1
ASGNI4
line 856
;856:		} else {
ADDRGP4 $607
JUMPV
LABELV $608
line 857
;857:			cg.skipDFshaders = qfalse;
ADDRGP4 cg+157016
CNSTI4 0
ASGNI4
line 858
;858:		}
line 859
;859:	} else {
ADDRGP4 $607
JUMPV
LABELV $606
line 860
;860:		cg.skipDFshaders = qfalse;
ADDRGP4 cg+157016
CNSTI4 0
ASGNI4
line 861
;861:	}
LABELV $607
line 863
;862:
;863:	if (item->giType == IT_WEAPON) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $613
line 864
;864:		CG_RegisterWeapon(item->giTag);
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 865
;865:	}
LABELV $613
line 870
;866:
;867:	//
;868:	// powerups have an accompanying ring or sphere
;869:	//
;870:	if (item->giType == IT_POWERUP || item->giType == IT_HEALTH ||
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $619
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 4
EQI4 $619
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
EQI4 $619
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $615
LABELV $619
line 871
;871:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE) {
line 872
;872:		if (item->world_model[1]) {
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $620
line 873
;873:			itemInfo->models[1] = trap_R_RegisterModel(item->world_model[1]);
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 874
;874:		}
LABELV $620
line 875
;875:	}
LABELV $615
line 876
;876:}
LABELV $595
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 893
;877:
;878:
;879:/*
;880:========================================================================================
;881:
;882:VIEW WEAPON
;883:
;884:========================================================================================
;885:*/
;886:
;887:/*
;888:=================
;889:CG_MapTorsoToWeaponFrame
;890:
;891:=================
;892:*/
;893:static int CG_MapTorsoToWeaponFrame(const clientInfo_t *ci, int frame) {
line 896
;894:
;895:	// change weapon
;896:	if (frame >= ci->animations[TORSO_DROP].firstFrame
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
LTI4 $623
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $623
line 897
;897:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9) {
line 898
;898:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $622
JUMPV
LABELV $623
line 902
;899:	}
;900:
;901:	// stand attack
;902:	if (frame >= ci->animations[TORSO_ATTACK].firstFrame
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
LTI4 $625
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $625
line 903
;903:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6) {
line 904
;904:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $622
JUMPV
LABELV $625
line 908
;905:	}
;906:
;907:	// stand attack 2
;908:	if (frame >= ci->animations[TORSO_ATTACK2].firstFrame
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
LTI4 $627
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $627
line 909
;909:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6) {
line 910
;910:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $622
JUMPV
LABELV $627
line 913
;911:	}
;912:
;913:	return 0;
CNSTI4 0
RETI4
LABELV $622
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 40 4
line 922
;914:}
;915:
;916:
;917:/*
;918:==============
;919:CG_CalculateWeaponPosition
;920:==============
;921:*/
;922:static void CG_CalculateWeaponPosition(vec3_t origin, vec3_t angles) {
line 927
;923:	float	scale;
;924:	int		delta;
;925:	float	fracsin;
;926:
;927:	VectorCopy(cg.refdef.vieworg, origin);
ADDRFP4 0
INDIRP4
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 928
;928:	VectorCopy(cg.refdefViewAngles, angles);
ADDRFP4 4
INDIRP4
ADDRGP4 cg+109424
INDIRB
ASGNB 12
line 931
;929:
;930:	// on odd legs, invert some angles
;931:	if (cg.bobcycle & 1) {
ADDRGP4 cg+125876
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $633
line 932
;932:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+125880
INDIRF4
NEGF4
ASGNF4
line 933
;933:	} else {
ADDRGP4 $634
JUMPV
LABELV $633
line 934
;934:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+125880
INDIRF4
ASGNF4
line 935
;935:	}
LABELV $634
line 938
;936:
;937:	// gun angles from bobbing
;938:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+125872
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 939
;939:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+125872
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 940
;940:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+125880
INDIRF4
ADDRGP4 cg+125872
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 943
;941:
;942:	// drop the weapon when landing
;943:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108952
INDIRI4
SUBI4
ASGNI4
line 944
;944:	if (delta < LAND_DEFLECT_TIME) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $644
line 945
;945:		origin[2] += cg.landChange * 0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+108948
INDIRF4
CNSTF4 1048576000
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1004172302
MULF4
ADDF4
ASGNF4
line 946
;946:	} else if (delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME) {
ADDRGP4 $645
JUMPV
LABELV $644
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $647
line 947
;947:		origin[2] += cg.landChange * 0.25 *
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+108948
INDIRF4
CNSTF4 1048576000
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 995783694
MULF4
ADDF4
ASGNF4
line 949
;948:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;949:	}
LABELV $647
LABELV $645
line 962
;950:
;951:#if 0
;952:	// drop the weapon when stair climbing
;953:	delta = cg.time - cg.stepTime;
;954:	if (delta < STEP_TIME / 2) {
;955:		origin[2] -= cg.stepChange * 0.25 * delta / (STEP_TIME / 2);
;956:	} else if (delta < STEP_TIME) {
;957:		origin[2] -= cg.stepChange * 0.25 * (STEP_TIME - delta) / (STEP_TIME / 2);
;958:	}
;959:#endif
;960:
;961:	// idle drift
;962:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+125880
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 963
;963:	fracsin = sin((cg.time % TMOD_1000) * 0.001);
ADDRGP4 cg+107604
INDIRI4
CNSTI4 5730265
MODI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 964
;964:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 965
;965:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 966
;966:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 967
;967:}
LABELV $629
endproc CG_CalculateWeaponPosition 40 4
proc CG_LightningBolt 280 28
line 981
;968:
;969:
;970:/*
;971:===============
;972:CG_LightningBolt
;973:
;974:Origin will be the exact tag point, which is slightly
;975:different than the muzzle point used for determining hits.
;976:The cent should be the non-predicted cent if it is from the player,
;977:so the endpoint will reflect the simulated strike (lagging the predicted
;978:angle)
;979:===============
;980:*/
;981:static void CG_LightningBolt(centity_t *cent, vec3_t origin) {
line 989
;982:	trace_t  trace;
;983:	refEntity_t  beam;
;984:	vec3_t   forward;
;985:	vec3_t   muzzlePoint, endPoint;
;986:	int      anim;
;987:	qboolean directView;
;988:
;989:	if (cent->currentState.weapon != WP_LIGHTNING) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $653
line 990
;990:		return;
ADDRGP4 $652
JUMPV
LABELV $653
line 993
;991:	}
;992:
;993:	memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 995
;994:
;995:	if (!cg.renderingThirdPerson && cent->currentState.number == cg.predictedPlayerState.clientNum) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $655
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $655
line 996
;996:		directView = qtrue;
ADDRLP4 232
CNSTI4 1
ASGNI4
line 997
;997:		VectorCopy(cg.refdef.vieworg, muzzlePoint);
ADDRLP4 140
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 998
;998:	} else {
ADDRGP4 $656
JUMPV
LABELV $655
line 999
;999:		directView = qfalse;
ADDRLP4 232
CNSTI4 0
ASGNI4
line 1000
;1000:		VectorCopy(cent->lerpOrigin, muzzlePoint);
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 1001
;1001:		anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 236
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1002
;1002:		if (anim == LEGS_WALKCR || anim == LEGS_IDLECR) {
ADDRLP4 240
ADDRLP4 236
INDIRI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 13
EQI4 $664
ADDRLP4 240
INDIRI4
CNSTI4 23
NEI4 $662
LABELV $664
line 1003
;1003:			muzzlePoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 1004
;1004:		} else {
ADDRGP4 $663
JUMPV
LABELV $662
line 1005
;1005:			muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1006
;1006:		}
LABELV $663
line 1007
;1007:	}
LABELV $656
line 1010
;1008:
;1009:	// CPMA  "true" lightning
;1010:	if (directView && cg_trueLightning.value) {
ADDRLP4 232
INDIRI4
CNSTI4 0
EQI4 $667
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $667
line 1015
;1011:		//vec3_t	viewangles;
;1012:		vec3_t angle;
;1013:		int i;
;1014:
;1015:		for (i = 0; i < 3; i++) {
ADDRLP4 240
CNSTI4 0
ASGNI4
LABELV $670
line 1016
;1016:			float a = cent->lerpAngles[i] - cg.refdefViewAngles[i];
ADDRLP4 256
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ADDP4
INDIRF4
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+109424
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1017
;1017:			if (a > 180) {
ADDRLP4 256
INDIRF4
CNSTF4 1127481344
LEF4 $675
line 1018
;1018:				a -= 360;
ADDRLP4 256
ADDRLP4 256
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1019
;1019:			}
LABELV $675
line 1020
;1020:			if (a < -180) {
ADDRLP4 256
INDIRF4
CNSTF4 3274964992
GEF4 $677
line 1021
;1021:				a += 360;
ADDRLP4 256
ADDRLP4 256
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1022
;1022:			}
LABELV $677
line 1024
;1023:
;1024:			angle[i] = cg.refdefViewAngles[i] + a * (1.0 - cg_trueLightning.value);
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+109424
ADDP4
INDIRF4
ADDRLP4 256
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1025
;1025:			if (angle[i] < 0) {
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
INDIRF4
CNSTF4 0
GEF4 $681
line 1026
;1026:				angle[i] += 360;
ADDRLP4 268
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ADDRLP4 268
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1027
;1027:			}
LABELV $681
line 1028
;1028:			if (angle[i] > 360) {
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $683
line 1029
;1029:				angle[i] -= 360;
ADDRLP4 268
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ADDRLP4 268
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1030
;1030:			}
LABELV $683
line 1031
;1031:		}
LABELV $671
line 1015
ADDRLP4 240
ADDRLP4 240
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 3
LTI4 $670
line 1033
;1032:
;1033:		AngleVectors(angle, forward, NULL, NULL);
ADDRLP4 244
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1035
;1034:
;1035:	} else {
ADDRGP4 $668
JUMPV
LABELV $667
line 1037
;1036:		// !CPMA
;1037:		AngleVectors(cent->lerpAngles, forward, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1038
;1038:	}
LABELV $668
line 1040
;1039:
;1040:	VectorMA(muzzlePoint, 14, forward, muzzlePoint);
ADDRLP4 140
ADDRLP4 140
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1043
;1041:
;1042:	// project forward by the lightning range
;1043:	VectorMA(muzzlePoint, LIGHTNING_RANGE, forward, endPoint);
ADDRLP4 220
ADDRLP4 140
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 220+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 220+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
line 1046
;1044:
;1045:	// see if it hit a wall
;1046:	CG_Trace(&trace, muzzlePoint, vec3_origin, vec3_origin, endPoint,
ADDRLP4 164
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 240
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 220
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1050
;1047:		cent->currentState.number, MASK_SHOT);
;1048:
;1049:	// this is the endpoint
;1050:	VectorCopy(trace.endpos, beam.oldorigin);
ADDRLP4 0+84
ADDRLP4 164+12
INDIRB
ASGNB 12
line 1054
;1051:
;1052:	// use the provided origin, even though it may be slightly
;1053:	// different than the muzzle origin
;1054:	VectorCopy(origin, beam.origin);
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1056
;1055:
;1056:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1057
;1057:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+146664+228
INDIRI4
ASGNI4
line 1058
;1058:	trap_R_AddRefEntityToScene(&beam);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1061
;1059:
;1060:	// add the impact flare if it hit something
;1061:	if (trace.fraction < 1.0) {
ADDRLP4 164+8
INDIRF4
CNSTF4 1065353216
GEF4 $703
line 1065
;1062:		vec3_t	angles;
;1063:		vec3_t	dir;
;1064:
;1065:		VectorSubtract(beam.oldorigin, beam.origin, dir);
ADDRLP4 244
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1066
;1066:		VectorNormalize(dir);
ADDRLP4 244
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1068
;1067:
;1068:		memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1069
;1069:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+146664+484
INDIRI4
ASGNI4
line 1071
;1070:
;1071:		VectorMA(trace.endpos, -16, dir, beam.origin);
ADDRLP4 0+68
ADDRLP4 164+12
INDIRF4
ADDRLP4 244
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 164+12+4
INDIRF4
ADDRLP4 244+4
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 164+12+8
INDIRF4
ADDRLP4 244+8
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
line 1074
;1072:
;1073:		// make a random orientation
;1074:		angles[0] = rand() % 360;
ADDRLP4 268
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256
ADDRLP4 268
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1075
;1075:		angles[1] = rand() % 360;
ADDRLP4 272
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256+4
ADDRLP4 272
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1076
;1076:		angles[2] = rand() % 360;
ADDRLP4 276
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256+8
ADDRLP4 276
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1077
;1077:		AnglesToAxis(angles, beam.axis);
ADDRLP4 256
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1078
;1078:		trap_R_AddRefEntityToScene(&beam);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1079
;1079:	}
LABELV $703
line 1080
;1080:}
LABELV $652
endproc CG_LightningBolt 280 28
proc CG_SpawnRailTrail 4 12
line 1153
;1081:/*
;1082:
;1083:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1084:	trace_t		trace;
;1085:	refEntity_t		beam;
;1086:	vec3_t			forward;
;1087:	vec3_t			muzzlePoint, endPoint;
;1088:
;1089:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1090:		return;
;1091:	}
;1092:
;1093:	memset( &beam, 0, sizeof( beam ) );
;1094:
;1095:	// find muzzle point for this frame
;1096:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1097:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1098:
;1099:	// FIXME: crouch
;1100:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1101:
;1102:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1103:
;1104:	// project forward by the lightning range
;1105:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1106:
;1107:	// see if it hit a wall
;1108:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint,
;1109:		cent->currentState.number, MASK_SHOT );
;1110:
;1111:	// this is the endpoint
;1112:	VectorCopy( trace.endpos, beam.oldorigin );
;1113:
;1114:	// use the provided origin, even though it may be slightly
;1115:	// different than the muzzle origin
;1116:	VectorCopy( origin, beam.origin );
;1117:
;1118:	beam.reType = RT_LIGHTNING;
;1119:	beam.customShader = cgs.media.lightningShader;
;1120:	trap_R_AddRefEntityToScene( &beam );
;1121:
;1122:	// add the impact flare if it hit something
;1123:	if ( trace.fraction < 1.0 ) {
;1124:		vec3_t	angles;
;1125:		vec3_t	dir;
;1126:
;1127:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1128:		VectorNormalize( dir );
;1129:
;1130:		memset( &beam, 0, sizeof( beam ) );
;1131:		beam.hModel = cgs.media.lightningExplosionModel;
;1132:
;1133:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1134:
;1135:		// make a random orientation
;1136:		angles[0] = rand() % 360;
;1137:		angles[1] = rand() % 360;
;1138:		angles[2] = rand() % 360;
;1139:		AnglesToAxis( angles, beam.axis );
;1140:		trap_R_AddRefEntityToScene( &beam );
;1141:	}
;1142:}
;1143:*/
;1144:
;1145:/*
;1146:===============
;1147:CG_SpawnRailTrail
;1148:
;1149:Origin will be the exact tag point, which is slightly
;1150:different than the muzzle point used for determining hits.
;1151:===============
;1152:*/
;1153:static void CG_SpawnRailTrail(centity_t *cent, vec3_t origin) {
line 1156
;1154:	clientInfo_t *ci;
;1155:
;1156:	if (cent->currentState.weapon != WP_RAILGUN) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $737
line 1157
;1157:		return;
ADDRGP4 $736
JUMPV
LABELV $737
line 1159
;1158:	}
;1159:	if (!cent->pe.railgunFlash) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $739
line 1160
;1160:		return;
ADDRGP4 $736
JUMPV
LABELV $739
line 1162
;1161:	}
;1162:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 1
ASGNI4
line 1163
;1163:	ci = &cgs.clientinfo[cent->currentState.clientNum];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 1164
;1164:	CG_RailTrail(ci, origin, cent->pe.railgunImpact);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1165
;1165:}
LABELV $736
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 40 16
line 1175
;1166:
;1167:
;1168:/*
;1169:======================
;1170:CG_MachinegunSpinAngle
;1171:======================
;1172:*/
;1173:#define		SPIN_SPEED	0.9
;1174:#define		COAST_TIME	1000
;1175:static float	CG_MachinegunSpinAngle(centity_t *cent) {
line 1180
;1176:	int		delta;
;1177:	float	angle;
;1178:	float	speed;
;1179:
;1180:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1181
;1181:	if (cent->pe.barrelSpinning) {
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
EQI4 $744
line 1182
;1182:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1183
;1183:	} else {
ADDRGP4 $745
JUMPV
LABELV $744
line 1184
;1184:		if (delta > COAST_TIME) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $746
line 1185
;1185:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1186
;1186:		}
LABELV $746
line 1188
;1187:
;1188:		speed = 0.5 * (SPIN_SPEED + (float)(COAST_TIME - delta) / COAST_TIME);
ADDRLP4 8
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
CNSTF4 1063675494
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1189
;1189:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1190
;1190:	}
LABELV $745
line 1192
;1191:
;1192:	if (cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING)) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $751
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $752
JUMPV
LABELV $751
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $752
ADDRLP4 16
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $748
line 1193
;1193:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1194
;1194:		cent->pe.barrelAngle = AngleMod(angle);
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1195
;1195:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $755
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $756
JUMPV
LABELV $755
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $756
ADDRLP4 28
INDIRP4
CNSTI4 644
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1196
;1196:		if (cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning) {
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 13
NEI4 $757
ADDRLP4 32
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
NEI4 $757
line 1197
;1197:			trap_S_StartSound(NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound("sound/weapons/vulcan/wvulwind.wav", qfalse));
ADDRGP4 $759
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1198
;1198:		}
LABELV $757
line 1199
;1199:	}
LABELV $748
line 1201
;1200:
;1201:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $742
endproc CG_MachinegunSpinAngle 40 16
proc CG_AddWeaponWithPowerups 0 4
line 1210
;1202:}
;1203:
;1204:
;1205:/*
;1206:========================
;1207:CG_AddWeaponWithPowerups
;1208:========================
;1209:*/
;1210:static void CG_AddWeaponWithPowerups(refEntity_t *gun, int powerups) {
line 1212
;1211:	// add powerup effects
;1212:	if (powerups & (1 << PW_INVIS)) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $761
line 1213
;1213:		gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+146664+444
INDIRI4
ASGNI4
line 1214
;1214:		trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1215
;1215:	} else {
ADDRGP4 $762
JUMPV
LABELV $761
line 1216
;1216:		trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1218
;1217:
;1218:		if (powerups & (1 << PW_BATTLESUIT)) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $765
line 1219
;1219:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+146664+456
INDIRI4
ASGNI4
line 1220
;1220:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1221
;1221:		}
LABELV $765
line 1222
;1222:		if (powerups & (1 << PW_QUAD)) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $769
line 1223
;1223:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+146664+440
INDIRI4
ASGNI4
line 1224
;1224:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1225
;1225:		}
LABELV $769
line 1226
;1226:	}
LABELV $762
line 1227
;1227:}
LABELV $760
endproc CG_AddWeaponWithPowerups 0 4
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 580 28
line 1239
;1228:
;1229:
;1230:/*
;1231:=============
;1232:CG_AddPlayerWeapon
;1233:
;1234:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1235:The main player will have this called for BOTH cases, so effects like light and
;1236:sound should only be done on the world model case.
;1237:=============
;1238:*/
;1239:void CG_AddPlayerWeapon(refEntity_t *parent, playerState_t *ps, centity_t *cent, int team) {
line 1250
;1240:	refEntity_t	gun;
;1241:	refEntity_t	barrel;
;1242:	refEntity_t	flash;
;1243:	vec3_t		angles;
;1244:	weapon_t	weaponNum;
;1245:	weaponInfo_t *weapon;
;1246:	centity_t *nonPredictedCent;
;1247:	//	int	col;
;1248:	const	clientInfo_t *ci;
;1249:
;1250:	ci = &cgs.clientinfo[cent->currentState.clientNum];
ADDRLP4 444
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 1251
;1251:	weaponNum = cent->currentState.weapon;
ADDRLP4 284
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1253
;1252:
;1253:	CG_RegisterWeapon(weaponNum);
ADDRLP4 284
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1254
;1254:	weapon = &cg_weapons[weaponNum];
ADDRLP4 280
ADDRLP4 284
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1257
;1255:
;1256:	// add the weapon
;1257:	memset(&gun, 0, sizeof(gun));
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1258
;1258:	VectorCopy(parent->lightingOrigin, gun.lightingOrigin);
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1259
;1259:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 140+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1260
;1260:	gun.renderfx = parent->renderfx;
ADDRLP4 140+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1263
;1261:
;1262:	// set custom shading for railgun refire rate
;1263:	if (ps) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $778
line 1264
;1264:		if (cg.predictedPlayerState.weapon == WP_RAILGUN
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
NEI4 $780
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $780
line 1265
;1265:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING) {
line 1267
;1266:			float	f;
;1267:			f = (1.0f - ((float)cg.predictedPlayerState.weaponTime / 1500.0f));
ADDRLP4 448
CNSTF4 1065353216
ADDRGP4 cg+107636+44
INDIRI4
CVIF4 4
CNSTF4 976143166
MULF4
SUBF4
ASGNF4
line 1268
;1268:			gun.shaderRGBA[0] = 255 * ci->color1[0] * f;
ADDRLP4 456
ADDRLP4 444
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 460
CNSTF4 1325400064
ASGNF4
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
LTF4 $790
ADDRLP4 452
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $791
JUMPV
LABELV $790
ADDRLP4 452
ADDRLP4 456
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $791
ADDRLP4 140+116
ADDRLP4 452
INDIRU4
CVUU1 4
ASGNU1
line 1269
;1269:			gun.shaderRGBA[1] = 255 * ci->color1[1] * f;
ADDRLP4 468
ADDRLP4 444
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 472
CNSTF4 1325400064
ASGNF4
ADDRLP4 468
INDIRF4
ADDRLP4 472
INDIRF4
LTF4 $795
ADDRLP4 464
ADDRLP4 468
INDIRF4
ADDRLP4 472
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $796
JUMPV
LABELV $795
ADDRLP4 464
ADDRLP4 468
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $796
ADDRLP4 140+116+1
ADDRLP4 464
INDIRU4
CVUU1 4
ASGNU1
line 1270
;1270:			gun.shaderRGBA[2] = 255 * ci->color1[2] * f;
ADDRLP4 480
ADDRLP4 444
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 484
CNSTF4 1325400064
ASGNF4
ADDRLP4 480
INDIRF4
ADDRLP4 484
INDIRF4
LTF4 $800
ADDRLP4 476
ADDRLP4 480
INDIRF4
ADDRLP4 484
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $801
JUMPV
LABELV $800
ADDRLP4 476
ADDRLP4 480
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $801
ADDRLP4 140+116+2
ADDRLP4 476
INDIRU4
CVUU1 4
ASGNU1
line 1272
;1271:			//gun.shaderRGBA[3] = 255;
;1272:		} else {
ADDRGP4 $781
JUMPV
LABELV $780
line 1273
;1273:			gun.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 452
ADDRLP4 444
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 456
CNSTF4 1325400064
ASGNF4
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
LTF4 $804
ADDRLP4 448
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $805
JUMPV
LABELV $804
ADDRLP4 448
ADDRLP4 452
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $805
ADDRLP4 140+116
ADDRLP4 448
INDIRU4
CVUU1 4
ASGNU1
line 1274
;1274:			gun.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 464
ADDRLP4 444
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $809
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $810
JUMPV
LABELV $809
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $810
ADDRLP4 140+116+1
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1275
;1275:			gun.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 476
ADDRLP4 444
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $814
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $815
JUMPV
LABELV $814
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $815
ADDRLP4 140+116+2
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1277
;1276:			//gun.shaderRGBA[3] = 255;
;1277:			if (gun.shaderRGBA[1] < 64) gun.shaderRGBA[1] = 64;
ADDRLP4 140+116+1
INDIRU1
CVUI4 1
CNSTI4 64
GEI4 $816
ADDRLP4 140+116+1
CNSTU1 64
ASGNU1
LABELV $816
line 1278
;1278:		}
LABELV $781
line 1279
;1279:		gun.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 1280
;1280:	}
LABELV $778
line 1282
;1281:
;1282:	gun.hModel = weapon->weaponModel;
ADDRLP4 140+8
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1283
;1283:	if (!gun.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $825
line 1284
;1284:		return;
ADDRGP4 $773
JUMPV
LABELV $825
line 1287
;1285:	}
;1286:
;1287:	if (!ps) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $828
line 1289
;1288:		// add weapon ready sound
;1289:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 0
ASGNI4
line 1290
;1290:		if ((cent->currentState.eFlags & EF_FIRING) && weapon->firingSound) {
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $830
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 0
EQI4 $830
line 1292
;1291:			// lightning gun and gauntlet make a different sound when fire is held down
;1292:			trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound);
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1293
;1293:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 1
ASGNI4
line 1294
;1294:		} else if (weapon->readySound) {
ADDRGP4 $831
JUMPV
LABELV $830
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $832
line 1295
;1295:			trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound);
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1296
;1296:		}
LABELV $832
LABELV $831
line 1297
;1297:	}
LABELV $828
line 1299
;1298:
;1299:	CG_PositionEntityOnTag(&gun, parent, parent->hModel, "tag_weapon");
ADDRLP4 140
ARGP4
ADDRLP4 448
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
ARGP4
ADDRLP4 448
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $834
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1301
;1300:
;1301:	CG_AddWeaponWithPowerups(&gun, cent->currentState.powerups);
ADDRLP4 140
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1304
;1302:
;1303:	// add the spinning barrel
;1304:	if (weapon->barrelModel) {
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $835
line 1305
;1305:		memset(&barrel, 0, sizeof(barrel));
ADDRLP4 300
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1306
;1306:		VectorCopy(parent->lightingOrigin, barrel.lightingOrigin);
ADDRLP4 300+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1307
;1307:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 300+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1308
;1308:		barrel.renderfx = parent->renderfx;
ADDRLP4 300+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1310
;1309:
;1310:		barrel.hModel = weapon->barrelModel;
ADDRLP4 300+8
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1311
;1311:		angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1312
;1312:		angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1313
;1313:		angles[ROLL] = CG_MachinegunSpinAngle(cent);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 452
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 288+8
ADDRLP4 452
INDIRF4
ASGNF4
line 1314
;1314:		AnglesToAxis(angles, barrel.axis);
ADDRLP4 288
ARGP4
ADDRLP4 300+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1316
;1315:
;1316:		CG_PositionRotatedEntityOnTag(&barrel, &gun, weapon->weaponModel, "tag_barrel");
ADDRLP4 300
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $844
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1318
;1317:
;1318:		CG_AddWeaponWithPowerups(&barrel, cent->currentState.powerups);
ADDRLP4 300
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1319
;1319:	}
LABELV $835
line 1322
;1320:
;1321:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1322:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 440
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1327
;1323:
;1324:	// if the index of the nonPredictedCent is not the same as the clientNum
;1325:	// then this is a fake player (like on teh single player podiums), so
;1326:	// go ahead and use the cent
;1327:	if ((nonPredictedCent - cg_entities) != cent->currentState.clientNum) {
ADDRLP4 440
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 740
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $845
line 1328
;1328:		nonPredictedCent = cent;
ADDRLP4 440
ADDRFP4 8
INDIRP4
ASGNP4
line 1329
;1329:	}
LABELV $845
line 1332
;1330:
;1331:	// add the flash
;1332:	if ((weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK)
ADDRLP4 284
INDIRI4
CNSTI4 6
EQI4 $850
ADDRLP4 284
INDIRI4
CNSTI4 1
EQI4 $850
ADDRLP4 284
INDIRI4
CNSTI4 10
NEI4 $847
LABELV $850
ADDRLP4 440
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $847
line 1333
;1333:		&& (nonPredictedCent->currentState.eFlags & EF_FIRING)) {
line 1335
;1334:		// continuous flash
;1335:	} else {
ADDRGP4 $848
JUMPV
LABELV $847
line 1337
;1336:		// impulse flash
;1337:		if (cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash) {
ADDRLP4 456
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 456
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $851
ADDRLP4 456
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $851
line 1338
;1338:			return;
ADDRGP4 $773
JUMPV
LABELV $851
line 1340
;1339:		}
;1340:	}
LABELV $848
line 1342
;1341:
;1342:	memset(&flash, 0, sizeof(flash));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1343
;1343:	VectorCopy(parent->lightingOrigin, flash.lightingOrigin);
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1344
;1344:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1345
;1345:	flash.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1347
;1346:
;1347:	flash.hModel = weapon->flashModel;
ADDRLP4 0+8
ADDRLP4 280
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1348
;1348:	if (!flash.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $858
line 1349
;1349:		return;
ADDRGP4 $773
JUMPV
LABELV $858
line 1351
;1350:	}
;1351:	angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1352
;1352:	angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1353
;1353:	angles[ROLL] = crandom() * 10;
ADDRLP4 456
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 288+8
ADDRLP4 456
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
ASGNF4
line 1354
;1354:	AnglesToAxis(angles, flash.axis);
ADDRLP4 288
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1357
;1355:
;1356:	// colorize the railgun blast
;1357:	if (weaponNum == WP_RAILGUN) {
ADDRLP4 284
INDIRI4
CNSTI4 7
NEI4 $864
line 1358
;1358:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 464
ADDRLP4 444
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $868
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $869
JUMPV
LABELV $868
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $869
ADDRLP4 0+116
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1359
;1359:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 476
ADDRLP4 444
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $873
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $874
JUMPV
LABELV $873
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $874
ADDRLP4 0+116+1
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1360
;1360:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 488
ADDRLP4 444
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 492
CNSTF4 1325400064
ASGNF4
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
LTF4 $878
ADDRLP4 484
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $879
JUMPV
LABELV $878
ADDRLP4 484
ADDRLP4 488
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $879
ADDRLP4 0+116+2
ADDRLP4 484
INDIRU4
CVUU1 4
ASGNU1
line 1361
;1361:		flash.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1362
;1362:	}
LABELV $864
line 1364
;1363:
;1364:	CG_PositionRotatedEntityOnTag(&flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $882
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1365
;1365:	trap_R_AddRefEntityToScene(&flash);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1367
;1366:
;1367:	if (ps || cg.renderingThirdPerson || cent->currentState.number != cg.predictedPlayerState.clientNum) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $889
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $889
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $883
LABELV $889
line 1371
;1368:		int radius;
;1369:
;1370:		// add lightning bolt
;1371:		CG_LightningBolt(nonPredictedCent, flash.origin);
ADDRLP4 440
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1374
;1372:
;1373:		// add rail trail
;1374:		CG_SpawnRailTrail(cent, flash.origin);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1378
;1375:
;1376:		// use our own muzzle point as dlight origin 
;1377:		// and put it a bit closer to vieworigin to avoid bad normals near walls
;1378:		if (ps && cent->currentState.number == cg.predictedPlayerState.clientNum) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $892
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $892
line 1381
;1379:			vec3_t	start, end, muzzle, forward, up;
;1380:			trace_t	tr;
;1381:			AngleVectors(cg.refdefViewAngles, forward, NULL, up);
ADDRGP4 cg+109424
ARGP4
ADDRLP4 464
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 512
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1382
;1382:			VectorMA(cg.refdef.vieworg, 14, forward, muzzle);
ADDRLP4 476
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1383
;1383:			if (weaponNum == WP_LIGHTNING)
ADDRLP4 284
INDIRI4
CNSTI4 6
NEI4 $909
line 1384
;1384:				VectorMA(muzzle, -8, up, muzzle);
ADDRLP4 476
ADDRLP4 476
INDIRF4
ADDRLP4 512
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 512+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 512+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRGP4 $910
JUMPV
LABELV $909
line 1386
;1385:			else
;1386:				VectorMA(muzzle, -6, up, muzzle);
ADDRLP4 476
ADDRLP4 476
INDIRF4
ADDRLP4 512
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 512+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 512+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
LABELV $910
line 1387
;1387:			VectorMA(cg.refdef.vieworg, 14, forward, start);
ADDRLP4 488
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 488+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 488+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1388
;1388:			VectorMA(cg.refdef.vieworg, 28, forward, end);
ADDRLP4 500
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 500+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 500+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
line 1389
;1389:			CG_Trace(&tr, start, NULL, NULL, end, cent->currentState.number, MASK_SHOT | CONTENTS_TRANSLUCENT);
ADDRLP4 524
ARGP4
ADDRLP4 488
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 500
ARGP4
ADDRFP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 637534209
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1390
;1390:			if (tr.fraction != 1.0) {
ADDRLP4 524+8
INDIRF4
CNSTF4 1065353216
EQF4 $947
line 1391
;1391:				VectorMA(muzzle, -13.0 * (1.0 - tr.fraction), forward, flash.origin);
ADDRLP4 0+68
ADDRLP4 476
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
line 1392
;1392:			} else {
ADDRGP4 $948
JUMPV
LABELV $947
line 1393
;1393:				VectorCopy(muzzle, flash.origin);
ADDRLP4 0+68
ADDRLP4 476
INDIRB
ASGNB 12
line 1394
;1394:			}
LABELV $948
line 1395
;1395:		}
LABELV $892
line 1397
;1396:
;1397:		if (weaponNum == WP_MACHINEGUN) // make it a bit less annoying
ADDRLP4 284
INDIRI4
CNSTI4 2
NEI4 $963
line 1398
;1398:			radius = MG_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 464
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 460
ADDRLP4 464
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
ASGNI4
ADDRGP4 $964
JUMPV
LABELV $963
line 1400
;1399:		else
;1400:			radius = WEAPON_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 468
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 460
ADDRLP4 468
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
ASGNI4
LABELV $964
line 1402
;1401:
;1402:		if (weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2]) {
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
NEF4 $968
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 0
NEF4 $968
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 0
EQF4 $965
LABELV $968
line 1403
;1403:			trap_R_AddLightToScene(flash.origin, radius,
ADDRLP4 0+68
ARGP4
ADDRLP4 460
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1405
;1404:				weapon->flashDlightColor[0], weapon->flashDlightColor[1], weapon->flashDlightColor[2]);
;1405:		}
LABELV $965
line 1406
;1406:	}
LABELV $883
line 1407
;1407:}
LABELV $773
endproc CG_AddPlayerWeapon 580 28
export CG_AddViewWeapon
proc CG_AddViewWeapon 188 16
line 1417
;1408:
;1409:
;1410:/*
;1411:==============
;1412:CG_AddViewWeapon
;1413:
;1414:Add the weapon, and flash for the player's view
;1415:==============
;1416:*/
;1417:void CG_AddViewWeapon(playerState_t *ps) {
line 1425
;1418:	refEntity_t	hand;
;1419:	centity_t *cent;
;1420:	const clientInfo_t *ci;
;1421:	const weaponInfo_t *weapon;
;1422:	vec3_t		fovOffset;
;1423:	vec3_t		angles;
;1424:
;1425:	if (ps->persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $971
line 1426
;1426:		return;
ADDRGP4 $970
JUMPV
LABELV $971
line 1429
;1427:	}
;1428:
;1429:	if (ps->pm_type == PM_INTERMISSION) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $973
line 1430
;1430:		return;
ADDRGP4 $970
JUMPV
LABELV $973
line 1435
;1431:	}
;1432:
;1433:	// no gun if in third person view or a camera is active
;1434:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;1435:	if (cg.renderingThirdPerson) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $975
line 1436
;1436:		return;
ADDRGP4 $970
JUMPV
LABELV $975
line 1441
;1437:	}
;1438:
;1439:
;1440:	// allow the gun to be completely removed
;1441:	if (!cg_drawGun.integer) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $978
line 1444
;1442:		vec3_t		origin;
;1443:
;1444:		if (cg.predictedPlayerState.eFlags & EF_FIRING) {
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $970
line 1446
;1445:			// special hack for lightning gun...
;1446:			VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 176
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 1447
;1447:			VectorMA(origin, -8, cg.refdef.viewaxis[2], origin);
ADDRLP4 176
ADDRLP4 176
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 176+4
ADDRLP4 176+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
line 1448
;1448:			CG_LightningBolt(&cg_entities[ps->clientNum], origin);
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1449
;1449:		}
line 1450
;1450:		return;
ADDRGP4 $970
JUMPV
LABELV $978
line 1454
;1451:	}
;1452:
;1453:	// don't draw if testing a gun model
;1454:	if (cg.testGun) {
ADDRGP4 cg+126088
INDIRI4
CNSTI4 0
EQI4 $1002
line 1455
;1455:		return;
ADDRGP4 $970
JUMPV
LABELV $1002
line 1459
;1456:	}
;1457:
;1458:	// drop gun lower at higher fov
;1459:	if (cgs.fov > 90.0) {
ADDRGP4 cgs+147904
INDIRF4
CNSTF4 1119092736
LEF4 $1005
line 1460
;1460:		fovOffset[0] = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 1461
;1461:		fovOffset[2] = -0.2 * (cgs.fov - 90.0);
ADDRLP4 140+8
ADDRGP4 cgs+147904
INDIRF4
CNSTF4 1119092736
SUBF4
CNSTF4 3192704205
MULF4
ASGNF4
line 1462
;1462:	} else {
ADDRGP4 $1006
JUMPV
LABELV $1005
line 1464
;1463:		// move gun forward at lowerer fov
;1464:		fovOffset[0] = -0.2 * (cgs.fov - 90.0);
ADDRLP4 140
ADDRGP4 cgs+147904
INDIRF4
CNSTF4 1119092736
SUBF4
CNSTF4 3192704205
MULF4
ASGNF4
line 1465
;1465:		fovOffset[2] = 0;
ADDRLP4 140+8
CNSTF4 0
ASGNF4
line 1466
;1466:	}
LABELV $1006
line 1468
;1467:
;1468:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 152
ADDRGP4 cg+108104
ASGNP4
line 1469
;1469:	CG_RegisterWeapon(ps->weapon);
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1470
;1470:	weapon = &cg_weapons[ps->weapon];
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1472
;1471:
;1472:	memset(&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1475
;1473:
;1474:	// set up gun position
;1475:	CG_CalculateWeaponPosition(hand.origin, angles);
ADDRLP4 0+68
ARGP4
ADDRLP4 160
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 1477
;1476:
;1477:	VectorMA(hand.origin, (cg_gun_x.value + fovOffset[0]), cg.refdef.viewaxis[0], hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1478
;1478:	VectorMA(hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1479
;1479:	VectorMA(hand.origin, (cg_gun_z.value + fovOffset[2]), cg.refdef.viewaxis[2], hand.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1481
;1480:
;1481:	AnglesToAxis(angles, hand.axis);
ADDRLP4 160
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1484
;1482:
;1483:	// map torso animations to weapon animations
;1484:	if (cg_gun_frame.integer) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1087
line 1486
;1485:		// development tool
;1486:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 176
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 176
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 176
INDIRI4
ASGNI4
line 1487
;1487:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1488
;1488:	} else {
ADDRGP4 $1088
JUMPV
LABELV $1087
line 1490
;1489:		// get clientinfo for animation map
;1490:		ci = &cgs.clientinfo[cent->currentState.clientNum];
ADDRLP4 172
ADDRLP4 152
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916
ADDP4
ASGNP4
line 1491
;1491:		hand.frame = CG_MapTorsoToWeaponFrame(ci, cent->pe.torso.frame);
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 176
INDIRI4
ASGNI4
line 1492
;1492:		hand.oldframe = CG_MapTorsoToWeaponFrame(ci, cent->pe.torso.oldFrame);
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRLP4 180
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 180
INDIRI4
ASGNI4
line 1493
;1493:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 152
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ASGNF4
line 1494
;1494:	}
LABELV $1088
line 1496
;1495:
;1496:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1497
;1497:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 1500
;1498:
;1499:	// add everything onto the hand
;1500:	CG_AddPlayerWeapon(&hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM]);
ADDRLP4 0
ARGP4
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 cg+108104
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1501
;1501:}
LABELV $970
endproc CG_AddViewWeapon 188 16
export CG_DrawWeaponSelect
proc CG_DrawWeaponSelect 60 32
line 1518
;1502:
;1503:/*
;1504:==============================================================================
;1505:
;1506:WEAPON SELECTION
;1507:
;1508:==============================================================================
;1509:*/
;1510:
;1511:
;1512:/*
;1513:===================
;1514:CG_DrawWeaponSelect
;1515:===================
;1516:*/
;1517:#define AMMO_FONT_SIZE 12
;1518:void CG_DrawWeaponSelect(void) {
line 1530
;1519:	int		i;
;1520:	int		bits;
;1521:	int		count;
;1522:	int		x, y;
;1523:	int		dx, dy;
;1524:	int		weaponSelect;
;1525:	const char *name;
;1526:	float *color;
;1527:	char	buf[16];
;1528:
;1529:	// don't display if dead
;1530:	if (cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 || cg_drawWeaponSelect.integer == 0) {
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
LEI4 $1107
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
CNSTI4 0
NEI4 $1102
LABELV $1107
line 1531
;1531:		return;
ADDRGP4 $1101
JUMPV
LABELV $1102
line 1534
;1532:	}
;1533:
;1534:	if (cg_drawWeaponSelect.integer < 0) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
CNSTI4 0
GEI4 $1108
line 1535
;1535:		color = colorWhite;
ADDRLP4 32
ADDRGP4 colorWhite
ASGNP4
line 1536
;1536:	} else {
ADDRGP4 $1109
JUMPV
LABELV $1108
line 1537
;1537:		color = CG_FadeColor(cg.weaponSelectTime, WEAPON_SELECT_TIME);
ADDRGP4 cg+125780
INDIRI4
ARGI4
CNSTI4 1400
ARGI4
ADDRLP4 56
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 56
INDIRP4
ASGNP4
line 1538
;1538:		if (!color) {
ADDRLP4 32
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1112
line 1539
;1539:			return;
ADDRGP4 $1101
JUMPV
LABELV $1112
line 1541
;1540:		}
;1541:	}
LABELV $1109
line 1542
;1542:	trap_R_SetColor(color);
ADDRLP4 32
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1544
;1543:
;1544:	weaponSelect = abs(cg_drawWeaponSelect.integer);
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 56
INDIRI4
ASGNI4
line 1547
;1545:
;1546:	// showing weapon select clears pickup item display, but not the blend blob
;1547:	cg.itemPickupTime = 0;
ADDRGP4 cg+125772
CNSTI4 0
ASGNI4
line 1550
;1548:
;1549:	// count the number of weapons owned
;1550:	bits = cg.snap->ps.stats[STAT_WEAPONS];
ADDRLP4 12
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
ASGNI4
line 1551
;1551:	count = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 1552
;1552:	for (i = WP_GAUNTLET; i < MAX_WEAPONS; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1117
line 1553
;1553:		if (bits & (1 << i)) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1121
line 1554
;1554:			count++;
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1555
;1555:		}
LABELV $1121
line 1556
;1556:	}
LABELV $1118
line 1552
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1117
line 1558
;1557:
;1558:	if (weaponSelect < 3) {
ADDRLP4 24
INDIRI4
CNSTI4 3
GEI4 $1123
line 1559
;1559:		x = 320 - count * 20;
ADDRLP4 8
CNSTI4 320
ADDRLP4 28
INDIRI4
CNSTI4 20
MULI4
SUBI4
ASGNI4
line 1560
;1560:		y = cgs.screenYmax + 1 - 100; // - STATUSBAR_HEIGHT - 40
ADDRLP4 4
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1120403456
SUBF4
CVFI4 4
ASGNI4
line 1561
;1561:		dx = 40;
ADDRLP4 16
CNSTI4 40
ASGNI4
line 1562
;1562:		dy = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 1563
;1563:	} else {
ADDRGP4 $1124
JUMPV
LABELV $1123
line 1564
;1564:		x = cgs.screenXmin + 6;
ADDRLP4 8
ADDRGP4 cgs+31452
INDIRF4
CNSTF4 1086324736
ADDF4
CVFI4 4
ASGNI4
line 1565
;1565:		y = 240 - count * 20;
ADDRLP4 4
CNSTI4 240
ADDRLP4 28
INDIRI4
CNSTI4 20
MULI4
SUBI4
ASGNI4
line 1566
;1566:		dx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1567
;1567:		dy = 40;
ADDRLP4 20
CNSTI4 40
ASGNI4
line 1568
;1568:	}
LABELV $1124
line 1570
;1569:
;1570:	for (i = WP_GAUNTLET; i < MAX_WEAPONS; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1127
line 1571
;1571:		if (!(bits & (1 << i))) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1131
line 1572
;1572:			continue;
ADDRGP4 $1128
JUMPV
LABELV $1131
line 1575
;1573:		}
;1574:
;1575:		CG_RegisterWeapon(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1578
;1576:
;1577:		// draw weapon icon
;1578:		CG_DrawPic(x, y, 32, 32, cg_weapons[i].weaponIcon);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1581
;1579:
;1580:		// draw selection marker
;1581:		if (i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+108956
INDIRI4
NEI4 $1134
line 1582
;1582:			CG_DrawPic(x - 4, y - 4, 32 + 8, 32 + 8, cgs.media.selectShader);
ADDRLP4 8
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1109393408
ARGF4
ADDRGP4 cgs+146664+244
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1583
;1583:		}
LABELV $1134
line 1586
;1584:
;1585:		// no ammo cross on top
;1586:		if (!cg.snap->ps.ammo[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1139
line 1587
;1587:			CG_DrawPic(x, y, 32, 32, cgs.media.noammoShader);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+146664+304
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1588
;1588:		} else if (weaponSelect > 1 && cg.snap->ps.ammo[i] > 0) {
ADDRGP4 $1140
JUMPV
LABELV $1139
ADDRLP4 24
INDIRI4
CNSTI4 1
LEI4 $1144
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1144
line 1590
;1589:			// ammo counter
;1590:			BG_sprintf(buf, "%i", cg.snap->ps.ammo[i]);
ADDRLP4 36
ARGP4
ADDRGP4 $1147
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 1591
;1591:			if (weaponSelect == 2) {
ADDRLP4 24
INDIRI4
CNSTI4 2
NEI4 $1149
line 1593
;1592:				// horizontal ammo counters
;1593:				CG_DrawString(x + 32 / 2, y - 20, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_CENTER | DS_PROPORTIONAL);
ADDRLP4 8
INDIRI4
CNSTI4 16
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 20
SUBI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
CNSTI4 0
ARGI4
CNSTI4 12
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1594
;1594:			} else {
ADDRGP4 $1150
JUMPV
LABELV $1149
line 1596
;1595:				// vectical ammo counters
;1596:				CG_DrawString(x + 39 + (3 * AMMO_FONT_SIZE), y + (32 - AMMO_FONT_SIZE) / 2, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_RIGHT);
ADDRLP4 8
INDIRI4
CNSTI4 39
ADDI4
CNSTI4 36
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 10
ADDI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
CNSTI4 0
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1597
;1597:			}
LABELV $1150
line 1598
;1598:		}
LABELV $1144
LABELV $1140
line 1600
;1599:
;1600:		x += dx;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
ADDI4
ASGNI4
line 1601
;1601:		y += dy;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
line 1602
;1602:	}
LABELV $1128
line 1570
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1127
line 1605
;1603:
;1604:	// draw the selected name
;1605:	if (cg_weapons[cg.weaponSelect].item && weaponSelect == 1) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1151
ADDRLP4 24
INDIRI4
CNSTI4 1
NEI4 $1151
line 1606
;1606:		name = cg_weapons[cg.weaponSelect].item->pickup_name;
ADDRLP4 52
ADDRGP4 cg+108956
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 1607
;1607:		if (name) {
ADDRLP4 52
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1157
line 1608
;1608:			CG_DrawString(320, y - 22, name, color, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_PROPORTIONAL | DS_CENTER | DS_FORCE_COLOR);
CNSTF4 1134559232
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 22
SUBI4
CVIF4 4
ARGF4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 15
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1609
;1609:		}
LABELV $1157
line 1610
;1610:	}
LABELV $1151
line 1612
;1611:
;1612:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1613
;1613:}
LABELV $1101
endproc CG_DrawWeaponSelect 60 32
proc CG_WeaponSelectable 0 0
line 1621
;1614:
;1615:
;1616:/*
;1617:===============
;1618:CG_WeaponSelectable
;1619:===============
;1620:*/
;1621:static qboolean CG_WeaponSelectable(int i) {
line 1622
;1622:	if (!cg.snap->ps.ammo[i]) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1160
line 1623
;1623:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1159
JUMPV
LABELV $1160
line 1625
;1624:	}
;1625:	if (!(cg.snap->ps.stats[STAT_WEAPONS] & (1 << i))) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1163
line 1626
;1626:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1159
JUMPV
LABELV $1163
line 1629
;1627:	}
;1628:
;1629:	return qtrue;
CNSTI4 1
RETI4
LABELV $1159
endproc CG_WeaponSelectable 0 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 1638
;1630:}
;1631:
;1632:
;1633:/*
;1634:===============
;1635:CG_NextWeapon_f
;1636:===============
;1637:*/
;1638:void CG_NextWeapon_f(void) {
line 1642
;1639:	int		i;
;1640:	int		original;
;1641:
;1642:	if (!cg.snap) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1167
line 1643
;1643:		return;
ADDRGP4 $1166
JUMPV
LABELV $1167
line 1646
;1644:	}
;1645:
;1646:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125780
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1648
;1647:
;1648:	if (cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1176
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1172
LABELV $1176
line 1649
;1649:		return;
ADDRGP4 $1166
JUMPV
LABELV $1172
line 1652
;1650:	}
;1651:
;1652:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+108956
INDIRI4
ASGNI4
line 1654
;1653:
;1654:	for (i = 0; i < MAX_WEAPONS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1178
line 1655
;1655:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+108956
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1656
;1656:		if (cg.weaponSelect == MAX_WEAPONS) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 16
NEI4 $1183
line 1657
;1657:			cg.weaponSelect = 0;
ADDRGP4 cg+108956
CNSTI4 0
ASGNI4
line 1658
;1658:		}
LABELV $1183
line 1659
;1659:		if (cg.weaponSelect == WP_GAUNTLET) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 1
NEI4 $1187
line 1660
;1660:			continue;		// never cycle to gauntlet
ADDRGP4 $1179
JUMPV
LABELV $1187
line 1662
;1661:		}
;1662:		if (CG_WeaponSelectable(cg.weaponSelect)) {
ADDRGP4 cg+108956
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1190
line 1663
;1663:			break;
ADDRGP4 $1180
JUMPV
LABELV $1190
line 1665
;1664:		}
;1665:	}
LABELV $1179
line 1654
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1178
LABELV $1180
line 1666
;1666:	if (i == MAX_WEAPONS) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1193
line 1667
;1667:		cg.weaponSelect = original;
ADDRGP4 cg+108956
ADDRLP4 4
INDIRI4
ASGNI4
line 1668
;1668:	}
LABELV $1193
line 1669
;1669:}
LABELV $1166
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 1677
;1670:
;1671:
;1672:/*
;1673:===============
;1674:CG_PrevWeapon_f
;1675:===============
;1676:*/
;1677:void CG_PrevWeapon_f(void) {
line 1681
;1678:	int		i;
;1679:	int		original;
;1680:
;1681:	if (!cg.snap) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1197
line 1682
;1682:		return;
ADDRGP4 $1196
JUMPV
LABELV $1197
line 1685
;1683:	}
;1684:
;1685:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125780
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1687
;1686:
;1687:	if (cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1206
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1202
LABELV $1206
line 1688
;1688:		return;
ADDRGP4 $1196
JUMPV
LABELV $1202
line 1691
;1689:	}
;1690:
;1691:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+108956
INDIRI4
ASGNI4
line 1693
;1692:
;1693:	for (i = 0; i < MAX_WEAPONS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1208
line 1694
;1694:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+108956
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1695
;1695:		if (cg.weaponSelect == -1) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 -1
NEI4 $1213
line 1696
;1696:			cg.weaponSelect = MAX_WEAPONS - 1;
ADDRGP4 cg+108956
CNSTI4 15
ASGNI4
line 1697
;1697:		}
LABELV $1213
line 1698
;1698:		if (cg.weaponSelect == WP_GAUNTLET) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 1
NEI4 $1217
line 1699
;1699:			continue;		// never cycle to gauntlet
ADDRGP4 $1209
JUMPV
LABELV $1217
line 1701
;1700:		}
;1701:		if (CG_WeaponSelectable(cg.weaponSelect)) {
ADDRGP4 cg+108956
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1220
line 1702
;1702:			break;
ADDRGP4 $1210
JUMPV
LABELV $1220
line 1704
;1703:		}
;1704:	}
LABELV $1209
line 1693
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1208
LABELV $1210
line 1705
;1705:	if (i == MAX_WEAPONS) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1223
line 1706
;1706:		cg.weaponSelect = original;
ADDRGP4 cg+108956
ADDRLP4 4
INDIRI4
ASGNI4
line 1707
;1707:	}
LABELV $1223
line 1708
;1708:}
LABELV $1196
endproc CG_PrevWeapon_f 16 4
export CG_Weapon_f
proc CG_Weapon_f 16 4
line 1716
;1709:
;1710:
;1711:/*
;1712:===============
;1713:CG_Weapon_f
;1714:===============
;1715:*/
;1716:void CG_Weapon_f(void) {
line 1719
;1717:	int		num;
;1718:
;1719:	if (!cg.snap) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1227
line 1720
;1720:		return;
ADDRGP4 $1226
JUMPV
LABELV $1227
line 1723
;1721:	}
;1722:
;1723:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125780
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1725
;1724:
;1725:	if (cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1236
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1232
LABELV $1236
line 1726
;1726:		return;
ADDRGP4 $1226
JUMPV
LABELV $1232
line 1729
;1727:	}
;1728:
;1729:	num = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1731
;1730:
;1731:	if (num < 1 || num > MAX_WEAPONS - 1) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1239
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $1237
LABELV $1239
line 1732
;1732:		return;
ADDRGP4 $1226
JUMPV
LABELV $1237
line 1735
;1733:	}
;1734:
;1735:	if (!(cg.snap->ps.stats[STAT_WEAPONS] & (1 << num))) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1240
line 1736
;1736:		return;		// don't have the weapon
ADDRGP4 $1226
JUMPV
LABELV $1240
line 1739
;1737:	}
;1738:
;1739:	cg.weaponSelect = num;
ADDRGP4 cg+108956
ADDRLP4 0
INDIRI4
ASGNI4
line 1740
;1740:}
LABELV $1226
endproc CG_Weapon_f 16 4
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 1750
;1741:
;1742:
;1743:/*
;1744:===================
;1745:CG_OutOfAmmoChange
;1746:
;1747:The current weapon has just run out of ammo
;1748:===================
;1749:*/
;1750:void CG_OutOfAmmoChange(void) {
line 1753
;1751:	int		i;
;1752:
;1753:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125780
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1755
;1754:
;1755:	if (cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1251
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1247
LABELV $1251
line 1756
;1756:		return;
ADDRGP4 $1244
JUMPV
LABELV $1247
line 1759
;1757:	}
;1758:
;1759:	for (i = MAX_WEAPONS - 1; i > 0; i--) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $1252
line 1760
;1760:		if (CG_WeaponSelectable(i)) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1256
line 1761
;1761:			cg.weaponSelect = i;
ADDRGP4 cg+108956
ADDRLP4 0
INDIRI4
ASGNI4
line 1762
;1762:			break;
ADDRGP4 $1254
JUMPV
LABELV $1256
line 1764
;1763:		}
;1764:	}
LABELV $1253
line 1759
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $1252
LABELV $1254
line 1765
;1765:}
LABELV $1244
endproc CG_OutOfAmmoChange 8 4
export CG_FireWeapon
proc CG_FireWeapon 20 16
line 1783
;1766:
;1767:
;1768:/*
;1769:===================================================================================================
;1770:
;1771:WEAPON EVENTS
;1772:
;1773:===================================================================================================
;1774:*/
;1775:
;1776:/*
;1777:================
;1778:CG_FireWeapon
;1779:
;1780:Caused by an EV_FIRE_WEAPON event
;1781:================
;1782:*/
;1783:void CG_FireWeapon(centity_t *cent) {
line 1788
;1784:	entityState_t *ent;
;1785:	int				c;
;1786:	weaponInfo_t *weap;
;1787:
;1788:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 1789
;1789:	if (ent->weapon == WP_NONE) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1260
line 1790
;1790:		return;
ADDRGP4 $1259
JUMPV
LABELV $1260
line 1792
;1791:	}
;1792:	if (ent->weapon >= WP_NUM_WEAPONS) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 15
LTI4 $1262
line 1793
;1793:		CG_Error("CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS");
ADDRGP4 $1264
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1794
;1794:		return;
ADDRGP4 $1259
JUMPV
LABELV $1262
line 1796
;1795:	}
;1796:	weap = &cg_weapons[ent->weapon];
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1798
;1797:
;1798:	if (ent->number >= 0 && ent->number < MAX_CLIENTS && cent != &cg.predictedPlayerEntity) {
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $1265
ADDRLP4 12
INDIRI4
CNSTI4 64
GEI4 $1265
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+108104
CVPU4 4
EQU4 $1265
line 1800
;1799:		// point from external event to client entity
;1800:		cent = &cg_entities[ent->number];
ADDRFP4 0
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1801
;1801:	}
LABELV $1265
line 1805
;1802:
;1803:	// mark the entity as muzzle flashing, so when it is added it will
;1804:	// append the flash to the weapon model
;1805:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1808
;1806:
;1807:	// lightning gun only does this this on initial press
;1808:	if (ent->weapon == WP_LIGHTNING) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1269
line 1809
;1809:		if (cent->pe.lightningFiring) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1271
line 1810
;1810:			return;
ADDRGP4 $1259
JUMPV
LABELV $1271
line 1812
;1811:		}
;1812:	}
LABELV $1269
line 1815
;1813:
;1814:	// play quad sound if needed
;1815:	if (cent->currentState.powerups & (1 << PW_QUAD)) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1273
line 1816
;1816:		trap_S_StartSound(NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound);
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+146664+620
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1817
;1817:	}
LABELV $1273
line 1820
;1818:
;1819:	// play a sound
;1820:	for (c = 0; c < ARRAY_LEN(weap->flashSound); c++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1280
JUMPV
LABELV $1277
line 1821
;1821:		if (!weap->flashSound[c]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1281
line 1822
;1822:			break;
ADDRGP4 $1279
JUMPV
LABELV $1281
line 1824
;1823:		}
;1824:	}
LABELV $1278
line 1820
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1280
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4
LTU4 $1277
LABELV $1279
line 1825
;1825:	if (c > 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1283
line 1826
;1826:		c = rand() % c;
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1827
;1827:		if (weap->flashSound[c]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1285
line 1828
;1828:			trap_S_StartSound(NULL, ent->number, CHAN_WEAPON, weap->flashSound[c]);
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1829
;1829:		}
LABELV $1285
line 1830
;1830:	}
LABELV $1283
line 1833
;1831:
;1832:	// do brass ejection
;1833:	if (weap->ejectBrassFunc && cg_brassTime.integer > 0) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1287
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $1287
line 1834
;1834:		weap->ejectBrassFunc(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 1835
;1835:	}
LABELV $1287
line 1836
;1836:}
LABELV $1259
endproc CG_FireWeapon 20 16
export CG_MissileHitWall
proc CG_MissileHitWall 140 44
line 1846
;1837:
;1838:
;1839:/*
;1840:=================
;1841:CG_MissileHitWall
;1842:
;1843:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;1844:=================
;1845:*/
;1846:void CG_MissileHitWall(weapon_t weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType) {
line 1862
;1847:	qhandle_t		mod;
;1848:	qhandle_t		mark;
;1849:	qhandle_t		shader;
;1850:	sfxHandle_t		sfx;
;1851:	float			radius;
;1852:	float			light;
;1853:	vec3_t			lightColor;
;1854:	localEntity_t *le;
;1855:	int				r;
;1856:	qboolean		alphaFade;
;1857:	qboolean		isSprite;
;1858:	int				duration;
;1859:	vec3_t			sprOrg;
;1860:	vec3_t			sprVel;
;1861:
;1862:	mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1863
;1863:	radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 1864
;1864:	sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1865
;1865:	mod = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 1866
;1866:	shader = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1867
;1867:	light = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 1868
;1868:	lightColor[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1869
;1869:	lightColor[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 1870
;1870:	lightColor[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 1873
;1871:
;1872:	// set defaults
;1873:	isSprite = qfalse;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 1874
;1874:	duration = 600;
ADDRLP4 48
CNSTI4 600
ASGNI4
line 1876
;1875:
;1876:	switch (weapon) {
ADDRLP4 80
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 2
LTI4 $1293
ADDRLP4 80
INDIRI4
CNSTI4 13
GTI4 $1293
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1437-8
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1437
address $1420
address $1388
address $1331
address $1340
address $1309
address $1359
address $1368
address $1377
address $1293
address $1296
address $1322
address $1395
code
LABELV $1293
LABELV $1296
line 1879
;1877:	default:
;1878:	case WP_NAILGUN:
;1879:		if (soundType == IMPACTSOUND_FLESH) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $1297
line 1880
;1880:			sfx = cgs.media.sfx_nghitflesh;
ADDRLP4 16
ADDRGP4 cgs+146664+796
INDIRI4
ASGNI4
line 1881
;1881:		} else if (soundType == IMPACTSOUND_METAL) {
ADDRGP4 $1298
JUMPV
LABELV $1297
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $1301
line 1882
;1882:			sfx = cgs.media.sfx_nghitmetal;
ADDRLP4 16
ADDRGP4 cgs+146664+800
INDIRI4
ASGNI4
line 1883
;1883:		} else {
ADDRGP4 $1302
JUMPV
LABELV $1301
line 1884
;1884:			sfx = cgs.media.sfx_nghit;
ADDRLP4 16
ADDRGP4 cgs+146664+792
INDIRI4
ASGNI4
line 1885
;1885:		}
LABELV $1302
LABELV $1298
line 1886
;1886:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+424
INDIRI4
ASGNI4
line 1887
;1887:		radius = 12;
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
line 1888
;1888:		break;
ADDRGP4 $1294
JUMPV
LABELV $1309
line 1892
;1889:
;1890:	case WP_LIGHTNING:
;1891:		// no explosion at LG impact, it is added with the beam
;1892:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 1893
;1893:		if (r < 2) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $1310
line 1894
;1894:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 16
ADDRGP4 cgs+146664+756
INDIRI4
ASGNI4
line 1895
;1895:		} else if (r == 2) {
ADDRGP4 $1311
JUMPV
LABELV $1310
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $1314
line 1896
;1896:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 16
ADDRGP4 cgs+146664+752
INDIRI4
ASGNI4
line 1897
;1897:		} else {
ADDRGP4 $1315
JUMPV
LABELV $1314
line 1898
;1898:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 16
ADDRGP4 cgs+146664+760
INDIRI4
ASGNI4
line 1899
;1899:		}
LABELV $1315
LABELV $1311
line 1900
;1900:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+424
INDIRI4
ASGNI4
line 1901
;1901:		radius = 12;
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
line 1902
;1902:		break;
ADDRGP4 $1294
JUMPV
LABELV $1322
line 1905
;1903:
;1904:	case WP_PROX_LAUNCHER:
;1905:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+480
INDIRI4
ASGNI4
line 1906
;1906:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+504
INDIRI4
ASGNI4
line 1907
;1907:		sfx = cgs.media.sfx_proxexp;
ADDRLP4 16
ADDRGP4 cgs+146664+788
INDIRI4
ASGNI4
line 1908
;1908:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+420
INDIRI4
ASGNI4
line 1909
;1909:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 1910
;1910:		light = 300;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1911
;1911:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1912
;1912:		break;
ADDRGP4 $1294
JUMPV
LABELV $1331
line 1915
;1913:
;1914:	case WP_GRENADE_LAUNCHER:
;1915:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+480
INDIRI4
ASGNI4
line 1916
;1916:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+504
INDIRI4
ASGNI4
line 1917
;1917:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+146664+780
INDIRI4
ASGNI4
line 1918
;1918:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+420
INDIRI4
ASGNI4
line 1919
;1919:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 1920
;1920:		light = GL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1921
;1921:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1922
;1922:		break;
ADDRGP4 $1294
JUMPV
LABELV $1340
line 1924
;1923:	case WP_ROCKET_LAUNCHER:
;1924:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+480
INDIRI4
ASGNI4
line 1925
;1925:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+500
INDIRI4
ASGNI4
line 1926
;1926:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+146664+780
INDIRI4
ASGNI4
line 1927
;1927:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+420
INDIRI4
ASGNI4
line 1928
;1928:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 1929
;1929:		light = RL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1930
;1930:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1931
;1931:		duration = 1000;
ADDRLP4 48
CNSTI4 1000
ASGNI4
line 1932
;1932:		lightColor[0] = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1933
;1933:		lightColor[1] = 0.75;
ADDRLP4 4+4
CNSTF4 1061158912
ASGNF4
line 1934
;1934:		lightColor[2] = 0.0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 1935
;1935:		if (cg_oldRocket.integer == 0) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $1294
line 1937
;1936:			// explosion sprite animation
;1937:			VectorMA(origin, 24, dir, sprOrg);
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
line 1938
;1938:			VectorScale(dir, 64, sprVel);
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 100
INDIRP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
line 1940
;1939:
;1940:			CG_ParticleExplosion("explode1", sprOrg, sprVel, 1400, 20, 30);
ADDRGP4 $1358
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 68
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 1941
;1941:		}
line 1942
;1942:		break;
ADDRGP4 $1294
JUMPV
LABELV $1359
line 1944
;1943:	case WP_RAILGUN:
;1944:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+476
INDIRI4
ASGNI4
line 1945
;1945:		shader = cgs.media.railExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+488
INDIRI4
ASGNI4
line 1946
;1946:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+146664+784
INDIRI4
ASGNI4
line 1947
;1947:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+428
INDIRI4
ASGNI4
line 1948
;1948:		radius = 24;
ADDRLP4 28
CNSTF4 1103101952
ASGNF4
line 1949
;1949:		break;
ADDRGP4 $1294
JUMPV
LABELV $1368
line 1951
;1950:	case WP_PLASMAGUN:
;1951:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+476
INDIRI4
ASGNI4
line 1952
;1952:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+492
INDIRI4
ASGNI4
line 1953
;1953:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+146664+784
INDIRI4
ASGNI4
line 1954
;1954:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+428
INDIRI4
ASGNI4
line 1955
;1955:		radius = 16;
ADDRLP4 28
CNSTF4 1098907648
ASGNF4
line 1956
;1956:		break;
ADDRGP4 $1294
JUMPV
LABELV $1377
line 1958
;1957:	case WP_BFG:
;1958:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+480
INDIRI4
ASGNI4
line 1959
;1959:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+508
INDIRI4
ASGNI4
line 1960
;1960:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+146664+780
INDIRI4
ASGNI4
line 1961
;1961:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+420
INDIRI4
ASGNI4
line 1962
;1962:		radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 1963
;1963:		light = BFG_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1964
;1964:		lightColor[0] = 0.2f;
ADDRLP4 4
CNSTF4 1045220557
ASGNF4
line 1965
;1965:		lightColor[1] = 1.0f;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 1966
;1966:		lightColor[2] = 0.2f;
ADDRLP4 4+8
CNSTF4 1045220557
ASGNF4
line 1967
;1967:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1968
;1968:		break;
ADDRGP4 $1294
JUMPV
LABELV $1388
line 1970
;1969:	case WP_SHOTGUN:
;1970:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+472
INDIRI4
ASGNI4
line 1971
;1971:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+496
INDIRI4
ASGNI4
line 1972
;1972:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+416
INDIRI4
ASGNI4
line 1973
;1973:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1974
;1974:		radius = 4;
ADDRLP4 28
CNSTF4 1082130432
ASGNF4
line 1975
;1975:		break;
ADDRGP4 $1294
JUMPV
LABELV $1395
line 1978
;1976:
;1977:	case WP_CHAINGUN:
;1978:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+472
INDIRI4
ASGNI4
line 1979
;1979:		if (soundType == IMPACTSOUND_FLESH) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $1398
line 1980
;1980:			sfx = cgs.media.sfx_chghitflesh;
ADDRLP4 16
ADDRGP4 cgs+146664+808
INDIRI4
ASGNI4
line 1981
;1981:		} else if (soundType == IMPACTSOUND_METAL) {
ADDRGP4 $1399
JUMPV
LABELV $1398
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $1402
line 1982
;1982:			sfx = cgs.media.sfx_chghitmetal;
ADDRLP4 16
ADDRGP4 cgs+146664+812
INDIRI4
ASGNI4
line 1983
;1983:		} else {
ADDRGP4 $1403
JUMPV
LABELV $1402
line 1984
;1984:			sfx = cgs.media.sfx_chghit;
ADDRLP4 16
ADDRGP4 cgs+146664+804
INDIRI4
ASGNI4
line 1985
;1985:		}
LABELV $1403
LABELV $1399
line 1986
;1986:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+416
INDIRI4
ASGNI4
line 1988
;1987:
;1988:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 1989
;1989:		if (r < 2) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $1410
line 1990
;1990:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+146664+764
INDIRI4
ASGNI4
line 1991
;1991:		} else if (r == 2) {
ADDRGP4 $1411
JUMPV
LABELV $1410
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $1414
line 1992
;1992:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+146664+768
INDIRI4
ASGNI4
line 1993
;1993:		} else {
ADDRGP4 $1415
JUMPV
LABELV $1414
line 1994
;1994:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+146664+772
INDIRI4
ASGNI4
line 1995
;1995:		}
LABELV $1415
LABELV $1411
line 1997
;1996:
;1997:		radius = 8;
ADDRLP4 28
CNSTF4 1090519040
ASGNF4
line 1998
;1998:		break;
ADDRGP4 $1294
JUMPV
LABELV $1420
line 2001
;1999:
;2000:	case WP_MACHINEGUN:
;2001:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+146664+472
INDIRI4
ASGNI4
line 2002
;2002:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+146664+496
INDIRI4
ASGNI4
line 2003
;2003:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+146664+416
INDIRI4
ASGNI4
line 2005
;2004:
;2005:		r = rand() & 3;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 96
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2006
;2006:		if (r == 0) {
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $1427
line 2007
;2007:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+146664+764
INDIRI4
ASGNI4
line 2008
;2008:		} else if (r == 1) {
ADDRGP4 $1428
JUMPV
LABELV $1427
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $1431
line 2009
;2009:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+146664+768
INDIRI4
ASGNI4
line 2010
;2010:		} else {
ADDRGP4 $1432
JUMPV
LABELV $1431
line 2011
;2011:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+146664+772
INDIRI4
ASGNI4
line 2012
;2012:		}
LABELV $1432
LABELV $1428
line 2014
;2013:
;2014:		radius = 8;
ADDRLP4 28
CNSTF4 1090519040
ASGNF4
line 2015
;2015:		break;
LABELV $1294
line 2018
;2016:	}
;2017:
;2018:	if (sfx) {
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1439
line 2019
;2019:		trap_S_StartSound(origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx);
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2020
;2020:	}
LABELV $1439
line 2025
;2021:
;2022:	//
;2023:	// create the explosion
;2024:	//
;2025:	if (mod) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $1441
line 2026
;2026:		le = CG_MakeExplosion(origin, dir, mod, shader, duration, isSprite);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 88
INDIRP4
ASGNP4
line 2027
;2027:		le->light = light;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 2028
;2028:		VectorCopy(lightColor, le->lightColor);
ADDRLP4 20
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2029
;2029:		if (weapon == WP_RAILGUN) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1443
line 2031
;2030:			// colorize with client color
;2031:			VectorCopy(cgs.clientinfo[clientNum].color1, le->color);
ADDRLP4 20
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+44
ADDP4
INDIRB
ASGNB 12
line 2032
;2032:			le->refEntity.shaderRGBA[0] = le->color[0] * 255;
ADDRLP4 100
ADDRLP4 20
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 104
CNSTF4 1325400064
ASGNF4
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
LTF4 $1448
ADDRLP4 92
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1449
JUMPV
LABELV $1448
ADDRLP4 92
ADDRLP4 100
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1449
ADDRLP4 20
INDIRP4
CNSTI4 268
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 2033
;2033:			le->refEntity.shaderRGBA[1] = le->color[1] * 255;
ADDRLP4 116
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 120
CNSTF4 1325400064
ASGNF4
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1451
ADDRLP4 108
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1452
JUMPV
LABELV $1451
ADDRLP4 108
ADDRLP4 116
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1452
ADDRLP4 20
INDIRP4
CNSTI4 269
ADDP4
ADDRLP4 108
INDIRU4
CVUU1 4
ASGNU1
line 2034
;2034:			le->refEntity.shaderRGBA[2] = le->color[2] * 255;
ADDRLP4 132
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 136
CNSTF4 1325400064
ASGNF4
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
LTF4 $1454
ADDRLP4 124
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1455
JUMPV
LABELV $1454
ADDRLP4 124
ADDRLP4 132
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1455
ADDRLP4 20
INDIRP4
CNSTI4 270
ADDP4
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 2035
;2035:			le->refEntity.shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 271
ADDP4
CNSTU1 255
ASGNU1
line 2036
;2036:		}
LABELV $1443
line 2037
;2037:	}
LABELV $1441
line 2042
;2038:
;2039:	//
;2040:	// impact mark
;2041:	//
;2042:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+146664+428
INDIRI4
NEI4 $1459
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $1460
JUMPV
LABELV $1459
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $1460
ADDRLP4 36
ADDRLP4 88
INDIRI4
ASGNI4
line 2043
;2043:	if (weapon == WP_RAILGUN) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1461
line 2047
;2044:		float *color;
;2045:
;2046:		// colorize with client color
;2047:		color = cgs.clientinfo[clientNum].color1; // was color2
ADDRLP4 92
ADDRFP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+38916+44
ADDP4
ASGNP4
line 2049
;2048:
;2049:		CG_ImpactMark(mark, origin, dir, random() * 360, color[0], color[1], color[2], 1.0, alphaFade, radius, qfalse);
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
ADDRLP4 100
ADDRLP4 92
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2050
;2050:	} else {
ADDRGP4 $1462
JUMPV
LABELV $1461
line 2051
;2051:		CG_ImpactMark(mark, origin, dir, random() * 360, 1.0, 1.0, 1.0, 1.0, alphaFade, radius, qfalse);
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2052
;2052:	}
LABELV $1462
line 2053
;2053:}
LABELV $1290
endproc CG_MissileHitWall 140 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 20
line 2061
;2054:
;2055:
;2056:/*
;2057:=================
;2058:CG_MissileHitPlayer
;2059:=================
;2060:*/
;2061:void CG_MissileHitPlayer(int weapon, vec3_t origin, vec3_t dir, int entityNum) {
line 2062
;2062:	CG_Bleed(origin, entityNum);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2066
;2063:
;2064:	// some weapons will make an explosion with the blood, while
;2065:	// others will just make the blood
;2066:	switch (weapon) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1467
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $1467
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1469-16
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1469
address $1468
address $1468
address $1467
address $1467
address $1468
address $1468
address $1467
address $1468
address $1468
address $1468
code
LABELV $1468
line 2074
;2067:	case WP_GRENADE_LAUNCHER:
;2068:	case WP_ROCKET_LAUNCHER:
;2069:	case WP_PLASMAGUN:
;2070:	case WP_BFG:
;2071:	case WP_NAILGUN:
;2072:	case WP_CHAINGUN:
;2073:	case WP_PROX_LAUNCHER:
;2074:		CG_MissileHitWall(weapon, 0, origin, dir, IMPACTSOUND_FLESH);
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2075
;2075:		break;
line 2077
;2076:	default:
;2077:		break;
LABELV $1467
line 2079
;2078:	}
;2079:}
LABELV $1465
endproc CG_MissileHitPlayer 4 20
proc CG_ShotgunPellet 128 28
line 2096
;2080:
;2081:
;2082:
;2083:/*
;2084:============================================================================
;2085:
;2086:SHOTGUN TRACING
;2087:
;2088:============================================================================
;2089:*/
;2090:
;2091:/*
;2092:================
;2093:CG_ShotgunPellet
;2094:================
;2095:*/
;2096:static void CG_ShotgunPellet(vec3_t start, vec3_t end, int skipNum) {
line 2100
;2097:	trace_t		tr;
;2098:	int sourceContentType, destContentType;
;2099:
;2100:	CG_Trace(&tr, start, NULL, NULL, end, skipNum, MASK_SHOT);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2102
;2101:
;2102:	sourceContentType = CG_PointContents(start, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 2103
;2103:	destContentType = CG_PointContents(tr.endpos, 0);
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 68
INDIRI4
ASGNI4
line 2106
;2104:
;2105:	// FIXME: should probably move this cruft into CG_BubbleTrail
;2106:	if (sourceContentType == destContentType) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $1473
line 2107
;2107:		if (sourceContentType & CONTENTS_WATER) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1474
line 2108
;2108:			CG_BubbleTrail(start, tr.endpos, 32);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2109
;2109:		}
line 2110
;2110:	} else if (sourceContentType & CONTENTS_WATER) {
ADDRGP4 $1474
JUMPV
LABELV $1473
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1478
line 2113
;2111:		trace_t trace;
;2112:
;2113:		trap_CM_BoxTrace(&trace, end, start, NULL, NULL, 0, CONTENTS_WATER);
ADDRLP4 72
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2114
;2114:		CG_BubbleTrail(start, trace.endpos, 32);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2115
;2115:	} else if (destContentType & CONTENTS_WATER) {
ADDRGP4 $1479
JUMPV
LABELV $1478
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1481
line 2118
;2116:		trace_t trace;
;2117:
;2118:		trap_CM_BoxTrace(&trace, start, end, NULL, NULL, 0, CONTENTS_WATER);
ADDRLP4 72
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2119
;2119:		CG_BubbleTrail(tr.endpos, trace.endpos, 32);
ADDRLP4 0+12
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2120
;2120:	}
LABELV $1481
LABELV $1479
LABELV $1474
line 2122
;2121:
;2122:	if (tr.surfaceFlags & SURF_NOIMPACT) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1485
line 2123
;2123:		return;
ADDRGP4 $1471
JUMPV
LABELV $1485
line 2126
;2124:	}
;2125:
;2126:	if (cg_entities[tr.entityNum].currentState.eType == ET_PLAYER) {
ADDRLP4 0+52
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1488
line 2127
;2127:		CG_MissileHitPlayer(WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum);
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 2128
;2128:	} else {
ADDRGP4 $1489
JUMPV
LABELV $1488
line 2129
;2129:		if (tr.surfaceFlags & SURF_NOIMPACT) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1495
line 2131
;2130:			// SURF_NOIMPACT will not make a flame puff or a mark
;2131:			return;
ADDRGP4 $1471
JUMPV
LABELV $1495
line 2133
;2132:		}
;2133:		if (tr.surfaceFlags & SURF_METALSTEPS) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1498
line 2134
;2134:			CG_MissileHitWall(WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL);
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2135
;2135:		} else {
ADDRGP4 $1499
JUMPV
LABELV $1498
line 2136
;2136:			CG_MissileHitWall(WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT);
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2137
;2137:		}
LABELV $1499
line 2138
;2138:	}
LABELV $1489
line 2139
;2139:}
LABELV $1471
endproc CG_ShotgunPellet 128 28
proc CG_ShotgunPattern 80 12
line 2149
;2140:
;2141:/*
;2142:================
;2143:CG_ShotgunPattern
;2144:
;2145:Perform the same traces the server did to locate the
;2146:hit splashes
;2147:================
;2148:*/
;2149:static void CG_ShotgunPattern(vec3_t origin, vec3_t origin2, int seed, int otherEntNum) {
line 2157
;2150:	int			i;
;2151:	float		r, u;
;2152:	vec3_t		end;
;2153:	vec3_t		forward, right, up;
;2154:
;2155:	// derive the right and up vectors from the forward vector, because
;2156:	// the client won't have any other information
;2157:	VectorNormalize2(origin2, forward);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 2158
;2158:	PerpendicularVector(right, forward);
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 2159
;2159:	CrossProduct(forward, right, up);
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 2162
;2160:
;2161:	// generate the "random" spread pattern
;2162:	for (i = 0; i < DEFAULT_SHOTGUN_COUNT; i++) {
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $1506
line 2163
;2163:		r = Q_crandom(&seed) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 60
INDIRF4
CNSTF4 1177485312
MULF4
ASGNF4
line 2164
;2164:		u = Q_crandom(&seed) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 64
INDIRF4
CNSTF4 1177485312
MULF4
ASGNF4
line 2165
;2165:		VectorMA(origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 20
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
line 2166
;2166:		VectorMA(end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2167
;2167:		VectorMA(end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2169
;2168:
;2169:		CG_ShotgunPellet(origin, end, otherEntNum);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 2170
;2170:	}
LABELV $1507
line 2162
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 11
LTI4 $1506
line 2171
;2171:}
LABELV $1505
endproc CG_ShotgunPattern 80 12
export CG_ShotgunFire
proc CG_ShotgunFire 44 48
line 2178
;2172:
;2173:/*
;2174:==============
;2175:CG_ShotgunFire
;2176:==============
;2177:*/
;2178:void CG_ShotgunFire(entityState_t *es) {
line 2182
;2179:	vec3_t	v;
;2180:	int		contents;
;2181:
;2182:	VectorSubtract(es->origin2, es->pos.trBase, v);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2183
;2183:	VectorNormalize(v);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2184
;2184:	VectorScale(v, 32, v);
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
line 2185
;2185:	VectorAdd(es->pos.trBase, v, v);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 2186
;2186:	if (cgs.glconfig.hardwareType != GLHW_RAGEPRO) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $1537
line 2190
;2187:		// ragepro can't alpha fade, so don't even bother with smoke
;2188:		vec3_t			up;
;2189:
;2190:		contents = CG_PointContents(es->pos.trBase, 0);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 2191
;2191:		if (!(contents & CONTENTS_WATER)) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $1541
line 2192
;2192:			VectorSet(up, 0, 0, 8);
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 28+4
CNSTF4 0
ASGNF4
ADDRLP4 28+8
CNSTF4 1090519040
ASGNF4
line 2193
;2193:			CG_SmokePuff(v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+146664+316
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 2194
;2194:		}
LABELV $1541
line 2195
;2195:	}
LABELV $1537
line 2196
;2196:	CG_ShotgunPattern(es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 2197
;2197:}
LABELV $1526
endproc CG_ShotgunFire 44 48
export CG_Tracer
proc CG_Tracer 216 16
line 2213
;2198:
;2199:/*
;2200:============================================================================
;2201:
;2202:BULLETS
;2203:
;2204:============================================================================
;2205:*/
;2206:
;2207:
;2208:/*
;2209:===============
;2210:CG_Tracer
;2211:===============
;2212:*/
;2213:void CG_Tracer(vec3_t source, vec3_t dest) {
line 2222
;2214:	vec3_t		forward, right;
;2215:	polyVert_t	verts[4];
;2216:	vec3_t		line;
;2217:	float		len, begin, end;
;2218:	vec3_t		start, finish;
;2219:	vec3_t		midpoint;
;2220:
;2221:	// tracer
;2222:	VectorSubtract(dest, source, forward);
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2223
;2223:	len = VectorNormalize(forward);
ADDRLP4 108
ARGP4
ADDRLP4 188
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 188
INDIRF4
ASGNF4
line 2226
;2224:
;2225:	// start at least a little ways from the muzzle
;2226:	if (len < 100) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $1551
line 2227
;2227:		return;
ADDRGP4 $1548
JUMPV
LABELV $1551
line 2229
;2228:	}
;2229:	begin = 50 + random() * (len - 60);
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 2230
;2230:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 2231
;2231:	if (end > len) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $1554
line 2232
;2232:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 2233
;2233:	}
LABELV $1554
line 2234
;2234:	VectorMA(source, begin, forward, start);
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 196
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 2235
;2235:	VectorMA(source, end, forward, finish);
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 2237
;2236:
;2237:	line[0] = DotProduct(forward, cg.refdef.viewaxis[1]);
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2238
;2238:	line[1] = DotProduct(forward, cg.refdef.viewaxis[2]);
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2240
;2239:
;2240:	VectorScale(cg.refdef.viewaxis[1], line[1], right);
ADDRLP4 96
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 2241
;2241:	VectorMA(right, -line[0], cg.refdef.viewaxis[2], right);
ADDRLP4 212
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2242
;2242:	VectorNormalize(right);
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2244
;2243:
;2244:	VectorMA(finish, cg_tracerWidth.value, right, verts[0].xyz);
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2245
;2245:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 2246
;2246:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 2247
;2247:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 2248
;2248:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 2249
;2249:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 2250
;2250:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 2252
;2251:
;2252:	VectorMA(finish, -cg_tracerWidth.value, right, verts[1].xyz);
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2253
;2253:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 2254
;2254:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 2255
;2255:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 2256
;2256:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 2257
;2257:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 2258
;2258:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 2260
;2259:
;2260:	VectorMA(start, -cg_tracerWidth.value, right, verts[2].xyz);
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2261
;2261:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 2262
;2262:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 2263
;2263:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 2264
;2264:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 2265
;2265:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 2266
;2266:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 2268
;2267:
;2268:	VectorMA(start, cg_tracerWidth.value, right, verts[3].xyz);
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2269
;2269:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 2270
;2270:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 2271
;2271:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 2272
;2272:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 2273
;2273:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 2274
;2274:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 2276
;2275:
;2276:	trap_R_AddPolyToScene(cgs.media.tracerShader, 4, verts);
ADDRGP4 cgs+146664+252
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 2278
;2277:
;2278:	midpoint[0] = (start[0] + finish[0]) * 0.5;
ADDRLP4 168
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2279
;2279:	midpoint[1] = (start[1] + finish[1]) * 0.5;
ADDRLP4 168+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2280
;2280:	midpoint[2] = (start[2] + finish[2]) * 0.5;
ADDRLP4 168+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2283
;2281:
;2282:	// add the tracer sound
;2283:	trap_S_StartSound(midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound);
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+146664+624
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2285
;2284:
;2285:}
LABELV $1548
endproc CG_Tracer 216 16
proc CG_CalcMuzzlePoint 36 16
line 2293
;2286:
;2287:
;2288:/*
;2289:======================
;2290:CG_CalcMuzzlePoint
;2291:======================
;2292:*/
;2293:static qboolean	CG_CalcMuzzlePoint(int entityNum, vec3_t muzzle) {
line 2298
;2294:	vec3_t		forward;
;2295:	centity_t *cent;
;2296:	int			anim;
;2297:
;2298:	if (entityNum == cg.snap->ps.clientNum) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1736
line 2299
;2299:		VectorCopy(cg.snap->ps.origin, muzzle);
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 2300
;2300:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2301
;2301:		AngleVectors(cg.snap->ps.viewangles, forward, NULL, NULL);
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2302
;2302:		VectorMA(muzzle, 14, forward, muzzle);
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 2303
;2303:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1735
JUMPV
LABELV $1736
line 2306
;2304:	}
;2305:
;2306:	cent = &cg_entities[entityNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2307
;2307:	if (!cent->currentValid) {
ADDRLP4 12
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1744
line 2308
;2308:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1735
JUMPV
LABELV $1744
line 2311
;2309:	}
;2310:
;2311:	VectorCopy(cent->currentState.pos.trBase, muzzle);
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2313
;2312:
;2313:	AngleVectors(cent->currentState.apos.trBase, forward, NULL, NULL);
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2314
;2314:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 2315
;2315:	if (anim == LEGS_WALKCR || anim == LEGS_IDLECR) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1748
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $1746
LABELV $1748
line 2316
;2316:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 2317
;2317:	} else {
ADDRGP4 $1747
JUMPV
LABELV $1746
line 2318
;2318:		muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 2319
;2319:	}
LABELV $1747
line 2321
;2320:
;2321:	VectorMA(muzzle, 14, forward, muzzle);
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 2323
;2322:
;2323:	return qtrue;
CNSTI4 1
RETI4
LABELV $1735
endproc CG_CalcMuzzlePoint 36 16
export CG_Bullet
proc CG_Bullet 96 28
line 2334
;2324:
;2325:}
;2326:
;2327:/*
;2328:======================
;2329:CG_Bullet
;2330:
;2331:Renders bullet effects.
;2332:======================
;2333:*/
;2334:void CG_Bullet(vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum) {
line 2341
;2335:	trace_t trace;
;2336:	int sourceContentType, destContentType;
;2337:	vec3_t		start;
;2338:
;2339:	// if the shooter is currently valid, calc a source point and possibly
;2340:	// do trail effects
;2341:	if (sourceEntityNum >= 0 && cg_tracerChance.value > 0) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $1752
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $1752
line 2342
;2342:		if (CG_CalcMuzzlePoint(sourceEntityNum, start)) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $1755
line 2343
;2343:			sourceContentType = CG_PointContents(start, 0);
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 2344
;2344:			destContentType = CG_PointContents(end, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 84
INDIRI4
ASGNI4
line 2347
;2345:
;2346:			// do a complete bubble trail if necessary
;2347:			if ((sourceContentType == destContentType) && (sourceContentType & CONTENTS_WATER)) {
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1757
ADDRLP4 88
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1757
line 2348
;2348:				CG_BubbleTrail(start, end, 32);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2349
;2349:			}
ADDRGP4 $1758
JUMPV
LABELV $1757
line 2351
;2350:			// bubble trail from water into air
;2351:			else if ((sourceContentType & CONTENTS_WATER)) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1759
line 2352
;2352:				trap_CM_BoxTrace(&trace, end, start, NULL, NULL, 0, CONTENTS_WATER);
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2353
;2353:				CG_BubbleTrail(start, trace.endpos, 32);
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2354
;2354:			}
ADDRGP4 $1760
JUMPV
LABELV $1759
line 2356
;2355:			// bubble trail from air into water
;2356:			else if ((destContentType & CONTENTS_WATER)) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1762
line 2357
;2357:				trap_CM_BoxTrace(&trace, start, end, NULL, NULL, 0, CONTENTS_WATER);
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2358
;2358:				CG_BubbleTrail(trace.endpos, end, 32);
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2359
;2359:			}
LABELV $1762
LABELV $1760
LABELV $1758
line 2362
;2360:
;2361:			// draw a tracer
;2362:			if (random() < cg_tracerChance.value) {
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $1765
line 2363
;2363:				CG_Tracer(start, end);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 2364
;2364:			}
LABELV $1765
line 2365
;2365:		}
LABELV $1755
line 2366
;2366:	}
LABELV $1752
line 2369
;2367:
;2368:	// impact splash and mark
;2369:	if (flesh) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1768
line 2370
;2370:		CG_Bleed(end, fleshEntityNum);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2371
;2371:	} else {
ADDRGP4 $1769
JUMPV
LABELV $1768
line 2372
;2372:		CG_MissileHitWall(WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT);
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2373
;2373:	}
LABELV $1769
line 2375
;2374:
;2375:}
LABELV $1751
endproc CG_Bullet 96 28
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1358
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $1264
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $1147
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $882
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $844
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $834
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $759
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 119
byte 1 105
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $605
byte 1 37
byte 1 115
byte 1 95
byte 1 100
byte 1 102
byte 1 0
align 1
LABELV $599
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $592
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $591
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $588
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $587
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $585
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $580
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $577
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $576
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $574
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $571
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $568
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $567
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $565
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 119
byte 1 110
byte 1 97
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $564
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $560
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $559
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $557
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $554
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 47
byte 1 119
byte 1 115
byte 1 116
byte 1 98
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $553
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $551
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $548
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $547
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $545
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $541
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $540
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $539
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $538
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $536
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $533
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $532
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $531
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $530
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $529
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $527
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $525
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $522
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $519
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $516
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $513
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $510
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $509
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $508
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $506
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $505
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $501
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $498
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $497
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $496
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $482
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
