export CG_InitMarkPolys
code
proc CG_InitMarkPolys 12 12
file "..\..\..\..\code\cgame\cg_marks.c"
line 28
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_marks.c -- wall marks
;4:
;5:#include "cg_local.h"
;6:
;7:/*
;8:===================================================================
;9:
;10:MARK POLYS
;11:
;12:===================================================================
;13:*/
;14:
;15:
;16:markPoly_t	cg_activeMarkPolys;			// double linked list
;17:markPoly_t *cg_freeMarkPolys;			// single linked list
;18:markPoly_t	cg_markPolys[MAX_MARK_POLYS];
;19:static		int	markTotal;
;20:
;21:/*
;22:===================
;23:CG_InitMarkPolys
;24:
;25:This is called at startup and for tournement restarts
;26:===================
;27:*/
;28:void	CG_InitMarkPolys(void) {
line 31
;29:	int		i;
;30:
;31:	memset(cg_markPolys, 0, sizeof(cg_markPolys));
ADDRGP4 cg_markPolys
ARGP4
CNSTI4 0
ARGI4
CNSTI4 73728
ARGI4
ADDRGP4 memset
CALLP4
pop
line 33
;32:
;33:	cg_activeMarkPolys.nextMark = &cg_activeMarkPolys;
ADDRGP4 cg_activeMarkPolys+4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 34
;34:	cg_activeMarkPolys.prevMark = &cg_activeMarkPolys;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 35
;35:	cg_freeMarkPolys = cg_markPolys;
ADDRGP4 cg_freeMarkPolys
ADDRGP4 cg_markPolys
ASGNP4
line 36
;36:	for (i = 0; i < MAX_MARK_POLYS - 1; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $75
line 37
;37:		cg_markPolys[i].nextMark = &cg_markPolys[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 288
MULI4
ADDRGP4 cg_markPolys+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 288
MULI4
ADDRGP4 cg_markPolys+288
ADDP4
ASGNP4
line 38
;38:	}
LABELV $76
line 36
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 255
LTI4 $75
line 39
;39:}
LABELV $73
endproc CG_InitMarkPolys 12 12
export CG_FreeMarkPoly
proc CG_FreeMarkPoly 8 4
line 47
;40:
;41:
;42:/*
;43:==================
;44:CG_FreeMarkPoly
;45:==================
;46:*/
;47:void CG_FreeMarkPoly(markPoly_t *le) {
line 48
;48:	if (!le->prevMark) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $82
line 49
;49:		CG_Error("CG_FreeLocalEntity: not active");
ADDRGP4 $84
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 50
;50:	}
LABELV $82
line 53
;51:
;52:	// remove from the doubly linked active list
;53:	le->prevMark->nextMark = le->nextMark;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 54
;54:	le->nextMark->prevMark = le->prevMark;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 57
;55:
;56:	// the free list is only singly linked
;57:	le->nextMark = cg_freeMarkPolys;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 58
;58:	cg_freeMarkPolys = le;
ADDRGP4 cg_freeMarkPolys
ADDRFP4 0
INDIRP4
ASGNP4
line 59
;59:}
LABELV $81
endproc CG_FreeMarkPoly 8 4
export CG_AllocMark
proc CG_AllocMark 12 12
line 68
;60:
;61:/*
;62:===================
;63:CG_AllocMark
;64:
;65:Will allways succeed, even if it requires freeing an old active mark
;66:===================
;67:*/
;68:markPoly_t *CG_AllocMark(void) {
line 72
;69:	markPoly_t *le;
;70:	int time;
;71:
;72:	if (!cg_freeMarkPolys) {
ADDRGP4 cg_freeMarkPolys
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $86
line 75
;73:		// no free entities, so free the one at the end of the chain
;74:		// remove the oldest active entity
;75:		time = cg_activeMarkPolys.prevMark->time;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $89
JUMPV
LABELV $88
line 76
;76:		while (cg_activeMarkPolys.prevMark && time == cg_activeMarkPolys.prevMark->time) {
line 77
;77:			CG_FreeMarkPoly(cg_activeMarkPolys.prevMark);
ADDRGP4 cg_activeMarkPolys
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 78
;78:		}
LABELV $89
line 76
ADDRLP4 8
ADDRGP4 cg_activeMarkPolys
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $91
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
EQI4 $88
LABELV $91
line 79
;79:	}
LABELV $86
line 81
;80:
;81:	le = cg_freeMarkPolys;
ADDRLP4 0
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 82
;82:	cg_freeMarkPolys = cg_freeMarkPolys->nextMark;
ADDRLP4 8
ADDRGP4 cg_freeMarkPolys
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 84
;83:
;84:	memset(le, 0, sizeof(*le));
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 288
ARGI4
ADDRGP4 memset
CALLP4
pop
line 87
;85:
;86:	// link into the active list
;87:	le->nextMark = cg_activeMarkPolys.nextMark;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 88
;88:	le->prevMark = &cg_activeMarkPolys;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 89
;89:	cg_activeMarkPolys.nextMark->prevMark = le;
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 90
;90:	cg_activeMarkPolys.nextMark = le;
ADDRGP4 cg_activeMarkPolys+4
ADDRLP4 0
INDIRP4
ASGNP4
line 91
;91:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $85
endproc CG_AllocMark 12 12
export CG_ImpactMark
proc CG_ImpactMark 6076 28
line 112
;92:}
;93:
;94:
;95:
;96:/*
;97:=================
;98:CG_ImpactMark
;99:
;100:origin should be a point within a unit of the plane
;101:dir should be the plane normal
;102:
;103:temporary marks will not be stored or randomly oriented, but immediately
;104:passed to the renderer.
;105:=================
;106:*/
;107:#define	MAX_MARK_FRAGMENTS	128
;108:#define	MAX_MARK_POINTS		384
;109:
;110:void CG_ImpactMark(qhandle_t markShader, const vec3_t origin, const vec3_t dir,
;111:	float orientation, float red, float green, float blue, float alpha,
;112:	qboolean alphaFade, float radius, qboolean temporary) {
line 123
;113:	vec3_t			axis[3];
;114:	float			texCoordScale;
;115:	vec3_t			originalPoints[4];
;116:	byte			colors[4];
;117:	int				i, j;
;118:	int				numFragments;
;119:	markFragment_t	markFragments[MAX_MARK_FRAGMENTS], *mf;
;120:	vec3_t			markPoints[MAX_MARK_POINTS];
;121:	vec3_t			projection;
;122:
;123:	if (!cg_addMarks.integer && !temporary) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $96
ADDRFP4 40
INDIRI4
CNSTI4 0
NEI4 $96
line 124
;124:		return;
ADDRGP4 $95
JUMPV
LABELV $96
line 127
;125:	}
;126:
;127:	if (radius <= 0) {
ADDRFP4 36
INDIRF4
CNSTF4 0
GTF4 $99
line 128
;128:		CG_Error("CG_ImpactMark called with <= 0 radius");
ADDRGP4 $101
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 129
;129:	}
LABELV $99
line 136
;130:
;131:	//if ( markTotal >= MAX_MARK_POLYS ) {
;132:	//	return;
;133:	//}
;134:
;135:	// create the texture axis
;136:	VectorNormalize2(dir, axis[0]);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 137
;137:	PerpendicularVector(axis[1], axis[0]);
ADDRLP4 0+12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 138
;138:	RotatePointAroundVector(axis[2], axis[0], axis[1], orientation);
ADDRLP4 0+24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 0+12
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 139
;139:	CrossProduct(axis[0], axis[2], axis[1]);
ADDRLP4 0
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 141
;140:
;141:	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 48
CNSTF4 1056964608
ADDRFP4 36
INDIRF4
DIVF4
ASGNF4
line 144
;142:
;143:	// create the full polygon
;144:	for (i = 0; i < 3; i++) {
ADDRLP4 44
CNSTI4 0
ASGNI4
LABELV $107
line 145
;145:		originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5756
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5756
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5756
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 146
;146:		originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5764
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+12
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5764
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5764
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 147
;147:		originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5772
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+24
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5772
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5772
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 148
;148:		originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5780
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+36
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5780
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5780
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 149
;149:	}
LABELV $108
line 144
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 3
LTI4 $107
line 152
;150:
;151:	// get the fragments
;152:	VectorScale(dir, -20, projection);
ADDRLP4 5752
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4716
ADDRLP4 5752
INDIRP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
ADDRLP4 4716+4
ADDRLP4 5752
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
ADDRLP4 4716+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
line 153
;153:	numFragments = trap_CM_MarkFragments(4, (void *)originalPoints,
CNSTI4 4
ARGI4
ADDRLP4 4664
ARGP4
ADDRLP4 4716
ARGP4
CNSTI4 384
ARGI4
ADDRLP4 56
ARGP4
CNSTI4 128
ARGI4
ADDRLP4 4728
ARGP4
ADDRLP4 5756
ADDRGP4 trap_CM_MarkFragments
CALLI4
ASGNI4
ADDRLP4 4712
ADDRLP4 5756
INDIRI4
ASGNI4
line 157
;154:		projection, MAX_MARK_POINTS, markPoints[0],
;155:		MAX_MARK_FRAGMENTS, markFragments);
;156:
;157:	colors[0] = red * 255;
ADDRLP4 5764
ADDRFP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5768
CNSTF4 1325400064
ASGNF4
ADDRLP4 5764
INDIRF4
ADDRLP4 5768
INDIRF4
LTF4 $125
ADDRLP4 5760
ADDRLP4 5764
INDIRF4
ADDRLP4 5768
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $126
JUMPV
LABELV $125
ADDRLP4 5760
ADDRLP4 5764
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $126
ADDRLP4 52
ADDRLP4 5760
INDIRU4
CVUU1 4
ASGNU1
line 158
;158:	colors[1] = green * 255;
ADDRLP4 5776
ADDRFP4 20
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5780
CNSTF4 1325400064
ASGNF4
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
LTF4 $129
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $130
JUMPV
LABELV $129
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $130
ADDRLP4 52+1
ADDRLP4 5772
INDIRU4
CVUU1 4
ASGNU1
line 159
;159:	colors[2] = blue * 255;
ADDRLP4 5788
ADDRFP4 24
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5792
CNSTF4 1325400064
ASGNF4
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
LTF4 $133
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $134
JUMPV
LABELV $133
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $134
ADDRLP4 52+2
ADDRLP4 5784
INDIRU4
CVUU1 4
ASGNU1
line 160
;160:	colors[3] = alpha * 255;
ADDRLP4 5800
ADDRFP4 28
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5804
CNSTF4 1325400064
ASGNF4
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
LTF4 $137
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $138
JUMPV
LABELV $137
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $138
ADDRLP4 52+3
ADDRLP4 5796
INDIRU4
CVUU1 4
ASGNU1
line 162
;161:
;162:	for (i = 0, mf = markFragments; i < numFragments; i++, mf++) {
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 4728
ASGNP4
ADDRGP4 $142
JUMPV
LABELV $139
line 169
;163:		polyVert_t *v;
;164:		polyVert_t	verts[MAX_VERTS_ON_POLY];
;165:		markPoly_t *mark;
;166:
;167:		// we have an upper limit on the complexity of polygons
;168:		// that we store persistantly
;169:		if (mf->numPoints > MAX_VERTS_ON_POLY) {
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 10
LEI4 $143
line 170
;170:			mf->numPoints = MAX_VERTS_ON_POLY;
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 171
;171:		}
LABELV $143
line 172
;172:		for (j = 0, v = verts; j < mf->numPoints; j++, v++) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 5808
ADDRLP4 5816
ASGNP4
ADDRGP4 $148
JUMPV
LABELV $145
line 175
;173:			vec3_t		delta;
;174:
;175:			VectorCopy(markPoints[mf->firstPoint + j], v->xyz);
ADDRLP4 5808
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
CNSTI4 12
MULI4
ADDRLP4 56
ADDP4
INDIRB
ASGNB 12
line 177
;176:
;177:			VectorSubtract(v->xyz, origin, delta);
ADDRLP4 6072
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 6056
ADDRLP4 5808
INDIRP4
INDIRF4
ADDRLP4 6072
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6056+4
ADDRLP4 5808
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 6072
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6056+8
ADDRLP4 5808
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 178
;178:			v->st[0] = 0.5 + DotProduct(delta, axis[1]) * texCoordScale;
ADDRLP4 5808
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 6056
INDIRF4
ADDRLP4 0+12
INDIRF4
MULF4
ADDRLP4 6056+4
INDIRF4
ADDRLP4 0+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6056+8
INDIRF4
ADDRLP4 0+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 179
;179:			v->st[1] = 0.5 + DotProduct(delta, axis[2]) * texCoordScale;
ADDRLP4 5808
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 6056
INDIRF4
ADDRLP4 0+24
INDIRF4
MULF4
ADDRLP4 6056+4
INDIRF4
ADDRLP4 0+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6056+8
INDIRF4
ADDRLP4 0+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 180
;180:			*(int *)v->modulate = *(int *)colors;
ADDRLP4 5808
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 181
;181:		}
LABELV $146
line 172
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 5808
ADDRLP4 5808
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $148
ADDRLP4 36
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $145
line 184
;182:
;183:		// if it is a temporary (shadow) mark, add it immediately and forget about it
;184:		if (temporary) {
ADDRFP4 40
INDIRI4
CNSTI4 0
EQI4 $165
line 185
;185:			trap_R_AddPolyToScene(markShader, mf->numPoints, verts);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 5816
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 186
;186:			continue;
ADDRGP4 $140
JUMPV
LABELV $165
line 190
;187:		}
;188:
;189:		// otherwise save it persistantly
;190:		mark = CG_AllocMark();
ADDRLP4 6056
ADDRGP4 CG_AllocMark
CALLP4
ASGNP4
ADDRLP4 5812
ADDRLP4 6056
INDIRP4
ASGNP4
line 191
;191:		mark->time = cg.time;
ADDRLP4 5812
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 192
;192:		mark->alphaFade = alphaFade;
ADDRLP4 5812
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 193
;193:		mark->markShader = markShader;
ADDRLP4 5812
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 194
;194:		mark->poly.numVerts = mf->numPoints;
ADDRLP4 5812
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 195
;195:		mark->color[0] = red;
ADDRLP4 5812
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 196
;196:		mark->color[1] = green;
ADDRLP4 5812
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 197
;197:		mark->color[2] = blue;
ADDRLP4 5812
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 198
;198:		mark->color[3] = alpha;
ADDRLP4 5812
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 199
;199:		memcpy(mark->verts, verts, mf->numPoints * sizeof(verts[0]));
ADDRLP4 5812
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 5816
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIU4 4
CNSTU4 24
MULU4
CVUI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 200
;200:		markTotal++;
ADDRLP4 6060
ADDRGP4 markTotal
ASGNP4
ADDRLP4 6060
INDIRP4
ADDRLP4 6060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 201
;201:	}
LABELV $140
line 162
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
LABELV $142
ADDRLP4 44
INDIRI4
ADDRLP4 4712
INDIRI4
LTI4 $139
line 202
;202:}
LABELV $95
endproc CG_ImpactMark 6076 28
export CG_AddMarks
proc CG_AddMarks 68 12
line 213
;203:
;204:
;205:/*
;206:===============
;207:CG_AddMarks
;208:===============
;209:*/
;210:#define	MARK_TOTAL_TIME		10000
;211:#define	MARK_FADE_TIME		1000
;212:
;213:void CG_AddMarks(void) {
line 219
;214:	int			j;
;215:	markPoly_t *mp, *next;
;216:	int			t;
;217:	int			fade;
;218:
;219:	if (!cg_addMarks.integer) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $169
line 220
;220:		return;
ADDRGP4 $168
JUMPV
LABELV $169
line 223
;221:	}
;222:
;223:	mp = cg_activeMarkPolys.nextMark;
ADDRLP4 0
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 224
;224:	for (; mp != &cg_activeMarkPolys; mp = next) {
ADDRGP4 $176
JUMPV
LABELV $173
line 227
;225:		// grab next now, so if the local entity is freed we
;226:		// still have it
;227:		next = mp->nextMark;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 230
;228:
;229:		// see if it is time to completely remove it
;230:		if (cg.time > mp->time + MARK_TOTAL_TIME) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
LEI4 $177
line 231
;231:			CG_FreeMarkPoly(mp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 232
;232:			continue;
ADDRGP4 $174
JUMPV
LABELV $177
line 236
;233:		}
;234:
;235:		// fade out the energy bursts
;236:		if (mp->markShader == cgs.media.energyMarkShader) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+146664+428
INDIRI4
NEI4 $180
line 238
;237:
;238:			fade = 450 - 450 * ((cg.time - mp->time) / 3000.0);
ADDRLP4 8
CNSTF4 1138819072
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 967754558
MULF4
CNSTF4 1138819072
MULF4
SUBF4
CVFI4 4
ASGNI4
line 239
;239:			if (fade < 255) {
ADDRLP4 8
INDIRI4
CNSTI4 255
GEI4 $185
line 240
;240:				if (fade < 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $187
line 241
;241:					fade = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 242
;242:				}
LABELV $187
line 243
;243:				if (mp->verts[0].modulate[0] != 0) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRU1
CVUI4 1
CNSTI4 0
EQI4 $189
line 244
;244:					for (j = 0; j < mp->poly.numVerts; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $194
JUMPV
LABELV $191
line 245
;245:						mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $196
ADDRLP4 20
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $197
JUMPV
LABELV $196
ADDRLP4 20
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $197
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 246
;246:						mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $199
ADDRLP4 36
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $200
JUMPV
LABELV $199
ADDRLP4 36
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $200
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 247
;247:						mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $202
ADDRLP4 52
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $203
JUMPV
LABELV $202
ADDRLP4 52
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $203
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 248
;248:					}
LABELV $192
line 244
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $194
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $191
line 249
;249:				}
LABELV $189
line 250
;250:			}
LABELV $185
line 251
;251:		}
LABELV $180
line 254
;252:
;253:		// fade all marks out with time
;254:		t = mp->time + MARK_TOTAL_TIME - cg.time;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 255
;255:		if (t < MARK_FADE_TIME) {
ADDRLP4 12
INDIRI4
CNSTI4 1000
GEI4 $205
line 256
;256:			fade = 255 * t / MARK_FADE_TIME;
ADDRLP4 8
ADDRLP4 12
INDIRI4
CNSTI4 255
MULI4
CNSTI4 1000
DIVI4
ASGNI4
line 257
;257:			if (mp->alphaFade) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $207
line 258
;258:				for (j = 0; j < mp->poly.numVerts; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $212
JUMPV
LABELV $209
line 259
;259:					mp->verts[j].modulate[3] = fade;
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 23
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 260
;260:				}
LABELV $210
line 258
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $212
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $209
line 261
;261:			} else {
ADDRGP4 $208
JUMPV
LABELV $207
line 262
;262:				for (j = 0; j < mp->poly.numVerts; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $216
JUMPV
LABELV $213
line 263
;263:					mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $218
ADDRLP4 20
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $219
JUMPV
LABELV $218
ADDRLP4 20
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $219
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 264
;264:					mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $221
ADDRLP4 36
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $222
JUMPV
LABELV $221
ADDRLP4 36
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $222
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 265
;265:					mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $224
ADDRLP4 52
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $225
JUMPV
LABELV $224
ADDRLP4 52
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $225
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 266
;266:				}
LABELV $214
line 262
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $216
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $213
line 267
;267:			}
LABELV $208
line 268
;268:		}
LABELV $205
line 271
;269:
;270:
;271:		trap_R_AddPolyToScene(mp->markShader, mp->poly.numVerts, mp->verts);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 272
;272:	}
LABELV $174
line 224
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
LABELV $176
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeMarkPolys
CVPU4 4
NEU4 $173
line 273
;273:}
LABELV $168
endproc CG_AddMarks 68 12
data
align 4
LABELV shaderAnimNames
address $227
byte 4 0
skip 120
align 4
LABELV shaderAnimCounts
byte 4 23
skip 124
align 4
LABELV shaderAnimSTRatio
byte 4 1065353216
skip 124
export cl_numparticles
align 4
LABELV cl_numparticles
byte 4 1024
export initparticles
align 4
LABELV initparticles
byte 4 0
export CG_ClearParticles
code
proc CG_ClearParticles 24 12
line 374
;274:
;275:// cg_particles.c  
;276:
;277:#define BLOODRED	2
;278:#define EMISIVEFADE	3
;279:#define GREY75		4
;280:
;281:typedef struct particle_s {
;282:	struct particle_s *next;
;283:
;284:	int			time;
;285:	int			endtime;
;286:
;287:	vec3_t		org;
;288:	vec3_t		vel;
;289:	vec3_t		accel;
;290:	int			color;
;291:	float		colorvel;
;292:	float		alpha;
;293:	float		alphavel;
;294:	int			type;
;295:	qhandle_t	pshader;
;296:
;297:	float		height;
;298:	float		width;
;299:
;300:	float		endheight;
;301:	float		endwidth;
;302:
;303:	float		start;
;304:	float		end;
;305:
;306:	int			startfade;
;307:	qboolean	rotate;
;308:	int			snum;
;309:
;310:	qboolean	link;
;311:
;312:	// Ridah
;313:	int			shaderAnim;
;314:	int			roll;
;315:
;316:	int			accumroll;
;317:
;318:} cparticle_t;
;319:
;320:typedef enum {
;321:	P_NONE,
;322:	P_WEATHER,
;323:	P_FLAT,
;324:	P_SMOKE,
;325:	P_ROTATE,
;326:	P_WEATHER_TURBULENT,
;327:	P_ANIM,	// Ridah
;328:	P_BAT,
;329:	P_BLEED,
;330:	P_FLAT_SCALEUP,
;331:	P_FLAT_SCALEUP_FADE,
;332:	P_WEATHER_FLURRY,
;333:	P_SMOKE_IMPACT,
;334:	P_BUBBLE,
;335:	P_BUBBLE_TURBULENT,
;336:	P_SPRITE
;337:} particle_type_t;
;338:
;339:#define	MAX_SHADER_ANIMS		32
;340:#define	MAX_SHADER_ANIM_FRAMES	64
;341:
;342:static char *shaderAnimNames[MAX_SHADER_ANIMS] = {
;343:	"explode1",
;344:	NULL
;345:};
;346:static qhandle_t shaderAnims[MAX_SHADER_ANIMS][MAX_SHADER_ANIM_FRAMES];
;347:static int	shaderAnimCounts[MAX_SHADER_ANIMS] = {
;348:	23
;349:};
;350:static float	shaderAnimSTRatio[MAX_SHADER_ANIMS] = {
;351:	1.0f
;352:};
;353:static int	numShaderAnims;
;354:// done.
;355:
;356:#define		PARTICLE_GRAVITY	40
;357:#define		MAX_PARTICLES	1024
;358:
;359:cparticle_t *active_particles, *free_particles;
;360:cparticle_t	particles[MAX_PARTICLES];
;361:const int	cl_numparticles = MAX_PARTICLES;
;362:
;363:qboolean	initparticles = qfalse;
;364:vec3_t		pvforward, pvright, pvup;
;365:vec3_t		rforward, rright, rup;
;366:
;367:int			oldtime;
;368:
;369:/*
;370:===============
;371:CL_ClearParticles
;372:===============
;373:*/
;374:void CG_ClearParticles(void) {
line 377
;375:	int		i;
;376:
;377:	memset(particles, 0, sizeof(particles));
ADDRGP4 particles
ARGP4
CNSTI4 0
ARGI4
CNSTI4 126976
ARGI4
ADDRGP4 memset
CALLP4
pop
line 379
;378:
;379:	free_particles = &particles[0];
ADDRGP4 free_particles
ADDRGP4 particles
ASGNP4
line 380
;380:	active_particles = NULL;
ADDRGP4 active_particles
CNSTP4 0
ASGNP4
line 382
;381:
;382:	for (i = 0; i < cl_numparticles; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $232
JUMPV
LABELV $229
line 383
;383:		particles[i].next = &particles[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles+124
ADDP4
ASGNP4
line 384
;384:		particles[i].type = 0;
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles+64
ADDP4
CNSTI4 0
ASGNI4
line 385
;385:	}
LABELV $230
line 382
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $232
ADDRLP4 0
INDIRI4
ADDRGP4 cl_numparticles
INDIRI4
LTI4 $229
line 386
;386:	particles[cl_numparticles - 1].next = NULL;
ADDRGP4 cl_numparticles
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles-124
ADDP4
CNSTP4 0
ASGNP4
line 388
;387:
;388:	oldtime = cg.time;
ADDRGP4 oldtime
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 391
;389:
;390:	// Ridah, init the shaderAnims
;391:	for (i = 0; shaderAnimNames[i]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $240
JUMPV
LABELV $237
line 394
;392:		int j;
;393:
;394:		for (j = 0; j < shaderAnimCounts[i]; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $244
JUMPV
LABELV $241
line 395
;395:			shaderAnims[i][j] = trap_R_RegisterShader(va("%s%i", shaderAnimNames[i], j + 1));
ADDRGP4 $245
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LSHI4
ADDRGP4 shaderAnims
ADDP4
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 396
;396:		}
LABELV $242
line 394
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $244
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimCounts
ADDP4
INDIRI4
LTI4 $241
line 397
;397:	}
LABELV $238
line 391
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $240
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $237
line 398
;398:	numShaderAnims = i;
ADDRGP4 numShaderAnims
ADDRLP4 0
INDIRI4
ASGNI4
line 401
;399:	// done.
;400:
;401:	initparticles = qtrue;
ADDRGP4 initparticles
CNSTI4 1
ASGNI4
line 402
;402:}
LABELV $228
endproc CG_ClearParticles 24 12
export CG_AddParticleToScene
proc CG_AddParticleToScene 456 16
line 410
;403:
;404:
;405:/*
;406:=====================
;407:CG_AddParticleToScene
;408:=====================
;409:*/
;410:void CG_AddParticleToScene(cparticle_t *p, vec3_t org, float alpha) {
line 423
;411:
;412:	vec3_t		point;
;413:	polyVert_t	verts[4];
;414:	float		width;
;415:	float		height;
;416:	float		time, time2;
;417:	float		ratio;
;418:	float		invratio;
;419:	vec3_t		color;
;420:	polyVert_t	TRIverts[3];
;421:	vec3_t		rright2, rup2;
;422:
;423:	if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT || p->type == P_WEATHER_FLURRY
ADDRLP4 240
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $252
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
EQI4 $252
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
EQI4 $252
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $252
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $247
LABELV $252
line 424
;424:		|| p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT) {// create a front facing polygon
line 426
;425:
;426:		if (p->type != P_WEATHER_FLURRY) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
EQI4 $253
line 427
;427:			if (p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT) {
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $257
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $255
LABELV $257
line 428
;428:				if (org[2] > p->end) {
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LEF4 $256
line 429
;429:					p->time = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 430
;430:					VectorCopy(org, p->org); // Ridah, fixes rare snow flakes that flicker on the ground
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 432
;431:
;432:					p->org[2] = (p->start + crandom() * 4);
ADDRLP4 248
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 252
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 252
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 248
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 435
;433:
;434:
;435:					if (p->type == P_BUBBLE_TURBULENT) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $256
line 436
;436:						p->vel[0] = crandom() * 4;
ADDRLP4 256
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 256
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 437
;437:						p->vel[1] = crandom() * 4;
ADDRLP4 260
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 260
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 438
;438:					}
line 440
;439:
;440:				}
line 441
;441:			} else {
ADDRGP4 $256
JUMPV
LABELV $255
line 442
;442:				if (org[2] < p->end) {
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
GEF4 $263
line 443
;443:					p->time = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 444
;444:					VectorCopy(org, p->org); // Ridah, fixes rare snow flakes that flicker on the ground
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
ADDRGP4 $267
JUMPV
LABELV $266
line 446
;445:
;446:					while (p->org[2] < p->end) {
line 447
;447:						p->org[2] += (p->start - p->end);
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 252
ADDRLP4 248
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 252
INDIRP4
ADDRLP4 252
INDIRP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ADDF4
ASGNF4
line 448
;448:					}
LABELV $267
line 446
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LTF4 $266
line 451
;449:
;450:
;451:					if (p->type == P_WEATHER_TURBULENT) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
NEI4 $269
line 452
;452:						p->vel[0] = crandom() * 16;
ADDRLP4 252
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 252
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 453
;453:						p->vel[1] = crandom() * 16;
ADDRLP4 256
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 256
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 454
;454:					}
LABELV $269
line 456
;455:
;456:				}
LABELV $263
line 457
;457:			}
LABELV $256
line 461
;458:
;459:
;460:			// Rafael snow pvs check
;461:			if (!p->link)
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
NEI4 $271
line 462
;462:				return;
ADDRGP4 $246
JUMPV
LABELV $271
line 464
;463:
;464:			p->alpha = 1;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 465
;465:		}
LABELV $253
line 468
;466:
;467:		// Ridah, had to do this or MAX_POLYS is being exceeded in village1.bsp
;468:		if (Distance(cg.snap->ps.origin, org) > 1024) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 244
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 244
INDIRF4
CNSTF4 1149239296
LEF4 $273
line 469
;469:			return;
ADDRGP4 $246
JUMPV
LABELV $273
line 473
;470:		}
;471:		// done.
;472:
;473:		if (p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT) {
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $278
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $276
LABELV $278
line 474
;474:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 252
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 252
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 475
;475:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 476
;476:			VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 477
;477:			verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 478
;478:			verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 479
;479:			verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 480
;480:			verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 481
;481:			verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 482
;482:			verts[0].modulate[3] = 255 * p->alpha;
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $300
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $301
JUMPV
LABELV $300
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $301
ADDRLP4 12+20+3
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 484
;483:
;484:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 276
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 276
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 276
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 485
;485:			VectorMA(point, p->width, pvright, point);
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 486
;486:			VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 487
;487:			verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 488
;488:			verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 489
;489:			verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 490
;490:			verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 491
;491:			verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 492
;492:			verts[1].modulate[3] = 255 * p->alpha;
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $330
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $331
JUMPV
LABELV $330
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $331
ADDRLP4 12+24+20+3
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 494
;493:
;494:			VectorMA(org, p->height, pvup, point);
ADDRLP4 300
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 300
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 300
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 495
;495:			VectorMA(point, p->width, pvright, point);
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 496
;496:			VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 497
;497:			verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 498
;498:			verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 499
;499:			verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 500
;500:			verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 501
;501:			verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 502
;502:			verts[2].modulate[3] = 255 * p->alpha;
ADDRLP4 316
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $360
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $361
JUMPV
LABELV $360
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $361
ADDRLP4 12+48+20+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 504
;503:
;504:			VectorMA(org, p->height, pvup, point);
ADDRLP4 324
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 328
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 324
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 328
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 324
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 328
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 505
;505:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 332
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 332
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 332
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 506
;506:			VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 507
;507:			verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 508
;508:			verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 509
;509:			verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 510
;510:			verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 511
;511:			verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 512
;512:			verts[3].modulate[3] = 255 * p->alpha;
ADDRLP4 340
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 344
CNSTF4 1325400064
ASGNF4
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
LTF4 $390
ADDRLP4 336
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $391
JUMPV
LABELV $390
ADDRLP4 336
ADDRLP4 340
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $391
ADDRLP4 12+72+20+3
ADDRLP4 336
INDIRU4
CVUU1 4
ASGNU1
line 513
;513:		} else {
ADDRGP4 $248
JUMPV
LABELV $276
line 514
;514:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 252
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 252
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 515
;515:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 516
;516:			VectorCopy(point, TRIverts[0].xyz);
ADDRLP4 108
ADDRLP4 0
INDIRB
ASGNB 12
line 517
;517:			TRIverts[0].st[0] = 1;
ADDRLP4 108+12
CNSTF4 1065353216
ASGNF4
line 518
;518:			TRIverts[0].st[1] = 0;
ADDRLP4 108+12+4
CNSTF4 0
ASGNF4
line 519
;519:			TRIverts[0].modulate[0] = 255;
ADDRLP4 108+20
CNSTU1 255
ASGNU1
line 520
;520:			TRIverts[0].modulate[1] = 255;
ADDRLP4 108+20+1
CNSTU1 255
ASGNU1
line 521
;521:			TRIverts[0].modulate[2] = 255;
ADDRLP4 108+20+2
CNSTU1 255
ASGNU1
line 522
;522:			TRIverts[0].modulate[3] = 255 * p->alpha;
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $413
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $414
JUMPV
LABELV $413
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $414
ADDRLP4 108+20+3
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 524
;523:
;524:			VectorMA(org, p->height, pvup, point);
ADDRLP4 276
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 276
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 276
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 525
;525:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 526
;526:			VectorCopy(point, TRIverts[1].xyz);
ADDRLP4 108+24
ADDRLP4 0
INDIRB
ASGNB 12
line 527
;527:			TRIverts[1].st[0] = 0;
ADDRLP4 108+24+12
CNSTF4 0
ASGNF4
line 528
;528:			TRIverts[1].st[1] = 0;
ADDRLP4 108+24+12+4
CNSTF4 0
ASGNF4
line 529
;529:			TRIverts[1].modulate[0] = 255;
ADDRLP4 108+24+20
CNSTU1 255
ASGNU1
line 530
;530:			TRIverts[1].modulate[1] = 255;
ADDRLP4 108+24+20+1
CNSTU1 255
ASGNU1
line 531
;531:			TRIverts[1].modulate[2] = 255;
ADDRLP4 108+24+20+2
CNSTU1 255
ASGNU1
line 532
;532:			TRIverts[1].modulate[3] = 255 * p->alpha;
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $443
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $444
JUMPV
LABELV $443
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $444
ADDRLP4 108+24+20+3
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 534
;533:
;534:			VectorMA(org, p->height, pvup, point);
ADDRLP4 300
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 300
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 300
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 535
;535:			VectorMA(point, p->width, pvright, point);
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 536
;536:			VectorCopy(point, TRIverts[2].xyz);
ADDRLP4 108+48
ADDRLP4 0
INDIRB
ASGNB 12
line 537
;537:			TRIverts[2].st[0] = 0;
ADDRLP4 108+48+12
CNSTF4 0
ASGNF4
line 538
;538:			TRIverts[2].st[1] = 1;
ADDRLP4 108+48+12+4
CNSTF4 1065353216
ASGNF4
line 539
;539:			TRIverts[2].modulate[0] = 255;
ADDRLP4 108+48+20
CNSTU1 255
ASGNU1
line 540
;540:			TRIverts[2].modulate[1] = 255;
ADDRLP4 108+48+20+1
CNSTU1 255
ASGNU1
line 541
;541:			TRIverts[2].modulate[2] = 255;
ADDRLP4 108+48+20+2
CNSTU1 255
ASGNU1
line 542
;542:			TRIverts[2].modulate[3] = 255 * p->alpha;
ADDRLP4 316
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $473
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $474
JUMPV
LABELV $473
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $474
ADDRLP4 108+48+20+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 543
;543:		}
line 545
;544:
;545:	} else if (p->type == P_SPRITE) {
ADDRGP4 $248
JUMPV
LABELV $247
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 15
NEI4 $475
line 549
;546:		vec3_t	rr, ru;
;547:		vec3_t	rotate_ang;
;548:
;549:		VectorSet(color, 1.0, 1.0, 0.5);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1056964608
ASGNF4
line 550
;550:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 551
;551:		time2 = p->endtime - p->time;
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 280
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 280
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 552
;552:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 554
;553:
;554:		width = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 555
;555:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 288
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 288
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 288
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 288
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 557
;556:
;557:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $480
line 558
;558:			vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 268
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 559
;559:			rotate_ang[ROLL] += p->roll;
ADDRLP4 268+8
ADDRLP4 268+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 560
;560:			AngleVectors(rotate_ang, NULL, rr, ru);
ADDRLP4 268
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 256
ARGP4
ADDRLP4 244
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 561
;561:		}
LABELV $480
line 563
;562:
;563:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $485
line 564
;564:			VectorMA(org, -height, ru, point);
ADDRLP4 292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 296
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 292
INDIRP4
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 565
;565:			VectorMA(point, -width, rr, point);
ADDRLP4 300
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 256
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 256+4
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 256+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 566
;566:		} else {
ADDRGP4 $486
JUMPV
LABELV $485
line 567
;567:			VectorMA(org, -height, pvup, point);
ADDRLP4 292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 296
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 292
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 568
;568:			VectorMA(point, -width, pvright, point);
ADDRLP4 300
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 569
;569:		}
LABELV $486
line 570
;570:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 571
;571:		verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 572
;572:		verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 573
;573:		verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 574
;574:		verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 575
;575:		verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 576
;576:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 578
;577:
;578:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $517
line 579
;579:			VectorMA(point, 2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 580
;580:		} else {
ADDRGP4 $518
JUMPV
LABELV $517
line 581
;581:			VectorMA(point, 2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 582
;582:		}
LABELV $518
line 583
;583:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 584
;584:		verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 585
;585:		verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 586
;586:		verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 587
;587:		verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 588
;588:		verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 589
;589:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 591
;590:
;591:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $548
line 592
;592:			VectorMA(point, 2 * width, rr, point);
ADDRLP4 292
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 256
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 256+4
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 256+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 593
;593:		} else {
ADDRGP4 $549
JUMPV
LABELV $548
line 594
;594:			VectorMA(point, 2 * width, pvright, point);
ADDRLP4 292
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 595
;595:		}
LABELV $549
line 596
;596:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 597
;597:		verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 598
;598:		verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 599
;599:		verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 600
;600:		verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 601
;601:		verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 602
;602:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 604
;603:
;604:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $579
line 605
;605:			VectorMA(point, -2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 606
;606:		} else {
ADDRGP4 $580
JUMPV
LABELV $579
line 607
;607:			VectorMA(point, -2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 608
;608:		}
LABELV $580
line 609
;609:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 610
;610:		verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 611
;611:		verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 612
;612:		verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 613
;613:		verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 614
;614:		verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 615
;615:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 616
;616:	} else if (p->type == P_SMOKE || p->type == P_SMOKE_IMPACT) {// create a front rotating facing polygon
ADDRGP4 $476
JUMPV
LABELV $475
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 3
EQI4 $612
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $610
LABELV $612
line 618
;617:
;618:		if (p->type == P_SMOKE_IMPACT && Distance(cg.snap->ps.origin, org) > 1024) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $613
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 248
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 248
INDIRF4
CNSTF4 1149239296
LEF4 $613
line 619
;619:			return;
ADDRGP4 $246
JUMPV
LABELV $613
line 622
;620:		}
;621:
;622:		if (p->color == BLOODRED)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $616
line 623
;623:			VectorSet(color, 0.22f, 0.0f, 0.0f);
ADDRLP4 184
CNSTF4 1046562734
ASGNF4
ADDRLP4 184+4
CNSTF4 0
ASGNF4
ADDRLP4 184+8
CNSTF4 0
ASGNF4
ADDRGP4 $617
JUMPV
LABELV $616
line 624
;624:		else if (p->color == GREY75) {
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 4
NEI4 $620
line 628
;625:			float	len;
;626:			float	greyit;
;627:			float	val;
;628:			len = Distance(cg.snap->ps.origin, org);
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 264
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 256
ADDRLP4 264
INDIRF4
ASGNF4
line 629
;629:			if (!len)
ADDRLP4 256
INDIRF4
CNSTF4 0
NEF4 $623
line 630
;630:				len = 1;
ADDRLP4 256
CNSTF4 1065353216
ASGNF4
LABELV $623
line 632
;631:
;632:			val = 4096 / len;
ADDRLP4 260
CNSTF4 1166016512
ADDRLP4 256
INDIRF4
DIVF4
ASGNF4
line 633
;633:			greyit = 0.25 * val;
ADDRLP4 252
ADDRLP4 260
INDIRF4
CNSTF4 1048576000
MULF4
ASGNF4
line 634
;634:			if (greyit > 0.5)
ADDRLP4 252
INDIRF4
CNSTF4 1056964608
LEF4 $625
line 635
;635:				greyit = 0.5;
ADDRLP4 252
CNSTF4 1056964608
ASGNF4
LABELV $625
line 637
;636:
;637:			VectorSet(color, greyit, greyit, greyit);
ADDRLP4 268
ADDRLP4 252
INDIRF4
ASGNF4
ADDRLP4 184
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+4
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+8
ADDRLP4 252
INDIRF4
ASGNF4
line 638
;638:		} else
ADDRGP4 $621
JUMPV
LABELV $620
line 639
;639:			VectorSet(color, 1.0, 1.0, 1.0);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1065353216
ASGNF4
LABELV $621
LABELV $617
line 641
;640:
;641:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 642
;642:		time2 = p->endtime - p->time;
ADDRLP4 252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 252
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 643
;643:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 645
;644:
;645:		if (cg.time > p->startfade) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
LEI4 $632
line 646
;646:			invratio = 1 - ((cg.time - p->startfade) / (p->endtime - p->startfade));
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 204
CNSTI4 1
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 256
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
SUBI4
ADDRLP4 256
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 256
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
SUBI4
DIVI4
SUBI4
CVIF4 4
ASGNF4
line 648
;647:
;648:			if (p->color == EMISIVEFADE) {
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 3
NEI4 $636
line 650
;649:				float fval;
;650:				fval = (invratio * invratio);
ADDRLP4 264
ADDRLP4 204
INDIRF4
ASGNF4
ADDRLP4 260
ADDRLP4 264
INDIRF4
ADDRLP4 264
INDIRF4
MULF4
ASGNF4
line 651
;651:				if (fval < 0)
ADDRLP4 260
INDIRF4
CNSTF4 0
GEF4 $638
line 652
;652:					fval = 0;
ADDRLP4 260
CNSTF4 0
ASGNF4
LABELV $638
line 653
;653:				VectorSet(color, fval, fval, fval);
ADDRLP4 268
ADDRLP4 260
INDIRF4
ASGNF4
ADDRLP4 184
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+4
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+8
ADDRLP4 260
INDIRF4
ASGNF4
line 654
;654:			}
LABELV $636
line 655
;655:			invratio *= p->alpha;
ADDRLP4 204
ADDRLP4 204
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
MULF4
ASGNF4
line 656
;656:		} else
ADDRGP4 $633
JUMPV
LABELV $632
line 657
;657:			invratio = 1 * p->alpha;
ADDRLP4 204
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1065353216
MULF4
ASGNF4
LABELV $633
line 659
;658:
;659:		if (cgs.glconfig.hardwareType == GLHW_RAGEPRO)
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $642
line 660
;660:			invratio = 1;
ADDRLP4 204
CNSTF4 1065353216
ASGNF4
LABELV $642
line 662
;661:
;662:		if (invratio > 1)
ADDRLP4 204
INDIRF4
CNSTF4 1065353216
LEF4 $646
line 663
;663:			invratio = 1;
ADDRLP4 204
CNSTF4 1065353216
ASGNF4
LABELV $646
line 665
;664:
;665:		width = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 256
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 666
;666:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 260
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 668
;667:
;668:		if (p->type != P_SMOKE_IMPACT) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
EQI4 $648
line 671
;669:			vec3_t temp;
;670:
;671:			vectoangles(rforward, temp);
ADDRGP4 rforward
ARGP4
ADDRLP4 264
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 672
;672:			p->accumroll += p->roll;
ADDRLP4 276
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 280
ADDRLP4 276
INDIRP4
CNSTI4 120
ADDP4
ASGNP4
ADDRLP4 280
INDIRP4
ADDRLP4 280
INDIRP4
INDIRI4
ADDRLP4 276
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 673
;673:			temp[ROLL] += p->accumroll * 0.1;
ADDRLP4 264+8
ADDRLP4 264+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1036831949
MULF4
ADDF4
ASGNF4
line 674
;674:			AngleVectors(temp, NULL, rright2, rup2);
ADDRLP4 264
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 208
ARGP4
ADDRLP4 220
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 675
;675:		} else {
ADDRGP4 $649
JUMPV
LABELV $648
line 676
;676:			VectorCopy(rright, rright2);
ADDRLP4 208
ADDRGP4 rright
INDIRB
ASGNB 12
line 677
;677:			VectorCopy(rup, rup2);
ADDRLP4 220
ADDRGP4 rup
INDIRB
ASGNB 12
line 678
;678:		}
LABELV $649
line 680
;679:
;680:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $651
line 681
;681:			VectorMA(org, -height, rup2, point);
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 264
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 268
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 268
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 682
;682:			VectorMA(point, -width, rright2, point);
ADDRLP4 272
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 272
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 272
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 683
;683:		} else {
ADDRGP4 $652
JUMPV
LABELV $651
line 684
;684:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 268
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 264
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 685
;685:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 272
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 686
;686:		}
LABELV $652
line 687
;687:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 688
;688:		verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 689
;689:		verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 690
;690:		verts[0].modulate[0] = 255 * color[0];
ADDRLP4 268
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $678
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $679
JUMPV
LABELV $678
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $679
ADDRLP4 12+20
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 691
;691:		verts[0].modulate[1] = 255 * color[1];
ADDRLP4 280
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 284
CNSTF4 1325400064
ASGNF4
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
LTF4 $684
ADDRLP4 276
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $685
JUMPV
LABELV $684
ADDRLP4 276
ADDRLP4 280
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $685
ADDRLP4 12+20+1
ADDRLP4 276
INDIRU4
CVUU1 4
ASGNU1
line 692
;692:		verts[0].modulate[2] = 255 * color[2];
ADDRLP4 292
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $690
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $691
JUMPV
LABELV $690
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $691
ADDRLP4 12+20+2
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 693
;693:		verts[0].modulate[3] = 255 * invratio;
ADDRLP4 304
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $695
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $696
JUMPV
LABELV $695
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $696
ADDRLP4 12+20+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 695
;694:
;695:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $697
line 696
;696:			VectorMA(org, -height, rup2, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 697
;697:			VectorMA(point, width, rright2, point);
ADDRLP4 320
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 698
;698:		} else {
ADDRGP4 $698
JUMPV
LABELV $697
line 699
;699:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 700
;700:			VectorMA(point, p->width, pvright, point);
ADDRLP4 320
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 701
;701:		}
LABELV $698
line 702
;702:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 703
;703:		verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 704
;704:		verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 705
;705:		verts[1].modulate[0] = 255 * color[0];
ADDRLP4 316
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $728
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $729
JUMPV
LABELV $728
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $729
ADDRLP4 12+24+20
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 706
;706:		verts[1].modulate[1] = 255 * color[1];
ADDRLP4 328
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 332
CNSTF4 1325400064
ASGNF4
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
LTF4 $735
ADDRLP4 324
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $736
JUMPV
LABELV $735
ADDRLP4 324
ADDRLP4 328
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $736
ADDRLP4 12+24+20+1
ADDRLP4 324
INDIRU4
CVUU1 4
ASGNU1
line 707
;707:		verts[1].modulate[2] = 255 * color[2];
ADDRLP4 340
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 344
CNSTF4 1325400064
ASGNF4
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
LTF4 $742
ADDRLP4 336
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $743
JUMPV
LABELV $742
ADDRLP4 336
ADDRLP4 340
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $743
ADDRLP4 12+24+20+2
ADDRLP4 336
INDIRU4
CVUU1 4
ASGNU1
line 708
;708:		verts[1].modulate[3] = 255 * invratio;
ADDRLP4 352
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 356
CNSTF4 1325400064
ASGNF4
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
LTF4 $748
ADDRLP4 348
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $749
JUMPV
LABELV $748
ADDRLP4 348
ADDRLP4 352
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $749
ADDRLP4 12+24+20+3
ADDRLP4 348
INDIRU4
CVUU1 4
ASGNU1
line 710
;709:
;710:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $750
line 711
;711:			VectorMA(org, height, rup2, point);
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 712
;712:			VectorMA(point, width, rright2, point);
ADDRLP4 368
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 368
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 368
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 713
;713:		} else {
ADDRGP4 $751
JUMPV
LABELV $750
line 714
;714:			VectorMA(org, p->height, pvup, point);
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 364
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 715
;715:			VectorMA(point, p->width, pvright, point);
ADDRLP4 368
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 716
;716:		}
LABELV $751
line 717
;717:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 718
;718:		verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 719
;719:		verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 720
;720:		verts[2].modulate[0] = 255 * color[0];
ADDRLP4 364
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 368
CNSTF4 1325400064
ASGNF4
ADDRLP4 364
INDIRF4
ADDRLP4 368
INDIRF4
LTF4 $781
ADDRLP4 360
ADDRLP4 364
INDIRF4
ADDRLP4 368
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $782
JUMPV
LABELV $781
ADDRLP4 360
ADDRLP4 364
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $782
ADDRLP4 12+48+20
ADDRLP4 360
INDIRU4
CVUU1 4
ASGNU1
line 721
;721:		verts[2].modulate[1] = 255 * color[1];
ADDRLP4 376
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 380
CNSTF4 1325400064
ASGNF4
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
LTF4 $788
ADDRLP4 372
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $789
JUMPV
LABELV $788
ADDRLP4 372
ADDRLP4 376
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $789
ADDRLP4 12+48+20+1
ADDRLP4 372
INDIRU4
CVUU1 4
ASGNU1
line 722
;722:		verts[2].modulate[2] = 255 * color[2];
ADDRLP4 388
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 392
CNSTF4 1325400064
ASGNF4
ADDRLP4 388
INDIRF4
ADDRLP4 392
INDIRF4
LTF4 $795
ADDRLP4 384
ADDRLP4 388
INDIRF4
ADDRLP4 392
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $796
JUMPV
LABELV $795
ADDRLP4 384
ADDRLP4 388
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $796
ADDRLP4 12+48+20+2
ADDRLP4 384
INDIRU4
CVUU1 4
ASGNU1
line 723
;723:		verts[2].modulate[3] = 255 * invratio;
ADDRLP4 400
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 404
CNSTF4 1325400064
ASGNF4
ADDRLP4 400
INDIRF4
ADDRLP4 404
INDIRF4
LTF4 $801
ADDRLP4 396
ADDRLP4 400
INDIRF4
ADDRLP4 404
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $802
JUMPV
LABELV $801
ADDRLP4 396
ADDRLP4 400
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $802
ADDRLP4 12+48+20+3
ADDRLP4 396
INDIRU4
CVUU1 4
ASGNU1
line 725
;724:
;725:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $803
line 726
;726:			VectorMA(org, height, rup2, point);
ADDRLP4 408
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 408
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 408
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 727
;727:			VectorMA(point, -width, rright2, point);
ADDRLP4 416
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 416
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 416
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 728
;728:		} else {
ADDRGP4 $804
JUMPV
LABELV $803
line 729
;729:			VectorMA(org, p->height, pvup, point);
ADDRLP4 408
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 412
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 408
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 412
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 408
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 412
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 730
;730:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 416
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 416
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 416
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 731
;731:		}
LABELV $804
line 732
;732:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 733
;733:		verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 734
;734:		verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 735
;735:		verts[3].modulate[0] = 255 * color[0];
ADDRLP4 412
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 416
CNSTF4 1325400064
ASGNF4
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
LTF4 $834
ADDRLP4 408
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $835
JUMPV
LABELV $834
ADDRLP4 408
ADDRLP4 412
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $835
ADDRLP4 12+72+20
ADDRLP4 408
INDIRU4
CVUU1 4
ASGNU1
line 736
;736:		verts[3].modulate[1] = 255 * color[1];
ADDRLP4 424
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 428
CNSTF4 1325400064
ASGNF4
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
LTF4 $841
ADDRLP4 420
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $842
JUMPV
LABELV $841
ADDRLP4 420
ADDRLP4 424
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $842
ADDRLP4 12+72+20+1
ADDRLP4 420
INDIRU4
CVUU1 4
ASGNU1
line 737
;737:		verts[3].modulate[2] = 255 * color[2];
ADDRLP4 436
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 440
CNSTF4 1325400064
ASGNF4
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
LTF4 $848
ADDRLP4 432
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $849
JUMPV
LABELV $848
ADDRLP4 432
ADDRLP4 436
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $849
ADDRLP4 12+72+20+2
ADDRLP4 432
INDIRU4
CVUU1 4
ASGNU1
line 738
;738:		verts[3].modulate[3] = 255 * invratio;
ADDRLP4 448
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 452
CNSTF4 1325400064
ASGNF4
ADDRLP4 448
INDIRF4
ADDRLP4 452
INDIRF4
LTF4 $854
ADDRLP4 444
ADDRLP4 448
INDIRF4
ADDRLP4 452
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $855
JUMPV
LABELV $854
ADDRLP4 444
ADDRLP4 448
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $855
ADDRLP4 12+72+20+3
ADDRLP4 444
INDIRU4
CVUU1 4
ASGNU1
line 740
;739:
;740:	} else if (p->type == P_BLEED) {
ADDRGP4 $611
JUMPV
LABELV $610
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 8
NEI4 $856
line 745
;741:		vec3_t	rr, ru;
;742:		vec3_t	rotate_ang;
;743:		float	alpha;
;744:
;745:		alpha = p->alpha;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ASGNF4
line 747
;746:
;747:		if (cgs.glconfig.hardwareType == GLHW_RAGEPRO)
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $858
line 748
;748:			alpha = 1;
ADDRLP4 272
CNSTF4 1065353216
ASGNF4
LABELV $858
line 750
;749:
;750:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $862
line 751
;751:			vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 276
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 752
;752:			rotate_ang[ROLL] += p->roll;
ADDRLP4 276+8
ADDRLP4 276+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 753
;753:			AngleVectors(rotate_ang, NULL, rr, ru);
ADDRLP4 276
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 248
ARGP4
ADDRLP4 260
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 754
;754:		} else {
ADDRGP4 $863
JUMPV
LABELV $862
line 755
;755:			VectorCopy(pvup, ru);
ADDRLP4 260
ADDRGP4 pvup
INDIRB
ASGNB 12
line 756
;756:			VectorCopy(pvright, rr);
ADDRLP4 248
ADDRGP4 pvright
INDIRB
ASGNB 12
line 757
;757:		}
LABELV $863
line 759
;758:
;759:		VectorMA(org, -p->height, ru, point);
ADDRLP4 288
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 292
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 288
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 288
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 760
;760:		VectorMA(point, -p->width, rr, point);
ADDRLP4 296
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 761
;761:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 762
;762:		verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 763
;763:		verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 764
;764:		verts[0].modulate[0] = 111;
ADDRLP4 12+20
CNSTU1 111
ASGNU1
line 765
;765:		verts[0].modulate[1] = 19;
ADDRLP4 12+20+1
CNSTU1 19
ASGNU1
line 766
;766:		verts[0].modulate[2] = 9;
ADDRLP4 12+20+2
CNSTU1 9
ASGNU1
line 767
;767:		verts[0].modulate[3] = 255 * alpha;
ADDRLP4 304
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $888
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $889
JUMPV
LABELV $888
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $889
ADDRLP4 12+20+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 769
;768:
;769:		VectorMA(org, -p->height, ru, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 770
;770:		VectorMA(point, p->width, rr, point);
ADDRLP4 320
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 771
;771:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 772
;772:		verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 773
;773:		verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 774
;774:		verts[1].modulate[0] = 111;
ADDRLP4 12+24+20
CNSTU1 111
ASGNU1
line 775
;775:		verts[1].modulate[1] = 19;
ADDRLP4 12+24+20+1
CNSTU1 19
ASGNU1
line 776
;776:		verts[1].modulate[2] = 9;
ADDRLP4 12+24+20+2
CNSTU1 9
ASGNU1
line 777
;777:		verts[1].modulate[3] = 255 * alpha;
ADDRLP4 328
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 332
CNSTF4 1325400064
ASGNF4
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
LTF4 $918
ADDRLP4 324
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $919
JUMPV
LABELV $918
ADDRLP4 324
ADDRLP4 328
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $919
ADDRLP4 12+24+20+3
ADDRLP4 324
INDIRU4
CVUU1 4
ASGNU1
line 779
;778:
;779:		VectorMA(org, p->height, ru, point);
ADDRLP4 336
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 340
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 336
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 340
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 336
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 340
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 780
;780:		VectorMA(point, p->width, rr, point);
ADDRLP4 344
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 344
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 344
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 781
;781:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 782
;782:		verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 783
;783:		verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 784
;784:		verts[2].modulate[0] = 111;
ADDRLP4 12+48+20
CNSTU1 111
ASGNU1
line 785
;785:		verts[2].modulate[1] = 19;
ADDRLP4 12+48+20+1
CNSTU1 19
ASGNU1
line 786
;786:		verts[2].modulate[2] = 9;
ADDRLP4 12+48+20+2
CNSTU1 9
ASGNU1
line 787
;787:		verts[2].modulate[3] = 255 * alpha;
ADDRLP4 352
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 356
CNSTF4 1325400064
ASGNF4
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
LTF4 $948
ADDRLP4 348
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $949
JUMPV
LABELV $948
ADDRLP4 348
ADDRLP4 352
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $949
ADDRLP4 12+48+20+3
ADDRLP4 348
INDIRU4
CVUU1 4
ASGNU1
line 789
;788:
;789:		VectorMA(org, p->height, ru, point);
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 364
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 790
;790:		VectorMA(point, -p->width, rr, point);
ADDRLP4 368
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 791
;791:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 792
;792:		verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 793
;793:		verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 794
;794:		verts[3].modulate[0] = 111;
ADDRLP4 12+72+20
CNSTU1 111
ASGNU1
line 795
;795:		verts[3].modulate[1] = 19;
ADDRLP4 12+72+20+1
CNSTU1 19
ASGNU1
line 796
;796:		verts[3].modulate[2] = 9;
ADDRLP4 12+72+20+2
CNSTU1 9
ASGNU1
line 797
;797:		verts[3].modulate[3] = 255 * alpha;
ADDRLP4 376
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 380
CNSTF4 1325400064
ASGNF4
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
LTF4 $978
ADDRLP4 372
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $979
JUMPV
LABELV $978
ADDRLP4 372
ADDRLP4 376
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $979
ADDRLP4 12+72+20+3
ADDRLP4 372
INDIRU4
CVUU1 4
ASGNU1
line 799
;798:
;799:	} else if (p->type == P_FLAT_SCALEUP) {
ADDRGP4 $857
JUMPV
LABELV $856
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 9
NEI4 $980
line 803
;800:		float width, height;
;801:		float sinR, cosR;
;802:
;803:		if (p->color == BLOODRED)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $982
line 804
;804:			VectorSet(color, 1, 1, 1);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1065353216
ASGNF4
ADDRGP4 $983
JUMPV
LABELV $982
line 806
;805:		else
;806:			VectorSet(color, 0.5, 0.5, 0.5);
ADDRLP4 184
CNSTF4 1056964608
ASGNF4
ADDRLP4 184+4
CNSTF4 1056964608
ASGNF4
ADDRLP4 184+8
CNSTF4 1056964608
ASGNF4
LABELV $983
line 808
;807:
;808:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 809
;809:		time2 = p->endtime - p->time;
ADDRLP4 264
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 264
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 810
;810:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 812
;811:
;812:		width = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 268
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 256
ADDRLP4 268
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 813
;813:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 272
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 260
ADDRLP4 272
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 815
;814:
;815:		if (width > p->endwidth)
ADDRLP4 256
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
LEF4 $989
line 816
;816:			width = p->endwidth;
ADDRLP4 256
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ASGNF4
LABELV $989
line 818
;817:
;818:		if (height > p->endheight)
ADDRLP4 260
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
LEF4 $991
line 819
;819:			height = p->endheight;
ADDRLP4 260
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
LABELV $991
line 821
;820:
;821:		sinR = height * sin(DEG2RAD(p->roll)) * sqrt(2);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 276
ADDRGP4 sin
CALLF4
ASGNF4
CNSTF4 1073741824
ARGF4
ADDRLP4 280
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 248
ADDRLP4 260
INDIRF4
ADDRLP4 276
INDIRF4
MULF4
ADDRLP4 280
INDIRF4
MULF4
ASGNF4
line 822
;822:		cosR = width * cos(DEG2RAD(p->roll)) * sqrt(2);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 284
ADDRGP4 cos
CALLF4
ASGNF4
CNSTF4 1073741824
ARGF4
ADDRLP4 288
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 252
ADDRLP4 256
INDIRF4
ADDRLP4 284
INDIRF4
MULF4
ADDRLP4 288
INDIRF4
MULF4
ASGNF4
line 824
;823:
;824:		VectorCopy(org, verts[0].xyz);
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 825
;825:		verts[0].xyz[0] -= sinR;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
ASGNF4
line 826
;826:		verts[0].xyz[1] -= cosR;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
ASGNF4
line 827
;827:		verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 828
;828:		verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 829
;829:		verts[0].modulate[0] = 255 * color[0];
ADDRLP4 296
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 300
CNSTF4 1325400064
ASGNF4
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
LTF4 $999
ADDRLP4 292
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1000
JUMPV
LABELV $999
ADDRLP4 292
ADDRLP4 296
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1000
ADDRLP4 12+20
ADDRLP4 292
INDIRU4
CVUU1 4
ASGNU1
line 830
;830:		verts[0].modulate[1] = 255 * color[1];
ADDRLP4 308
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 312
CNSTF4 1325400064
ASGNF4
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
LTF4 $1005
ADDRLP4 304
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1006
JUMPV
LABELV $1005
ADDRLP4 304
ADDRLP4 308
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1006
ADDRLP4 12+20+1
ADDRLP4 304
INDIRU4
CVUU1 4
ASGNU1
line 831
;831:		verts[0].modulate[2] = 255 * color[2];
ADDRLP4 320
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 324
CNSTF4 1325400064
ASGNF4
ADDRLP4 320
INDIRF4
ADDRLP4 324
INDIRF4
LTF4 $1011
ADDRLP4 316
ADDRLP4 320
INDIRF4
ADDRLP4 324
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1012
JUMPV
LABELV $1011
ADDRLP4 316
ADDRLP4 320
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1012
ADDRLP4 12+20+2
ADDRLP4 316
INDIRU4
CVUU1 4
ASGNU1
line 832
;832:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 834
;833:
;834:		VectorCopy(org, verts[1].xyz);
ADDRLP4 12+24
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 835
;835:		verts[1].xyz[0] -= cosR;
ADDRLP4 12+24
ADDRLP4 12+24
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
ASGNF4
line 836
;836:		verts[1].xyz[1] += sinR;
ADDRLP4 12+24+4
ADDRLP4 12+24+4
INDIRF4
ADDRLP4 248
INDIRF4
ADDF4
ASGNF4
line 837
;837:		verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 838
;838:		verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 839
;839:		verts[1].modulate[0] = 255 * color[0];
ADDRLP4 332
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 336
CNSTF4 1325400064
ASGNF4
ADDRLP4 332
INDIRF4
ADDRLP4 336
INDIRF4
LTF4 $1027
ADDRLP4 328
ADDRLP4 332
INDIRF4
ADDRLP4 336
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1028
JUMPV
LABELV $1027
ADDRLP4 328
ADDRLP4 332
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1028
ADDRLP4 12+24+20
ADDRLP4 328
INDIRU4
CVUU1 4
ASGNU1
line 840
;840:		verts[1].modulate[1] = 255 * color[1];
ADDRLP4 344
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 348
CNSTF4 1325400064
ASGNF4
ADDRLP4 344
INDIRF4
ADDRLP4 348
INDIRF4
LTF4 $1034
ADDRLP4 340
ADDRLP4 344
INDIRF4
ADDRLP4 348
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1035
JUMPV
LABELV $1034
ADDRLP4 340
ADDRLP4 344
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1035
ADDRLP4 12+24+20+1
ADDRLP4 340
INDIRU4
CVUU1 4
ASGNU1
line 841
;841:		verts[1].modulate[2] = 255 * color[2];
ADDRLP4 356
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 360
CNSTF4 1325400064
ASGNF4
ADDRLP4 356
INDIRF4
ADDRLP4 360
INDIRF4
LTF4 $1041
ADDRLP4 352
ADDRLP4 356
INDIRF4
ADDRLP4 360
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1042
JUMPV
LABELV $1041
ADDRLP4 352
ADDRLP4 356
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1042
ADDRLP4 12+24+20+2
ADDRLP4 352
INDIRU4
CVUU1 4
ASGNU1
line 842
;842:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 844
;843:
;844:		VectorCopy(org, verts[2].xyz);
ADDRLP4 12+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 845
;845:		verts[2].xyz[0] += sinR;
ADDRLP4 12+48
ADDRLP4 12+48
INDIRF4
ADDRLP4 248
INDIRF4
ADDF4
ASGNF4
line 846
;846:		verts[2].xyz[1] += cosR;
ADDRLP4 12+48+4
ADDRLP4 12+48+4
INDIRF4
ADDRLP4 252
INDIRF4
ADDF4
ASGNF4
line 847
;847:		verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 848
;848:		verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 849
;849:		verts[2].modulate[0] = 255 * color[0];
ADDRLP4 368
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 372
CNSTF4 1325400064
ASGNF4
ADDRLP4 368
INDIRF4
ADDRLP4 372
INDIRF4
LTF4 $1058
ADDRLP4 364
ADDRLP4 368
INDIRF4
ADDRLP4 372
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1059
JUMPV
LABELV $1058
ADDRLP4 364
ADDRLP4 368
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1059
ADDRLP4 12+48+20
ADDRLP4 364
INDIRU4
CVUU1 4
ASGNU1
line 850
;850:		verts[2].modulate[1] = 255 * color[1];
ADDRLP4 380
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 384
CNSTF4 1325400064
ASGNF4
ADDRLP4 380
INDIRF4
ADDRLP4 384
INDIRF4
LTF4 $1065
ADDRLP4 376
ADDRLP4 380
INDIRF4
ADDRLP4 384
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1066
JUMPV
LABELV $1065
ADDRLP4 376
ADDRLP4 380
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1066
ADDRLP4 12+48+20+1
ADDRLP4 376
INDIRU4
CVUU1 4
ASGNU1
line 851
;851:		verts[2].modulate[2] = 255 * color[2];
ADDRLP4 392
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 396
CNSTF4 1325400064
ASGNF4
ADDRLP4 392
INDIRF4
ADDRLP4 396
INDIRF4
LTF4 $1072
ADDRLP4 388
ADDRLP4 392
INDIRF4
ADDRLP4 396
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1073
JUMPV
LABELV $1072
ADDRLP4 388
ADDRLP4 392
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1073
ADDRLP4 12+48+20+2
ADDRLP4 388
INDIRU4
CVUU1 4
ASGNU1
line 852
;852:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 854
;853:
;854:		VectorCopy(org, verts[3].xyz);
ADDRLP4 12+72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 855
;855:		verts[3].xyz[0] += cosR;
ADDRLP4 12+72
ADDRLP4 12+72
INDIRF4
ADDRLP4 252
INDIRF4
ADDF4
ASGNF4
line 856
;856:		verts[3].xyz[1] -= sinR;
ADDRLP4 12+72+4
ADDRLP4 12+72+4
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
ASGNF4
line 857
;857:		verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 858
;858:		verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 859
;859:		verts[3].modulate[0] = 255 * color[0];
ADDRLP4 404
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 408
CNSTF4 1325400064
ASGNF4
ADDRLP4 404
INDIRF4
ADDRLP4 408
INDIRF4
LTF4 $1089
ADDRLP4 400
ADDRLP4 404
INDIRF4
ADDRLP4 408
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1090
JUMPV
LABELV $1089
ADDRLP4 400
ADDRLP4 404
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1090
ADDRLP4 12+72+20
ADDRLP4 400
INDIRU4
CVUU1 4
ASGNU1
line 860
;860:		verts[3].modulate[1] = 255 * color[1];
ADDRLP4 416
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 420
CNSTF4 1325400064
ASGNF4
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
LTF4 $1096
ADDRLP4 412
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1097
JUMPV
LABELV $1096
ADDRLP4 412
ADDRLP4 416
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1097
ADDRLP4 12+72+20+1
ADDRLP4 412
INDIRU4
CVUU1 4
ASGNU1
line 861
;861:		verts[3].modulate[2] = 255 * color[2];
ADDRLP4 428
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 432
CNSTF4 1325400064
ASGNF4
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
LTF4 $1103
ADDRLP4 424
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1104
JUMPV
LABELV $1103
ADDRLP4 424
ADDRLP4 428
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1104
ADDRLP4 12+72+20+2
ADDRLP4 424
INDIRU4
CVUU1 4
ASGNU1
line 862
;862:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 863
;863:	} else if (p->type == P_FLAT) {
ADDRGP4 $981
JUMPV
LABELV $980
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1108
line 865
;864:
;865:		VectorCopy(org, verts[0].xyz);
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 866
;866:		verts[0].xyz[0] -= p->height;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
line 867
;867:		verts[0].xyz[1] -= p->width;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 868
;868:		verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 869
;869:		verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 870
;870:		verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 871
;871:		verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 872
;872:		verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 873
;873:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 875
;874:
;875:		VectorCopy(org, verts[1].xyz);
ADDRLP4 12+24
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 876
;876:		verts[1].xyz[0] -= p->height;
ADDRLP4 12+24
ADDRLP4 12+24
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
line 877
;877:		verts[1].xyz[1] += p->width;
ADDRLP4 12+24+4
ADDRLP4 12+24+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
line 878
;878:		verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 879
;879:		verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 880
;880:		verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 881
;881:		verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 882
;882:		verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 883
;883:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 885
;884:
;885:		VectorCopy(org, verts[2].xyz);
ADDRLP4 12+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 886
;886:		verts[2].xyz[0] += p->height;
ADDRLP4 12+48
ADDRLP4 12+48
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDF4
ASGNF4
line 887
;887:		verts[2].xyz[1] += p->width;
ADDRLP4 12+48+4
ADDRLP4 12+48+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
line 888
;888:		verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 889
;889:		verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 890
;890:		verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 891
;891:		verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 892
;892:		verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 893
;893:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 895
;894:
;895:		VectorCopy(org, verts[3].xyz);
ADDRLP4 12+72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 896
;896:		verts[3].xyz[0] += p->height;
ADDRLP4 12+72
ADDRLP4 12+72
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDF4
ASGNF4
line 897
;897:		verts[3].xyz[1] -= p->width;
ADDRLP4 12+72+4
ADDRLP4 12+72+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 898
;898:		verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 899
;899:		verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 900
;900:		verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 901
;901:		verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 902
;902:		verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 903
;903:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 905
;904:
;905:	}
ADDRGP4 $1109
JUMPV
LABELV $1108
line 907
;906:	// Ridah
;907:	else if (p->type == P_ANIM) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1181
line 912
;908:		vec3_t	rr, ru;
;909:		vec3_t	rotate_ang;
;910:		int i, j;
;911:
;912:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 913
;913:		time2 = p->endtime - p->time;
ADDRLP4 292
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 292
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 914
;914:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 915
;915:		if (ratio >= 1.0f) {
ADDRLP4 200
INDIRF4
CNSTF4 1065353216
LTF4 $1184
line 916
;916:			ratio = 0.9999f;
ADDRLP4 200
CNSTF4 1065351538
ASGNF4
line 917
;917:		}
LABELV $1184
line 919
;918:
;919:		width = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 296
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 920
;920:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 300
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 300
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 300
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 300
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 923
;921:
;922:		// if we are "inside" this sprite, don't draw
;923:		if (Distance(cg.snap->ps.origin, org) < width / 1.5) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 304
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1059760811
MULF4
GEF4 $1186
line 924
;924:			return;
ADDRGP4 $246
JUMPV
LABELV $1186
line 927
;925:		}
;926:
;927:		i = p->shaderAnim;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 928
;928:		j = (int)floor(ratio * shaderAnimCounts[p->shaderAnim]);
ADDRLP4 200
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimCounts
ADDP4
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 308
ADDRGP4 floor
CALLF4
ASGNF4
ADDRLP4 276
ADDRLP4 308
INDIRF4
CVFI4 4
ASGNI4
line 929
;929:		p->pshader = shaderAnims[i][j];
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 276
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 272
INDIRI4
CNSTI4 8
LSHI4
ADDRGP4 shaderAnims
ADDP4
ADDP4
INDIRI4
ASGNI4
line 931
;930:
;931:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1189
line 932
;932:			vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 280
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 933
;933:			rotate_ang[ROLL] += p->roll;
ADDRLP4 280+8
ADDRLP4 280+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 934
;934:			AngleVectors(rotate_ang, NULL, rr, ru);
ADDRLP4 280
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 260
ARGP4
ADDRLP4 248
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 935
;935:		}
LABELV $1189
line 937
;936:
;937:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1194
line 938
;938:			VectorMA(org, -height, ru, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 939
;939:			VectorMA(point, -width, rr, point);
ADDRLP4 320
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 940
;940:		} else {
ADDRGP4 $1195
JUMPV
LABELV $1194
line 941
;941:			VectorMA(org, -height, pvup, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 942
;942:			VectorMA(point, -width, pvright, point);
ADDRLP4 320
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 943
;943:		}
LABELV $1195
line 944
;944:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 945
;945:		verts[0].st[0] = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 946
;946:		verts[0].st[1] = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 947
;947:		verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 948
;948:		verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 949
;949:		verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 950
;950:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 952
;951:
;952:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1226
line 953
;953:			VectorMA(point, 2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 954
;954:		} else {
ADDRGP4 $1227
JUMPV
LABELV $1226
line 955
;955:			VectorMA(point, 2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 956
;956:		}
LABELV $1227
line 957
;957:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 958
;958:		verts[1].st[0] = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 959
;959:		verts[1].st[1] = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 960
;960:		verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 961
;961:		verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 962
;962:		verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 963
;963:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 965
;964:
;965:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1257
line 966
;966:			VectorMA(point, 2 * width, rr, point);
ADDRLP4 312
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 967
;967:		} else {
ADDRGP4 $1258
JUMPV
LABELV $1257
line 968
;968:			VectorMA(point, 2 * width, pvright, point);
ADDRLP4 312
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 969
;969:		}
LABELV $1258
line 970
;970:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 971
;971:		verts[2].st[0] = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 972
;972:		verts[2].st[1] = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 973
;973:		verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 974
;974:		verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 975
;975:		verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 976
;976:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 978
;977:
;978:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1288
line 979
;979:			VectorMA(point, -2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 980
;980:		} else {
ADDRGP4 $1289
JUMPV
LABELV $1288
line 981
;981:			VectorMA(point, -2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 982
;982:		}
LABELV $1289
line 983
;983:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 984
;984:		verts[3].st[0] = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 985
;985:		verts[3].st[1] = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 986
;986:		verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 987
;987:		verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 988
;988:		verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 989
;989:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 990
;990:	}
LABELV $1181
LABELV $1109
LABELV $981
LABELV $857
LABELV $611
LABELV $476
LABELV $248
line 993
;991:	// done.
;992:
;993:	if (!p->pshader) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1319
line 996
;994:		// (SA) temp commented out for DM
;995:		//		CG_Printf ("CG_AddParticleToScene type %d p->pshader == ZERO\n", p->type);
;996:		return;
ADDRGP4 $246
JUMPV
LABELV $1319
line 999
;997:	}
;998:
;999:	if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT || p->type == P_WEATHER_FLURRY)
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1324
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
EQI4 $1324
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1321
LABELV $1324
line 1000
;1000:		trap_R_AddPolyToScene(p->pshader, 3, TRIverts);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 108
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
ADDRGP4 $1322
JUMPV
LABELV $1321
line 1002
;1001:	else
;1002:		trap_R_AddPolyToScene(p->pshader, 4, verts);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
LABELV $1322
line 1004
;1003:
;1004:}
LABELV $246
endproc CG_AddParticleToScene 456 16
data
align 4
LABELV roll
byte 4 0
export CG_AddParticles
code
proc CG_AddParticles 88 16
line 1014
;1005:
;1006:// Ridah, made this static so it doesn't interfere with other files
;1007:static float roll = 0.0;
;1008:
;1009:/*
;1010:===============
;1011:CG_AddParticles
;1012:===============
;1013:*/
;1014:void CG_AddParticles(void) {
line 1024
;1015:	cparticle_t *p, *next;
;1016:	float			alpha;
;1017:	float			time, time2;
;1018:	vec3_t			org;
;1019:	//int				color;
;1020:	cparticle_t *active, *tail;
;1021:	//int				type;
;1022:	vec3_t			rotate_ang;
;1023:
;1024:	if (!initparticles)
ADDRGP4 initparticles
INDIRI4
CNSTI4 0
NEI4 $1326
line 1025
;1025:		CG_ClearParticles();
ADDRGP4 CG_ClearParticles
CALLV
pop
LABELV $1326
line 1027
;1026:
;1027:	VectorCopy(cg.refdef.viewaxis[0], pvforward);
ADDRGP4 pvforward
ADDRGP4 cg+109056+36
INDIRB
ASGNB 12
line 1028
;1028:	VectorCopy(cg.refdef.viewaxis[1], pvright);
ADDRGP4 pvright
ADDRGP4 cg+109056+36+12
INDIRB
ASGNB 12
line 1029
;1029:	VectorCopy(cg.refdef.viewaxis[2], pvup);
ADDRGP4 pvup
ADDRGP4 cg+109056+36+24
INDIRB
ASGNB 12
line 1031
;1030:
;1031:	vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1032
;1032:	roll += ((cg.time - oldtime) * 0.1);
ADDRLP4 52
ADDRGP4 roll
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 oldtime
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1036831949
MULF4
ADDF4
ASGNF4
line 1033
;1033:	rotate_ang[ROLL] += (roll * 0.9);
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
ADDRGP4 roll
INDIRF4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1034
;1034:	AngleVectors(rotate_ang, rforward, rright, rup);
ADDRLP4 40
ARGP4
ADDRGP4 rforward
ARGP4
ADDRGP4 rright
ARGP4
ADDRGP4 rup
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1036
;1035:
;1036:	oldtime = cg.time;
ADDRGP4 oldtime
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1038
;1037:
;1038:	active = NULL;
ADDRLP4 36
CNSTP4 0
ASGNP4
line 1039
;1039:	tail = NULL;
ADDRLP4 28
CNSTP4 0
ASGNP4
line 1041
;1040:
;1041:	for (p = active_particles; p; p = next) {
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1344
JUMPV
LABELV $1341
line 1043
;1042:
;1043:		next = p->next;
ADDRLP4 32
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1045
;1044:
;1045:		time = (cg.time - p->time) * 0.001;
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 1047
;1046:
;1047:		alpha = p->alpha + time * p->alphavel;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1048
;1048:		if (alpha <= 0) {	// faded out
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $1346
line 1049
;1049:			p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1050
;1050:			free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1051
;1051:			p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1052
;1052:			p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1053
;1053:			p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1054
;1054:			continue;
ADDRGP4 $1342
JUMPV
LABELV $1346
line 1057
;1055:		}
;1056:
;1057:		if (p->type == P_SMOKE || p->type == P_ANIM || p->type == P_BLEED || p->type == P_SMOKE_IMPACT) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1352
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 6
EQI4 $1352
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 8
EQI4 $1352
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $1348
LABELV $1352
line 1058
;1058:			if (cg.time > p->endtime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $1353
line 1059
;1059:				p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1060
;1060:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1061
;1061:				p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1062
;1062:				p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1063
;1063:				p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1065
;1064:
;1065:				continue;
ADDRGP4 $1342
JUMPV
LABELV $1353
line 1068
;1066:			}
;1067:
;1068:		}
LABELV $1348
line 1070
;1069:
;1070:		if (p->type == P_WEATHER_FLURRY) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1356
line 1071
;1071:			if (cg.time > p->endtime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $1358
line 1072
;1072:				p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1073
;1073:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1074
;1074:				p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1075
;1075:				p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1076
;1076:				p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1078
;1077:
;1078:				continue;
ADDRGP4 $1342
JUMPV
LABELV $1358
line 1080
;1079:			}
;1080:		}
LABELV $1356
line 1083
;1081:
;1082:
;1083:		if (p->type == P_FLAT_SCALEUP_FADE) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 10
NEI4 $1361
line 1084
;1084:			if (cg.time > p->endtime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $1363
line 1085
;1085:				p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1086
;1086:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1087
;1087:				p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1088
;1088:				p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1089
;1089:				p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1090
;1090:				continue;
ADDRGP4 $1342
JUMPV
LABELV $1363
line 1093
;1091:			}
;1092:
;1093:		}
LABELV $1361
line 1095
;1094:
;1095:		if ((p->type == P_BAT || p->type == P_SPRITE) && p->endtime < 0) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 7
EQI4 $1368
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 15
NEI4 $1366
LABELV $1368
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1366
line 1097
;1096:			// temporary sprite
;1097:			CG_AddParticleToScene(p, p->org, alpha);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 8
INDIRF4
ARGF4
ADDRGP4 CG_AddParticleToScene
CALLV
pop
line 1098
;1098:			p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1099
;1099:			free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1100
;1100:			p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1101
;1101:			p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1102
;1102:			p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1103
;1103:			continue;
ADDRGP4 $1342
JUMPV
LABELV $1366
line 1106
;1104:		}
;1105:
;1106:		p->next = NULL;
ADDRLP4 0
INDIRP4
CNSTP4 0
ASGNP4
line 1107
;1107:		if (!tail)
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1369
line 1108
;1108:			active = tail = p;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRGP4 $1370
JUMPV
LABELV $1369
line 1109
;1109:		else {
line 1110
;1110:			tail->next = p;
ADDRLP4 28
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1111
;1111:			tail = p;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
line 1112
;1112:		}
LABELV $1370
line 1114
;1113:
;1114:		if (alpha > 1.0)
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
LEF4 $1371
line 1115
;1115:			alpha = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
LABELV $1371
line 1119
;1116:
;1117:		//color = p->color;
;1118:
;1119:		time2 = time * time;
ADDRLP4 12
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1121
;1120:
;1121:		org[0] = p->org[0] + p->vel[0] * time + p->accel[0] * time2;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1122
;1122:		org[1] = p->org[1] + p->vel[1] * time + p->accel[1] * time2;
ADDRLP4 16+4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1123
;1123:		org[2] = p->org[2] + p->vel[2] * time + p->accel[2] * time2;
ADDRLP4 16+8
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1127
;1124:
;1125:		//type = p->type;
;1126:
;1127:		CG_AddParticleToScene(p, org, alpha);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRF4
ARGF4
ADDRGP4 CG_AddParticleToScene
CALLV
pop
line 1128
;1128:	}
LABELV $1342
line 1041
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
LABELV $1344
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1341
line 1130
;1129:
;1130:	active_particles = active;
ADDRGP4 active_particles
ADDRLP4 36
INDIRP4
ASGNP4
line 1131
;1131:}
LABELV $1325
endproc CG_AddParticles 88 16
export CG_ParticleSnowFlurry
proc CG_ParticleSnowFlurry 52 4
line 1138
;1132:
;1133:/*
;1134:======================
;1135:CG_AddParticles
;1136:======================
;1137:*/
;1138:void CG_ParticleSnowFlurry(qhandle_t pshader, centity_t *cent) {
line 1142
;1139:	cparticle_t *p;
;1140:	//qboolean turb = qtrue;
;1141:
;1142:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1376
line 1143
;1143:		CG_Printf("CG_ParticleSnowFlurry pshader == ZERO!\n");
ADDRGP4 $1378
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1376
line 1145
;1144:
;1145:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1379
line 1146
;1146:		return;
ADDRGP4 $1375
JUMPV
LABELV $1379
line 1147
;1147:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1148
;1148:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1149
;1149:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1150
;1150:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1151
;1151:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1152
;1152:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1153
;1153:	p->alpha = 0.90f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1063675494
ASGNF4
line 1154
;1154:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1156
;1155:
;1156:	p->start = cent->currentState.origin2[0];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ASGNF4
line 1157
;1157:	p->end = cent->currentState.origin2[1];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ASGNF4
line 1159
;1158:
;1159:	p->endtime = cg.time + cent->currentState.time;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1160
;1160:	p->startfade = cg.time + cent->currentState.time2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1162
;1161:
;1162:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1164
;1163:
;1164:	if (rand() % 100 > 90) {
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 100
MODI4
CNSTI4 90
LEI4 $1384
line 1165
;1165:		p->height = 32;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 1166
;1166:		p->width = 32;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 1167
;1167:		p->alpha = 0.10f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1036831949
ASGNF4
line 1168
;1168:	} else {
ADDRGP4 $1385
JUMPV
LABELV $1384
line 1169
;1169:		p->height = 1;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1065353216
ASGNF4
line 1170
;1170:		p->width = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1171
;1171:	}
LABELV $1385
line 1173
;1172:
;1173:	p->vel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3248488448
ASGNF4
line 1175
;1174:
;1175:	p->type = P_WEATHER_FLURRY;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 11
ASGNI4
line 1178
;1176:
;1177:	//if (turb)
;1178:	p->vel[2] = -10;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3240099840
ASGNF4
line 1180
;1179:
;1180:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1186
;1181:
;1182:	//p->org[0] = p->org[0];
;1183:	//p->org[1] = p->org[1];
;1184:	//p->org[2] = p->org[2];
;1185:
;1186:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1188
;1187:
;1188:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 20
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1190
;1189:
;1190:	p->vel[0] += cent->currentState.angles[0] * 32 + (crandom() * 16);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1107296256
MULF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ADDF4
ADDF4
ASGNF4
line 1191
;1191:	p->vel[1] += cent->currentState.angles[1] * 32 + (crandom() * 16);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 1107296256
MULF4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ADDF4
ADDF4
ASGNF4
line 1192
;1192:	p->vel[2] += cent->currentState.angles[2];
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1195
;1193:
;1194:	//if (turb)
;1195:	{
line 1196
;1196:		p->accel[0] = crandom() * 16;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1197
;1197:		p->accel[1] = crandom() * 16;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1198
;1198:	}
line 1200
;1199:
;1200:}
LABELV $1375
endproc CG_ParticleSnowFlurry 52 4
export CG_ParticleSnow
proc CG_ParticleSnow 56 4
line 1202
;1201:
;1202:void CG_ParticleSnow(qhandle_t pshader, vec3_t origin, vec3_t origin2, int turb, float range, int snum) {
line 1205
;1203:	cparticle_t *p;
;1204:
;1205:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1387
line 1206
;1206:		CG_Printf("CG_ParticleSnow pshader == ZERO!\n");
ADDRGP4 $1389
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1387
line 1208
;1207:
;1208:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1390
line 1209
;1209:		return;
ADDRGP4 $1386
JUMPV
LABELV $1390
line 1210
;1210:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1211
;1211:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1212
;1212:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1213
;1213:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1214
;1214:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1215
;1215:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1216
;1216:	p->alpha = 0.40f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1217
;1217:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1218
;1218:	p->start = origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1219
;1219:	p->end = origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1220
;1220:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1221
;1221:	p->height = 1;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1065353216
ASGNF4
line 1222
;1222:	p->width = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1224
;1223:
;1224:	p->vel[2] = -50;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3259498496
ASGNF4
line 1226
;1225:
;1226:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1393
line 1227
;1227:		p->type = P_WEATHER_TURBULENT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 5
ASGNI4
line 1228
;1228:		p->vel[2] = -50 * 1.3;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3263299584
ASGNF4
line 1229
;1229:	} else {
ADDRGP4 $1394
JUMPV
LABELV $1393
line 1230
;1230:		p->type = P_WEATHER;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 1231
;1231:	}
LABELV $1394
line 1233
;1232:
;1233:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1235
;1234:
;1235:	p->org[0] = p->org[0] + (crandom() * range);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1236
;1236:	p->org[1] = p->org[1] + (crandom() * range);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1237
;1237:	p->org[2] = p->org[2] + (crandom() * (p->start - p->end));
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1239
;1238:
;1239:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 1241
;1240:
;1241:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 44
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
line 1243
;1242:
;1243:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1395
line 1244
;1244:		p->vel[0] = crandom() * 16;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1245
;1245:		p->vel[1] = crandom() * 16;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1246
;1246:	}
LABELV $1395
line 1249
;1247:
;1248:	// Rafael snow pvs check
;1249:	p->snum = snum;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1250
;1250:	p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
line 1252
;1251:
;1252:}
LABELV $1386
endproc CG_ParticleSnow 56 4
export CG_ParticleBubble
proc CG_ParticleBubble 68 4
line 1254
;1253:
;1254:void CG_ParticleBubble(qhandle_t pshader, vec3_t origin, vec3_t origin2, int turb, float range, int snum) {
line 1258
;1255:	cparticle_t *p;
;1256:	float		randsize;
;1257:
;1258:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1398
line 1259
;1259:		CG_Printf("CG_ParticleSnow pshader == ZERO!\n");
ADDRGP4 $1389
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1398
line 1261
;1260:
;1261:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1400
line 1262
;1262:		return;
ADDRGP4 $1397
JUMPV
LABELV $1400
line 1263
;1263:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1264
;1264:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1265
;1265:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1266
;1266:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1267
;1267:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1268
;1268:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1269
;1269:	p->alpha = 0.40f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1270
;1270:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1271
;1271:	p->start = origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1272
;1272:	p->end = origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1273
;1273:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1275
;1274:
;1275:	randsize = 1 + (crandom() * 0.5);
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1277
;1276:
;1277:	p->height = randsize;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1278
;1278:	p->width = randsize;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1280
;1279:
;1280:	p->vel[2] = 50 + (crandom() * 10);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 1282
;1281:
;1282:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1403
line 1283
;1283:		p->type = P_BUBBLE_TURBULENT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 14
ASGNI4
line 1284
;1284:		p->vel[2] = 50 * 1.3;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1115815936
ASGNF4
line 1285
;1285:	} else {
ADDRGP4 $1404
JUMPV
LABELV $1403
line 1286
;1286:		p->type = P_BUBBLE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 13
ASGNI4
line 1287
;1287:	}
LABELV $1404
line 1289
;1288:
;1289:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1291
;1290:
;1291:	p->org[0] = p->org[0] + (crandom() * range);
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1292
;1292:	p->org[1] = p->org[1] + (crandom() * range);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1293
;1293:	p->org[2] = p->org[2] + (crandom() * (p->start - p->end));
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1295
;1294:
;1295:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 1297
;1296:
;1297:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
line 1299
;1298:
;1299:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1405
line 1300
;1300:		p->vel[0] = crandom() * 4;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1301
;1301:		p->vel[1] = crandom() * 4;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1302
;1302:	}
LABELV $1405
line 1305
;1303:
;1304:	// Rafael snow pvs check
;1305:	p->snum = snum;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1306
;1306:	p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
line 1308
;1307:
;1308:}
LABELV $1397
endproc CG_ParticleBubble 68 4
export CG_ParticleSmoke
proc CG_ParticleSmoke 28 4
line 1310
;1309:
;1310:void CG_ParticleSmoke(qhandle_t pshader, centity_t *cent) {
line 1316
;1311:
;1312:	// using cent->density = enttime
;1313:	//		 cent->frame = startfade
;1314:	cparticle_t *p;
;1315:
;1316:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1408
line 1317
;1317:		CG_Printf("CG_ParticleSmoke == ZERO!\n");
ADDRGP4 $1410
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1408
line 1319
;1318:
;1319:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1411
line 1320
;1320:		return;
ADDRGP4 $1407
JUMPV
LABELV $1411
line 1321
;1321:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1322
;1322:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1323
;1323:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1324
;1324:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1325
;1325:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1327
;1326:
;1327:	p->endtime = cg.time + cent->currentState.time;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1328
;1328:	p->startfade = cg.time + cent->currentState.time2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1330
;1329:
;1330:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1331
;1331:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1332
;1332:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1333
;1333:	p->start = cent->currentState.origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 1334
;1334:	p->end = cent->currentState.origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ASGNF4
line 1335
;1335:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1336
;1336:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1337
;1337:	p->height = 8;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1090519040
ASGNF4
line 1338
;1338:	p->width = 8;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1090519040
ASGNF4
line 1339
;1339:	p->endheight = 32;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1107296256
ASGNF4
line 1340
;1340:	p->endwidth = 32;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1107296256
ASGNF4
line 1341
;1341:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1343
;1342:
;1343:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1345
;1344:
;1345:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 1346
;1346:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
line 1348
;1347:
;1348:	p->vel[2] = 5;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1084227584
ASGNF4
line 1350
;1349:
;1350:	if (cent->currentState.frame == 1)// reverse gravity	
ADDRFP4 4
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1416
line 1351
;1351:		p->vel[2] *= -1;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 3212836864
MULF4
ASGNF4
LABELV $1416
line 1353
;1352:
;1353:	p->roll = 8 + (crandom() * 4);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
CNSTF4 1090519040
ADDF4
CVFI4 4
ASGNI4
line 1354
;1354:}
LABELV $1407
endproc CG_ParticleSmoke 28 4
export CG_ParticleBulletDebris
proc CG_ParticleBulletDebris 16 0
line 1357
;1355:
;1356:
;1357:void CG_ParticleBulletDebris(vec3_t org, vec3_t vel, int duration) {
line 1361
;1358:
;1359:	cparticle_t *p;
;1360:
;1361:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1419
line 1362
;1362:		return;
ADDRGP4 $1418
JUMPV
LABELV $1419
line 1363
;1363:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1364
;1364:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1365
;1365:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1366
;1366:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1367
;1367:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1369
;1368:
;1369:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 1370
;1370:	p->startfade = cg.time + duration / 2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
ASGNI4
line 1372
;1371:
;1372:	p->color = EMISIVEFADE;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 1373
;1373:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1374
;1374:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1376
;1375:
;1376:	p->height = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1056964608
ASGNF4
line 1377
;1377:	p->width = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1056964608
ASGNF4
line 1378
;1378:	p->endheight = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1056964608
ASGNF4
line 1379
;1379:	p->endwidth = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1056964608
ASGNF4
line 1381
;1380:
;1381:	p->pshader = cgs.media.tracerShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+146664+252
INDIRI4
ASGNI4
line 1383
;1382:
;1383:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1385
;1384:
;1385:	VectorCopy(org, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1387
;1386:
;1387:	p->vel[0] = vel[0];
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 1388
;1388:	p->vel[1] = vel[1];
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1389
;1389:	p->vel[2] = vel[2];
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1390
;1390:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 1392
;1391:
;1392:	p->accel[2] = -60;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3262119936
ASGNF4
line 1393
;1393:	p->vel[2] += -20;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 3248488448
ADDF4
ASGNF4
line 1395
;1394:
;1395:}
LABELV $1418
endproc CG_ParticleBulletDebris 16 0
export CG_ParticleExplosion
proc CG_ParticleExplosion 12 8
line 1403
;1396:
;1397:/*
;1398:======================
;1399:CG_ParticleExplosion
;1400:======================
;1401:*/
;1402:
;1403:void CG_ParticleExplosion(const char *animStr, const vec3_t origin, const vec3_t vel, int duration, int sizeStart, int sizeEnd) {
line 1407
;1404:	cparticle_t *p;
;1405:	int anim;
;1406:
;1407:	if (animStr < (char *)10)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 10
GEU4 $1427
line 1408
;1408:		CG_Error("CG_ParticleExplosion: animStr is probably an index rather than a string");
ADDRGP4 $1429
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $1427
line 1411
;1409:
;1410:	// find the animation string
;1411:	for (anim = 0; shaderAnimNames[anim]; anim++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1433
JUMPV
LABELV $1430
line 1412
;1412:		if (!Q_stricmp(animStr, shaderAnimNames[anim]))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1434
line 1413
;1413:			break;
ADDRGP4 $1432
JUMPV
LABELV $1434
line 1414
;1414:	}
LABELV $1431
line 1411
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1433
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1430
LABELV $1432
line 1415
;1415:	if (!shaderAnimNames[anim]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1436
line 1416
;1416:		CG_Error("CG_ParticleExplosion: unknown animation string: %s\n", animStr);
ADDRGP4 $1438
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1417
;1417:		return;
ADDRGP4 $1426
JUMPV
LABELV $1436
line 1420
;1418:	}
;1419:
;1420:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1439
line 1421
;1421:		return;
ADDRGP4 $1426
JUMPV
LABELV $1439
line 1422
;1422:	p = free_particles;
ADDRLP4 4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1423
;1423:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 1424
;1424:	p->next = active_particles;
ADDRLP4 4
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1425
;1425:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 4
INDIRP4
ASGNP4
line 1426
;1426:	p->time = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1427
;1427:	p->alpha = 0.5;
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1056964608
ASGNF4
line 1428
;1428:	p->alphavel = 0;
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1430
;1429:
;1430:	if (duration < 0) {
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $1442
line 1431
;1431:		duration *= -1;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 -1
MULI4
ASGNI4
line 1432
;1432:		p->roll = 0;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1433
;1433:	} else {
ADDRGP4 $1443
JUMPV
LABELV $1442
line 1434
;1434:		p->roll = crandom() * 179;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1135804416
MULF4
CVFI4 4
ASGNI4
line 1435
;1435:	}
LABELV $1443
line 1437
;1436:
;1437:	p->shaderAnim = anim;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1439
;1438:
;1439:	p->width = sizeStart;
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ASGNF4
line 1440
;1440:	p->height = sizeStart * shaderAnimSTRatio[anim];	// for sprites that are stretch in either direction
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimSTRatio
ADDP4
INDIRF4
MULF4
ASGNF4
line 1442
;1441:
;1442:	p->endheight = sizeEnd;
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 20
INDIRI4
CVIF4 4
ASGNF4
line 1443
;1443:	p->endwidth = sizeEnd * shaderAnimSTRatio[anim];
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 20
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimSTRatio
ADDP4
INDIRF4
MULF4
ASGNF4
line 1445
;1444:
;1445:	p->endtime = cg.time + duration;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
ASGNI4
line 1447
;1446:
;1447:	p->type = P_ANIM;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 6
ASGNI4
line 1449
;1448:
;1449:	VectorCopy(origin, p->org);
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1450
;1450:	VectorCopy(vel, p->vel);
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1451
;1451:	VectorClear(p->accel);
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1453
;1452:
;1453:}
LABELV $1426
endproc CG_ParticleExplosion 12 8
export CG_AddParticleShrapnel
proc CG_AddParticleShrapnel 0 0
line 1456
;1454:
;1455:// Rafael Shrapnel
;1456:void CG_AddParticleShrapnel(localEntity_t *le) {
line 1457
;1457:	return;
LABELV $1445
endproc CG_AddParticleShrapnel 0 0
export CG_NewParticleArea
proc CG_NewParticleArea 92 24
line 1461
;1458:}
;1459:// done.
;1460:
;1461:int CG_NewParticleArea(int num) {
line 1468
;1462:	// const char *str;
;1463:	char *str;
;1464:	char *token;
;1465:	int type;
;1466:	vec3_t origin, origin2;
;1467:	int		i;
;1468:	float range = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 1473
;1469:	int turb;
;1470:	int	numparticles;
;1471:	int	snum;
;1472:
;1473:	str = (char *)CG_ConfigString(num);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
ASGNP4
line 1474
;1474:	if (!str[0])
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $1447
line 1475
;1475:		return (0);
CNSTI4 0
RETI4
ADDRGP4 $1446
JUMPV
LABELV $1447
line 1478
;1476:
;1477:	// returns type 128 64 or 32
;1478:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 60
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
ASGNP4
line 1479
;1479:	type = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 64
INDIRI4
ASGNI4
line 1481
;1480:
;1481:	if (type == 1)
ADDRLP4 36
INDIRI4
CNSTI4 1
NEI4 $1449
line 1482
;1482:		range = 128;
ADDRLP4 40
CNSTF4 1124073472
ASGNF4
ADDRGP4 $1450
JUMPV
LABELV $1449
line 1483
;1483:	else if (type == 2)
ADDRLP4 36
INDIRI4
CNSTI4 2
NEI4 $1451
line 1484
;1484:		range = 64;
ADDRLP4 40
CNSTF4 1115684864
ASGNF4
ADDRGP4 $1452
JUMPV
LABELV $1451
line 1485
;1485:	else if (type == 3)
ADDRLP4 36
INDIRI4
CNSTI4 3
NEI4 $1453
line 1486
;1486:		range = 32;
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRGP4 $1454
JUMPV
LABELV $1453
line 1487
;1487:	else if (type == 0)
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $1455
line 1488
;1488:		range = 256;
ADDRLP4 40
CNSTF4 1132462080
ASGNF4
ADDRGP4 $1456
JUMPV
LABELV $1455
line 1489
;1489:	else if (type == 4)
ADDRLP4 36
INDIRI4
CNSTI4 4
NEI4 $1457
line 1490
;1490:		range = 8;
ADDRLP4 40
CNSTF4 1090519040
ASGNF4
ADDRGP4 $1458
JUMPV
LABELV $1457
line 1491
;1491:	else if (type == 5)
ADDRLP4 36
INDIRI4
CNSTI4 5
NEI4 $1459
line 1492
;1492:		range = 16;
ADDRLP4 40
CNSTF4 1098907648
ASGNF4
ADDRGP4 $1460
JUMPV
LABELV $1459
line 1493
;1493:	else if (type == 6)
ADDRLP4 36
INDIRI4
CNSTI4 6
NEI4 $1461
line 1494
;1494:		range = 32;
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRGP4 $1462
JUMPV
LABELV $1461
line 1495
;1495:	else if (type == 7)
ADDRLP4 36
INDIRI4
CNSTI4 7
NEI4 $1463
line 1496
;1496:		range = 64;
ADDRLP4 40
CNSTF4 1115684864
ASGNF4
LABELV $1463
LABELV $1462
LABELV $1460
LABELV $1458
LABELV $1456
LABELV $1454
LABELV $1452
LABELV $1450
line 1499
;1497:
;1498:
;1499:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1465
line 1500
;1500:		token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1501
;1501:		origin[i] = atof(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 1502
;1502:	}
LABELV $1466
line 1499
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1465
line 1504
;1503:
;1504:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1469
line 1505
;1505:		token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1506
;1506:		origin2[i] = atof(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 24
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 1507
;1507:	}
LABELV $1470
line 1504
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1469
line 1509
;1508:
;1509:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1510
;1510:	numparticles = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 72
INDIRI4
ASGNI4
line 1512
;1511:
;1512:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 76
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
ASGNP4
line 1513
;1513:	turb = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 80
INDIRI4
ASGNI4
line 1515
;1514:
;1515:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 84
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
ASGNP4
line 1516
;1516:	snum = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
ASGNI4
line 1518
;1517:
;1518:	for (i = 0; i < numparticles; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1476
JUMPV
LABELV $1473
line 1519
;1519:		if (type >= 4)
ADDRLP4 36
INDIRI4
CNSTI4 4
LTI4 $1477
line 1520
;1520:			CG_ParticleBubble(cgs.media.waterBubbleShader, origin, origin2, turb, range, snum);
ADDRGP4 cgs+146664+324
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ParticleBubble
CALLV
pop
ADDRGP4 $1478
JUMPV
LABELV $1477
line 1522
;1521:		else
;1522:			CG_ParticleSnow(cgs.media.waterBubbleShader, origin, origin2, turb, range, snum);
ADDRGP4 cgs+146664+324
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ParticleSnow
CALLV
pop
LABELV $1478
line 1523
;1523:	}
LABELV $1474
line 1518
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1476
ADDRLP4 0
INDIRI4
ADDRLP4 48
INDIRI4
LTI4 $1473
line 1525
;1524:
;1525:	return (1);
CNSTI4 1
RETI4
LABELV $1446
endproc CG_NewParticleArea 92 24
export CG_SnowLink
proc CG_SnowLink 16 0
line 1528
;1526:}
;1527:
;1528:void	CG_SnowLink(centity_t *cent, qboolean particleOn) {
line 1532
;1529:	cparticle_t *p, *next;
;1530:	int id;
;1531:
;1532:	id = cent->currentState.frame;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 1534
;1533:
;1534:	for (p = active_particles; p; p = next) {
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1487
JUMPV
LABELV $1484
line 1535
;1535:		next = p->next;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1537
;1536:
;1537:		if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1490
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1488
LABELV $1490
line 1538
;1538:			if (p->snum == id) {
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1491
line 1539
;1539:				if (particleOn)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1493
line 1540
;1540:					p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $1494
JUMPV
LABELV $1493
line 1542
;1541:				else
;1542:					p->link = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 0
ASGNI4
LABELV $1494
line 1543
;1543:			}
LABELV $1491
line 1544
;1544:		}
LABELV $1488
line 1546
;1545:
;1546:	}
LABELV $1485
line 1534
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $1487
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1484
line 1547
;1547:}
LABELV $1483
endproc CG_SnowLink 16 0
export CG_ParticleImpactSmokePuff
proc CG_ParticleImpactSmokePuff 24 4
line 1549
;1548:
;1549:void CG_ParticleImpactSmokePuff(qhandle_t pshader, vec3_t origin) {
line 1552
;1550:	cparticle_t *p;
;1551:
;1552:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1496
line 1553
;1553:		CG_Printf("CG_ParticleImpactSmokePuff pshader == ZERO!\n");
ADDRGP4 $1498
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1496
line 1555
;1554:
;1555:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1499
line 1556
;1556:		return;
ADDRGP4 $1495
JUMPV
LABELV $1499
line 1557
;1557:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1558
;1558:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1559
;1559:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1560
;1560:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1561
;1561:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1562
;1562:	p->alpha = 0.25;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1048576000
ASGNF4
line 1563
;1563:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1564
;1564:	p->roll = crandom() * 179;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1135804416
MULF4
CVFI4 4
ASGNI4
line 1566
;1565:
;1566:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1568
;1567:
;1568:	p->endtime = cg.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1569
;1569:	p->startfade = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1571
;1570:
;1571:	p->width = rand() % 4 + 8;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 4
MODI4
CNSTI4 8
ADDI4
CVIF4 4
ASGNF4
line 1572
;1572:	p->height = rand() % 4 + 8;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 4
MODI4
CNSTI4 8
ADDI4
CVIF4 4
ASGNF4
line 1574
;1573:
;1574:	p->endheight = p->height * 2;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ASGNF4
line 1575
;1575:	p->endwidth = p->width * 2;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ASGNF4
line 1577
;1576:
;1577:	p->endtime = cg.time + 500;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1579
;1578:
;1579:	p->type = P_SMOKE_IMPACT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 12
ASGNI4
line 1581
;1580:
;1581:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1582
;1582:	VectorSet(p->vel, 0, 0, 20);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1101004800
ASGNF4
line 1583
;1583:	VectorSet(p->accel, 0, 0, 20);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1101004800
ASGNF4
line 1585
;1584:
;1585:	p->rotate = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 1
ASGNI4
line 1586
;1586:}
LABELV $1495
endproc CG_ParticleImpactSmokePuff 24 4
export CG_Particle_Bleed
proc CG_Particle_Bleed 16 4
line 1588
;1587:
;1588:void CG_Particle_Bleed(qhandle_t pshader, vec3_t start, vec3_t dir, int fleshEntityNum, int duration) {
line 1591
;1589:	cparticle_t *p;
;1590:
;1591:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1506
line 1592
;1592:		CG_Printf("CG_Particle_Bleed pshader == ZERO!\n");
ADDRGP4 $1508
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1506
line 1594
;1593:
;1594:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1509
line 1595
;1595:		return;
ADDRGP4 $1505
JUMPV
LABELV $1509
line 1596
;1596:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1597
;1597:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1598
;1598:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1599
;1599:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1600
;1600:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1601
;1601:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1602
;1602:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1603
;1603:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1605
;1604:
;1605:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1607
;1606:
;1607:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
ASGNI4
line 1609
;1608:
;1609:	if (fleshEntityNum)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1513
line 1610
;1610:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $1514
JUMPV
LABELV $1513
line 1612
;1611:	else
;1612:		p->startfade = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
LABELV $1514
line 1614
;1613:
;1614:	p->width = 4;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1082130432
ASGNF4
line 1615
;1615:	p->height = 4;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1082130432
ASGNF4
line 1617
;1616:
;1617:	p->endheight = 4 + rand() % 3;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 3
MODI4
CNSTI4 4
ADDI4
CVIF4 4
ASGNF4
line 1618
;1618:	p->endwidth = p->endheight;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
line 1620
;1619:
;1620:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1622
;1621:
;1622:	VectorCopy(start, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1623
;1623:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1624
;1624:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1625
;1625:	p->vel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3248488448
ASGNF4
line 1626
;1626:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1628
;1627:
;1628:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1630
;1629:
;1630:	p->roll = rand() % 179;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1632
;1631:
;1632:	p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1633
;1633:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1635
;1634:
;1635:}
LABELV $1505
endproc CG_Particle_Bleed 16 4
export CG_Particle_OilParticle
proc CG_Particle_OilParticle 28 4
line 1637
;1636:
;1637:void CG_Particle_OilParticle(qhandle_t pshader, centity_t *cent) {
line 1644
;1638:	cparticle_t *p;
;1639:
;1640:	int			time;
;1641:	int			time2;
;1642:	float		ratio;
;1643:
;1644:	float	duration = 1500;
ADDRLP4 16
CNSTF4 1153138688
ASGNF4
line 1646
;1645:
;1646:	time = cg.time;
ADDRLP4 8
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1647
;1647:	time2 = cg.time + cent->currentState.time;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1649
;1648:
;1649:	ratio = (float)1 - ((float)time / (float)time2);
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 1651
;1650:
;1651:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1520
line 1652
;1652:		CG_Printf("CG_Particle_OilParticle == ZERO!\n");
ADDRGP4 $1522
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1520
line 1654
;1653:
;1654:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1523
line 1655
;1655:		return;
ADDRGP4 $1517
JUMPV
LABELV $1523
line 1656
;1656:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1657
;1657:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1658
;1658:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1659
;1659:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1660
;1660:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1661
;1661:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1662
;1662:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1663
;1663:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1665
;1664:
;1665:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1667
;1666:
;1667:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRLP4 16
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 1669
;1668:
;1669:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1671
;1670:
;1671:	p->width = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1672
;1672:	p->height = 3;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1077936128
ASGNF4
line 1674
;1673:
;1674:	p->endheight = 3;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1077936128
ASGNF4
line 1675
;1675:	p->endwidth = 1;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1065353216
ASGNF4
line 1677
;1676:
;1677:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1679
;1678:
;1679:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1681
;1680:
;1681:	p->vel[0] = (cent->currentState.origin2[0] * (16 * ratio));
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
MULF4
ASGNF4
line 1682
;1682:	p->vel[1] = (cent->currentState.origin2[1] * (16 * ratio));
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
MULF4
ASGNF4
line 1683
;1683:	p->vel[2] = (cent->currentState.origin2[2]);
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ASGNF4
line 1685
;1684:
;1685:	p->snum = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 1687
;1686:
;1687:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1689
;1688:
;1689:	p->accel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3248488448
ASGNF4
line 1691
;1690:
;1691:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1693
;1692:
;1693:	p->roll = rand() % 179;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1695
;1694:
;1695:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1697
;1696:
;1697:}
LABELV $1517
endproc CG_Particle_OilParticle 28 4
export CG_Particle_OilSlick
proc CG_Particle_OilSlick 24 4
line 1700
;1698:
;1699:
;1700:void CG_Particle_OilSlick(qhandle_t pshader, centity_t *cent) {
line 1703
;1701:	cparticle_t *p;
;1702:
;1703:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1528
line 1704
;1704:		CG_Printf("CG_Particle_OilSlick == ZERO!\n");
ADDRGP4 $1530
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1528
line 1706
;1705:
;1706:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1531
line 1707
;1707:		return;
ADDRGP4 $1527
JUMPV
LABELV $1531
line 1708
;1708:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1709
;1709:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1710
;1710:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1711
;1711:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1712
;1712:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1714
;1713:
;1714:	if (cent->currentState.angles2[2])
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1534
line 1715
;1715:		p->endtime = cg.time + cent->currentState.angles2[2];
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
ADDRGP4 $1535
JUMPV
LABELV $1534
line 1717
;1716:	else
;1717:		p->endtime = cg.time + 60000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 60000
ADDI4
ASGNI4
LABELV $1535
line 1719
;1718:
;1719:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1721
;1720:
;1721:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1722
;1722:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1723
;1723:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1725
;1724:
;1725:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1727
;1726:
;1727:	if (cent->currentState.angles2[0] || cent->currentState.angles2[1]) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1540
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1538
LABELV $1540
line 1728
;1728:		p->width = cent->currentState.angles2[0];
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 1729
;1729:		p->height = cent->currentState.angles2[0];
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 1731
;1730:
;1731:		p->endheight = cent->currentState.angles2[1];
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
line 1732
;1732:		p->endwidth = cent->currentState.angles2[1];
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
line 1733
;1733:	} else {
ADDRGP4 $1539
JUMPV
LABELV $1538
line 1734
;1734:		p->width = 8;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1090519040
ASGNF4
line 1735
;1735:		p->height = 8;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1090519040
ASGNF4
line 1737
;1736:
;1737:		p->endheight = 16;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1098907648
ASGNF4
line 1738
;1738:		p->endwidth = 16;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1098907648
ASGNF4
line 1739
;1739:	}
LABELV $1539
line 1741
;1740:
;1741:	p->type = P_FLAT_SCALEUP;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 9
ASGNI4
line 1743
;1742:
;1743:	p->snum = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 1745
;1744:
;1745:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1747
;1746:
;1747:	p->org[2] += 0.55 + (crandom() * 0.5);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1057803469
ADDF4
ADDF4
ASGNF4
line 1749
;1748:
;1749:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1750
;1750:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1751
;1751:	p->vel[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 0
ASGNF4
line 1752
;1752:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1754
;1753:
;1754:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1756
;1755:
;1756:	p->roll = rand() % 179;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1758
;1757:
;1758:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1760
;1759:
;1760:}
LABELV $1527
endproc CG_Particle_OilSlick 24 4
export CG_OilSlickRemove
proc CG_OilSlickRemove 16 4
line 1762
;1761:
;1762:void CG_OilSlickRemove(centity_t *cent) {
line 1766
;1763:	cparticle_t *p, *next;
;1764:	int				id;
;1765:
;1766:	id = 1.0f;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 1768
;1767:
;1768:	if (!id)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1542
line 1769
;1769:		CG_Printf("CG_OilSlickRevove NULL id\n");
ADDRGP4 $1544
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1542
line 1771
;1770:
;1771:	for (p = active_particles; p; p = next) {
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1548
JUMPV
LABELV $1545
line 1772
;1772:		next = p->next;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1774
;1773:
;1774:		if (p->type == P_FLAT_SCALEUP) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 9
NEI4 $1549
line 1775
;1775:			if (p->snum == id) {
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1551
line 1776
;1776:				p->endtime = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1777
;1777:				p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1778
;1778:				p->type = P_FLAT_SCALEUP_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 10
ASGNI4
line 1780
;1779:
;1780:			}
LABELV $1551
line 1781
;1781:		}
LABELV $1549
line 1783
;1782:
;1783:	}
LABELV $1546
line 1771
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $1548
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1545
line 1784
;1784:}
LABELV $1541
endproc CG_OilSlickRemove 16 4
export ValidBloodPool
proc ValidBloodPool 180 28
line 1786
;1785:
;1786:qboolean ValidBloodPool(vec3_t start) {
line 1797
;1787:#define EXTRUDE_DIST	0.5
;1788:
;1789:	vec3_t	angles;
;1790:	vec3_t	right, up;
;1791:	vec3_t	this_pos, x_pos, center_pos, end_pos;
;1792:	float	x, y;
;1793:	float	fwidth, fheight;
;1794:	trace_t	trace;
;1795:	vec3_t	normal;
;1796:
;1797:	fwidth = 16;
ADDRLP4 152
CNSTF4 1098907648
ASGNF4
line 1798
;1798:	fheight = 16;
ADDRLP4 120
CNSTF4 1098907648
ASGNF4
line 1800
;1799:
;1800:	VectorSet(normal, 0, 0, 1);
ADDRLP4 96
CNSTF4 0
ASGNF4
ADDRLP4 96+4
CNSTF4 0
ASGNF4
ADDRLP4 96+8
CNSTF4 1065353216
ASGNF4
line 1802
;1801:
;1802:	vectoangles(normal, angles);
ADDRLP4 96
ARGP4
ADDRLP4 156
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1803
;1803:	AngleVectors(angles, NULL, right, up);
ADDRLP4 156
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 108
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1805
;1804:
;1805:	VectorMA(start, EXTRUDE_DIST, normal, center_pos);
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
ADDRLP4 168
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 128+4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96+4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 128+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 96+8
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1807
;1806:
;1807:	for (x = -fwidth / 2; x < fwidth; x += fwidth) {
ADDRLP4 124
ADDRLP4 152
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRGP4 $1564
JUMPV
LABELV $1561
line 1808
;1808:		VectorMA(center_pos, x, right, x_pos);
ADDRLP4 84
ADDRLP4 128
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 128+4
INDIRF4
ADDRLP4 140+4
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 128+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
line 1810
;1809:
;1810:		for (y = -fheight / 2; y < fheight; y += fheight) {
ADDRLP4 12
ADDRLP4 120
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRGP4 $1574
JUMPV
LABELV $1571
line 1811
;1811:			VectorMA(x_pos, y, up, this_pos);
ADDRLP4 0
ADDRLP4 84
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 84+4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 84+8
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1812
;1812:			VectorMA(this_pos, -EXTRUDE_DIST * 2, normal, end_pos);
ADDRLP4 16
ADDRLP4 0
INDIRF4
ADDRLP4 96
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 96+4
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 96+8
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
line 1814
;1813:
;1814:			CG_Trace(&trace, this_pos, NULL, NULL, end_pos, -1, CONTENTS_SOLID);
ADDRLP4 28
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 16
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1817
;1815:
;1816:
;1817:			if (trace.entityNum < (MAX_ENTITIES - 1)) // may only land on world
ADDRLP4 28+52
INDIRI4
CNSTI4 1022
GEI4 $1587
line 1818
;1818:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1554
JUMPV
LABELV $1587
line 1820
;1819:
;1820:			if (!(!trace.startsolid && trace.fraction < 1))
ADDRLP4 28+4
INDIRI4
CNSTI4 0
NEI4 $1594
ADDRLP4 28+8
INDIRF4
CNSTF4 1065353216
LTF4 $1590
LABELV $1594
line 1821
;1821:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1554
JUMPV
LABELV $1590
line 1823
;1822:
;1823:		}
LABELV $1572
line 1810
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
ADDF4
ASGNF4
LABELV $1574
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1571
line 1824
;1824:	}
LABELV $1562
line 1807
ADDRLP4 124
ADDRLP4 124
INDIRF4
ADDRLP4 152
INDIRF4
ADDF4
ASGNF4
LABELV $1564
ADDRLP4 124
INDIRF4
ADDRLP4 152
INDIRF4
LTF4 $1561
line 1826
;1825:
;1826:	return qtrue;
CNSTI4 1
RETI4
LABELV $1554
endproc ValidBloodPool 180 28
export CG_BloodPool
proc CG_BloodPool 40 4
line 1829
;1827:}
;1828:
;1829:void CG_BloodPool(localEntity_t *le, qhandle_t pshader, trace_t *tr) {
line 1835
;1830:	cparticle_t *p;
;1831:	qboolean	legit;
;1832:	vec3_t		start;
;1833:	float		rndSize;
;1834:
;1835:	if (!pshader)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1596
line 1836
;1836:		CG_Printf("CG_BloodPool pshader == ZERO!\n");
ADDRGP4 $1598
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1596
line 1838
;1837:
;1838:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1599
line 1839
;1839:		return;
ADDRGP4 $1595
JUMPV
LABELV $1599
line 1841
;1840:
;1841:	VectorCopy(tr->endpos, start);
ADDRLP4 8
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1842
;1842:	legit = ValidBloodPool(start);
ADDRLP4 8
ARGP4
ADDRLP4 24
ADDRGP4 ValidBloodPool
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
line 1844
;1843:
;1844:	if (!legit)
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $1601
line 1845
;1845:		return;
ADDRGP4 $1595
JUMPV
LABELV $1601
line 1847
;1846:
;1847:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1848
;1848:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1849
;1849:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1850
;1850:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1851
;1851:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1853
;1852:
;1853:	p->endtime = cg.time + 3000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 1854
;1854:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1856
;1855:
;1856:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1857
;1857:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1858
;1858:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1860
;1859:
;1860:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 1862
;1861:
;1862:	rndSize = 0.4 + random() * 0.6;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 932813517
MULF4
CNSTF4 1053609165
ADDF4
ASGNF4
line 1864
;1863:
;1864:	p->width = 8 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1865
;1865:	p->height = 8 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1867
;1866:
;1867:	p->endheight = 16 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 1868
;1868:	p->endwidth = 16 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 1870
;1869:
;1870:	p->type = P_FLAT_SCALEUP;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 9
ASGNI4
line 1872
;1871:
;1872:	VectorCopy(start, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 1874
;1873:
;1874:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1875
;1875:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1876
;1876:	p->vel[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 0
ASGNF4
line 1877
;1877:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1879
;1878:
;1879:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1881
;1880:
;1881:	p->roll = rand() % 179;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 36
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1883
;1882:
;1883:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1885
;1884:
;1885:	p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1886
;1886:}
LABELV $1595
endproc CG_BloodPool 40 4
export CG_ParticleBloodCloud
proc CG_ParticleBloodCloud 72 16
line 1891
;1887:
;1888:#define NORMALSIZE	16
;1889:#define LARGESIZE	32
;1890:
;1891:void CG_ParticleBloodCloud(centity_t *cent, vec3_t origin, vec3_t dir) {
line 1900
;1892:	float	length;
;1893:	float	dist;
;1894:	float	crittersize;
;1895:	vec3_t	angles, forward;
;1896:	vec3_t	point;
;1897:	cparticle_t *p;
;1898:	int		i;
;1899:
;1900:	dist = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
line 1902
;1901:
;1902:	length = VectorLength(dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 56
INDIRF4
ASGNF4
line 1903
;1903:	vectoangles(dir, angles);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1904
;1904:	AngleVectors(angles, forward, NULL, NULL);
ADDRLP4 44
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1906
;1905:
;1906:	crittersize = LARGESIZE;
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
line 1908
;1907:
;1908:	if (length)
ADDRLP4 40
INDIRF4
CNSTF4 0
EQF4 $1606
line 1909
;1909:		dist = length / crittersize;
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
LABELV $1606
line 1911
;1910:
;1911:	if (dist < 1)
ADDRLP4 36
INDIRF4
CNSTF4 1065353216
GEF4 $1608
line 1912
;1912:		dist = 1;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
LABELV $1608
line 1914
;1913:
;1914:	VectorCopy(origin, point);
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1916
;1915:
;1916:	for (i = 0; i < dist; i++) {
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRGP4 $1613
JUMPV
LABELV $1610
line 1917
;1917:		VectorMA(point, crittersize, forward, point);
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1919
;1918:
;1919:		if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1620
line 1920
;1920:			return;
ADDRGP4 $1605
JUMPV
LABELV $1620
line 1922
;1921:
;1922:		p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1923
;1923:		free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1924
;1924:		p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1925
;1925:		active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1927
;1926:
;1927:		p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1928
;1928:		p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1929
;1929:		p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1930
;1930:		p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1932
;1931:
;1932:		p->pshader = cgs.media.smokePuffShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+146664+308
INDIRI4
ASGNI4
line 1934
;1933:
;1934:		p->endtime = cg.time + 350 + (crandom() * 100);
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 350
ADDI4
CVIF4 4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1936
;1935:
;1936:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1938
;1937:
;1938:		p->width = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 1939
;1939:		p->height = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 1940
;1940:		p->endheight = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1107296256
ASGNF4
line 1941
;1941:		p->endwidth = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1107296256
ASGNF4
line 1943
;1942:
;1943:		p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1945
;1944:
;1945:		VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1947
;1946:
;1947:		p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1948
;1948:		p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1949
;1949:		p->vel[2] = -1;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3212836864
ASGNF4
line 1951
;1950:
;1951:		VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1953
;1952:
;1953:		p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1955
;1954:
;1955:		p->roll = rand() % 179;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 68
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1957
;1956:
;1957:		p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1959
;1958:
;1959:		p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1961
;1960:
;1961:	}
LABELV $1611
line 1916
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1613
ADDRLP4 32
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRF4
LTF4 $1610
line 1962
;1962:}
LABELV $1605
endproc CG_ParticleBloodCloud 72 16
export CG_ParticleSparks
proc CG_ParticleSparks 60 0
line 1964
;1963:
;1964:void CG_ParticleSparks(vec3_t org, vec3_t vel, int duration, float x, float y, float speed) {
line 1967
;1965:	cparticle_t *p;
;1966:
;1967:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1628
line 1968
;1968:		return;
ADDRGP4 $1627
JUMPV
LABELV $1628
line 1969
;1969:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1970
;1970:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1971
;1971:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1972
;1972:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1973
;1973:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1975
;1974:
;1975:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 1976
;1976:	p->startfade = cg.time + duration / 2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
ASGNI4
line 1978
;1977:
;1978:	p->color = EMISIVEFADE;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 1979
;1979:	p->alpha = 0.4f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1980
;1980:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1982
;1981:
;1982:	p->height = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1056964608
ASGNF4
line 1983
;1983:	p->width = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1056964608
ASGNF4
line 1984
;1984:	p->endheight = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1056964608
ASGNF4
line 1985
;1985:	p->endwidth = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1056964608
ASGNF4
line 1987
;1986:
;1987:	p->pshader = cgs.media.tracerShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+146664+252
INDIRI4
ASGNI4
line 1989
;1988:
;1989:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1991
;1990:
;1991:	VectorCopy(org, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1993
;1992:
;1993:	p->org[0] += (crandom() * x);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1994
;1994:	p->org[1] += (crandom() * y);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1996
;1995:
;1996:	p->vel[0] = vel[0];
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 1997
;1997:	p->vel[1] = vel[1];
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1998
;1998:	p->vel[2] = vel[2];
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 2000
;1999:
;2000:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
line 2002
;2001:
;2002:	p->vel[0] += (crandom() * 4);
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 2003
;2003:	p->vel[1] += (crandom() * 4);
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 2004
;2004:	p->vel[2] += (20 + (crandom() * 10)) * speed;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
CNSTF4 1101004800
ADDF4
ADDRFP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 2006
;2005:
;2006:	p->accel[0] = crandom() * 4;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 2007
;2007:	p->accel[1] = crandom() * 4;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 2009
;2008:
;2009:}
LABELV $1627
endproc CG_ParticleSparks 60 0
export CG_ParticleDust
proc CG_ParticleDust 108 16
line 2011
;2010:
;2011:void CG_ParticleDust(centity_t *cent, vec3_t origin, vec3_t dir) {
line 2020
;2012:	float	length;
;2013:	float	dist;
;2014:	float	crittersize;
;2015:	vec3_t	angles, forward;
;2016:	vec3_t	point;
;2017:	cparticle_t *p;
;2018:	int		i;
;2019:
;2020:	dist = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 2022
;2021:
;2022:	VectorNegate(dir, dir);
ADDRLP4 56
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 64
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
NEGF4
ASGNF4
line 2023
;2023:	length = VectorLength(dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 68
INDIRF4
ASGNF4
line 2024
;2024:	vectoangles(dir, angles);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 2025
;2025:	AngleVectors(angles, forward, NULL, NULL);
ADDRLP4 44
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2027
;2026:
;2027:	crittersize = LARGESIZE;
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
line 2029
;2028:
;2029:	if (length)
ADDRLP4 32
INDIRF4
CNSTF4 0
EQF4 $1636
line 2030
;2030:		dist = length / crittersize;
ADDRLP4 40
ADDRLP4 32
INDIRF4
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
LABELV $1636
line 2032
;2031:
;2032:	if (dist < 1)
ADDRLP4 40
INDIRF4
CNSTF4 1065353216
GEF4 $1638
line 2033
;2033:		dist = 1;
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
LABELV $1638
line 2035
;2034:
;2035:	VectorCopy(origin, point);
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2037
;2036:
;2037:	for (i = 0; i < dist; i++) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $1643
JUMPV
LABELV $1640
line 2038
;2038:		VectorMA(point, crittersize, forward, point);
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2040
;2039:
;2040:		if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1650
line 2041
;2041:			return;
ADDRGP4 $1635
JUMPV
LABELV $1650
line 2043
;2042:
;2043:		p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2044
;2044:		free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2045
;2045:		p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2046
;2046:		active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2048
;2047:
;2048:		p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2049
;2049:		p->alpha = 5.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1084227584
ASGNF4
line 2050
;2050:		p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2051
;2051:		p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2053
;2052:
;2053:		p->pshader = cgs.media.smokePuffShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+146664+308
INDIRI4
ASGNI4
line 2056
;2054:
;2055:		// RF, stay around for long enough to expand and dissipate naturally
;2056:		if (length)
ADDRLP4 32
INDIRF4
CNSTF4 0
EQF4 $1655
line 2057
;2057:			p->endtime = cg.time + 4500 + (crandom() * 3500);
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 4500
ADDI4
CVIF4 4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1171963904
MULF4
ADDF4
CVFI4 4
ASGNI4
ADDRGP4 $1656
JUMPV
LABELV $1655
line 2059
;2058:		else
;2059:			p->endtime = cg.time + 750 + (crandom() * 500);
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 750
ADDI4
CVIF4 4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1148846080
MULF4
ADDF4
CVFI4 4
ASGNI4
LABELV $1656
line 2061
;2060:
;2061:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2063
;2062:
;2063:		p->width = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 2064
;2064:		p->height = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 2067
;2065:
;2066:		// RF, expand while falling
;2067:		p->endheight = LARGESIZE * 3.0;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1119879168
ASGNF4
line 2068
;2068:		p->endwidth = LARGESIZE * 3.0;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1119879168
ASGNF4
line 2070
;2069:
;2070:		if (!length) {
ADDRLP4 32
INDIRF4
CNSTF4 0
NEF4 $1660
line 2071
;2071:			p->width *= 0.2f;
ADDRLP4 84
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 2072
;2072:			p->height *= 0.2f;
ADDRLP4 88
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 2074
;2073:
;2074:			p->endheight = NORMALSIZE;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1098907648
ASGNF4
line 2075
;2075:			p->endwidth = NORMALSIZE;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1098907648
ASGNF4
line 2076
;2076:		}
LABELV $1660
line 2078
;2077:
;2078:		p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2080
;2079:
;2080:		VectorCopy(point, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2082
;2081:
;2082:		p->vel[0] = crandom() * 6;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1094713344
MULF4
ASGNF4
line 2083
;2083:		p->vel[1] = crandom() * 6;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1094713344
MULF4
ASGNF4
line 2084
;2084:		p->vel[2] = random() * 20;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 975176000
MULF4
ASGNF4
line 2087
;2085:
;2086:		// RF, add some gravity/randomness
;2087:		p->accel[0] = crandom() * 3;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086324736
MULF4
ASGNF4
line 2088
;2088:		p->accel[1] = crandom() * 3;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086324736
MULF4
ASGNF4
line 2089
;2089:		p->accel[2] = -PARTICLE_GRAVITY * 0.4;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3246391296
ASGNF4
line 2091
;2090:
;2091:		VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 2093
;2092:
;2093:		p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2095
;2094:
;2095:		p->roll = rand() % 179;
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 104
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2097
;2096:
;2097:		p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2099
;2098:
;2099:	}
LABELV $1641
line 2037
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1643
ADDRLP4 36
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
LTF4 $1640
line 2102
;2100:
;2101:
;2102:}
LABELV $1635
endproc CG_ParticleDust 108 16
export CG_ParticleMisc
proc CG_ParticleMisc 8 4
line 2104
;2103:
;2104:void CG_ParticleMisc(qhandle_t pshader, vec3_t origin, int size, int duration, float alpha) {
line 2107
;2105:	cparticle_t *p;
;2106:
;2107:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1663
line 2108
;2108:		CG_Printf("CG_ParticleImpactSmokePuff pshader == ZERO!\n");
ADDRGP4 $1498
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1663
line 2110
;2109:
;2110:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1665
line 2111
;2111:		return;
ADDRGP4 $1662
JUMPV
LABELV $1665
line 2113
;2112:
;2113:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2114
;2114:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2115
;2115:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2116
;2116:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2117
;2117:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2118
;2118:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2119
;2119:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2120
;2120:	p->roll = rand() % 179;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2122
;2121:
;2122:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 2124
;2123:
;2124:	if (duration > 0)
ADDRFP4 12
INDIRI4
CNSTI4 0
LEI4 $1668
line 2125
;2125:		p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
ASGNI4
ADDRGP4 $1669
JUMPV
LABELV $1668
line 2127
;2126:	else
;2127:		p->endtime = duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $1669
line 2129
;2128:
;2129:	p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2131
;2130:
;2131:	p->width = size;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2132
;2132:	p->height = size;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2134
;2133:
;2134:	p->endheight = size;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2135
;2135:	p->endwidth = size;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2137
;2136:
;2137:	p->type = P_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 15
ASGNI4
line 2139
;2138:
;2139:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2141
;2140:
;2141:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2142
;2142:}
LABELV $1662
endproc CG_ParticleMisc 8 4
bss
export oldtime
align 4
LABELV oldtime
skip 4
export rup
align 4
LABELV rup
skip 12
export rright
align 4
LABELV rright
skip 12
export rforward
align 4
LABELV rforward
skip 12
export pvup
align 4
LABELV pvup
skip 12
export pvright
align 4
LABELV pvright
skip 12
export pvforward
align 4
LABELV pvforward
skip 12
export particles
align 4
LABELV particles
skip 126976
export free_particles
align 4
LABELV free_particles
skip 4
export active_particles
align 4
LABELV active_particles
skip 4
align 4
LABELV numShaderAnims
skip 4
align 4
LABELV shaderAnims
skip 8192
align 4
LABELV markTotal
skip 4
export cg_freeMarkPolys
align 4
LABELV cg_freeMarkPolys
skip 4
export cg_activeMarkPolys
align 4
LABELV cg_activeMarkPolys
skip 288
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseArmorTiered
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_armorTiered
import cg_followKiller
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_obeliskRespawnDelay
import cg_enableBreath
import cg_enableDust
import cg_hudFiles
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
export cg_markPolys
align 4
LABELV cg_markPolys
skip 73728
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bgWeapons
import bgArmor
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1598
byte 1 67
byte 1 71
byte 1 95
byte 1 66
byte 1 108
byte 1 111
byte 1 111
byte 1 100
byte 1 80
byte 1 111
byte 1 111
byte 1 108
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1544
byte 1 67
byte 1 71
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 83
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 82
byte 1 101
byte 1 118
byte 1 111
byte 1 118
byte 1 101
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 32
byte 1 105
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $1530
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 83
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1522
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1508
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 66
byte 1 108
byte 1 101
byte 1 101
byte 1 100
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1498
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 83
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 80
byte 1 117
byte 1 102
byte 1 102
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1438
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1429
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 83
byte 1 116
byte 1 114
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 112
byte 1 114
byte 1 111
byte 1 98
byte 1 97
byte 1 98
byte 1 108
byte 1 121
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 100
byte 1 101
byte 1 120
byte 1 32
byte 1 114
byte 1 97
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 110
byte 1 32
byte 1 97
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $1410
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1389
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 110
byte 1 111
byte 1 119
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1378
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 110
byte 1 111
byte 1 119
byte 1 70
byte 1 108
byte 1 117
byte 1 114
byte 1 114
byte 1 121
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $245
byte 1 37
byte 1 115
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $227
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $101
byte 1 67
byte 1 71
byte 1 95
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
align 1
LABELV $84
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
